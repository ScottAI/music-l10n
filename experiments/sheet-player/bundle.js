/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	module.exports = __webpack_require__(2);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

	(function(self) {
	  'use strict';
	
	  if (self.fetch) {
	    return
	  }
	
	  var support = {
	    searchParams: 'URLSearchParams' in self,
	    iterable: 'Symbol' in self && 'iterator' in Symbol,
	    blob: 'FileReader' in self && 'Blob' in self && (function() {
	      try {
	        new Blob()
	        return true
	      } catch(e) {
	        return false
	      }
	    })(),
	    formData: 'FormData' in self,
	    arrayBuffer: 'ArrayBuffer' in self
	  }
	
	  if (support.arrayBuffer) {
	    var viewClasses = [
	      '[object Int8Array]',
	      '[object Uint8Array]',
	      '[object Uint8ClampedArray]',
	      '[object Int16Array]',
	      '[object Uint16Array]',
	      '[object Int32Array]',
	      '[object Uint32Array]',
	      '[object Float32Array]',
	      '[object Float64Array]'
	    ]
	
	    var isDataView = function(obj) {
	      return obj && DataView.prototype.isPrototypeOf(obj)
	    }
	
	    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
	      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
	    }
	  }
	
	  function normalizeName(name) {
	    if (typeof name !== 'string') {
	      name = String(name)
	    }
	    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
	      throw new TypeError('Invalid character in header field name')
	    }
	    return name.toLowerCase()
	  }
	
	  function normalizeValue(value) {
	    if (typeof value !== 'string') {
	      value = String(value)
	    }
	    return value
	  }
	
	  // Build a destructive iterator for the value list
	  function iteratorFor(items) {
	    var iterator = {
	      next: function() {
	        var value = items.shift()
	        return {done: value === undefined, value: value}
	      }
	    }
	
	    if (support.iterable) {
	      iterator[Symbol.iterator] = function() {
	        return iterator
	      }
	    }
	
	    return iterator
	  }
	
	  function Headers(headers) {
	    this.map = {}
	
	    if (headers instanceof Headers) {
	      headers.forEach(function(value, name) {
	        this.append(name, value)
	      }, this)
	    } else if (Array.isArray(headers)) {
	      headers.forEach(function(header) {
	        this.append(header[0], header[1])
	      }, this)
	    } else if (headers) {
	      Object.getOwnPropertyNames(headers).forEach(function(name) {
	        this.append(name, headers[name])
	      }, this)
	    }
	  }
	
	  Headers.prototype.append = function(name, value) {
	    name = normalizeName(name)
	    value = normalizeValue(value)
	    var oldValue = this.map[name]
	    this.map[name] = oldValue ? oldValue+','+value : value
	  }
	
	  Headers.prototype['delete'] = function(name) {
	    delete this.map[normalizeName(name)]
	  }
	
	  Headers.prototype.get = function(name) {
	    name = normalizeName(name)
	    return this.has(name) ? this.map[name] : null
	  }
	
	  Headers.prototype.has = function(name) {
	    return this.map.hasOwnProperty(normalizeName(name))
	  }
	
	  Headers.prototype.set = function(name, value) {
	    this.map[normalizeName(name)] = normalizeValue(value)
	  }
	
	  Headers.prototype.forEach = function(callback, thisArg) {
	    for (var name in this.map) {
	      if (this.map.hasOwnProperty(name)) {
	        callback.call(thisArg, this.map[name], name, this)
	      }
	    }
	  }
	
	  Headers.prototype.keys = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push(name) })
	    return iteratorFor(items)
	  }
	
	  Headers.prototype.values = function() {
	    var items = []
	    this.forEach(function(value) { items.push(value) })
	    return iteratorFor(items)
	  }
	
	  Headers.prototype.entries = function() {
	    var items = []
	    this.forEach(function(value, name) { items.push([name, value]) })
	    return iteratorFor(items)
	  }
	
	  if (support.iterable) {
	    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
	  }
	
	  function consumed(body) {
	    if (body.bodyUsed) {
	      return Promise.reject(new TypeError('Already read'))
	    }
	    body.bodyUsed = true
	  }
	
	  function fileReaderReady(reader) {
	    return new Promise(function(resolve, reject) {
	      reader.onload = function() {
	        resolve(reader.result)
	      }
	      reader.onerror = function() {
	        reject(reader.error)
	      }
	    })
	  }
	
	  function readBlobAsArrayBuffer(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsArrayBuffer(blob)
	    return promise
	  }
	
	  function readBlobAsText(blob) {
	    var reader = new FileReader()
	    var promise = fileReaderReady(reader)
	    reader.readAsText(blob)
	    return promise
	  }
	
	  function readArrayBufferAsText(buf) {
	    var view = new Uint8Array(buf)
	    var chars = new Array(view.length)
	
	    for (var i = 0; i < view.length; i++) {
	      chars[i] = String.fromCharCode(view[i])
	    }
	    return chars.join('')
	  }
	
	  function bufferClone(buf) {
	    if (buf.slice) {
	      return buf.slice(0)
	    } else {
	      var view = new Uint8Array(buf.byteLength)
	      view.set(new Uint8Array(buf))
	      return view.buffer
	    }
	  }
	
	  function Body() {
	    this.bodyUsed = false
	
	    this._initBody = function(body) {
	      this._bodyInit = body
	      if (!body) {
	        this._bodyText = ''
	      } else if (typeof body === 'string') {
	        this._bodyText = body
	      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
	        this._bodyBlob = body
	      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
	        this._bodyFormData = body
	      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	        this._bodyText = body.toString()
	      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
	        this._bodyArrayBuffer = bufferClone(body.buffer)
	        // IE 10-11 can't handle a DataView body.
	        this._bodyInit = new Blob([this._bodyArrayBuffer])
	      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
	        this._bodyArrayBuffer = bufferClone(body)
	      } else {
	        throw new Error('unsupported BodyInit type')
	      }
	
	      if (!this.headers.get('content-type')) {
	        if (typeof body === 'string') {
	          this.headers.set('content-type', 'text/plain;charset=UTF-8')
	        } else if (this._bodyBlob && this._bodyBlob.type) {
	          this.headers.set('content-type', this._bodyBlob.type)
	        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
	          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
	        }
	      }
	    }
	
	    if (support.blob) {
	      this.blob = function() {
	        var rejected = consumed(this)
	        if (rejected) {
	          return rejected
	        }
	
	        if (this._bodyBlob) {
	          return Promise.resolve(this._bodyBlob)
	        } else if (this._bodyArrayBuffer) {
	          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
	        } else if (this._bodyFormData) {
	          throw new Error('could not read FormData body as blob')
	        } else {
	          return Promise.resolve(new Blob([this._bodyText]))
	        }
	      }
	
	      this.arrayBuffer = function() {
	        if (this._bodyArrayBuffer) {
	          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
	        } else {
	          return this.blob().then(readBlobAsArrayBuffer)
	        }
	      }
	    }
	
	    this.text = function() {
	      var rejected = consumed(this)
	      if (rejected) {
	        return rejected
	      }
	
	      if (this._bodyBlob) {
	        return readBlobAsText(this._bodyBlob)
	      } else if (this._bodyArrayBuffer) {
	        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
	      } else if (this._bodyFormData) {
	        throw new Error('could not read FormData body as text')
	      } else {
	        return Promise.resolve(this._bodyText)
	      }
	    }
	
	    if (support.formData) {
	      this.formData = function() {
	        return this.text().then(decode)
	      }
	    }
	
	    this.json = function() {
	      return this.text().then(JSON.parse)
	    }
	
	    return this
	  }
	
	  // HTTP methods whose capitalization should be normalized
	  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']
	
	  function normalizeMethod(method) {
	    var upcased = method.toUpperCase()
	    return (methods.indexOf(upcased) > -1) ? upcased : method
	  }
	
	  function Request(input, options) {
	    options = options || {}
	    var body = options.body
	
	    if (input instanceof Request) {
	      if (input.bodyUsed) {
	        throw new TypeError('Already read')
	      }
	      this.url = input.url
	      this.credentials = input.credentials
	      if (!options.headers) {
	        this.headers = new Headers(input.headers)
	      }
	      this.method = input.method
	      this.mode = input.mode
	      if (!body && input._bodyInit != null) {
	        body = input._bodyInit
	        input.bodyUsed = true
	      }
	    } else {
	      this.url = String(input)
	    }
	
	    this.credentials = options.credentials || this.credentials || 'omit'
	    if (options.headers || !this.headers) {
	      this.headers = new Headers(options.headers)
	    }
	    this.method = normalizeMethod(options.method || this.method || 'GET')
	    this.mode = options.mode || this.mode || null
	    this.referrer = null
	
	    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
	      throw new TypeError('Body not allowed for GET or HEAD requests')
	    }
	    this._initBody(body)
	  }
	
	  Request.prototype.clone = function() {
	    return new Request(this, { body: this._bodyInit })
	  }
	
	  function decode(body) {
	    var form = new FormData()
	    body.trim().split('&').forEach(function(bytes) {
	      if (bytes) {
	        var split = bytes.split('=')
	        var name = split.shift().replace(/\+/g, ' ')
	        var value = split.join('=').replace(/\+/g, ' ')
	        form.append(decodeURIComponent(name), decodeURIComponent(value))
	      }
	    })
	    return form
	  }
	
	  function parseHeaders(rawHeaders) {
	    var headers = new Headers()
	    rawHeaders.split(/\r?\n/).forEach(function(line) {
	      var parts = line.split(':')
	      var key = parts.shift().trim()
	      if (key) {
	        var value = parts.join(':').trim()
	        headers.append(key, value)
	      }
	    })
	    return headers
	  }
	
	  Body.call(Request.prototype)
	
	  function Response(bodyInit, options) {
	    if (!options) {
	      options = {}
	    }
	
	    this.type = 'default'
	    this.status = 'status' in options ? options.status : 200
	    this.ok = this.status >= 200 && this.status < 300
	    this.statusText = 'statusText' in options ? options.statusText : 'OK'
	    this.headers = new Headers(options.headers)
	    this.url = options.url || ''
	    this._initBody(bodyInit)
	  }
	
	  Body.call(Response.prototype)
	
	  Response.prototype.clone = function() {
	    return new Response(this._bodyInit, {
	      status: this.status,
	      statusText: this.statusText,
	      headers: new Headers(this.headers),
	      url: this.url
	    })
	  }
	
	  Response.error = function() {
	    var response = new Response(null, {status: 0, statusText: ''})
	    response.type = 'error'
	    return response
	  }
	
	  var redirectStatuses = [301, 302, 303, 307, 308]
	
	  Response.redirect = function(url, status) {
	    if (redirectStatuses.indexOf(status) === -1) {
	      throw new RangeError('Invalid status code')
	    }
	
	    return new Response(null, {status: status, headers: {location: url}})
	  }
	
	  self.Headers = Headers
	  self.Request = Request
	  self.Response = Response
	
	  self.fetch = function(input, init) {
	    return new Promise(function(resolve, reject) {
	      var request = new Request(input, init)
	      var xhr = new XMLHttpRequest()
	
	      xhr.onload = function() {
	        var options = {
	          status: xhr.status,
	          statusText: xhr.statusText,
	          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
	        }
	        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
	        var body = 'response' in xhr ? xhr.response : xhr.responseText
	        resolve(new Response(body, options))
	      }
	
	      xhr.onerror = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.ontimeout = function() {
	        reject(new TypeError('Network request failed'))
	      }
	
	      xhr.open(request.method, request.url, true)
	
	      if (request.credentials === 'include') {
	        xhr.withCredentials = true
	      }
	
	      if ('responseType' in xhr && support.blob) {
	        xhr.responseType = 'blob'
	      }
	
	      request.headers.forEach(function(value, name) {
	        xhr.setRequestHeader(name, value)
	      })
	
	      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
	    })
	  }
	  self.fetch.polyfill = true
	})(typeof self !== 'undefined' ? self : this);


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	__webpack_require__(1);
	
	var _webmidi = __webpack_require__(3);
	
	var _webmidi2 = _interopRequireDefault(_webmidi);
	
	var _jquery = __webpack_require__(4);
	
	var _jquery2 = _interopRequireDefault(_jquery);
	
	var _store = __webpack_require__(5);
	
	var _store2 = _interopRequireDefault(_store);
	
	var _vexflow = __webpack_require__(6);
	
	var _vexflow2 = _interopRequireDefault(_vexflow);
	
	var _tonal = __webpack_require__(7);
	
	var _tonal2 = _interopRequireDefault(_tonal);
	
	var _soundfontPlayer = __webpack_require__(36);
	
	var _soundfontPlayer2 = _interopRequireDefault(_soundfontPlayer);
	
	var _sheets = __webpack_require__(50);
	
	var _sheets2 = _interopRequireDefault(_sheets);
	
	var _soundfonts = __webpack_require__(51);
	
	var _soundfonts2 = _interopRequireDefault(_soundfonts);
	
	var _mathjs = __webpack_require__(52);
	
	var _mathjs2 = _interopRequireDefault(_mathjs);
	
	var _noteParser = __webpack_require__(10);
	
	var _noteParser2 = _interopRequireDefault(_noteParser);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	// https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions
	
	
	// Reach in deep structures without fear of TypeError exceptions.
	// e.g. x = ORNULL(a.b.c.d['e'].f.g);
	function escapeRegExp(string) {
	  return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'); // $& means the whole matched string
	}
	
	Array.prototype.last = Array.prototype.last || function () {
	  return this[this.length - 1];
	};
	
	Array.prototype.insert = Array.prototype.insert || function () {
	  this.unshift.apply(this, arguments);
	  return this;
	};
	
	Number.prototype.repeat = Number.prototype.repeat || function (f) {
	  var n = this;
	  while (n-- > 0) {
	    f();
	  }
	};
	
	// Global state.
	var MIDI_START_TIME = 1;
	
	window.G = {
	  midi: {
	    ac: null,
	    output: null,
	    time: null,
	    marker: null,
	    bpm: 100,
	    performance: null,
	    tuning: null,
	    timers: [],
	    config: {
	      output: 'local',
	      sheet: 0,
	      sync: 100, // the play marker is assumed to be 100 ms ahead of MIDI playback
	      marker_mode: 'measure',
	      melody: {
	        soundfont: 'musyngkite',
	        instrument: 'acoustic_grand_piano',
	        channel: 1
	      },
	      percussion: {
	        soundfont: 'doumbek',
	        instrument: 'doumbek',
	        channel: 10,
	        on: false
	      },
	      tuning: '12tet',
	      reference: {
	        frequency: 440.0,
	        note: 'A4'
	      }
	    }
	  },
	  sheets: _sheets2.default.data
	};
	// G is a global variable that is a proxy to window.G
	// this allows to debug G in the JS console.
	function SimpleProxy(target) {
	  return new Proxy(target, {
	    get: function get(target, name) {
	      return target[name];
	    }
	  });
	}
	var G = SimpleProxy(window.G);
	
	//
	// TUNING SYSTEM
	//
	// Given a reference note and a target note, a tuning returns the ratio between them.
	// The fundamental interval is 2/1 between the base tone and its octave.
	// Other tones subdivide the octave interval. A finite number of tones N make up the tuning.
	// Tones are indexed according to their rank in the ordered sequence of ratios
	// index 0 => ratio 1 (unison)
	// index 1 => ratio 1.abc (first interval)
	// index 2 => ratio 1.xyz (second interval)
	// ...
	// index N-1 => ratio 2 (octave)
	//
	//
	// Indexes can be named: these are the "note names" such as C, D, E, etc.
	// Also, index increments can be named: these are the accidentals such as ♯, ♭, ♮, etc.
	//
	//
	
	function ratioToCents(ratio) {
	  return Math.round(1200 * Math.log2(ratio));
	}
	
	function centsToRatio(cents) {
	  return Math.pow(2, cents / 1200);
	}
	
	//
	// Tuning base class
	//
	
	var Tuning = function () {
	
	  // CONSTRUCTOR
	  //
	  // `intervals`: an array of ratios expressed as strings or cents expressed as numbers.
	  //  This array should NOT include the unison (1/1) interval.
	  //  The last element of this array will be considered to be the repeater (e.g. 2/1 the octave).
	  //
	  // `nomenclature`: maps of note names and accidentals to index within the intervals sequence
	  // ```
	  // nomenclature: {
	  //   notes: {
	  //     'C': 0,
	  //     'D': 2,
	  //     'E': 4,
	  //     'F': 5,
	  //     ...
	  //   },
	  //   accidentals: {
	  //     '#': +1,
	  //     'b': -1,
	  //     'n':  0,
	  //     ...
	  //   }
	  // }
	  // ```
	  //
	  // `reference`: reference note in scientific pitch notation
	  //
	  function Tuning(intervals, nomenclature, reference) {
	    _classCallCheck(this, Tuning);
	
	    this.nomenclature = nomenclature;
	
	    // Precalculated values
	    // `regex` is the regular expression that is dynamically built to
	    // recognize notes in scientific pitch notation, given the nomenclature supplied by the caller.
	    this.regex = new RegExp('^(' + Object.keys(nomenclature.notes).map(escapeRegExp).join('|') + ')' + '(' + Object.keys(nomenclature.accidentals).map(escapeRegExp).sort(function (a, b) {
	      return b.length - a.length;
	    }).join('|') + ')?' + '(-?\\d)$', 'i');
	
	    // `regexNoAccidentals` is a regex for note names only, to be used when an accidental is not found during parsing.
	    this.regexNoAccidentals = new RegExp('^(' + Object.keys(nomenclature.notes).map(escapeRegExp).join('|') + ')' + '\\D*' + '(-?\\d)$', 'i');
	
	    // `reference` is the reference note information (index, octave)
	    this.reference = this.parse(reference);
	
	    // the internal `intervals` holds the interval multipliers in ratio form
	    // with the unison added to simplify the code.
	    this.steps = intervals.length;
	    this.intervals = intervals.insert(0).map(function (i) {
	      return typeof i === 'string' ? _mathjs2.default.number(_mathjs2.default.fraction(i)) : centsToRatio(i);
	    });
	  }
	
	  // TUNE A NOTE
	  // get a note's ratio to the reference
	  //
	  // `note`: target note in scientific pitch notation
	  // return: ratio of note wrt reference or undefined if not recognized
	  //
	
	
	  _createClass(Tuning, [{
	    key: 'tune',
	    value: function tune(note) {
	      var n = this.parse(note);
	      if (!n) return;
	
	      // Get the ratio difference between the target note and the reference note, raised to the difference in octave.
	      // The octave is always the last tone as per the definition of the `intervals` array.
	      return Math.pow(this.intervals.last(), n.octave - this.reference.octave) * this.intervals[n.index] / this.intervals[this.reference.index];
	    }
	
	    // PARSE A NOTE
	    // get a note's index and octave given its scientific pitch notation
	    //
	    // `note`: target note in scientific pitch notation
	    // return: note information `{ index, octave }` or undefined if not recognized
	    //
	
	  }, {
	    key: 'parse',
	    value: function parse(note) {
	      var result = void 0;
	      var match = this.regex.exec(note);
	      if (match) {
	        result = {
	          index: this.nomenclature.notes[match[1]] + (match[2] ? this.nomenclature.accidentals[match[2]] : 0),
	          octave: parseInt(match[3])
	        };
	      } else {
	        console.log('Could not parse note ' + note + '. Trying without accidentals...');
	        var match2 = this.regexNoAccidentals.exec(note);
	        if (match2) {
	          result = {
	            index: this.nomenclature.notes[match2[1]],
	            octave: parseInt(match2[2])
	          };
	        }
	      }
	
	      // Handle accidentals that push index across boundaries.
	      if (result) {
	        if (result.index < 0) {
	          result.index += this.steps;
	          result.octave -= 1;
	        } else if (result.index >= this.steps) {
	          result.index -= this.steps;
	          result.octave += 1;
	        }
	      }
	      return result;
	    }
	  }]);
	
	  return Tuning;
	}();
	
	// Generate a tuning intervals array based on equal divisions of the octave.
	// The intervals are calculated in cents, because they will be converted to ratios
	// inside the Tuning constructor.
	
	
	function tuningIntervalsEdo(divisions) {
	  return Array.from(Array(divisions)).map(function (_e, i) {
	    return 1200 / divisions * (i + 1);
	  });
	}
	
	// Initialize known tunings.
	var tunings = [{
	  key: '12tet',
	  name: 'Western standard tuning (12-tet)',
	  tuning: new Tuning(tuningIntervalsEdo(12), {
	    notes: {
	      'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11
	    },
	    accidentals: {
	      'n': 0, '#': 1, 'b': -1, '##': 2, 'bb': -2
	    }
	  }, G.midi.config.reference.note)
	}, {
	  key: '24tet',
	  name: 'Arabic quarter-tone tuning (24-tet)',
	  tuning: new Tuning(tuningIntervalsEdo(24), {
	    notes: {
	      'C': 0, 'D': 4, 'E': 8, 'F': 10, 'G': 14, 'A': 18, 'B': 22
	    },
	    accidentals: {
	      'n': 0, '#': 2, 'b': -2, '##': 4, 'bb': -4,
	      '+': 1, '++': 3, 'bs': -1, 'bss': -3
	    }
	  }, G.midi.config.reference.note)
	}, {
	  key: 'villoteau',
	  name: 'Arabic Villoteau third-tone tuning (36-tet)',
	  tuning: new Tuning(tuningIntervalsEdo(36), {
	    notes: {
	      'C': 0, 'D': 6, 'E': 12, 'F': 15, 'G': 21, 'A': 27, 'B': 33
	    },
	    accidentals: {
	      'n': 0, '#': 3, 'b': -3, '##': 6, 'bb': -6,
	      '+': 2, '++': 4, 'bs': -2, 'bss': -4
	    }
	  }, G.midi.config.reference.note)
	}, {
	  key: 'meanquar',
	  name: '1/4-comma meantone scale. Pietro Aaron\'s temperament (1523)',
	  tuning: new Tuning([76.04900, 193.15686, 310.26471, '5/4', 503.42157, 579.47057, 696.57843, '25/16', 889.73529, 1006.84314, 1082.89214, '2/1'], {
	    notes: {
	      'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11
	    },
	    accidentals: {
	      'n': 0, '#': 1, 'b': -1, '##': 2, 'bb': -2
	    }
	  }, G.midi.config.reference.note)
	}];
	
	// Generate a MIDI tuning from a tuning object.
	function generateMidiTuning(tuning) {
	  [].concat(_toConsumableArray(Array(128).keys())).map(midiToNote).map(function (n) {
	    return G.midi.tuning.tuning.tune(n);
	  });
	}
	
	// Local MIDI output class that conforms to WedMidi.Output interface.
	
	var LocalMidiOutput = function () {
	  function LocalMidiOutput() {
	    _classCallCheck(this, LocalMidiOutput);
	
	    this.instruments = {
	      /*
	      channel-num: {
	        instrument,
	        pb
	      },
	      ...
	      */
	    };
	    this.load();
	  }
	
	  _createClass(LocalMidiOutput, [{
	    key: 'sendSysex',
	    value: function sendSysex(manufacturer, data, options) {}
	  }, {
	    key: 'playNote',
	    value: function playNote(note, channel, options) {
	      if (!this.instruments[channel]) return;
	
	      var time = G.midi.ac.currentTime + eval(options.time) * 0.001;
	      var duration = options.duration * 0.001;
	      if (this.instruments[channel].pb) {
	        note += this.instruments[channel].pb * 2; // Local player counts microtones in fractions of semitones
	      }
	      this.instruments[channel].instrument.play(note, time, { duration: duration });
	    }
	  }, {
	    key: 'sendPitchBend',
	    value: function sendPitchBend(pb, channel, options) {
	      if (!this.instruments[channel]) return;
	      this.instruments[channel].pb = pb;
	    }
	  }, {
	    key: 'stop',
	    value: function stop() {
	      for (var channel in this.instruments) {
	        this.instruments[channel].instrument.stop();
	      }
	    }
	  }, {
	    key: 'load',
	    value: function load() {
	      var that = this;
	      var AudioContext = window.AudioContext || window.webkitAudioContext;
	      G.midi.ac = G.midi.ac || new AudioContext();
	      (0, _jquery2.default)('#sheet #play').prop('disabled', true);
	      that.instruments = {};
	      _soundfontPlayer2.default.instrument(G.midi.ac, G.midi.config.melody.instrument, { soundfont: G.midi.config.melody.soundfont, nameToUrl: LocalMidiOutput.nameToUrl }).then(function (instrument) {
	        that.instruments[G.midi.config.melody.channel] = { instrument: instrument, pb: 0 };
	        (0, _jquery2.default)('#sheet #play').prop('disabled', false);
	      });
	      _soundfontPlayer2.default.instrument(G.midi.ac, G.midi.config.percussion.instrument, { soundfont: G.midi.config.percussion.soundfont, nameToUrl: LocalMidiOutput.nameToUrl }).then(function (instrument) {
	        that.instruments[G.midi.config.percussion.channel] = { instrument: instrument, pb: 0 };
	        (0, _jquery2.default)('#sheet #play').prop('disabled', false);
	      });
	    }
	  }], [{
	    key: 'nameToUrl',
	    value: function nameToUrl(name, soundfont, format) {
	      format = format || 'mp3';
	      var url = _soundfonts2.default.data[soundfont].url;
	      return url + name + '-' + format + '.js';
	    }
	  }]);
	
	  return LocalMidiOutput;
	}();
	
	;
	
	// Additional method on Vex.Flow.Factory that draws the score without resetting
	// the info at the end - because we need to keep that info.
	_vexflow2.default.Flow.Factory.prototype.drawWithoutReset = function () {
	  var _this = this;
	
	  this.systems.forEach(function (i) {
	    return i.setContext(_this.context).format();
	  });
	  this.staves.forEach(function (i) {
	    return i.setContext(_this.context).draw();
	  });
	  this.voices.forEach(function (i) {
	    return i.setContext(_this.context).draw();
	  });
	  this.renderQ.forEach(function (i) {
	    if (!i.isRendered()) i.setContext(_this.context).draw();
	  });
	  this.systems.forEach(function (i) {
	    return i.setContext(_this.context).draw();
	  });
	};
	
	// Given a key signature, find the sharps and flats.
	function getKeyAccidentals(keySignature) {
	  var accidentalsMap = {
	    'G': { 'F': '#' },
	    'D': { 'F': '#', 'C': '#' },
	    'A': { 'F': '#', 'C': '#', 'G': '#' },
	    'E': { 'F': '#', 'C': '#', 'G': '#', 'D': '#' },
	    'B': { 'F': '#', 'C': '#', 'G': '#', 'D': '#', 'A': '#' },
	    'F#': { 'F': '#', 'C': '#', 'G': '#', 'D': '#', 'A': '#', 'E': '#' },
	    'C#': { 'F': '#', 'C': '#', 'G': '#', 'D': '#', 'A': '#', 'E': '#', 'B': '#' },
	    'F': { 'B': 'b' },
	    'Bb': { 'B': 'b', 'E': 'b' },
	    'Eb': { 'B': 'b', 'E': 'b', 'A': 'b' },
	    'Ab': { 'B': 'b', 'E': 'b', 'A': 'b', 'D': 'b' },
	    'Db': { 'B': 'b', 'E': 'b', 'A': 'b', 'D': 'b', 'G': 'b' },
	    'Gb': { 'B': 'b', 'E': 'b', 'A': 'b', 'D': 'b', 'G': 'b', 'C': 'b' },
	    'Cb': { 'B': 'b', 'E': 'b', 'A': 'b', 'D': 'b', 'G': 'b', 'C': 'b', 'F': 'b' }
	  };
	
	  var _ornull = void 0;
	
	  _ORNULL: {
	    try {
	      _ornull = accidentalsMap[keySignature.keySpec];
	      break _ORNULL;
	    } catch (e) {
	      _ornull = null;
	      break _ORNULL;
	    }
	  }
	
	  var map = _ornull;
	  var keys = Object.keys(map);
	  keySignature.accList.forEach(function (acc, index) {
	    map[keys[index]] = acc.type;
	  });
	  return map;
	}
	
	// Convert MIDI note number to a note name.
	function midiToNote(m) {
	  var notes = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
	  var note = notes[m % notes.length];
	  var octave = (m / notes.length | 0) - 1;
	  return '' + note + octave;
	}
	
	// Convert MIDI note number to a frequency.
	function midiToFreq(m) {
	  return Math.pow(2, (m - 69) / 12) * 440;
	}
	
	// Convert frequency to closest MIDI note number and pitch bend value [-1,1].
	function freqToMidi(f) {
	  var m = 12 * Math.log2(f / 440) + 69;
	  var r = Math.round(m);
	  return [r, (m - r) / 2];
	}
	
	// Convert a note to a MIDI message.
	// Convert microtones into MIDI pitch bends.
	function playNote(note, time, duration) {
	  var noteName = '' + note.key + (note.accidental || '') + note.octave;
	  var freq = G.midi.config.reference.frequency * G.midi.tuning.tuning.tune(noteName);
	
	  var _freqToMidi = freqToMidi(freq),
	      _freqToMidi2 = _slicedToArray(_freqToMidi, 2),
	      midi = _freqToMidi2[0],
	      pb = _freqToMidi2[1];
	
	  console.log({ noteName: noteName, freq: freq, midi: midi, pb: pb });
	  if (pb) {
	    G.midi.output.sendPitchBend(pb, G.midi.config.melody.channel, { time: '+' + time });
	  }
	  if (midi) {
	    G.midi.output.playNote(midi, G.midi.config.melody.channel, {
	      time: '+' + time,
	      duration: duration
	    });
	  }
	  if (pb) {
	    var endTime = time + duration - 1; // -1 to help the synth order the events
	    G.midi.output.sendPitchBend(0, G.midi.config.melody.channel, { time: '+' + endTime });
	  }
	}
	
	// Convert a percussion note to a MIDI message.
	function playPercussion(note, time, duration) {
	  var midi = _noteParser2.default.midi(note);
	  if (midi) {
	    G.midi.output.playNote(midi, G.midi.config.percussion.channel, {
	      time: '+' + time,
	      duration: duration
	    });
	  }
	}
	
	// A performance is a sequence of sections.
	
	var Performance = function () {
	  function Performance() {
	    _classCallCheck(this, Performance);
	
	    this.sections = {};
	    this.sequence = [];
	  }
	
	  _createClass(Performance, [{
	    key: 'addSection',
	    value: function addSection(key, section) {
	      if (key === null) {
	        return null;
	      }
	      if (Array.isArray(section) && !section.length) {
	        return null;
	      }
	      if (section && !(key in this.sections)) {
	        this.sections[key] = section;
	      }
	      this.sequence.push(key);
	      return key;
	    }
	  }]);
	
	  return Performance;
	}();
	
	// Convert a Vex.Flow.Factory structure into a MIDI stream.
	
	
	function parseVexFlow() {
	  G.midi.performance = new Performance();
	
	  // A section is a list of measures bounded by double barlines
	  // or other bounding symbols.
	  var section = [];
	
	  // Current key signature.
	  var keyAccidentals = null;
	
	  // Timing information that will be calculated inside.
	  var time = {
	    start: 0,
	    duration: 0,
	    ticksToTime: 60000 / (G.midi.bpm * _vexflow2.default.Flow.RESOLUTION / 4)
	  };
	
	  // A system is a full measure.
	  G.vf.systems.forEach(function (system) {
	    section.push(system);
	
	    // Remember which accidentals apply to which note keys.
	    var measureAccidentals = [];
	
	    // Remember the stave we've working with.
	    var currentStave = null;
	
	    // A system's formatter has an ordered list of all tick events, grouped in "tick contexts".
	    system.formatter.tickContexts.list.forEach(function (tickStart) {
	      var tickContext = system.formatter.tickContexts.map[tickStart];
	
	      tickContext.tickables.forEach(function (tickable) {
	        if (tickable instanceof _vexflow2.default.Flow.StaveNote) {
	          // Ignore staves we've already seen.
	          if (tickable.stave != currentStave) {
	            currentStave = tickable.stave;
	
	            // Parse stave modifiers for key signature, time signature, etc.
	            currentStave.modifiers.forEach(function (modifier) {
	              if (modifier instanceof _vexflow2.default.Flow.KeySignature) {
	                keyAccidentals = getKeyAccidentals(modifier);
	              }
	              if (modifier instanceof _vexflow2.default.Flow.StaveTempo) {
	                var ticksPerTempoUnit = _vexflow2.default.Flow.parseNoteData({
	                  duration: modifier.tempo.duration,
	                  dots: modifier.tempo.dots
	                }).ticks;
	                time.ticksToTime = 60000 / (modifier.tempo.bpm * ticksPerTempoUnit);
	              }
	              if (modifier instanceof _vexflow2.default.Flow.Barline) {
	                var _ornull2 = void 0;
	
	                _ORNULL2: {
	                  try {
	                    _ornull2 = section[0].attrs.id;
	                    break _ORNULL2;
	                  } catch (e) {
	                    _ornull2 = null;
	                    break _ORNULL2;
	                  }
	                }
	
	                var _ornull3 = void 0;
	
	                _ORNULL3: {
	                  try {
	                    _ornull3 = section[0].attrs.id;
	                    break _ORNULL3;
	                  } catch (e) {
	                    _ornull3 = null;
	                    break _ORNULL3;
	                  }
	                }
	
	                switch (modifier.type) {
	                  case _vexflow2.default.Flow.Barline.type.SINGLE:
	                    break;
	                  case _vexflow2.default.Flow.Barline.type.DOUBLE:
	                    G.midi.performance.addSection(_ornull2, section);
	                    section = [];
	                    break;
	                  case _vexflow2.default.Flow.Barline.type.END:
	                    break;
	                  case _vexflow2.default.Flow.Barline.type.REPEAT_BEGIN:
	                    break;
	                  case _vexflow2.default.Flow.Barline.type.REPEAT_END:
	                  case _vexflow2.default.Flow.Barline.type.REPEAT_BOTH:
	                    Number(2).repeat(function () {
	                      return G.midi.performance.addSection(_ornull3, section);
	                    });
	                    section = [];
	                    break;
	                  case _vexflow2.default.Flow.Barline.type.NONE:
	                    break;
	                }
	              }
	            });
	          }
	
	          // Compute time.
	          time.start = Math.round(tickStart * time.ticksToTime);
	          time.duration = Math.round(tickable.ticks.numerator * time.ticksToTime / tickable.ticks.denominator);
	
	          // Parse note modifiers.
	          tickable.modifiers.forEach(function (modifier) {
	            if (modifier instanceof _vexflow2.default.Flow.Accidental) {
	              measureAccidentals[tickable.keyProps[modifier.index].key] = modifier.type;
	            }
	          });
	
	          // Compute MIDI information.
	          tickable.midi = {
	            start: time.start,
	            duration: time.duration
	          };
	          if (tickable.noteType === 'n') {
	            tickable.keyProps.forEach(function (note) {
	              var _ornull4 = void 0;
	
	              _ORNULL4: {
	                try {
	                  _ornull4 = measureAccidentals[note.key];
	                  break _ORNULL4;
	                } catch (e) {
	                  _ornull4 = null;
	                  break _ORNULL4;
	                }
	              }
	
	              var _ornull5 = void 0;
	
	              _ORNULL5: {
	                try {
	                  _ornull5 = keyAccidentals[note.key];
	                  break _ORNULL5;
	                } catch (e) {
	                  _ornull5 = null;
	                  break _ORNULL5;
	                }
	              }
	
	              note.accidental = note.accidental || _ornull4 || _ornull5;
	            });
	          }
	        }
	      });
	    });
	
	    // Advance time by measure's total ticks.
	    // The conversion factor was computed separately by each tickable due to the VexFlow format.
	    system.midi = {
	      duration: Math.round(system.formatter.totalTicks.numerator * time.ticksToTime / system.formatter.totalTicks.denominator)
	    };
	  });
	
	  // Last remaining section.
	
	  var _ornull6 = void 0;
	
	  _ORNULL6: {
	    try {
	      _ornull6 = section[0].attrs.id;
	      break _ORNULL6;
	    } catch (e) {
	      _ornull6 = null;
	      break _ORNULL6;
	    }
	  }
	
	  G.midi.performance.addSection(_ornull6, section);
	}
	
	// Play the sheet.
	function play() {
	  // This creates a G.midi.performance.
	  parseVexFlow();
	
	  // Play the performance.
	  G.midi.time = MIDI_START_TIME;
	  G.midi.timers = [];
	  G.midi.performance.sequence.forEach(function (sectionKey) {
	    var section = G.midi.performance.sections[sectionKey];
	    section.forEach(function (system) {
	
	      // Insert a percussion measure.
	      if (G.midi.config.percussion.on) {
	        playPercussion('f4', G.midi.time, 500);
	      }
	
	      // Play the notes.
	      system.formatter.tickContexts.list.forEach(function (tickStart) {
	        var tickContext = system.formatter.tickContexts.map[tickStart];
	
	        // Used to display play marker.
	        var marker = {
	          ctx: system.checkContext(),
	          y1: system.options.y,
	          y2: system.lastY,
	          x1: G.midi.config.marker_mode == 'note' ? Number.MAX_SAFE_INTEGER : system.startX,
	          x2: G.midi.config.marker_mode == 'note' ? 0 : system.startX + system.formatter.justifyWidth
	        };
	
	        tickContext.tickables.forEach(function (tickable) {
	          if (tickable instanceof _vexflow2.default.Flow.StaveNote) {
	            // Compute play marker position.
	            if (G.midi.config.marker_mode == 'note') {
	              var metrics = tickable.getMetrics();
	              var xStart = tickable.getAbsoluteX() - metrics.modLeftPx - metrics.extraLeftPx;
	              var xEnd = tickable.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx + metrics.modRightPx;
	              marker.x1 = Math.min(marker.x1, xStart);
	              marker.x2 = Math.max(marker.x2, xEnd);
	            }
	
	            // Output to MIDI.
	            if (tickable.noteType === 'n') {
	              tickable.keyProps.forEach(function (note) {
	                playNote(note, G.midi.time + tickable.midi.start, tickable.midi.duration);
	              });
	            }
	
	            // Draw play marker.
	            G.midi.timers.push(setTimeout(function () {
	              var ctx = marker.ctx;
	              if (G.midi.marker) {
	                try {
	                  ctx.svg.removeChild(G.midi.marker);
	                } catch (e) {
	                  // never mind.
	                }
	              }
	              ctx.beginPath();
	              ctx.setStrokeStyle('#aaa');
	              ctx.setFillStyle('#aaa');
	              ctx.setLineWidth(1);
	              ctx.attributes.opacity = 0.2;
	              ctx.fillRect(marker.x1, marker.y1, marker.x2 - marker.x1, marker.y2 - marker.y1);
	
	              G.midi.marker = ctx.svg.lastChild;
	            }, G.midi.time + tickable.midi.start + G.midi.config.sync));
	          }
	        });
	      });
	
	      G.midi.time += system.midi.duration;
	    });
	  });
	}
	
	var CANVAS_WIDTH = 500;
	var CANVAS_HEIGHT = 200;
	
	// Convert an array of notes to a Vex.Flow.Factory structure.
	function notesToVexFlow(notes) {
	  var vf_notes = notes.map(function (n) {
	    return n + '/4';
	  }).join(', ');
	  var time = '' + notes.length + '/4';
	
	  var vf = new _vexflow2.default.Flow.Factory({
	    renderer: { elementId: 'sheet-vexflow', width: CANVAS_WIDTH, height: CANVAS_HEIGHT }
	  });
	  var system = vf.System({
	    width: CANVAS_WIDTH,
	    formatIterations: 0
	  });
	
	  var score = vf.EasyScore();
	  var voice = score.voice(score.notes(vf_notes), { time: time });
	  system.addStave({ voices: [voice] }).addClef('treble');
	
	  return vf;
	}
	
	// Render a sheet.
	// The core sheet structure is Vex.Flow.Factory.
	// If the passed argument is an array of notes, convert it to a sheet.
	// If the passed argument is a function, call it to get the sheet.
	function render(notes) {
	  // Render VexFlow model.
	  var vf = Array.isArray(notes) ? notesToVexFlow(notes) : notes();
	  vf.drawWithoutReset();
	
	  // Attach UI event handlers.
	  function colorDescendants(color) {
	    return function () {
	      _vexflow2.default.forEach((0, _jquery2.default)(this).find('*'), function (child) {
	        child.setAttribute('fill', color);
	        child.setAttribute('stroke', color);
	      });
	    };
	  }
	  vf.renderQ.forEach(function (renderable) {
	    if (renderable instanceof _vexflow2.default.Flow.StaveNote) {
	      var el = renderable.getAttribute('el');
	      el.addEventListener('mouseover', colorDescendants('green'), false);
	      el.addEventListener('mouseout', colorDescendants('black'), false);
	    }
	  });
	
	  // Save VexFlow model.
	  G.vf = vf;
	}
	
	//
	// PROGRAM MAIN
	// Initialize the Web MIDI system and the UI.
	//
	(function main() {
	
	  // Read the saved configuration.
	  G.midi.config = Object.assign({}, G.midi.config, _store2.default.get('G.midi.config'));
	
	  // MIDI Output
	  (0, _jquery2.default)('#sheet #outputs').append((0, _jquery2.default)('<option>', { value: 'local', text: "(local synth)" }));
	  (0, _jquery2.default)('#sheet #outputs').on('change', function () {
	    G.midi.config.output = (0, _jquery2.default)('#sheet #outputs').val();
	    _store2.default.set('G.midi.config', G.midi.config);
	
	    if (G.midi.config.output !== 'local' && _webmidi2.default.enabled) {
	      (0, _jquery2.default)('#sheet #soundfonts').prop('disabled', true);
	      (0, _jquery2.default)('#sheet #instruments').prop('disabled', true);
	      G.midi.output = _webmidi2.default.getOutputById(G.midi.config.output);
	    } else {
	      (0, _jquery2.default)('#sheet #soundfonts').prop('disabled', false);
	      (0, _jquery2.default)('#sheet #instruments').prop('disabled', false);
	      G.midi.output = new LocalMidiOutput();
	    }
	  });
	
	  // MIDI Channel
	  // [1..16] as per http://stackoverflow.com/a/33352604/209184
	  Array.from(Array(16)).map(function (e, i) {
	    return i + 1;
	  }).concat(['all']).forEach(function (channel) {
	    (0, _jquery2.default)('#sheet #channels').append((0, _jquery2.default)('<option>', { value: channel, text: channel }));
	  });
	  (0, _jquery2.default)('#sheet #channels').on('change', function () {
	    G.midi.config.melody.channel = (0, _jquery2.default)('#sheet #channels').val();
	    _store2.default.set('G.midi.config', G.midi.config);
	  });
	  (0, _jquery2.default)('#sheet #channels').val(G.midi.config.melody.channel).change();
	
	  // Soundfonts and instruments
	  for (var sf in _soundfonts2.default.data) {
	    var soundfont = _soundfonts2.default.data[sf];
	    (0, _jquery2.default)('#sheet #soundfonts').append((0, _jquery2.default)('<option>', { text: soundfont.name, value: sf }));
	  }
	  (0, _jquery2.default)('#sheet #soundfonts').on('change', function () {
	    G.midi.config.melody.soundfont = (0, _jquery2.default)('#sheet #soundfonts').val();
	    _store2.default.set('G.midi.config', G.midi.config);
	
	    // Update the instruments list.
	    (0, _jquery2.default)('#sheet #instruments').empty();
	    fetch(_soundfonts2.default.data[G.midi.config.melody.soundfont].url + 'names.json').then(function (response) {
	      return response.json();
	    }).catch(function (e) {
	      return ['acoustic_grand_piano'];
	    }).then(function (instruments) {
	      instruments.forEach(function (instrument) {
	        (0, _jquery2.default)('#sheet #instruments').append((0, _jquery2.default)('<option>', { text: instrument, value: instrument }));
	      });
	      if (instruments.indexOf(G.midi.config.melody.instrument) === -1) {
	        G.midi.config.melody.instrument = instruments[0];
	      }
	      (0, _jquery2.default)('#sheet #instruments').val(G.midi.config.melody.instrument).change();
	    });
	  });
	  (0, _jquery2.default)('#sheet #soundfonts').val(G.midi.config.melody.soundfont).change();
	  (0, _jquery2.default)('#sheet #instruments').on('change', function () {
	    G.midi.config.melody.instrument = (0, _jquery2.default)('#sheet #instruments').val();
	    _store2.default.set('G.midi.config', G.midi.config);
	
	    if ((0, _jquery2.default)('#sheet #instruments').prop('disabled')) return;
	    G.midi.output = new LocalMidiOutput();
	  });
	
	  // Marker mode
	  (0, _jquery2.default)('#sheet input[name="marker_mode"][value=' + G.midi.config.marker_mode + ']').attr('checked', 'checked');
	  (0, _jquery2.default)('#sheet input[name="marker_mode"]').on('change', function () {
	    G.midi.config.marker_mode = (0, _jquery2.default)('#sheet input[name="marker_mode"]:checked').val();
	    _store2.default.set('G.midi.config', G.midi.config);
	  });
	
	  // Tuning
	  tunings.forEach(function (tuning) {
	    (0, _jquery2.default)('#sheet #tunings').append((0, _jquery2.default)('<option>', { value: tuning.key, text: tuning.name }));
	  });
	  (0, _jquery2.default)('#sheet #tunings').on('change', function () {
	    G.midi.config.tuning = (0, _jquery2.default)('#sheet #tunings').val();
	    _store2.default.set('G.midi.config', G.midi.config);
	
	    G.midi.tuning = tunings.find(function (t) {
	      return t.key === G.midi.config.tuning;
	    });
	    generateMidiTuning(G.midi.tuning.tuning);
	  });
	  (0, _jquery2.default)('#sheet #tunings').val(G.midi.config.tuning).change();
	
	  (0, _jquery2.default)('#sheet #reference').val(G.midi.config.reference.frequency);
	  (0, _jquery2.default)('#sheet #reference').on('keyup', function (e) {
	    if (e.keyCode == 13) {
	      document.activeElement.blur();
	    }
	  });
	  (0, _jquery2.default)('#sheet #reference').on('blur', function (e) {
	    G.midi.config.reference.frequency = (0, _jquery2.default)('#sheet #reference').val();
	    _store2.default.set('G.midi.config', G.midi.config);
	  });
	
	  // Handle reset button.
	  (0, _jquery2.default)('#sheet #reset').on('click', function () {
	    _store2.default.clear();
	    location.reload();
	  });
	
	  // Handle "Play" button.
	  (0, _jquery2.default)('#sheet #play').on('click', function () {
	    (0, _jquery2.default)('#sheet #stop').trigger('click');
	    (0, _jquery2.default)('#sheet #reference').val(G.midi.config.reference.frequency);
	    play();
	  });
	
	  // Handle "Stop" button.
	  (0, _jquery2.default)('#sheet #stop').on('click', function () {
	    var _ornull7 = void 0;
	
	    _ORNULL7: {
	      try {
	        _ornull7 = G.midi.output.stop;
	        break _ORNULL7;
	      } catch (e) {
	        _ornull7 = null;
	        break _ORNULL7;
	      }
	    }
	
	    if (_ornull7) {
	      G.midi.output.stop();
	    } else {}
	    // FIXME
	    // https://github.com/WebAudio/web-midi-api/issues/102
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=471798
	
	    // Stop player marker.
	    if (G.midi.timers) {
	      G.midi.timers.forEach(function (timer) {
	        window.clearTimeout(timer);
	      });
	      delete G.midi.timers;
	    }
	  });
	
	  // Build sheet list.
	  G.sheets.push({
	    name: 'C Lydian',
	    notes: _tonal2.default.scale('C lydian').map(function (n) {
	      return n + '4';
	    }).concat(['c5'])
	  });
	  G.sheets.unshift({
	    name: 'Lamma bada yatathanna لما بدا يتثنى',
	    notes: function notes() {
	      return yatathanna();
	    }
	  });
	  G.sheets.unshift({
	    name: 'Yâ lâbesyn يا لابسين',
	    notes: function notes() {
	      return labesyn();
	    }
	  });
	  G.sheets.unshift({
	    name: 'Bach Minuet in G',
	    notes: function notes() {
	      return bach();
	    }
	  });
	  G.sheets.forEach(function (sheet, index) {
	    (0, _jquery2.default)('#sheet #sheets').append((0, _jquery2.default)('<option>', { value: index, text: sheet.name }));
	  });
	  (0, _jquery2.default)('#sheet #sheets').val(G.midi.config.sheet).on('change', function () {
	    G.midi.config.sheet = (0, _jquery2.default)('#sheet #sheets').val();
	    _store2.default.set('G.midi.config', G.midi.config);
	    (0, _jquery2.default)('#sheet #sheet-vexflow').empty();
	    render(G.sheets[G.midi.config.sheet].notes);
	  });
	
	  // Enable Web MIDI.
	  _webmidi2.default.enable(function (err) {
	    if (err) {
	      (0, _jquery2.default)('#sheet #outputs').val(G.midi.config.output).change();
	      console.log('Web MIDI not enabled: ' + err);
	      return;
	    }
	
	    // Web MIDI outputs.
	    _webmidi2.default.outputs.forEach(function (output) {
	      (0, _jquery2.default)('#sheet #outputs').append((0, _jquery2.default)('<option>', { value: output.id, text: output.name }));
	    });
	
	    // Listen to Web MIDI state events.
	    _webmidi2.default.addListener('connected', function (event) {
	      if ((0, _jquery2.default)('#sheet #outputs option[value="' + event.id + '"]').length) return;
	      (0, _jquery2.default)('#sheet #outputs').append((0, _jquery2.default)('<option>', { value: event.id, text: event.name }));
	      (0, _jquery2.default)('#sheet #outputs').change();
	    });
	    _webmidi2.default.addListener('disconnected', function (event) {
	      (0, _jquery2.default)('#sheet #outputs option[value="' + event.id + '"]').remove();
	      (0, _jquery2.default)('#sheet #outputs').change();
	    });
	
	    (0, _jquery2.default)('#sheet #outputs').val(G.midi.config.output).change();
	  }, true /* sysex */);
	
	  // Render first sheet.
	  render(G.sheets[G.midi.config.sheet].notes);
	})();
	
	//
	// SHEETS
	//
	
	// Create a sheet of https://musescore.com/infojunkie/lamma-bada-yatathanna
	function yatathanna() {
	  var vf = new _vexflow2.default.Flow.Factory({
	    renderer: { elementId: 'sheet-vexflow', width: 1100, height: 900 }
	  });
	  var score = vf.EasyScore({ throwOnError: true });
	
	  var voice = score.voice.bind(score);
	  var notes = score.notes.bind(score);
	  var beam = score.beam.bind(score);
	
	  var x = 20,
	      y = 80;
	  function makeSystem(width) {
	    var system = vf.System({ x: x, y: y, width: width, spaceBetweenStaves: 10 });
	    x += width;
	    return system;
	  }
	
	  function id(id) {
	    return registry.getElementById(id);
	  }
	
	  score.set({ time: '10/8' });
	
	  /*  Pickup measure  */
	  var system = makeSystem(200);
	  system.addStave({
	    voices: [voice(notes('d4/8', { stem: "up" })).setStrict(false)]
	  }).addKeySignature('Bb').addClef('treble').addTimeSignature('10/8').setTempo({ duration: "8", bpm: 120 }, -30).setEndBarType(_vexflow2.default.Flow.Barline.type.DOUBLE);
	
	  /*  Measure 1 */
	  var system = makeSystem(680);
	  system.addStave({
	    voices: [voice(notes('g4/q', { stem: "up" }).concat(beam(notes('a4/16, b4/16', { stem: "up" }))).concat(beam(notes('c5/16, b4/16, b4/16, a4/16', { stem: "down" }))).concat(beam(notes('a4/16, g4/16, g4/16, f#4/16', { stem: "up" }))).concat(notes('g4/q, d4/8', { stem: "up" })))]
	  });
	
	  x = 20;
	  y += 100;
	
	  /*  Measure 2 */
	  var system = makeSystem(800);
	  system.addStave({
	    voices: [voice(notes('g4/q', { stem: "up" }).concat(beam(notes('a4/16, b4/16', { stem: "up" }))).concat(beam(notes('c5/16, b4/16, b4/16, a4/16', { stem: "down" }))).concat(beam(notes('a4/16, g4/16, g4/16, f#4/16', { stem: "up" }))).concat(notes('g4/q, b4/8/r', { stem: "up" })))]
	  }).setEndBarType(_vexflow2.default.Flow.Barline.type.END);
	
	  return vf;
	}
	
	// Create a sheet of https://musescore.com/infojunkie/ya-labesyn
	function labesyn() {
	  var vf = new _vexflow2.default.Flow.Factory({
	    renderer: { elementId: 'sheet-vexflow', width: 1100, height: 900 }
	  });
	  var score = vf.EasyScore({ throwOnError: true });
	
	  var voice = score.voice.bind(score);
	  var notes = score.notes.bind(score);
	  var beam = score.beam.bind(score);
	
	  var x = 20,
	      y = 80;
	  function makeSystem(width) {
	    var system = vf.System({ x: x, y: y, width: width, spaceBetweenStaves: 10 });
	    x += width;
	    return system;
	  }
	
	  function id(id) {
	    return registry.getElementById(id);
	  }
	
	  score.set({ time: '2/4' });
	
	  /*  Measure 1 */
	  var system = makeSystem(220);
	  system.addStave({
	    voices: [voice(notes('b4/r, f4', { stem: "up" }).concat(beam(notes('f4, f4', { stem: "up" }))))]
	  }).addKeySignature('D', undefined, ['+', '+']).addClef('treble').addTimeSignature('2/4').setTempo({ name: "Moderato", duration: "q", bpm: 108 }, -30);
	  system.addConnector('singleLeft');
	
	  /*  Measure 2 */
	  var system = makeSystem(220);
	  system.addStave({
	    voices: [voice(notes('f4/q', { stem: "up" }).concat(beam(notes('e4, f4', { stem: "up" }))))]
	  });
	
	  /*  Measure 3 */
	  var system = makeSystem(220);
	  system.addStave({
	    voices: [voice(beam(notes('g4, a4', { stem: "up" })).concat(beam(notes('g4, f4', { stem: "up" }))))]
	  });
	
	  /*  Measure 4 */
	  var system = makeSystem(220);
	  system.addStave({
	    voices: [voice(beam(notes('g4, f4', { stem: "up" })).concat(notes('e4/q', { stem: "up" })))]
	  });
	
	  /*  Measure 5 */
	  x = 20;
	  y += 100;
	
	  var system = makeSystem(220);
	  system.addStave({
	    voices: [voice(notes('b4/r, e4', { stem: "up" }).concat(beam(notes('e4, e4', { stem: "up" }))))]
	  });
	  system.addConnector('singleLeft');
	
	  /*  Measure 6 */
	  var system = makeSystem(220);
	  system.addStave({
	    voices: [voice(notes('e4/q', { stem: "up" }).concat(beam(notes('d4, e4', { stem: "up" }))))]
	  });
	
	  /*  Measure 7 */
	  var system = makeSystem(220);
	  system.addStave({
	    voices: [voice(beam(notes('f4, g4', { stem: "up" })).concat(beam(notes('e4, f4', { stem: "up" }))))]
	  });
	
	  /*  Measure 8 */
	  var system = makeSystem(220);
	  system.addStave({
	    voices: [voice(notes('d4/q, b4/q/r', { stem: "up" }))]
	  }).setEndBarType(_vexflow2.default.Flow.Barline.type.REPEAT_END);
	
	  return vf;
	}
	
	// Create a sheet of Bach's Minuet in G.
	// https://github.com/0xfe/vexflow/blob/master/tests/bach_tests.js
	function bach() {
	  var registry = new _vexflow2.default.Flow.Registry();
	  _vexflow2.default.Flow.Registry.enableDefaultRegistry(registry);
	  var vf = new _vexflow2.default.Flow.Factory({
	    renderer: { elementId: 'sheet-vexflow', width: 1100, height: 900 }
	  });
	  var score = vf.EasyScore({ throwOnError: true });
	
	  var voice = score.voice.bind(score);
	  var notes = score.notes.bind(score);
	  var beam = score.beam.bind(score);
	
	  var x = 120,
	      y = 80;
	  function makeSystem(width) {
	    var system = vf.System({ x: x, y: y, width: width, spaceBetweenStaves: 10 });
	    x += width;
	    return system;
	  }
	
	  function id(id) {
	    return registry.getElementById(id);
	  }
	  function concat(a, b) {
	    return a.concat(b);
	  }
	
	  score.set({ time: '3/4' });
	
	  /*  Measure 1 */
	  var system = makeSystem(220);
	  system.addStave({
	    voices: [voice([notes('D5/q[id="m1a"]'), beam(notes('G4/8, A4, B4, C5', { stem: "up" }))].reduce(concat)), voice([vf.TextDynamics({ text: 'p', duration: 'h', dots: 1, line: 9 })])]
	  }).addClef('treble').addKeySignature('G').addTimeSignature('3/4').setTempo({ name: "Allegretto", duration: "h", dots: 1, bpm: 66 }, -30);
	
	  system.addStave({ voices: [voice(notes('(G3 B3 D4)/h, A3/q', { clef: 'bass' }))] }).addClef('bass').addKeySignature('G').addTimeSignature('3/4');
	  system.addConnector('brace');
	  system.addConnector('singleRight');
	  system.addConnector('singleLeft');
	
	  id('m1a').addModifier(0, vf.Fingering({ number: '5' }));
	
	  /*  Measure 2 */
	  system = makeSystem(150);
	  system.addStave({ voices: [voice(notes('D5/q[id="m2a"], G4[id="m2b"], G4[id="m2c"]'))] });
	  system.addStave({ voices: [voice(notes('B3/h.', { clef: 'bass' }))] });
	  system.addConnector('singleRight');
	
	  id('m2a').addModifier(0, vf.Articulation({ type: 'a.', position: "above" }));
	  id('m2b').addModifier(0, vf.Articulation({ type: 'a.', position: "below" }));
	  id('m2c').addModifier(0, vf.Articulation({ type: 'a.', position: "below" }));
	
	  vf.Curve({
	    from: id('m1a'),
	    to: id('m2a'),
	    options: { cps: [{ x: 0, y: 40 }, { x: 0, y: 40 }] }
	  });
	
	  /*  Measure 3 */
	  system = makeSystem(150);
	  system.addStave({
	    voices: [voice([notes('E5/q[id="m3a"]'), beam(notes('C5/8, D5, E5, F5', { stem: "down" }))].reduce(concat))]
	  });
	  id('m3a').addModifier(0, vf.Fingering({ number: '3', position: 'above' }));
	
	  system.addStave({ voices: [voice(notes('C4/h.', { clef: 'bass' }))] });
	  system.addConnector('singleRight');
	
	  /*  Measure 4 */
	  system = makeSystem(150);
	  system.addStave({ voices: [voice(notes('G5/q[id="m4a"], G4[id="m4b"], G4[id="m4c"]'))] });
	
	  system.addStave({ voices: [voice(notes('B3/h.', { clef: 'bass' }))] });
	  system.addConnector('singleRight');
	
	  id('m4a').addModifier(0, vf.Articulation({ type: 'a.', position: "above" }));
	  id('m4b').addModifier(0, vf.Articulation({ type: 'a.', position: "below" }));
	  id('m4c').addModifier(0, vf.Articulation({ type: 'a.', position: "below" }));
	
	  vf.Curve({
	    from: id('m3a'),
	    to: id('m4a'),
	    options: { cps: [{ x: 0, y: 20 }, { x: 0, y: 20 }] }
	  });
	
	  /*  Measure 5 */
	  system = makeSystem(150);
	  system.addStave({
	    voices: [voice([notes('C5/q[id="m5a"]'), beam(notes('D5/8, C5, B4, A4', { stem: "down" }))].reduce(concat))]
	  });
	  id('m5a').addModifier(0, vf.Fingering({ number: '4', position: 'above' }));
	
	  system.addStave({ voices: [voice(notes('A3/h.', { clef: 'bass' }))] });
	  system.addConnector('singleRight');
	
	  /*  Measure 6 */
	  system = makeSystem(150);
	  system.addStave({
	    voices: [voice([notes('B5/q'), beam(notes('C5/8, B4, A4, G4[id="m6a"]', { stem: "up" }))].reduce(concat))]
	  });
	
	  system.addStave({ voices: [voice(notes('G3/h.', { clef: 'bass' }))] });
	  system.addConnector('singleRight');
	
	  vf.Curve({
	    from: id('m5a'),
	    to: id('m6a'),
	    options: {
	      cps: [{ x: 0, y: 20 }, { x: 0, y: 20 }],
	      invert: true,
	      position_end: 'nearTop',
	      y_shift: 20
	    }
	  });
	
	  /*  Measure 7 (New system) */
	  x = 20;
	  y += 230;
	
	  var system = makeSystem(220);
	  system.addStave({
	    voices: [voice([notes('F4/q[id="m7a"]'), beam(notes('G4/8[id="m7b"], A4, B4, G4', { stem: "up" }))].reduce(concat))]
	  }).addClef('treble').addKeySignature('G');
	
	  system.addStave({ voices: [voice(notes('D4/q, B3[id="m7c"], G3', { clef: 'bass' }))] }).addClef('bass').addKeySignature('G');
	  system.addConnector('brace');
	  system.addConnector('singleRight');
	  system.addConnector('singleLeft');
	
	  id('m7a').addModifier(0, vf.Fingering({ number: '2', position: 'below' }));
	  id('m7b').addModifier(0, vf.Fingering({ number: '1' }));
	  id('m7c').addModifier(0, vf.Fingering({ number: '3', position: 'above' }));
	
	  /*  Measure 8 */
	  system = makeSystem(180);
	  var grace = vf.GraceNote({ keys: ['d/3'], clef: 'bass', duration: '8', slash: true });
	
	  system.addStave({ voices: [voice(notes('A4/h.[id="m8c"]'))] });
	  system.addStave({ voices: [score.set({ clef: 'bass' }).voice([notes('D4/q[id="m8a"]'), beam(notes('D3/8, C4, B3[id="m8b"], A3', { stem: "down" }))].reduce(concat))] });
	  system.addConnector('singleRight');
	
	  id('m8b').addModifier(0, vf.Fingering({ number: '1', position: 'above' }));
	  id('m8c').addModifier(0, vf.GraceNoteGroup({ notes: [grace] }));
	
	  vf.Curve({
	    from: id('m7a'),
	    to: id('m8c'),
	    options: {
	      cps: [{ x: 0, y: 20 }, { x: 0, y: 20 }],
	      invert: true,
	      position: 'nearTop',
	      position_end: 'nearTop'
	    }
	  });
	
	  vf.StaveTie({ from: grace, to: id('m8c') });
	
	  /*  Measure 9 */
	  var system = makeSystem(180);
	  system.addStave({
	    voices: [score.set({ clef: 'treble' }).voice([notes('D5/q[id="m9a"]'), beam(notes('G4/8, A4, B4, C5', { stem: "up" }))].reduce(concat))]
	  });
	
	  system.addStave({ voices: [voice(notes('B3/h, A3/q', { clef: 'bass' }))] });
	  system.addConnector('singleRight');
	
	  id('m9a').addModifier(0, vf.Fingering({ number: '5' }));
	
	  /*  Measure 10 */
	  system = makeSystem(170);
	  system.addStave({ voices: [voice(notes('D5/q[id="m10a"], G4[id="m10b"], G4[id="m10c"]'))] });
	  system.addStave({ voices: [voice(notes('G3/q[id="m10d"], B3, G3', { clef: 'bass' }))] });
	  system.addConnector('singleRight');
	
	  id('m10a').addModifier(0, vf.Articulation({ type: 'a.', position: "above" }));
	  id('m10b').addModifier(0, vf.Articulation({ type: 'a.', position: "below" }));
	  id('m10c').addModifier(0, vf.Articulation({ type: 'a.', position: "below" }));
	  id('m10d').addModifier(0, vf.Fingering({ number: '4' }));
	
	  vf.Curve({
	    from: id('m9a'),
	    to: id('m10a'),
	    options: { cps: [{ x: 0, y: 40 }, { x: 0, y: 40 }] }
	  });
	
	  /*  Measure 11 */
	  system = makeSystem(150);
	  system.addStave({
	    voices: [voice([notes('E5/q[id="m11a"]'), beam(notes('C5/8, D5, E5, F5', { stem: "down" }))].reduce(concat))]
	  });
	  id('m11a').addModifier(0, vf.Fingering({ number: '3', position: 'above' }));
	
	  system.addStave({ voices: [voice(notes('C4/h.', { clef: 'bass' }))] });
	  system.addConnector('singleRight');
	
	  /*  Measure 12 */
	  system = makeSystem(170);
	  system.addStave({ voices: [voice(notes('G5/q[id="m12a"], G4[id="m12b"], G4[id="m12c"]'))] });
	
	  system.addStave({
	    voices: [score.set({ clef: 'bass' }).voice([notes('B3/q[id="m12d"]'), beam(notes('C4/8, B3, A3, G3[id="m12e"]', { stem: "down" }))].reduce(concat))]
	  });
	  system.addConnector('singleRight');
	
	  id('m12a').addModifier(0, vf.Articulation({ type: 'a.', position: "above" }));
	  id('m12b').addModifier(0, vf.Articulation({ type: 'a.', position: "below" }));
	  id('m12c').addModifier(0, vf.Articulation({ type: 'a.', position: "below" }));
	
	  id('m12d').addModifier(0, vf.Fingering({ number: '2', position: 'above' }));
	  id('m12e').addModifier(0, vf.Fingering({ number: '4', position: 'above' }));
	
	  vf.Curve({
	    from: id('m11a'),
	    to: id('m12a'),
	    options: { cps: [{ x: 0, y: 20 }, { x: 0, y: 20 }] }
	  });
	
	  /*  Measure 13 (New system) */
	  x = 20;
	  y += 230;
	
	  var system = makeSystem(220);
	  system.addStave({
	    voices: [score.set({ clef: 'treble' }).voice([notes('c5/q[id="m13a"]'), beam(notes('d5/8, c5, b4, a4', { stem: "down" }))].reduce(concat))]
	  }).addClef('treble').addKeySignature('G');
	
	  system.addStave({ voices: [voice(notes('a3/h[id="m13b"], f3/q[id="m13c"]', { clef: 'bass' }))] }).addClef('bass').addKeySignature('G');
	
	  system.addConnector('brace');
	  system.addConnector('singleRight');
	  system.addConnector('singleLeft');
	
	  id('m13a').addModifier(0, vf.Fingering({ number: '4', position: 'above' }));
	  id('m13b').addModifier(0, vf.Fingering({ number: '1' }));
	  id('m13c').addModifier(0, vf.Fingering({ number: '3', position: 'above' }));
	
	  /*  Measure 14 */
	  var system = makeSystem(180);
	  system.addStave({
	    voices: [score.set({ clef: 'treble' }).voice([notes('B4/q'), beam(notes('C5/8, b4, a4, g4', { stem: "up" }))].reduce(concat))]
	  });
	
	  system.addStave({ voices: [voice(notes('g3/h[id="m14a"], b3/q[id="m14b"]', { clef: 'bass' }))] });
	  system.addConnector('singleRight');
	
	  id('m14a').addModifier(0, vf.Fingering({ number: '2' }));
	  id('m14b').addModifier(0, vf.Fingering({ number: '1' }));
	
	  /*  Measure 15 */
	  var system = makeSystem(180);
	  system.addStave({
	    voices: [score.set({ clef: 'treble' }).voice([notes('a4/q'), beam(notes('b4/8, a4, g4, f4[id="m15a"]', { stem: "up" }))].reduce(concat))]
	  });
	
	  system.addStave({ voices: [voice(notes('c4/q[id="m15b"], d4, d3', { clef: 'bass' }))] });
	  system.addConnector('singleRight');
	
	  id('m15a').addModifier(0, vf.Fingering({ number: '2' }));
	  id('m15b').addModifier(0, vf.Fingering({ number: '2' }));
	
	  /*  Measure 16 */
	  var system = makeSystem(130);
	  system.addStave({
	    voices: [score.set({ clef: 'treble' }).voice([notes('g4/h.[id="m16a"]')].reduce(concat))]
	  }).setEndBarType(_vexflow2.default.Flow.Barline.type.REPEAT_END);
	
	  system.addStave({ voices: [voice(notes('g3/h[id="m16b"], g2/q', { clef: 'bass' }))] }).setEndBarType(_vexflow2.default.Flow.Barline.type.REPEAT_END);
	  system.addConnector('boldDoubleRight');
	
	  id('m16a').addModifier(0, vf.Fingering({ number: '1' }));
	  id('m16b').addModifier(0, vf.Fingering({ number: '1' }));
	
	  vf.Curve({
	    from: id('m13a'),
	    to: id('m16a'),
	    options: {
	      cps: [{ x: 0, y: 50 }, { x: 0, y: 20 }],
	      invert: true,
	      position_end: 'nearTop'
	    }
	  });
	
	  /* Measure 17 */
	  var system = makeSystem(180);
	  system.addStave({
	    voices: [score.set({ clef: 'treble' }).voice([notes('b5/q[id="m17a"]'), beam(notes('g5/8, a5, b5, g5', { stem: "down" }))].reduce(concat)), voice([vf.TextDynamics({ text: 'mf', duration: 'h', dots: 1, line: 10 })])]
	  }).setBegBarType(_vexflow2.default.Flow.Barline.type.REPEAT_BEGIN);
	
	  system.addStave({ voices: [voice(notes('g3/h.', { clef: 'bass' }))] }).setBegBarType(_vexflow2.default.Flow.Barline.type.REPEAT_BEGIN);
	
	  system.addConnector('boldDoubleLeft');
	  system.addConnector('singleRight');
	
	  id('m17a').addModifier(0, vf.Fingering({ number: '5', position: 'above' }));
	
	  /* Measure 18 */
	  var system = makeSystem(180);
	  system.addStave({
	    voices: [score.set({ clef: 'treble' }).voice([notes('a5/q[id="m18a"]'), beam(notes('d5/8, e5, f5, d5[id="m18b"]', { stem: "down" }))].reduce(concat))]
	  });
	
	  system.addStave({ voices: [voice(notes('f3/h.', { clef: 'bass' }))] });
	  system.addConnector('singleRight');
	
	  id('m18a').addModifier(0, vf.Fingering({ number: '4', position: 'above' }));
	
	  vf.Curve({
	    from: id('m17a'),
	    to: id('m18b'),
	    options: {
	      cps: [{ x: 0, y: 20 }, { x: 0, y: 30 }]
	    }
	  });
	
	  _vexflow2.default.Flow.Registry.disableDefaultRegistry();
	  return vf;
	}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	
	WebMidi v2.0.0-rc.5
	
	WebMidi.js helps you tame the Web MIDI API. Send and receive MIDI messages with ease. Control instruments with user-friendly functions (playNote, sendPitchBend, etc.). React to MIDI input with simple event listeners (noteon, pitchbend, controlchange, etc.).
	https://github.com/cotejp/webmidi
	
	
	The MIT License (MIT)
	
	Copyright (c) 2015-2016, Jean-Philippe Côté
	
	Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
	associated documentation files (the "Software"), to deal in the Software without restriction,
	including without limitation the rights to use, copy, modify, merge, publish, distribute,
	sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in all copies or substantial
	portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
	NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES
	OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	*/
	
	!function(scope){"use strict";function WebMidi(){if(WebMidi.prototype._singleton)throw new Error("WebMidi is a singleton, it cannot be instantiated directly.");WebMidi.prototype._singleton=this,this._inputs=[],this._outputs=[],this._userHandlers={},this._stateChangeQueue=[],this._processingStateChange=!1,this._midiInterfaceEvents=["connected","disconnected"],this._notes=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],this._semitones={C:0,D:2,E:4,F:5,G:7,A:9,B:11},Object.defineProperties(this,{MIDI_SYSTEM_MESSAGES:{value:{sysex:240,timecode:241,songposition:242,songselect:243,tuningrequest:246,sysexend:247,clock:248,start:250,"continue":251,stop:252,activesensing:254,reset:255,unknownsystemmessage:-1},writable:!1,enumerable:!0,configurable:!1},MIDI_CHANNEL_MESSAGES:{value:{noteoff:8,noteon:9,keyaftertouch:10,controlchange:11,channelmode:11,programchange:12,channelaftertouch:13,pitchbend:14},writable:!1,enumerable:!0,configurable:!1},MIDI_REGISTERED_PARAMETER:{value:{pitchbendrange:[0,0],channelfinetuning:[0,1],channelcoarsetuning:[0,2],tuningprogram:[0,3],tuningbank:[0,4],modulationrange:[0,5],azimuthangle:[61,0],elevationangle:[61,1],gain:[61,2],distanceratio:[61,3],maximumdistance:[61,4],maximumdistancegain:[61,5],referencedistanceratio:[61,6],panspreadangle:[61,7],rollangle:[61,8]},writable:!1,enumerable:!0,configurable:!1},MIDI_CONTROL_CHANGE_MESSAGES:{value:{bankselectcoarse:0,modulationwheelcoarse:1,breathcontrollercoarse:2,footcontrollercoarse:4,portamentotimecoarse:5,dataentrycoarse:6,volumecoarse:7,balancecoarse:8,pancoarse:10,expressioncoarse:11,effectcontrol1coarse:12,effectcontrol2coarse:13,generalpurposeslider1:16,generalpurposeslider2:17,generalpurposeslider3:18,generalpurposeslider4:19,bankselectfine:32,modulationwheelfine:33,breathcontrollerfine:34,footcontrollerfine:36,portamentotimefine:37,dataentryfine:38,volumefine:39,balancefine:40,panfine:42,expressionfine:43,effectcontrol1fine:44,effectcontrol2fine:45,holdpedal:64,portamento:65,sustenutopedal:66,softpedal:67,legatopedal:68,hold2pedal:69,soundvariation:70,resonance:71,soundreleasetime:72,soundattacktime:73,brightness:74,soundcontrol6:75,soundcontrol7:76,soundcontrol8:77,soundcontrol9:78,soundcontrol10:79,generalpurposebutton1:80,generalpurposebutton2:81,generalpurposebutton3:82,generalpurposebutton4:83,reverblevel:91,tremololevel:92,choruslevel:93,celestelevel:94,phaserlevel:95,databuttonincrement:96,databuttondecrement:97,nonregisteredparametercoarse:98,nonregisteredparameterfine:99,registeredparametercoarse:100,registeredparameterfine:101},writable:!1,enumerable:!0,configurable:!1},MIDI_CHANNEL_MODE_MESSAGES:{value:{allsoundoff:120,resetallcontrollers:121,localcontrol:122,allnotesoff:123,omnimodeoff:124,omnimodeon:125,monomodeon:126,polymodeon:127},writable:!1,enumerable:!0,configurable:!1}}),Object.defineProperties(this,{supported:{enumerable:!0,get:function(){return"requestMIDIAccess"in navigator}},enabled:{enumerable:!0,get:function(){return void 0!==this["interface"]}.bind(this)},inputs:{enumerable:!0,get:function(){return this._inputs}.bind(this)},outputs:{enumerable:!0,get:function(){return this._outputs}.bind(this)},sysexEnabled:{enumerable:!0,get:function(){return!(!this["interface"]||!this["interface"].sysexEnabled)}.bind(this)},time:{enumerable:!0,get:function(){return window.performance.now()}}})}function Input(midiInput){var that=this;this._userHandlers={channel:{},system:{}},this._midiInput=midiInput,Object.defineProperties(this,{connection:{enumerable:!0,get:function(){return that._midiInput.connection}},id:{enumerable:!0,get:function(){return that._midiInput.id}},manufacturer:{enumerable:!0,get:function(){return that._midiInput.manufacturer}},name:{enumerable:!0,get:function(){return that._midiInput.name}},state:{enumerable:!0,get:function(){return that._midiInput.state}}}),this._initializeUserHandlers()}function Output(midiOutput){var that=this;this._midiOutput=midiOutput,Object.defineProperties(this,{connection:{enumerable:!0,get:function(){return that._midiOutput.connection}},id:{enumerable:!0,get:function(){return that._midiOutput.id}},manufacturer:{enumerable:!0,get:function(){return that._midiOutput.manufacturer}},name:{enumerable:!0,get:function(){return that._midiOutput.name}},state:{enumerable:!0,get:function(){return that._midiOutput.state}}})}var wm=new WebMidi;WebMidi.prototype.enable=function(callback,sysex){return this.enabled?void 0:this.supported?void navigator.requestMIDIAccess({sysex:sysex}).then(function(midiAccess){this["interface"]=midiAccess,this._resetInterfaceUserHandlers(),this["interface"].onstatechange=this._onInterfaceStateChange.bind(this),this._onInterfaceStateChange(null),"function"==typeof callback&&callback.call(this)}.bind(this),function(err){"function"==typeof callback&&callback.call(this,err)}.bind(this)):void("function"==typeof callback&&callback(new Error("The Web MIDI API is not supported by your browser.")))},WebMidi.prototype.disable=function(){if(!this.supported)throw new Error("The Web MIDI API is not supported by your browser.");this["interface"]=void 0,this._inputs=[],this._outputs=[],this._resetInterfaceUserHandlers()},WebMidi.prototype.addListener=function(type,listener){if(!this.enabled)throw new Error("WebMidi must be enabled before adding event listeners.");if("function"!=typeof listener)throw new TypeError("The 'listener' parameter must be a function.");if(!(this._midiInterfaceEvents.indexOf(type)>=0))throw new TypeError("The specified event type is not supported.");return this._userHandlers[type].push(listener),this},WebMidi.prototype.hasListener=function(type,listener){if(!this.enabled)throw new Error("WebMidi must be enabled before checking event listeners.");if("function"!=typeof listener)throw new TypeError("The 'listener' parameter must be a function.");if(!(this._midiInterfaceEvents.indexOf(type)>=0))throw new TypeError("The specified event type is not supported.");for(var o=0;o<this._userHandlers[type].length;o++)if(this._userHandlers[type][o]===listener)return!0;return!1},WebMidi.prototype.removeListener=function(type,listener){if(!this.enabled)throw new Error("WebMidi must be enabled before removing event listeners.");if(void 0!==listener&&"function"!=typeof listener)throw new TypeError("The 'listener' parameter must be a function.");if(this._midiInterfaceEvents.indexOf(type)>=0)if(listener)for(var o=0;o<this._userHandlers[type].length;o++)this._userHandlers[type][o]===listener&&this._userHandlers[type].splice(o,1);else this._userHandlers[type]=[];else{if(void 0!==type)throw new TypeError("The specified event type is not supported.");this._resetInterfaceUserHandlers()}return this},WebMidi.prototype.getInputById=function(id){if(!this.enabled)throw new Error("WebMidi is not enabled.");for(var i=0;i<this.inputs.length;i++)if(this.inputs[i].id===id)return this.inputs[i];return!1},WebMidi.prototype.getOutputById=function(id){if(!this.enabled)throw new Error("WebMidi is not enabled.");for(var i=0;i<this.outputs.length;i++)if(this.outputs[i].id===id)return this.outputs[i];return!1},WebMidi.prototype.getInputByName=function(name){if(!this.enabled)throw new Error("WebMidi is not enabled.");for(var i=0;i<this.inputs.length;i++)if(~this.inputs[i].name.indexOf(name))return this.inputs[i];return!1},WebMidi.prototype.getOutputByName=function(name){if(!this.enabled)throw new Error("WebMidi is not enabled.");for(var i=0;i<this.outputs.length;i++)if(~this.outputs[i].name.indexOf(name))return this.outputs[i];return!1},WebMidi.prototype.guessNoteNumber=function(input){var output=!1;if(input&&input.toFixed&&input>=0&&127>=input?output=Math.round(input):parseInt(input)>=0&&parseInt(input)<=127?output=parseInt(input):("string"==typeof input||input instanceof String)&&(output=this.noteNameToNumber(input)),output===!1)throw new Error("Invalid note number ("+input+").");return output},WebMidi.prototype.noteNameToNumber=function(name){"string"!=typeof name&&(name="");var matches=name.match(/([CDEFGAB])(#{0,2}|b{0,2})(-?\d+)/i);if(!matches)throw new RangeError("Invalid note name.");var semitones=wm._semitones[matches[1].toUpperCase()],octave=parseInt(matches[3]),result=12*(octave+2)+semitones;if(matches[2].toLowerCase().indexOf("b")>-1?result-=matches[2].length:matches[2].toLowerCase().indexOf("#")>-1&&(result+=matches[2].length),0>semitones||-2>octave||octave>8||0>result||result>127)throw new RangeError("Invalid note name or note outside valid range.");return result},WebMidi.prototype._updateInputsAndOutputs=function(){this._updateInputs(),this._updateOutputs()},WebMidi.prototype._updateInputs=function(){for(var i=0;i<this._inputs.length;i++){for(var remove=!0,updated=this["interface"].inputs.values(),input=updated.next();input&&!input.done;input=updated.next())if(this._inputs[i]._midiInput===input.value){remove=!1;break}remove&&this._inputs.splice(i,1)}this["interface"].inputs.forEach(function(nInput){for(var add=!0,j=0;j<this._inputs.length;j++)this._inputs[j]._midiInput===nInput&&(add=!1);add&&this._inputs.push(this._createInput(nInput))}.bind(this))},WebMidi.prototype._updateOutputs=function(){for(var i=0;i<this._outputs.length;i++){for(var remove=!0,updated=this["interface"].outputs.values(),output=updated.next();output&&!output.done;output=updated.next())if(this._outputs[i]._midiOutput===output.value){remove=!1;break}remove&&this._outputs.splice(i,1)}this["interface"].outputs.forEach(function(nOutput){for(var add=!0,j=0;j<this._outputs.length;j++)this._outputs[j]._midiOutput===nOutput&&(add=!1);add&&this._outputs.push(this._createOutput(nOutput))}.bind(this))},WebMidi.prototype._createInput=function(midiInput){var input=new Input(midiInput);return input._midiInput.onmidimessage=input._onMidiMessage.bind(input),input},WebMidi.prototype._createOutput=function(midiOutput){var output=new Output(midiOutput);return output._midiOutput.onmidimessage=output._onMidiMessage.bind(output),output},WebMidi.prototype._onInterfaceStateChange=function(e){if(this._stateChangeQueue.push(e),!this._processingStateChange){for(this._processingStateChange=!0;this._stateChangeQueue.length>0;)this._processStateChange(this._stateChangeQueue.shift());this._processingStateChange=!1}},WebMidi.prototype._processStateChange=function(e){if(this._updateInputsAndOutputs(),null!==e){var event={timestamp:e.timeStamp,type:e.port.state,id:e.port.id,manufacturer:e.port.manufacturer,name:e.port.name};"connected"===e.port.state&&("output"===e.port.type?event.output=this.getOutputById(e.port.id):"input"===e.port.type&&(event.input=this.getInputById(e.port.id))),this._userHandlers[e.port.state].forEach(function(handler){handler(event)})}},WebMidi.prototype._resetInterfaceUserHandlers=function(){for(var i=0;i<this._midiInterfaceEvents.length;i++)this._userHandlers[this._midiInterfaceEvents[i]]=[]},Input.prototype.addListener=function(type,channel,listener){var that=this;if(void 0===channel&&(channel="all"),Array.isArray(channel)||(channel=[channel]),channel.forEach(function(item){if("all"!==item&&!(item>=1&&16>=item))throw new RangeError("The 'channel' parameter is invalid.")}),"function"!=typeof listener)throw new TypeError("The 'listener' parameter must be a function.");if(wm.MIDI_SYSTEM_MESSAGES[type])this._userHandlers.system[type]||(this._userHandlers.system[type]=[]),this._userHandlers.system[type].push(listener);else{if(!wm.MIDI_CHANNEL_MESSAGES[type])throw new TypeError("The specified event type is not supported.");if(channel.indexOf("all")>-1){channel=[];for(var j=1;16>=j;j++)channel.push(j)}this._userHandlers.channel[type]||(this._userHandlers.channel[type]=[]),channel.forEach(function(ch){that._userHandlers.channel[type][ch]||(that._userHandlers.channel[type][ch]=[]),that._userHandlers.channel[type][ch].push(listener)})}return this},Input.prototype.on=Input.prototype.addListener,Input.prototype.hasListener=function(type,channel,listener){var that=this;if("function"!=typeof listener)throw new TypeError("The 'listener' parameter must be a function.");if(void 0===channel&&(channel="all"),channel.constructor!==Array&&(channel=[channel]),wm.MIDI_SYSTEM_MESSAGES[type]){for(var o=0;o<this._userHandlers.system[type].length;o++)if(this._userHandlers.system[type][o]===listener)return!0}else if(wm.MIDI_CHANNEL_MESSAGES[type]){if(channel.indexOf("all")>-1){channel=[];for(var j=1;16>=j;j++)channel.push(j)}return this._userHandlers.channel[type]?channel.every(function(chNum){var listeners=that._userHandlers.channel[type][chNum];return listeners&&listeners.indexOf(listener)>-1}):!1}return!1},Input.prototype.removeListener=function(type,channel,listener){var that=this;if(void 0!==listener&&"function"!=typeof listener)throw new TypeError("The 'listener' parameter must be a function.");if(void 0===channel&&(channel="all"),channel.constructor!==Array&&(channel=[channel]),wm.MIDI_SYSTEM_MESSAGES[type])if(void 0===listener)this._userHandlers.system[type]=[];else for(var o=0;o<this._userHandlers.system[type].length;o++)this._userHandlers.system[type][o]===listener&&this._userHandlers.system[type].splice(o,1);else if(wm.MIDI_CHANNEL_MESSAGES[type]){if(channel.indexOf("all")>-1){channel=[];for(var j=1;16>=j;j++)channel.push(j)}if(!this._userHandlers.channel[type])return this;channel.forEach(function(chNum){var listeners=that._userHandlers.channel[type][chNum];if(listeners)if(void 0===listener)that._userHandlers.channel[type][chNum]=[];else for(var l=0;l<listeners.length;l++)listeners[l]===listener&&listeners.splice(l,1)})}else{if(void 0!==type)throw new TypeError("The specified event type is not supported.");this._initializeUserHandlers()}return this},Input.prototype._initializeUserHandlers=function(){for(var prop1 in wm.MIDI_CHANNEL_MESSAGES)wm.MIDI_CHANNEL_MESSAGES.hasOwnProperty(prop1)&&(this._userHandlers.channel[prop1]={});for(var prop2 in wm.MIDI_SYSTEM_MESSAGES)wm.MIDI_SYSTEM_MESSAGES.hasOwnProperty(prop2)&&(this._userHandlers.system[prop2]=[])},Input.prototype._onMidiMessage=function(e){e.data[0]<240?this._parseChannelEvent(e):e.data[0]<=255&&this._parseSystemEvent(e)},Input.prototype._parseChannelEvent=function(e){var data1,data2,command=e.data[0]>>4,channel=(15&e.data[0])+1;e.data.length>1&&(data1=e.data[1],data2=e.data.length>2?e.data[2]:void 0);var event={target:this,data:e.data,timestamp:e.timeStamp,channel:channel};command===wm.MIDI_CHANNEL_MESSAGES.noteoff||command===wm.MIDI_CHANNEL_MESSAGES.noteon&&0===data2?(event.type="noteoff",event.note={number:data1,name:wm._notes[data1%12],octave:Math.floor(data1/12-1)-3},event.velocity=data2/127,event.rawVelocity=data2):command===wm.MIDI_CHANNEL_MESSAGES.noteon?(event.type="noteon",event.note={number:data1,name:wm._notes[data1%12],octave:Math.floor(data1/12-1)-3},event.velocity=data2/127,event.rawVelocity=data2):command===wm.MIDI_CHANNEL_MESSAGES.keyaftertouch?(event.type="keyaftertouch",event.note={number:data1,name:wm._notes[data1%12],octave:Math.floor(data1/12-1)-3},event.value=data2/127):command===wm.MIDI_CHANNEL_MESSAGES.controlchange&&data1>=0&&119>=data1?(event.type="controlchange",event.controller={number:data1,name:this.getCcNameByNumber(data1)},event.value=data2):command===wm.MIDI_CHANNEL_MESSAGES.channelmode&&data1>=120&&127>=data1?(event.type="channelmode",event.controller={number:data1,name:this.getChannelModeByNumber(data1)},event.value=data2):command===wm.MIDI_CHANNEL_MESSAGES.programchange?(event.type="programchange",event.value=data1):command===wm.MIDI_CHANNEL_MESSAGES.channelaftertouch?(event.type="channelaftertouch",event.value=data1/127):command===wm.MIDI_CHANNEL_MESSAGES.pitchbend?(event.type="pitchbend",event.value=((data2<<7)+data1-8192)/8192):event.type="unknownchannelmessage",this._userHandlers.channel[event.type]&&this._userHandlers.channel[event.type][channel]&&this._userHandlers.channel[event.type][channel].forEach(function(callback){callback(event)})},Input.prototype.getCcNameByNumber=function(number){if(number=parseInt(number),!(number>=0&&119>=number))throw new RangeError("The control change number must be between 0 and 119.");for(var cc in wm.MIDI_CONTROL_CHANGE_MESSAGES)if(number===wm.MIDI_CONTROL_CHANGE_MESSAGES[cc])return cc;return void 0},Input.prototype.getChannelModeByNumber=function(number){if(number=parseInt(number),!(number>=120&&status<=127))throw new RangeError("The control change number must be between 120 and 127.");for(var cm in wm.MIDI_CHANNEL_MODE_MESSAGES)if(number===wm.MIDI_CHANNEL_MODE_MESSAGES[cm])return cm},Input.prototype._parseSystemEvent=function(e){var command=e.data[0],event={target:this,data:e.data,timestamp:e.timeStamp};command===wm.MIDI_SYSTEM_MESSAGES.sysex?event.type="sysex":command===wm.MIDI_SYSTEM_MESSAGES.timecode?event.type="timecode":command===wm.MIDI_SYSTEM_MESSAGES.songposition?event.type="songposition":command===wm.MIDI_SYSTEM_MESSAGES.songselect?(event.type="songselect",event.song=e.data[1]):command===wm.MIDI_SYSTEM_MESSAGES.tuningrequest?event.type="tuningrequest":command===wm.MIDI_SYSTEM_MESSAGES.clock?event.type="clock":command===wm.MIDI_SYSTEM_MESSAGES.start?event.type="start":command===wm.MIDI_SYSTEM_MESSAGES["continue"]?event.type="continue":command===wm.MIDI_SYSTEM_MESSAGES.stop?event.type="stop":command===wm.MIDI_SYSTEM_MESSAGES.activesensing?event.type="activesensing":command===wm.MIDI_SYSTEM_MESSAGES.reset?event.type="reset":event.type="unknownsystemmessage",this._userHandlers.system[event.type]&&this._userHandlers.system[event.type].forEach(function(callback){callback(event)})},Output.prototype.send=function(status,data,timestamp){if(!(status>=128&&255>=status))throw new RangeError("The status byte must be an integer between 128 (0x80) and 255 (0xFF).");Array.isArray(data)||(data=parseInt(data)>=0&&parseInt(data)<=127?[parseInt(data)]:[]);var message=[status];return data.forEach(function(item){if(!(item>=0&&255>=item))throw new RangeError("The data bytes must be integers between 0 (0x00) and 255 (0xFF).");message.push(item)}),this._midiOutput.send(message,parseFloat(timestamp)||0),this},Output.prototype.sendSysex=function(manufacturer,data,options){if(!wm.sysexEnabled)throw new Error("SysEx message support must first be activated.");return options=options||{},manufacturer=[].concat(manufacturer),data.forEach(function(item){if(0>item||item>127)throw new RangeError("The data bytes of a SysEx message must be integers between 0 (0x00) and 127 (0x7F).")}),data=manufacturer.concat(data,wm.MIDI_SYSTEM_MESSAGES.sysexend),this.send(wm.MIDI_SYSTEM_MESSAGES.sysex,data,this._parseTimeParameter(options.time)),this},Output.prototype.sendTimecodeQuarterFrame=function(value,options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.timecode,value,this._parseTimeParameter(options.time)),this},Output.prototype.sendSongPosition=function(value,options){value=parseInt(value)||0,options=options||{};var msb=value>>7&127,lsb=127&value;return this.send(wm.MIDI_SYSTEM_MESSAGES.songposition,[msb,lsb],this._parseTimeParameter(options.time)),this},Output.prototype.sendSongSelect=function(value,options){if(value=parseInt(value),options=options||{},!(value>=0&&127>=value))throw new RangeError("The song number must be between 0 and 127.");return this.send(wm.MIDI_SYSTEM_MESSAGES.songselect,[value],this._parseTimeParameter(options.time)),this},Output.prototype.sendTuningRequest=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.tuningrequest,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendClock=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.clock,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendStart=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.start,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendContinue=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES["continue"],void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendStop=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.stop,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendActiveSensing=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.activesensing,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.sendReset=function(options){return options=options||{},this.send(wm.MIDI_SYSTEM_MESSAGES.reset,void 0,this._parseTimeParameter(options.time)),this},Output.prototype.stopNote=function(note,channel,options){if("all"===note)return this.sendChannelMode("allnotesoff",0,channel,options);var nVelocity=64;return options=options||{},options.velocity=parseFloat(options.velocity),options.rawVelocity?!isNaN(options.velocity)&&options.velocity>=0&&options.velocity<=127&&(nVelocity=options.velocity):!isNaN(options.velocity)&&options.velocity>=0&&options.velocity<=1&&(nVelocity=127*options.velocity),this._convertNoteToArray(note).forEach(function(item){this._convertChannelToArray(channel).forEach(function(ch){this.send((wm.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(ch-1),[item,Math.round(nVelocity)],this._parseTimeParameter(options.time))}.bind(this))}.bind(this)),this},Output.prototype.playNote=function(note,channel,options){var nVelocity=64;if(options=options||{},options.velocity=parseFloat(options.velocity),options.rawVelocity?!isNaN(options.velocity)&&options.velocity>=0&&options.velocity<=127&&(nVelocity=options.velocity):!isNaN(options.velocity)&&options.velocity>=0&&options.velocity<=1&&(nVelocity=127*options.velocity),options.time=this._parseTimeParameter(options.time),this._convertNoteToArray(note).forEach(function(item){this._convertChannelToArray(channel).forEach(function(ch){this.send((wm.MIDI_CHANNEL_MESSAGES.noteon<<4)+(ch-1),[item,Math.round(nVelocity)],options.time)}.bind(this))}.bind(this)),options.duration=parseFloat(options.duration),options.duration){options.duration<=0&&(options.duration=0);var nRelease=64;options.release=parseFloat(options.release),options.rawVelocity?!isNaN(options.release)&&options.release>=0&&options.release<=127&&(nRelease=options.release):!isNaN(options.release)&&options.release>=0&&options.release<=1&&(nRelease=127*options.release),this._convertNoteToArray(note).forEach(function(item){this._convertChannelToArray(channel).forEach(function(ch){this.send((wm.MIDI_CHANNEL_MESSAGES.noteoff<<4)+(ch-1),[item,Math.round(nRelease)],(options.time||wm.time)+options.duration)}.bind(this))}.bind(this))}return this},Output.prototype.sendKeyAftertouch=function(note,channel,pressure,options){var that=this;if(options=options||{},1>channel||channel>16)throw new RangeError("The channel must be between 1 and 16.");pressure=parseFloat(pressure),(isNaN(pressure)||0>pressure||pressure>1)&&(pressure=.5);var nPressure=Math.round(127*pressure);return this._convertNoteToArray(note).forEach(function(item){that._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.keyaftertouch<<4)+(ch-1),[item,nPressure],that._parseTimeParameter(options.time))})}),this},Output.prototype.sendControlChange=function(controller,value,channel,options){if(options=options||{},"string"==typeof controller){if(controller=wm.MIDI_CONTROL_CHANGE_MESSAGES[controller],!controller)throw new TypeError("Invalid controller name.")}else if(controller=parseInt(controller),!(controller>=0&&119>=controller))throw new RangeError("Controller numbers must be between 0 and 119.");if(value=parseInt(value)||0,!(value>=0&&127>=value))throw new RangeError("Controller value must be between 0 and 127.");return this._convertChannelToArray(channel).forEach(function(ch){this.send((wm.MIDI_CHANNEL_MESSAGES.controlchange<<4)+(ch-1),[controller,value],this._parseTimeParameter(options.time))}.bind(this)),this},Output.prototype._selectRegisteredParameter=function(parameter,channel,time){var that=this;if(parameter[0]=parseInt(parameter[0]),!(parameter[0]>=0&&parameter[0]<=127))throw new RangeError("The control65 value must be between 0 and 127");if(parameter[1]=parseInt(parameter[1]),!(parameter[1]>=0&&parameter[1]<=127))throw new RangeError("The control64 value must be between 0 and 127");return this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(101,parameter[0],channel,{time:time}),that.sendControlChange(100,parameter[1],channel,{time:time})}),this},Output.prototype._selectNonRegisteredParameter=function(parameter,channel,time){var that=this;if(parameter[0]=parseInt(parameter[0]),!(parameter[0]>=0&&parameter[0]<=127))throw new RangeError("The control63 value must be between 0 and 127");if(parameter[1]=parseInt(parameter[1]),!(parameter[1]>=0&&parameter[1]<=127))throw new RangeError("The control62 value must be between 0 and 127");return this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(99,parameter[0],channel,{time:time}),that.sendControlChange(98,parameter[1],channel,{time:time})}),this},Output.prototype._setCurrentRegisteredParameter=function(data,channel,time){var that=this;if(data=[].concat(data),data[0]=parseInt(data[0]),!(data[0]>=0&&data[0]<=127))throw new RangeError("The msb value must be between 0 and 127");return this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(6,data[0],channel,{time:time})}),data[1]=parseInt(data[1]),data[1]>=0&&data[1]<=127&&this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(38,data[1],channel,{time:time})}),this},Output.prototype._deselectRegisteredParameter=function(channel,time){var that=this;return this._convertChannelToArray(channel).forEach(function(ch){that.sendControlChange(101,127,channel,{time:time}),that.sendControlChange(100,127,channel,{time:time})}),this},Output.prototype.setRegisteredParameter=function(parameter,data,channel,options){var that=this;if(options=options||{},!Array.isArray(parameter)){if(!wm.MIDI_REGISTERED_PARAMETER[parameter])throw new Error("The specified parameter is not available.");parameter=wm.MIDI_REGISTERED_PARAMETER[parameter]}return this._convertChannelToArray(channel).forEach(function(ch){that._selectRegisteredParameter(parameter,channel,options.time),that._setCurrentRegisteredParameter(data,channel,options.time),that._deselectRegisteredParameter(channel,options.time)}),this},Output.prototype.setNonRegisteredParameter=function(parameter,data,channel,options){var that=this;if(options=options||{},!(parameter[0]>=0&&parameter[0]<=127&&parameter[1]>=0&&parameter[1]<=127))throw new Error("Position 0 and 1 of the 2-position parameter array must both be between 0 and 127.");return data=[].concat(data),this._convertChannelToArray(channel).forEach(function(ch){that._selectNonRegisteredParameter(parameter,channel,options.time),that._setCurrentRegisteredParameter(data,channel,options.time),that._deselectRegisteredParameter(channel,options.time)}),this},Output.prototype.incrementRegisteredParameter=function(parameter,channel,options){var that=this;if(options=options||{},!Array.isArray(parameter)){if(!wm.MIDI_REGISTERED_PARAMETER[parameter])throw new Error("The specified parameter is not available.");parameter=wm.MIDI_REGISTERED_PARAMETER[parameter]}return this._convertChannelToArray(channel).forEach(function(ch){that._selectRegisteredParameter(parameter,channel,options.time),that.sendControlChange(96,0,channel,{time:options.time}),that._deselectRegisteredParameter(channel,options.time)}),this},Output.prototype.decrementRegisteredParameter=function(parameter,channel,options){if(options=options||{},!Array.isArray(parameter)){if(!wm.MIDI_REGISTERED_PARAMETER[parameter])throw new TypeError("The specified parameter is not available.");parameter=wm.MIDI_REGISTERED_PARAMETER[parameter]}return this._convertChannelToArray(channel).forEach(function(ch){this._selectRegisteredParameter(parameter,channel,options.time),this.sendControlChange(97,0,channel,{time:options.time}),this._deselectRegisteredParameter(channel,options.time)}.bind(this)),this},Output.prototype.setPitchBendRange=function(semitones,cents,channel,options){var that=this;if(options=options||{},semitones=parseInt(semitones)||0,!(semitones>=0&&127>=semitones))throw new RangeError("The semitones value must be between 0 and 127");if(cents=parseInt(cents)||0,!(cents>=0&&127>=cents))throw new RangeError("The cents value must be between 0 and 127");return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter("pitchbendrange",[semitones,cents],channel,{time:options.time})}),this},Output.prototype.setModulationRange=function(semitones,cents,channel,options){var that=this;if(options=options||{},semitones=parseInt(semitones)||0,!(semitones>=0&&127>=semitones))throw new RangeError("The semitones value must be between 0 and 127");if(cents=parseInt(cents)||0,!(cents>=0&&127>=cents))throw new RangeError("The cents value must be between 0 and 127");return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter("modulationrange",[semitones,cents],channel,{time:options.time})}),this},Output.prototype.setMasterTuning=function(value,channel,options){var that=this;if(options=options||{},value=parseFloat(value)||0,-65>=value||value>=64)throw new RangeError("The value must be a decimal number larger than -65 and smaller than 64.");var coarse=parseInt(value)+64,fine=value-parseInt(value);fine=Math.round((fine+1)/2*16383);var msb=fine>>7&127,lsb=127&fine;return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter("channelcoarsetuning",coarse,channel,{time:options.time}),that.setRegisteredParameter("channelfinetuning",[msb,lsb],channel,{time:options.time})}),this},Output.prototype.setTuningProgram=function(value,channel,options){var that=this;if(options=options||{},value=parseInt(value)||0,!(value>=0&&127>=value))throw new RangeError("The program value must be between 0 and 127");return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter("tuningprogram",value,channel,{time:options.time})}),this},Output.prototype.setTuningBank=function(value,channel,options){var that=this;if(options=options||{},value=parseInt(value)||0,!(value>=0&&127>=value))throw new RangeError("The bank value must be between 0 and 127");return this._convertChannelToArray(channel).forEach(function(ch){that.setRegisteredParameter("tuningbank",value,channel,{time:options.time})}),this},Output.prototype.sendChannelMode=function(command,value,channel,options){var that=this;if(options=options||{},"string"==typeof command){if(command=wm.MIDI_CHANNEL_MODE_MESSAGES[command],!command)throw new TypeError("Invalid channel mode message name.")}else if(command=parseInt(command),!(command>=120&&127>=command))throw new RangeError("Channel mode numerical identifiers must be between 120 and 127.");if(value=parseInt(value),isNaN(value)||0>value||value>127)throw new RangeError("Value must be integers between 0 and 127.");return this._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.channelmode<<4)+(ch-1),[command,value],that._parseTimeParameter(options.time))}),this},Output.prototype.sendProgramChange=function(program,channel,options){var that=this;if(options=options||{},program=parseInt(program),isNaN(program)||0>program||program>127)throw new RangeError("Program numbers must be between 0 and 127.");return this._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.programchange<<4)+(ch-1),[program],that._parseTimeParameter(options.time))}),this},Output.prototype.sendChannelAftertouch=function(pressure,channel,options){var that=this;options=options||{},pressure=parseFloat(pressure),(isNaN(pressure)||0>pressure||pressure>1)&&(pressure=.5);var nPressure=Math.round(127*pressure);return this._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.channelaftertouch<<4)+(ch-1),[nPressure],that._parseTimeParameter(options.time))}),this},Output.prototype.sendPitchBend=function(bend,channel,options){var that=this;if(options=options||{},bend=parseFloat(bend),isNaN(bend)||-1>bend||bend>1)throw new RangeError("Pitch bend value must be between -1 and 1.");
	var nLevel=Math.round((bend+1)/2*16383),msb=nLevel>>7&127,lsb=127&nLevel;return this._convertChannelToArray(channel).forEach(function(ch){that.send((wm.MIDI_CHANNEL_MESSAGES.pitchbend<<4)+(ch-1),[lsb,msb],that._parseTimeParameter(options.time))}),this},Output.prototype._parseTimeParameter=function(time){var parsed,value;return"string"==typeof time&&"+"===time.substring(0,1)?(parsed=parseFloat(time),parsed&&parsed>0&&(value=wm.time+parsed)):(parsed=parseFloat(time),parsed>wm.time&&(value=parsed)),value},Output.prototype._convertNoteToArray=function(note){var notes=[];return Array.isArray(note)||(note=[note]),note.forEach(function(item){notes.push(wm.guessNoteNumber(item))}),notes},Output.prototype._convertChannelToArray=function(channel){if(("all"===channel||void 0===channel)&&(channel=["all"]),Array.isArray(channel)||(channel=[channel]),channel.indexOf("all")>-1){channel=[];for(var i=1;16>=i;i++)channel.push(i)}return channel.forEach(function(ch){if(!(ch>=1&&16>=ch))throw new RangeError("MIDI channels must be between 1 and 16.")}),channel},Output.prototype._onMidiMessage=function(e){}, true?!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){return wm}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):"undefined"!=typeof module&&module.exports?module.exports=wm:scope.WebMidi||(scope.WebMidi=wm)}(this);

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.2.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2017-03-20T18:59Z
	 */
	( function( global, factory ) {
	
		"use strict";
	
		if ( typeof module === "object" && typeof module.exports === "object" ) {
	
			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}
	
	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {
	
	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";
	
	var arr = [];
	
	var document = window.document;
	
	var getProto = Object.getPrototypeOf;
	
	var slice = arr.slice;
	
	var concat = arr.concat;
	
	var push = arr.push;
	
	var indexOf = arr.indexOf;
	
	var class2type = {};
	
	var toString = class2type.toString;
	
	var hasOwn = class2type.hasOwnProperty;
	
	var fnToString = hasOwn.toString;
	
	var ObjectFunctionString = fnToString.call( Object );
	
	var support = {};
	
	
	
		function DOMEval( code, doc ) {
			doc = doc || document;
	
			var script = doc.createElement( "script" );
	
			script.text = code;
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module
	
	
	
	var
		version = "3.2.1",
	
		// Define a local copy of jQuery
		jQuery = function( selector, context ) {
	
			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},
	
		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,
	
		// Matches dashed string for camelizing
		rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g,
	
		// Used by jQuery.camelCase as callback to replace()
		fcamelCase = function( all, letter ) {
			return letter.toUpperCase();
		};
	
	jQuery.fn = jQuery.prototype = {
	
		// The current version of jQuery being used
		jquery: version,
	
		constructor: jQuery,
	
		// The default length of a jQuery object is 0
		length: 0,
	
		toArray: function() {
			return slice.call( this );
		},
	
		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {
	
			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}
	
			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},
	
		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {
	
			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );
	
			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;
	
			// Return the newly-formed element set
			return ret;
		},
	
		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},
	
		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},
	
		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},
	
		first: function() {
			return this.eq( 0 );
		},
	
		last: function() {
			return this.eq( -1 );
		},
	
		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},
	
		end: function() {
			return this.prevObject || this.constructor();
		},
	
		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};
	
	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;
	
		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;
	
			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}
	
		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !jQuery.isFunction( target ) ) {
			target = {};
		}
	
		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}
	
		for ( ; i < length; i++ ) {
	
			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {
	
				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];
	
					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}
	
					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = Array.isArray( copy ) ) ) ) {
	
						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && Array.isArray( src ) ? src : [];
	
						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}
	
						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );
	
					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}
	
		// Return the modified object
		return target;
	};
	
	jQuery.extend( {
	
		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),
	
		// Assume jQuery is ready without the ready module
		isReady: true,
	
		error: function( msg ) {
			throw new Error( msg );
		},
	
		noop: function() {},
	
		isFunction: function( obj ) {
			return jQuery.type( obj ) === "function";
		},
	
		isWindow: function( obj ) {
			return obj != null && obj === obj.window;
		},
	
		isNumeric: function( obj ) {
	
			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type( obj );
			return ( type === "number" || type === "string" ) &&
	
				// parseFloat NaNs numeric-cast false positives ("")
				// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
				// subtraction forces infinities to NaN
				!isNaN( obj - parseFloat( obj ) );
		},
	
		isPlainObject: function( obj ) {
			var proto, Ctor;
	
			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}
	
			proto = getProto( obj );
	
			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}
	
			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},
	
		isEmptyObject: function( obj ) {
	
			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;
	
			for ( name in obj ) {
				return false;
			}
			return true;
		},
	
		type: function( obj ) {
			if ( obj == null ) {
				return obj + "";
			}
	
			// Support: Android <=2.3 only (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ?
				class2type[ toString.call( obj ) ] || "object" :
				typeof obj;
		},
	
		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},
	
		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function( string ) {
			return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
		},
	
		each: function( obj, callback ) {
			var length, i = 0;
	
			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}
	
			return obj;
		},
	
		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},
	
		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];
	
			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}
	
			return ret;
		},
	
		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},
	
		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;
	
			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}
	
			first.length = i;
	
			return first;
		},
	
		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;
	
			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}
	
			return matches;
		},
	
		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];
	
			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
	
			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );
	
					if ( value != null ) {
						ret.push( value );
					}
				}
			}
	
			// Flatten any nested arrays
			return concat.apply( [], ret );
		},
	
		// A global GUID counter for objects
		guid: 1,
	
		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function( fn, context ) {
			var tmp, args, proxy;
	
			if ( typeof context === "string" ) {
				tmp = fn[ context ];
				context = fn;
				fn = tmp;
			}
	
			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if ( !jQuery.isFunction( fn ) ) {
				return undefined;
			}
	
			// Simulated bind
			args = slice.call( arguments, 2 );
			proxy = function() {
				return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
			};
	
			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;
	
			return proxy;
		},
	
		now: Date.now,
	
		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );
	
	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}
	
	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );
	
	function isArrayLike( obj ) {
	
		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = jQuery.type( obj );
	
		if ( type === "function" || jQuery.isWindow( obj ) ) {
			return false;
		}
	
		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
	(function( window ) {
	
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,
	
		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,
	
		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},
	
		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},
	
		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",
	
		// Regular expressions
	
		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",
	
		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",
	
		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",
	
		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",
	
		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),
	
		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	
		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),
	
		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),
	
		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},
	
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,
	
		rnative = /^[^{]+\{\s*\[native \w/,
	
		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
	
		rsibling = /[+~]/,
	
		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},
	
		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {
	
				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}
	
				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}
	
			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},
	
		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},
	
		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			},
			{ dir: "parentNode", next: "legend" }
		);
	
	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?
	
			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :
	
			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}
	
	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,
	
			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;
	
		results = results || [];
	
		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {
	
			return results;
		}
	
		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
	
			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;
	
			if ( documentIsHTML ) {
	
				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
	
					// ID selector
					if ( (m = match[1]) ) {
	
						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {
	
								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}
	
						// Element context
						} else {
	
							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {
	
								results.push( elem );
								return results;
							}
						}
	
					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;
	
					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {
	
						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}
	
				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
	
					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;
	
					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {
	
						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}
	
						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );
	
						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}
	
					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}
	
		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}
	
	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];
	
		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}
	
	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}
	
	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");
	
		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}
	
	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;
	
		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}
	
	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;
	
		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}
	
		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}
	
		return a ? 1 : -1;
	}
	
	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {
	
		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {
	
			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {
	
				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {
	
					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}
	
					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||
	
						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							disabledAncestor( elem ) === disabled;
				}
	
				return elem.disabled === disabled;
	
			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}
	
			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}
	
	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;
	
				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}
	
	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}
	
	// Expose support vars for convenience
	support = Sizzle.support = {};
	
	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};
	
	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;
	
		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}
	
		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );
	
		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {
	
			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );
	
			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}
	
		/* Attributes
		---------------------------------------------------------------------- */
	
		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});
	
		/* getElement(s)By*
		---------------------------------------------------------------------- */
	
		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});
	
		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );
	
		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});
	
		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};
	
			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );
	
					if ( elem ) {
	
						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
	
						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}
	
					return [];
				}
			};
		}
	
		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );
	
				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :
	
			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );
	
				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}
	
					return tmp;
				}
				return results;
			};
	
		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};
	
		/* QSA/matchesSelector
		---------------------------------------------------------------------- */
	
		// QSA and matchesSelector support
	
		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];
	
		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];
	
		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";
	
				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}
	
				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}
	
				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}
	
				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}
	
				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});
	
			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";
	
				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );
	
				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}
	
				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}
	
				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}
	
		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {
	
			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );
	
				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}
	
		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );
	
		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );
	
		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};
	
		/* Sorting
		---------------------------------------------------------------------- */
	
		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {
	
			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}
	
			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :
	
				// Otherwise we know they are disconnected
				1;
	
			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {
	
				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}
	
				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}
	
			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}
	
			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];
	
			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
	
			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}
	
			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}
	
			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}
	
			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :
	
				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};
	
		return document;
	};
	
	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};
	
	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );
	
		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {
	
			try {
				var ret = matches.call( elem, expr );
	
				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}
	
		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};
	
	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};
	
	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}
	
		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;
	
		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};
	
	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};
	
	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};
	
	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;
	
		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );
	
		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}
	
		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;
	
		return results;
	};
	
	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;
	
		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	
		return ret;
	};
	
	Expr = Sizzle.selectors = {
	
		// Can be adjusted by the user
		cacheLength: 50,
	
		createPseudo: markFunction,
	
		match: matchExpr,
	
		attrHandle: {},
	
		find: {},
	
		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},
	
		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );
	
				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );
	
				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}
	
				return match.slice( 0, 4 );
			},
	
			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();
	
				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}
	
					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );
	
				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}
	
				return match;
			},
	
			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];
	
				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}
	
				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";
	
				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {
	
					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}
	
				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},
	
		filter: {
	
			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},
	
			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];
	
				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},
	
			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );
	
					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}
	
					result += "";
	
					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},
	
			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";
	
				return first === 1 && last === 0 ?
	
					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :
	
					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;
	
						if ( parent ) {
	
							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {
	
											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}
	
							start = [ forward ? parent.firstChild : parent.lastChild ];
	
							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {
	
								// Seek `elem` from a previously-cached index
	
								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});
	
								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});
	
								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];
	
								while ( (node = ++nodeIndex && node && node[ dir ] ||
	
									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {
	
									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}
	
							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});
	
									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});
	
									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}
	
								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {
	
										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {
	
											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});
	
												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});
	
												uniqueCache[ type ] = [ dirruns, diff ];
											}
	
											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}
	
							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},
	
			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );
	
				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}
	
				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}
	
				return fn;
			}
		},
	
		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );
	
				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;
	
						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),
	
			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),
	
			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),
	
			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {
	
							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),
	
			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},
	
			"root": function( elem ) {
				return elem === docElem;
			},
	
			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},
	
			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),
	
			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},
	
			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}
	
				return elem.selected === true;
			},
	
			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},
	
			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},
	
			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},
	
			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},
	
			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},
	
			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&
	
					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},
	
			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),
	
			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),
	
			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),
	
			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),
	
			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};
	
	Expr.pseudos["nth"] = Expr.pseudos["eq"];
	
	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}
	
	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();
	
	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];
	
		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}
	
		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;
	
		while ( soFar ) {
	
			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}
	
			matched = false;
	
			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}
	
			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}
	
			if ( !matched ) {
				break;
			}
		}
	
		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};
	
	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}
	
	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;
	
		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :
	
			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];
	
				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});
	
							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});
	
							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {
	
								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;
	
								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}
	
	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}
	
	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}
	
	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;
	
		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}
	
		return newUnmatched;
	}
	
	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,
	
				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),
	
				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,
	
				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?
	
						// ...intermediate processing is necessary
						[] :
	
						// ...otherwise use results directly
						results :
					matcherIn;
	
			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}
	
			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );
	
				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}
	
			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}
	
					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {
	
							seed[temp] = !(results[temp] = elem);
						}
					}
				}
	
			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}
	
	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,
	
			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];
	
		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );
	
				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}
	
		return elementMatcher( matchers );
	}
	
	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;
	
				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}
	
				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}
	
					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}
	
						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}
	
				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;
	
				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}
	
					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}
	
						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}
	
					// Add matches to results
					push.apply( results, setMatched );
	
					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {
	
						Sizzle.uniqueSort( results );
					}
				}
	
				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}
	
				return unmatched;
			};
	
		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}
	
	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];
	
		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}
	
			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	
			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};
	
	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );
	
		results = results || [];
	
		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {
	
			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {
	
				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;
	
				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}
	
				selector = selector.slice( tokens.shift().value.length );
			}
	
			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];
	
				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {
	
						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}
	
						break;
					}
				}
			}
		}
	
		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};
	
	// One-time assignments
	
	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;
	
	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;
	
	// Initialize against the default document
	setDocument();
	
	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});
	
	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}
	
	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}
	
	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}
	
	return Sizzle;
	
	})( window );
	
	
	
	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;
	
	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;
	
	
	
	
	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;
	
		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};
	
	
	var siblings = function( n, elem ) {
		var matched = [];
	
		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}
	
		return matched;
	};
	
	
	var rneedsContext = jQuery.expr.match.needsContext;
	
	
	
	function nodeName( elem, name ) {
	
	  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	
	};
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );
	
	
	
	var risSimple = /^.[^:#\[\.,]*$/;
	
	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( jQuery.isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}
	
		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}
	
		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}
	
		// Simple selector that can be filtered directly, removing non-Elements
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}
	
		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter( qualifier, elements );
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not && elem.nodeType === 1;
		} );
	}
	
	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];
	
		if ( not ) {
			expr = ":not(" + expr + ")";
		}
	
		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}
	
		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};
	
	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;
	
			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}
	
			ret = this.pushStack( [] );
	
			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}
	
			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,
	
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );
	
	
	// Initialize a jQuery object
	
	
	// A central reference to the root jQuery(document)
	var rootjQuery,
	
		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	
		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;
	
			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}
	
			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;
	
			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {
	
					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];
	
				} else {
					match = rquickExpr.exec( selector );
				}
	
				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {
	
					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;
	
						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );
	
						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {
	
								// Properties of context are called as methods if possible
								if ( jQuery.isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );
	
								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}
	
						return this;
	
					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );
	
						if ( elem ) {
	
							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}
	
				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );
	
				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}
	
			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;
	
			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( jQuery.isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :
	
					// Execute immediately if ready is not present
					selector( jQuery );
			}
	
			return jQuery.makeArray( selector, this );
		};
	
	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;
	
	// Initialize central reference
	rootjQuery = jQuery( document );
	
	
	var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	
		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};
	
	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;
	
			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},
	
		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );
	
			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {
	
						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :
	
							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {
	
							matched.push( cur );
							break;
						}
					}
				}
			}
	
			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},
	
		// Determine the position of an element within the set
		index: function( elem ) {
	
			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}
	
			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}
	
			// Locate the position of the desired element
			return indexOf.call( this,
	
				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},
	
		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},
	
		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );
	
	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}
	
	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
	        if ( nodeName( elem, "iframe" ) ) {
	            return elem.contentDocument;
	        }
	
	        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
	        // Treat the template element as a regular one in browsers that
	        // don't support it.
	        if ( nodeName( elem, "template" ) ) {
	            elem = elem.content || elem;
	        }
	
	        return jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );
	
			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}
	
			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}
	
			if ( this.length > 1 ) {
	
				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}
	
				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}
	
			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );
	
	
	
	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}
	
	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {
	
		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );
	
		var // Flag to know if list is currently firing
			firing,
	
			// Last fire value for non-forgettable lists
			memory,
	
			// Flag to know if list was already fired
			fired,
	
			// Flag to prevent firing
			locked,
	
			// Actual callback list
			list = [],
	
			// Queue of execution data for repeatable lists
			queue = [],
	
			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,
	
			// Fire callbacks
			fire = function() {
	
				// Enforce single-firing
				locked = locked || options.once;
	
				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {
	
						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {
	
							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}
	
				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}
	
				firing = false;
	
				// Clean up if we're done firing for good
				if ( locked ) {
	
					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];
	
					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},
	
			// Actual Callbacks object
			self = {
	
				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {
	
						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}
	
						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( jQuery.isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && jQuery.type( arg ) !== "string" ) {
	
									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );
	
						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
	
							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},
	
				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},
	
				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},
	
				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},
	
				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},
	
				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},
	
				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},
	
				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};
	
		return self;
	};
	
	
	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}
	
	function adoptValue( value, resolve, reject, noValue ) {
		var method;
	
		try {
	
			// Check for promise aspect first to privilege synchronous behavior
			if ( value && jQuery.isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );
	
			// Other thenables
			} else if ( value && jQuery.isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );
	
			// Other non-thenables
			} else {
	
				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply( undefined, [ value ].slice( noValue ) );
			}
	
		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {
	
			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply( undefined, [ value ] );
		}
	}
	
	jQuery.extend( {
	
		Deferred: function( func ) {
			var tuples = [
	
					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},
	
					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;
	
						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {
	
								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = jQuery.isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];
	
								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;
	
										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}
	
										returned = handler.apply( that, args );
	
										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}
	
										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&
	
											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;
	
										// Handle a returned thenable
										if ( jQuery.isFunction( then ) ) {
	
											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);
	
											// Normal processors (resolve) also hook into progress
											} else {
	
												// ...and disregard older resolution values
												maxDepth++;
	
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}
	
										// Handle all other returned values
										} else {
	
											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}
	
											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},
	
									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {
	
												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}
	
												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {
	
													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}
	
													deferred.rejectWith( that, args );
												}
											}
										};
	
								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {
	
									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}
	
						return jQuery.Deferred( function( newDefer ) {
	
							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);
	
							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);
	
							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									jQuery.isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},
	
					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};
	
			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];
	
				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;
	
				// Handle state
				if ( stateString ) {
					list.add(
						function() {
	
							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},
	
						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,
	
						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock
					);
				}
	
				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );
	
				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};
	
				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );
	
			// Make the deferred a promise
			promise.promise( deferred );
	
			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}
	
			// All done!
			return deferred;
		},
	
		// Deferred helper
		when: function( singleValue ) {
			var
	
				// count of uncompleted subordinates
				remaining = arguments.length,
	
				// count of unprocessed arguments
				i = remaining,
	
				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),
	
				// the master Deferred
				master = jQuery.Deferred(),
	
				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};
	
			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
					!remaining );
	
				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					jQuery.isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {
	
					return master.then();
				}
			}
	
			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}
	
			return master.promise();
		}
	} );
	
	
	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;
	
	jQuery.Deferred.exceptionHook = function( error, stack ) {
	
		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};
	
	
	
	
	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};
	
	
	
	
	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();
	
	jQuery.fn.ready = function( fn ) {
	
		readyList
			.then( fn )
	
			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );
	
		return this;
	};
	
	jQuery.extend( {
	
		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,
	
		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,
	
		// Handle when the DOM is ready
		ready: function( wait ) {
	
			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}
	
			// Remember that the DOM is ready
			jQuery.isReady = true;
	
			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}
	
			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );
	
	jQuery.ready.then = readyList.then;
	
	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}
	
	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {
	
		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );
	
	} else {
	
		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );
	
		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}
	
	
	
	
	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;
	
		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}
	
		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;
	
			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}
	
			if ( bulk ) {
	
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;
	
				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}
	
			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}
	
		if ( chainable ) {
			return elems;
		}
	
		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}
	
		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};
	var acceptData = function( owner ) {
	
		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};
	
	
	
	
	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}
	
	Data.uid = 1;
	
	Data.prototype = {
	
		cache: function( owner ) {
	
			// Check if the owner object already has a cache
			var value = owner[ this.expando ];
	
			// If not, create one
			if ( !value ) {
				value = {};
	
				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {
	
					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;
	
					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}
	
			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );
	
			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ jQuery.camelCase( data ) ] = value;
	
			// Handle: [ owner, { properties } ] args
			} else {
	
				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ jQuery.camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :
	
				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ jQuery.camelCase( key ) ];
		},
		access: function( owner, key, value ) {
	
			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {
	
				return this.get( owner, key );
			}
	
			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );
	
			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];
	
			if ( cache === undefined ) {
				return;
			}
	
			if ( key !== undefined ) {
	
				// Support array or space separated string of keys
				if ( Array.isArray( key ) ) {
	
					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( jQuery.camelCase );
				} else {
					key = jQuery.camelCase( key );
	
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}
	
				i = key.length;
	
				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}
	
			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {
	
				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();
	
	var dataUser = new Data();
	
	
	
	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014
	
	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;
	
	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}
	
		if ( data === "false" ) {
			return false;
		}
	
		if ( data === "null" ) {
			return null;
		}
	
		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}
	
		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}
	
		return data;
	}
	
	function dataAttr( elem, key, data ) {
		var name;
	
		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );
	
			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}
	
				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}
	
	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},
	
		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},
	
		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},
	
		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},
	
		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );
	
	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;
	
			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );
	
					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {
	
							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = jQuery.camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}
	
				return data;
			}
	
			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}
	
			return access( this, function( value ) {
				var data;
	
				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {
	
					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}
	
					// We tried really hard, but the data doesn't exist.
					return;
				}
	
				// Set the data...
				this.each( function() {
	
					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},
	
		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );
	
	
	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;
	
			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );
	
				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || Array.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},
	
		dequeue: function( elem, type ) {
			type = type || "fx";
	
			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};
	
			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}
	
			if ( fn ) {
	
				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}
	
				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}
	
			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},
	
		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );
	
	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;
	
			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}
	
			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}
	
			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );
	
					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );
	
					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},
	
		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};
	
			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";
	
			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;
	
	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );
	
	
	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];
	
	var isHiddenWithinTree = function( elem, el ) {
	
			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;
	
			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&
	
				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&
	
				jQuery.css( elem, "display" ) === "none";
		};
	
	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};
	
		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}
	
		ret = callback.apply( elem, args || [] );
	
		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}
	
		return ret;
	};
	
	
	
	
	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted,
			scale = 1,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),
	
			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );
	
		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {
	
			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];
	
			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
	
			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;
	
			do {
	
				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";
	
				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style( elem, prop, initialInUnit + unit );
	
			// Update scale, tolerating zero or NaN from tween.cur()
			// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (
				scale !== ( scale = currentValue() / initial ) && scale !== 1 && --maxIterations
			);
		}
	
		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;
	
			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}
	
	
	var defaultDisplayMap = {};
	
	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];
	
		if ( display ) {
			return display;
		}
	
		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );
	
		temp.parentNode.removeChild( temp );
	
		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;
	
		return display;
	}
	
	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;
	
		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}
	
			display = elem.style.display;
			if ( show ) {
	
				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";
	
					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}
	
		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}
	
		return elements;
	}
	
	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}
	
			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );
	
	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );
	
	var rscriptType = ( /^$|\/(?:java|ecma)script/i );
	
	
	
	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {
	
		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
	
		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
	
		_default: [ 0, "", "" ]
	};
	
	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;
	
	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;
	
	
	function getAll( context, tag ) {
	
		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;
	
		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );
	
		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );
	
		} else {
			ret = [];
		}
	
		if ( tag === undefined || tag && nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}
	
		return ret;
	}
	
	
	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}
	
	
	var rhtml = /<|&#?\w+;/;
	
	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;
	
		for ( ; i < l; i++ ) {
			elem = elems[ i ];
	
			if ( elem || elem === 0 ) {
	
				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
	
					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );
	
				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );
	
				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );
	
					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];
	
					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}
	
					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );
	
					// Remember the top-level container
					tmp = fragment.firstChild;
	
					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}
	
		// Remove wrapper from fragment
		fragment.textContent = "";
	
		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {
	
			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}
	
			contains = jQuery.contains( elem.ownerDocument, elem );
	
			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );
	
			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}
	
			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}
	
		return fragment;
	}
	
	
	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );
	
		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );
	
		div.appendChild( input );
	
		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;
	
		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;
	
	
	
	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;
	
	function returnTrue() {
		return true;
	}
	
	function returnFalse() {
		return false;
	}
	
	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}
	
	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;
	
		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
	
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
	
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}
	
		if ( data == null && fn == null ) {
	
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
	
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
	
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}
	
		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
	
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
	
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}
	
	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {
	
		global: {},
	
		add: function( elem, types, handler, data, selector ) {
	
			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );
	
			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}
	
			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}
	
			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}
	
			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}
	
			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {
	
					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}
	
			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}
	
				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};
	
				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;
	
				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};
	
				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );
	
				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;
	
					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
	
						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}
	
				if ( special.add ) {
					special.add.call( elem, handleObj );
	
					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}
	
				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}
	
				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}
	
		},
	
		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {
	
			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );
	
			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}
	
			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();
	
				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}
	
				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );
	
				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];
	
					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );
	
						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}
	
				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
	
						jQuery.removeEvent( elem, type, elemData.handle );
					}
	
					delete events[ type ];
				}
			}
	
			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},
	
		dispatch: function( nativeEvent ) {
	
			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );
	
			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};
	
			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;
	
			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}
	
			event.delegateTarget = this;
	
			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}
	
			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );
	
			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;
	
				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {
	
					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {
	
						event.handleObj = handleObj;
						event.data = handleObj.data;
	
						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );
	
						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}
	
			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}
	
			return event.result;
		},
	
		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;
	
			// Find delegate handlers
			if ( delegateCount &&
	
				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&
	
				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {
	
				for ( ; cur !== this; cur = cur.parentNode || this ) {
	
					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];
	
							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";
	
							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}
	
			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}
	
			return handlerQueue;
		},
	
		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,
	
				get: jQuery.isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},
	
				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},
	
		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},
	
		special: {
			load: {
	
				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {
	
				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {
	
				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},
	
				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return nodeName( event.target, "a" );
				}
			},
	
			beforeunload: {
				postDispatch: function( event ) {
	
					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};
	
	jQuery.removeEvent = function( elem, type, handle ) {
	
		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};
	
	jQuery.Event = function( src, props ) {
	
		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}
	
		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;
	
			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&
	
					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;
	
			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;
	
			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;
	
		// Event type
		} else {
			this.type = src;
		}
	
		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}
	
		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();
	
		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};
	
	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,
	
		preventDefault: function() {
			var e = this.originalEvent;
	
			this.isDefaultPrevented = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;
	
			this.isPropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;
	
			this.isImmediatePropagationStopped = returnTrue;
	
			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}
	
			this.stopPropagation();
		}
	};
	
	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,
	
		which: function( event ) {
			var button = event.button;
	
			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}
	
			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}
	
				if ( button & 2 ) {
					return 3;
				}
	
				if ( button & 4 ) {
					return 2;
				}
	
				return 0;
			}
	
			return event.which;
		}
	}, jQuery.event.addProp );
	
	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,
	
			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;
	
				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );
	
	jQuery.fn.extend( {
	
		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {
	
				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {
	
				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {
	
				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );
	
	
	var
	
		/* eslint-disable max-len */
	
		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,
	
		/* eslint-enable */
	
		// Support: IE <=10 - 11, Edge 12 - 13
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,
	
		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rscriptTypeMasked = /^true\/(.*)/,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;
	
	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget( elem, content ) {
		if ( nodeName( elem, "table" ) &&
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {
	
			return jQuery( ">tbody", elem )[ 0 ] || elem;
		}
	
		return elem;
	}
	
	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		var match = rscriptTypeMasked.exec( elem.type );
	
		if ( match ) {
			elem.type = match[ 1 ];
		} else {
			elem.removeAttribute( "type" );
		}
	
		return elem;
	}
	
	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;
	
		if ( dest.nodeType !== 1 ) {
			return;
		}
	
		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;
	
			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};
	
				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}
	
		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );
	
			dataUser.set( dest, udataCur );
		}
	}
	
	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();
	
		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;
	
		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}
	
	function domManip( collection, args, callback, ignored ) {
	
		// Flatten any nested arrays
		args = concat.apply( [], args );
	
		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );
	
		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}
	
		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;
	
			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}
	
			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;
	
				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;
	
					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );
	
						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
	
							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}
	
					callback.call( collection[ i ], node, i );
				}
	
				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;
	
					// Reenable scripts
					jQuery.map( scripts, restoreScript );
	
					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {
	
							if ( node.src ) {
	
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc );
							}
						}
					}
				}
			}
		}
	
		return collection;
	}
	
	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;
	
		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}
	
			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}
	
		return elem;
	}
	
	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},
	
		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );
	
			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {
	
				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );
	
				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}
	
			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );
	
					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}
	
			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}
	
			// Return the cloned set
			return clone;
		},
	
		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;
	
			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );
	
								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}
	
						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {
	
						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );
	
	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},
	
		remove: function( selector ) {
			return remove( this, selector );
		},
	
		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},
	
		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},
	
		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},
	
		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},
	
		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},
	
		empty: function() {
			var elem,
				i = 0;
	
			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {
	
					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );
	
					// Remove any remaining nodes
					elem.textContent = "";
				}
			}
	
			return this;
		},
	
		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;
	
			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},
	
		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;
	
				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}
	
				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {
	
					value = jQuery.htmlPrefilter( value );
	
					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};
	
							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}
	
						elem = 0;
	
					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}
	
				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},
	
		replaceWith: function() {
			var ignored = [];
	
			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;
	
				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}
	
			// Force callback invocation
			}, ignored );
		}
	} );
	
	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;
	
			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );
	
				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}
	
			return this.pushStack( ret );
		};
	} );
	var rmargin = ( /^margin/ );
	
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );
	
	var getStyles = function( elem ) {
	
			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;
	
			if ( !view || !view.opener ) {
				view = window;
			}
	
			return view.getComputedStyle( elem );
		};
	
	
	
	( function() {
	
		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {
	
			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}
	
			div.style.cssText =
				"box-sizing:border-box;" +
				"position:relative;display:block;" +
				"margin:auto;border:1px;padding:1px;" +
				"top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild( container );
	
			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";
	
			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";
	
			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";
	
			documentElement.removeChild( container );
	
			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}
	
		var pixelPositionVal, boxSizingReliableVal, pixelMarginRightVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );
	
		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}
	
		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";
	
		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" +
			"padding:0;margin-top:1px;position:absolute";
		container.appendChild( div );
	
		jQuery.extend( support, {
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		} );
	} )();
	
	
	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,
	
			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;
	
		computed = computed || getStyles( elem );
	
		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];
	
			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}
	
			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelMarginRight() && rnumnonpx.test( ret ) && rmargin.test( name ) ) {
	
				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;
	
				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;
	
				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}
	
		return ret !== undefined ?
	
			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}
	
	
	function addGetHookIf( conditionFn, hookFn ) {
	
		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {
	
					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}
	
				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}
	
	
	var
	
		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rcustomProp = /^--/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},
	
		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;
	
	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {
	
		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}
	
		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;
	
		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}
	
	// Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.
	function finalPropName( name ) {
		var ret = jQuery.cssProps[ name ];
		if ( !ret ) {
			ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
		}
		return ret;
	}
	
	function setPositiveNumber( elem, value, subtract ) {
	
		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?
	
			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}
	
	function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
		var i,
			val = 0;
	
		// If we already have the right measurement, avoid augmentation
		if ( extra === ( isBorderBox ? "border" : "content" ) ) {
			i = 4;
	
		// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}
	
		for ( ; i < 4; i += 2 ) {
	
			// Both box models exclude margin, so add it if we want it
			if ( extra === "margin" ) {
				val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
			}
	
			if ( isBorderBox ) {
	
				// border-box includes padding, so remove it if we want content
				if ( extra === "content" ) {
					val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}
	
				// At this point, extra isn't border nor margin, so remove border
				if ( extra !== "margin" ) {
					val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			} else {
	
				// At this point, extra isn't content, so add padding
				val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
	
				// At this point, extra isn't content nor padding, so add border
				if ( extra !== "padding" ) {
					val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}
	
		return val;
	}
	
	function getWidthOrHeight( elem, name, extra ) {
	
		// Start with computed style
		var valueIsBorderBox,
			styles = getStyles( elem ),
			val = curCSS( elem, name, styles ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";
	
		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test( val ) ) {
			return val;
		}
	
		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );
	
		// Fall back to offsetWidth/Height when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		if ( val === "auto" ) {
			val = elem[ "offset" + name[ 0 ].toUpperCase() + name.slice( 1 ) ];
		}
	
		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	
		// Use the active box-sizing model to add/subtract irrelevant styles
		return ( val +
			augmentWidthOrHeight(
				elem,
				name,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles
			)
		) + "px";
	}
	
	jQuery.extend( {
	
		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {
	
						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},
	
		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},
	
		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},
	
		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {
	
			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}
	
			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = jQuery.camelCase( name ),
				isCustomProp = rcustomProp.test( name ),
				style = elem.style;
	
			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}
	
			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;
	
				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );
	
					// Fixes bug #9237
					type = "number";
				}
	
				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}
	
				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}
	
				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}
	
				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {
	
					if ( isCustomProp ) {
						style.setProperty( name, value );
					} else {
						style[ name ] = value;
					}
				}
	
			} else {
	
				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {
	
					return ret;
				}
	
				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},
	
		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = jQuery.camelCase( name ),
				isCustomProp = rcustomProp.test( name );
	
			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}
	
			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];
	
			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}
	
			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}
	
			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}
	
			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}
	
			return val;
		}
	} );
	
	jQuery.each( [ "height", "width" ], function( i, name ) {
		jQuery.cssHooks[ name ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {
	
					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&
	
						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, name, extra );
							} ) :
							getWidthOrHeight( elem, name, extra );
				}
			},
	
			set: function( elem, value, extra ) {
				var matches,
					styles = extra && getStyles( elem ),
					subtract = extra && augmentWidthOrHeight(
						elem,
						name,
						extra,
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
						styles
					);
	
				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {
	
					elem.style[ name ] = value;
					value = jQuery.css( elem, name );
				}
	
				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );
	
	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);
	
	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},
	
					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];
	
				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}
	
				return expanded;
			}
		};
	
		if ( !rmargin.test( prefix ) ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );
	
	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;
	
				if ( Array.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;
	
					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}
	
					return map;
				}
	
				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );
	
	
	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;
	
	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];
	
			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];
	
			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;
	
			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}
	
			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};
	
	Tween.prototype.init.prototype = Tween.prototype;
	
	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;
	
				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}
	
				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );
	
				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {
	
				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};
	
	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};
	
	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};
	
	jQuery.fx = Tween.prototype.init;
	
	// Back compat <1.8 extension point
	jQuery.fx.step = {};
	
	
	
	
	var
		fxNow, inProgress,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;
	
	function schedule() {
		if ( inProgress ) {
			if ( document.hidden === false && window.requestAnimationFrame ) {
				window.requestAnimationFrame( schedule );
			} else {
				window.setTimeout( schedule, jQuery.fx.interval );
			}
	
			jQuery.fx.tick();
		}
	}
	
	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = jQuery.now() );
	}
	
	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };
	
		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}
	
		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}
	
		return attrs;
	}
	
	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {
	
				// We're done with this property
				return tween;
			}
		}
	}
	
	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );
	
		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;
	
			anim.always( function() {
	
				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}
	
		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {
	
					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;
	
					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}
	
		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}
	
		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {
	
			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];
	
			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {
	
					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}
	
			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {
	
					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}
	
		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}
	
		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {
	
			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}
	
				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}
	
				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}
	
				/* eslint-disable no-loop-func */
	
				anim.done( function() {
	
				/* eslint-enable no-loop-func */
	
					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}
	
			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}
	
	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;
	
		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = jQuery.camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( Array.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}
	
			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}
	
			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];
	
				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}
	
	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {
	
				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
	
					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;
	
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}
	
				deferred.notifyWith( elem, [ animation, percent, remaining ] );
	
				// If there's more to do, yield
				if ( percent < 1 && length ) {
					return remaining;
				}
	
				// If this was an empty animation, synthesize a final progress notification
				if ( !length ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
				}
	
				// Resolve the animation and report its conclusion
				deferred.resolveWith( elem, [ animation ] );
				return false;
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,
	
						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}
	
					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;
	
		propFilter( props, animation.opts.specialEasing );
	
		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( jQuery.isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						jQuery.proxy( result.stop, result );
				}
				return result;
			}
		}
	
		jQuery.map( props, createTween, animation );
	
		if ( jQuery.isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}
	
		// Attach callbacks from options
		animation
			.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );
	
		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);
	
		return animation;
	}
	
	jQuery.Animation = jQuery.extend( Animation, {
	
		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},
	
		tweener: function( props, callback ) {
			if ( jQuery.isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}
	
			var prop,
				index = 0,
				length = props.length;
	
			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},
	
		prefilters: [ defaultPrefilter ],
	
		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );
	
	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				jQuery.isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
		};
	
		// Go to the end state if fx are off
		if ( jQuery.fx.off ) {
			opt.duration = 0;
	
		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];
	
				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}
	
		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}
	
		// Queueing
		opt.old = opt.complete;
	
		opt.complete = function() {
			if ( jQuery.isFunction( opt.old ) ) {
				opt.old.call( this );
			}
	
			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};
	
		return opt;
	};
	
	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {
	
			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()
	
				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {
	
					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );
	
					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;
	
			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};
	
			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}
	
			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );
	
				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}
	
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {
	
						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}
	
				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;
	
				// Enable finishing flag on private data
				data.finish = true;
	
				// Empty the queue first
				jQuery.queue( this, type, [] );
	
				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}
	
				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}
	
				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}
	
				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );
	
	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );
	
	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );
	
	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;
	
		fxNow = jQuery.now();
	
		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];
	
			// Run the timer and safely remove it when done (allowing for external removal)
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}
	
		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};
	
	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		jQuery.fx.start();
	};
	
	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( inProgress ) {
			return;
		}
	
		inProgress = true;
		schedule();
	};
	
	jQuery.fx.stop = function() {
		inProgress = null;
	};
	
	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,
	
		// Default speed
		_default: 400
	};
	
	
	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";
	
		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};
	
	
	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );
	
		input.type = "checkbox";
	
		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";
	
		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;
	
		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();
	
	
	var boolHook,
		attrHandle = jQuery.expr.attrHandle;
	
	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},
	
		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );
	
	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}
	
			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}
	
			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}
	
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				elem.setAttribute( name, value + "" );
				return value;
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			ret = jQuery.find.attr( elem, name );
	
			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},
	
		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},
	
		removeAttr: function( elem, value ) {
			var name,
				i = 0,
	
				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );
	
			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );
	
	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {
	
				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};
	
	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;
	
		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();
	
			if ( !isXML ) {
	
				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );
	
	
	
	
	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;
	
	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},
	
		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );
	
	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;
	
			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}
	
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
	
				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}
	
			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}
	
				return ( elem[ name ] = value );
			}
	
			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}
	
			return elem[ name ];
		},
	
		propHooks: {
			tabIndex: {
				get: function( elem ) {
	
					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );
	
					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}
	
					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}
	
					return -1;
				}
			}
		},
	
		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );
	
	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {
	
				/* eslint no-unused-expressions: "off" */
	
				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {
	
				/* eslint no-unused-expressions: "off" */
	
				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;
	
					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}
	
	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );
	
	
	
	
		// Strip and collapse whitespace according to HTML spec
		// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}
	
	
	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}
	
	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}
	
			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}
	
			if ( typeof value === "string" && value ) {
				classes = value.match( rnothtmlwhite ) || [];
	
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
	
					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );
	
					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
	
							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}
	
						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}
	
			return this;
		},
	
		toggleClass: function( value, stateVal ) {
			var type = typeof value;
	
			if ( typeof stateVal === "boolean" && type === "string" ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}
	
			if ( jQuery.isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}
	
			return this.each( function() {
				var className, i, self, classNames;
	
				if ( type === "string" ) {
	
					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = value.match( rnothtmlwhite ) || [];
	
					while ( ( className = classNames[ i++ ] ) ) {
	
						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}
	
				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {
	
						// Store className if set
						dataPriv.set( this, "__className__", className );
					}
	
					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},
	
		hasClass: function( selector ) {
			var className, elem,
				i = 0;
	
			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}
	
			return false;
		}
	} );
	
	
	
	
	var rreturn = /\r/g;
	
	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, isFunction,
				elem = this[ 0 ];
	
			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];
	
					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}
	
					ret = elem.value;
	
					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}
	
					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}
	
				return;
			}
	
			isFunction = jQuery.isFunction( value );
	
			return this.each( function( i ) {
				var val;
	
				if ( this.nodeType !== 1 ) {
					return;
				}
	
				if ( isFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}
	
				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";
	
				} else if ( typeof val === "number" ) {
					val += "";
	
				} else if ( Array.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}
	
				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];
	
				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );
	
	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {
	
					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :
	
						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;
	
					if ( index < 0 ) {
						i = max;
	
					} else {
						i = one ? index : 0;
					}
	
					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];
	
						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&
	
								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!nodeName( option.parentNode, "optgroup" ) ) ) {
	
							// Get the specific value for the option
							value = jQuery( option ).val();
	
							// We don't need an array for one selects
							if ( one ) {
								return value;
							}
	
							// Multi-Selects return an array
							values.push( value );
						}
					}
	
					return values;
				},
	
				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;
	
					while ( i-- ) {
						option = options[ i ];
	
						/* eslint-disable no-cond-assign */
	
						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}
	
						/* eslint-enable no-cond-assign */
					}
	
					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );
	
	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( Array.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );
	
	
	
	
	// Return jQuery for attributes-only inclusion
	
	
	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;
	
	jQuery.extend( jQuery.event, {
	
		trigger: function( event, data, elem, onlyHandlers ) {
	
			var i, cur, tmp, bubbleType, ontype, handle, special,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];
	
			cur = tmp = elem = elem || document;
	
			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}
	
			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}
	
			if ( type.indexOf( "." ) > -1 ) {
	
				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;
	
			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );
	
			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;
	
			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}
	
			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );
	
			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}
	
			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {
	
				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}
	
				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}
	
			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
	
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;
	
				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}
	
				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;
	
			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {
	
				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {
	
					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {
	
						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];
	
						if ( tmp ) {
							elem[ ontype ] = null;
						}
	
						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[ type ]();
						jQuery.event.triggered = undefined;
	
						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}
	
			return event.result;
		},
	
		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);
	
			jQuery.event.trigger( e, null, elem );
		}
	
	} );
	
	jQuery.fn.extend( {
	
		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );
	
	
	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {
	
		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );
	
	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );
	
	
	
	
	support.focusin = "onfocusin" in window;
	
	
	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {
	
			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};
	
			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );
	
					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;
	
					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );
	
					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;
	
	var nonce = jQuery.now();
	
	var rquery = ( /\?/ );
	
	
	
	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
	
		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}
	
		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};
	
	
	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;
	
	function buildParams( prefix, obj, traditional, add ) {
		var name;
	
		if ( Array.isArray( obj ) ) {
	
			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {
	
					// Treat each array item as a scalar.
					add( prefix, v );
	
				} else {
	
					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );
	
		} else if ( !traditional && jQuery.type( obj ) === "object" ) {
	
			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}
	
		} else {
	
			// Serialize scalar item.
			add( prefix, obj );
		}
	}
	
	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {
	
				// If value is a function, invoke it and use its return value
				var value = jQuery.isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;
	
				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};
	
		// If an array was passed in, assume that it is an array of form elements.
		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
	
			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );
	
		} else {
	
			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}
	
		// Return the resulting serialization
		return s.join( "&" );
	};
	
	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {
	
				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;
	
				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();
	
				if ( val == null ) {
					return null;
				}
	
				if ( Array.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}
	
				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );
	
	
	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	
		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,
	
		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},
	
		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},
	
		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),
	
		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;
	
	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {
	
		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {
	
			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}
	
			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];
	
			if ( jQuery.isFunction( func ) ) {
	
				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {
	
					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );
	
					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}
	
	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {
	
		var inspected = {},
			seekingTransport = ( structure === transports );
	
		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {
	
					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}
	
		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}
	
	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};
	
		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}
	
		return target;
	}
	
	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {
	
		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;
	
		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}
	
		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}
	
		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {
	
			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}
	
			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}
	
		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}
	
	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},
	
			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();
	
		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}
	
		current = dataTypes.shift();
	
		// Convert to each sequential dataType
		while ( current ) {
	
			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}
	
			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}
	
			prev = current;
			current = dataTypes.shift();
	
			if ( current ) {
	
				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {
	
					current = prev;
	
				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {
	
					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];
	
					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {
	
							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {
	
								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {
	
									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];
	
									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}
	
					// Apply converter (if not an equivalence)
					if ( conv !== true ) {
	
						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}
	
		return { state: "success", data: response };
	}
	
	jQuery.extend( {
	
		// Counter for holding the number of active queries
		active: 0,
	
		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},
	
		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",
	
			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/
	
			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},
	
			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},
	
			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},
	
			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {
	
				// Convert anything to text
				"* text": String,
	
				// Text to html (true = no transformation)
				"text html": true,
	
				// Evaluate text as a json expression
				"text json": JSON.parse,
	
				// Parse text as xml
				"text xml": jQuery.parseXML
			},
	
			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},
	
		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?
	
				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :
	
				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},
	
		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),
	
		// Main method
		ajax: function( url, options ) {
	
			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}
	
			// Force options to be an object
			options = options || {};
	
			var transport,
	
				// URL without anti-cache param
				cacheURL,
	
				// Response headers
				responseHeadersString,
				responseHeaders,
	
				// timeout handle
				timeoutTimer,
	
				// Url cleanup var
				urlAnchor,
	
				// Request state (becomes false upon send and true upon completion)
				completed,
	
				// To know if global events are to be dispatched
				fireGlobals,
	
				// Loop variable
				i,
	
				// uncached part of the url
				uncached,
	
				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),
	
				// Callbacks context
				callbackContext = s.context || s,
	
				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,
	
				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),
	
				// Status-dependent callbacks
				statusCode = s.statusCode || {},
	
				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},
	
				// Default abort message
				strAbort = "canceled",
	
				// Fake xhr
				jqXHR = {
					readyState: 0,
	
					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},
	
					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},
	
					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},
	
					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},
	
					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {
	
								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {
	
								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},
	
					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};
	
			// Attach deferreds
			deferred.promise( jqXHR );
	
			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );
	
			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;
	
			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];
	
			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );
	
				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;
	
					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {
	
					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}
	
			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}
	
			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );
	
			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}
	
			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;
	
			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}
	
			// Uppercase the type
			s.type = s.type.toUpperCase();
	
			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );
	
			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );
	
			// More options handling for requests with no content
			if ( !s.hasContent ) {
	
				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );
	
				// If data is available, append data to url
				if ( s.data ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;
	
					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}
	
				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}
	
				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;
	
			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}
	
			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}
	
			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}
	
			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);
	
			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}
	
			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {
	
				// Abort if not done already and return
				return jqXHR.abort();
			}
	
			// Aborting is no longer a cancellation
			strAbort = "abort";
	
			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );
	
			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );
	
			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;
	
				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}
	
				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}
	
				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}
	
				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {
	
					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}
	
					// Propagate others as results
					done( -1, e );
				}
			}
	
			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;
	
				// Ignore repeat invocations
				if ( completed ) {
					return;
				}
	
				completed = true;
	
				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}
	
				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;
	
				// Cache response headers
				responseHeadersString = headers || "";
	
				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;
	
				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;
	
				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}
	
				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );
	
				// If successful, handle type chaining
				if ( isSuccess ) {
	
					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}
	
					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";
	
					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";
	
					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {
	
					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}
	
				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";
	
				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}
	
				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;
	
				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}
	
				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );
	
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
	
					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}
	
			return jqXHR;
		},
	
		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},
	
		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );
	
	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {
	
			// Shift arguments if data argument was omitted
			if ( jQuery.isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}
	
			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );
	
	
	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,
	
			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};
	
	
	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;
	
			if ( this[ 0 ] ) {
				if ( jQuery.isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}
	
				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );
	
				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}
	
				wrap.map( function() {
					var elem = this;
	
					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}
	
					return elem;
				} ).append( this );
			}
	
			return this;
		},
	
		wrapInner: function( html ) {
			if ( jQuery.isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}
	
			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();
	
				if ( contents.length ) {
					contents.wrapAll( html );
	
				} else {
					self.append( html );
				}
			} );
		},
	
		wrap: function( html ) {
			var isFunction = jQuery.isFunction( html );
	
			return this.each( function( i ) {
				jQuery( this ).wrapAll( isFunction ? html.call( this, i ) : html );
			} );
		},
	
		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );
	
	
	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};
	
	
	
	
	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};
	
	var xhrSuccessStatus = {
	
			// File protocol always yields status code 0, assume 200
			0: 200,
	
			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();
	
	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;
	
	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;
	
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();
	
					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);
	
					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}
	
					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}
	
					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}
	
					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}
	
					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;
	
								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {
	
									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(
	
											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,
	
										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};
	
					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback( "error" );
	
					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {
	
							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {
	
								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}
	
					// Create the abort callback
					callback = callback( "abort" );
	
					try {
	
						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {
	
						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},
	
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );
	
	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );
	
	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );
	
	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {
	
		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);
	
					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );
	
	
	
	
	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;
	
	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );
	
	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {
	
		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);
	
		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {
	
			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;
	
			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}
	
			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};
	
			// Force json dataType
			s.dataTypes[ 0 ] = "json";
	
			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};
	
			// Clean-up function (fires after converters)
			jqXHR.always( function() {
	
				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );
	
				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}
	
				// Save back as free
				if ( s[ callbackName ] ) {
	
					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;
	
					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}
	
				// Call if it was a function and we have a response
				if ( responseContainer && jQuery.isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}
	
				responseContainer = overwritten = undefined;
			} );
	
			// Delegate to script
			return "script";
		}
	} );
	
	
	
	
	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();
	
	
	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
	
		var base, parsed, scripts;
	
		if ( !context ) {
	
			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );
	
				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}
	
		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];
	
		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}
	
		parsed = buildFragment( [ data ], context, scripts );
	
		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}
	
		return jQuery.merge( [], parsed.childNodes );
	};
	
	
	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );
	
		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}
	
		// If it's a function
		if ( jQuery.isFunction( params ) ) {
	
			// We assume that it's the callback
			callback = params;
			params = undefined;
	
		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}
	
		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,
	
				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {
	
				// Save response for use in complete callback
				response = arguments;
	
				self.html( selector ?
	
					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :
	
					// Otherwise use the full result
					responseText );
	
			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}
	
		return this;
	};
	
	
	
	
	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );
	
	
	
	
	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};
	
	
	
	
	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};
	
			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}
	
			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;
	
			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
	
			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}
	
			if ( jQuery.isFunction( options ) ) {
	
				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}
	
			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}
	
			if ( "using" in options ) {
				options.using.call( elem, props );
	
			} else {
				curElem.css( props );
			}
		}
	};
	
	jQuery.fn.extend( {
		offset: function( options ) {
	
			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}
	
			var doc, docElem, rect, win,
				elem = this[ 0 ];
	
			if ( !elem ) {
				return;
			}
	
			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}
	
			rect = elem.getBoundingClientRect();
	
			doc = elem.ownerDocument;
			docElem = doc.documentElement;
			win = doc.defaultView;
	
			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		},
	
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}
	
			var offsetParent, offset,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };
	
			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if ( jQuery.css( elem, "position" ) === "fixed" ) {
	
				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
	
			} else {
	
				// Get *real* offsetParent
				offsetParent = this.offsetParent();
	
				// Get correct offsets
				offset = this.offset();
				if ( !nodeName( offsetParent[ 0 ], "html" ) ) {
					parentOffset = offsetParent.offset();
				}
	
				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css( offsetParent[ 0 ], "borderTopWidth", true ),
					left: parentOffset.left + jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true )
				};
			}
	
			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},
	
		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;
	
				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}
	
				return offsetParent || documentElement;
			} );
		}
	} );
	
	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;
	
		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {
	
				// Coalesce documents and windows
				var win;
				if ( jQuery.isWindow( elem ) ) {
					win = elem;
				} else if ( elem.nodeType === 9 ) {
					win = elem.defaultView;
				}
	
				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}
	
				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);
	
				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );
	
	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );
	
					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );
	
	
	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {
	
			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );
	
				return access( this, function( elem, type, value ) {
					var doc;
	
					if ( jQuery.isWindow( elem ) ) {
	
						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}
	
					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;
	
						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}
	
					return value === undefined ?
	
						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :
	
						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );
	
	
	jQuery.fn.extend( {
	
		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},
	
		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {
	
			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );
	
	jQuery.holdReady = function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;
	
	
	
	
	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.
	
	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon
	
	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}
	
	
	
	
	var
	
		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,
	
		// Map over the $ in case of overwrite
		_$ = window.$;
	
	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}
	
		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}
	
		return jQuery;
	};
	
	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}
	
	
	
	
	return jQuery;
	} );


/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global) {"use strict"
	// Module export pattern from
	// https://github.com/umdjs/umd/blob/master/returnExports.js
	;(function (root, factory) {
	    if (true) {
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports === 'object') {
	        // Node. Does not work with strict CommonJS, but
	        // only CommonJS-like environments that support module.exports,
	        // like Node.
	        module.exports = factory();
	    } else {
	        // Browser globals (root is window)
	        root.store = factory();
	  }
	}(this, function () {
		
		// Store.js
		var store = {},
			win = (typeof window != 'undefined' ? window : global),
			doc = win.document,
			localStorageName = 'localStorage',
			scriptTag = 'script',
			storage
	
		store.disabled = false
		store.version = '1.3.20'
		store.set = function(key, value) {}
		store.get = function(key, defaultVal) {}
		store.has = function(key) { return store.get(key) !== undefined }
		store.remove = function(key) {}
		store.clear = function() {}
		store.transact = function(key, defaultVal, transactionFn) {
			if (transactionFn == null) {
				transactionFn = defaultVal
				defaultVal = null
			}
			if (defaultVal == null) {
				defaultVal = {}
			}
			var val = store.get(key, defaultVal)
			transactionFn(val)
			store.set(key, val)
		}
		store.getAll = function() {}
		store.forEach = function() {}
	
		store.serialize = function(value) {
			return JSON.stringify(value)
		}
		store.deserialize = function(value) {
			if (typeof value != 'string') { return undefined }
			try { return JSON.parse(value) }
			catch(e) { return value || undefined }
		}
	
		// Functions to encapsulate questionable FireFox 3.6.13 behavior
		// when about.config::dom.storage.enabled === false
		// See https://github.com/marcuswestin/store.js/issues#issue/13
		function isLocalStorageNameSupported() {
			try { return (localStorageName in win && win[localStorageName]) }
			catch(err) { return false }
		}
	
		if (isLocalStorageNameSupported()) {
			storage = win[localStorageName]
			store.set = function(key, val) {
				if (val === undefined) { return store.remove(key) }
				storage.setItem(key, store.serialize(val))
				return val
			}
			store.get = function(key, defaultVal) {
				var val = store.deserialize(storage.getItem(key))
				return (val === undefined ? defaultVal : val)
			}
			store.remove = function(key) { storage.removeItem(key) }
			store.clear = function() { storage.clear() }
			store.getAll = function() {
				var ret = {}
				store.forEach(function(key, val) {
					ret[key] = val
				})
				return ret
			}
			store.forEach = function(callback) {
				for (var i=0; i<storage.length; i++) {
					var key = storage.key(i)
					callback(key, store.get(key))
				}
			}
		} else if (doc && doc.documentElement.addBehavior) {
			var storageOwner,
				storageContainer
			// Since #userData storage applies only to specific paths, we need to
			// somehow link our data to a specific path.  We choose /favicon.ico
			// as a pretty safe option, since all browsers already make a request to
			// this URL anyway and being a 404 will not hurt us here.  We wrap an
			// iframe pointing to the favicon in an ActiveXObject(htmlfile) object
			// (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)
			// since the iframe access rules appear to allow direct access and
			// manipulation of the document element, even for a 404 page.  This
			// document can be used instead of the current document (which would
			// have been limited to the current path) to perform #userData storage.
			try {
				storageContainer = new ActiveXObject('htmlfile')
				storageContainer.open()
				storageContainer.write('<'+scriptTag+'>document.w=window</'+scriptTag+'><iframe src="/favicon.ico"></iframe>')
				storageContainer.close()
				storageOwner = storageContainer.w.frames[0].document
				storage = storageOwner.createElement('div')
			} catch(e) {
				// somehow ActiveXObject instantiation failed (perhaps some special
				// security settings or otherwse), fall back to per-path storage
				storage = doc.createElement('div')
				storageOwner = doc.body
			}
			var withIEStorage = function(storeFunction) {
				return function() {
					var args = Array.prototype.slice.call(arguments, 0)
					args.unshift(storage)
					// See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx
					// and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx
					storageOwner.appendChild(storage)
					storage.addBehavior('#default#userData')
					storage.load(localStorageName)
					var result = storeFunction.apply(store, args)
					storageOwner.removeChild(storage)
					return result
				}
			}
	
			// In IE7, keys cannot start with a digit or contain certain chars.
			// See https://github.com/marcuswestin/store.js/issues/40
			// See https://github.com/marcuswestin/store.js/issues/83
			var forbiddenCharsRegex = new RegExp("[!\"#$%&'()*+,/\\\\:;<=>?@[\\]^`{|}~]", "g")
			var ieKeyFix = function(key) {
				return key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')
			}
			store.set = withIEStorage(function(storage, key, val) {
				key = ieKeyFix(key)
				if (val === undefined) { return store.remove(key) }
				storage.setAttribute(key, store.serialize(val))
				storage.save(localStorageName)
				return val
			})
			store.get = withIEStorage(function(storage, key, defaultVal) {
				key = ieKeyFix(key)
				var val = store.deserialize(storage.getAttribute(key))
				return (val === undefined ? defaultVal : val)
			})
			store.remove = withIEStorage(function(storage, key) {
				key = ieKeyFix(key)
				storage.removeAttribute(key)
				storage.save(localStorageName)
			})
			store.clear = withIEStorage(function(storage) {
				var attributes = storage.XMLDocument.documentElement.attributes
				storage.load(localStorageName)
				for (var i=attributes.length-1; i>=0; i--) {
					storage.removeAttribute(attributes[i].name)
				}
				storage.save(localStorageName)
			})
			store.getAll = function(storage) {
				var ret = {}
				store.forEach(function(key, val) {
					ret[key] = val
				})
				return ret
			}
			store.forEach = withIEStorage(function(storage, callback) {
				var attributes = storage.XMLDocument.documentElement.attributes
				for (var i=0, attr; attr=attributes[i]; ++i) {
					callback(attr.name, store.deserialize(storage.getAttribute(attr.name)))
				}
			})
		}
	
		try {
			var testKey = '__storejs__'
			store.set(testKey, testKey)
			if (store.get(testKey) != testKey) { store.disabled = true }
			store.remove(testKey)
		} catch(e) {
			store.disabled = true
		}
		store.enabled = !store.disabled
		
		return store
	}));
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["Vex"] = factory();
		else
			root["Vex"] = factory();
	})(this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId])
	/******/ 			return installedModules[moduleId].exports;
	/******/
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			exports: {},
	/******/ 			id: moduleId,
	/******/ 			loaded: false
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.loaded = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(0);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _element = __webpack_require__(5);
		
		var _fraction = __webpack_require__(3);
		
		var _renderer = __webpack_require__(10);
		
		var _formatter = __webpack_require__(14);
		
		var _music = __webpack_require__(30);
		
		var _glyph = __webpack_require__(4);
		
		var _stave = __webpack_require__(43);
		
		var _stavenote = __webpack_require__(20);
		
		var _stavemodifier = __webpack_require__(45);
		
		var _voice = __webpack_require__(18);
		
		var _accidental = __webpack_require__(29);
		
		var _beam = __webpack_require__(15);
		
		var _stavetie = __webpack_require__(33);
		
		var _tabstave = __webpack_require__(55);
		
		var _tabnote = __webpack_require__(56);
		
		var _bend = __webpack_require__(41);
		
		var _vibrato = __webpack_require__(42);
		
		var _vibratobracket = __webpack_require__(57);
		
		var _note = __webpack_require__(22);
		
		var _modifiercontext = __webpack_require__(27);
		
		var _tickcontext = __webpack_require__(39);
		
		var _articulation = __webpack_require__(37);
		
		var _annotation = __webpack_require__(40);
		
		var _stavebarline = __webpack_require__(44);
		
		var _notehead = __webpack_require__(21);
		
		var _staveconnector = __webpack_require__(19);
		
		var _clefnote = __webpack_require__(58);
		
		var _keysignature = __webpack_require__(52);
		
		var _timesignature = __webpack_require__(53);
		
		var _timesignote = __webpack_require__(59);
		
		var _stem = __webpack_require__(17);
		
		var _tabtie = __webpack_require__(34);
		
		var _clef = __webpack_require__(51);
		
		var _modifier = __webpack_require__(25);
		
		var _tabslide = __webpack_require__(60);
		
		var _tuplet = __webpack_require__(16);
		
		var _gracenote = __webpack_require__(61);
		
		var _gracetabnote = __webpack_require__(62);
		
		var _tuning = __webpack_require__(63);
		
		var _keymanager = __webpack_require__(64);
		
		var _stavehairpin = __webpack_require__(65);
		
		var _boundingbox = __webpack_require__(8);
		
		var _strokes = __webpack_require__(35);
		
		var _textnote = __webpack_require__(50);
		
		var _curve = __webpack_require__(66);
		
		var _textdynamics = __webpack_require__(67);
		
		var _staveline = __webpack_require__(68);
		
		var _ornament = __webpack_require__(38);
		
		var _pedalmarking = __webpack_require__(69);
		
		var _textbracket = __webpack_require__(70);
		
		var _frethandfinger = __webpack_require__(28);
		
		var _staverepetition = __webpack_require__(46);
		
		var _barnote = __webpack_require__(71);
		
		var _ghostnote = __webpack_require__(72);
		
		var _notesubgroup = __webpack_require__(31);
		
		var _gracenotegroup = __webpack_require__(32);
		
		var _tremolo = __webpack_require__(73);
		
		var _stringnumber = __webpack_require__(36);
		
		var _crescendo = __webpack_require__(74);
		
		var _stavevolta = __webpack_require__(54);
		
		var _vexflow_font = __webpack_require__(9);
		
		var _system = __webpack_require__(75);
		
		var _factory = __webpack_require__(76);
		
		var _parser = __webpack_require__(78);
		
		var _easyscore = __webpack_require__(77);
		
		var _registry = __webpack_require__(6);
		
		var _stavetempo = __webpack_require__(48);
		
		_vex.Vex.Flow = _tables.Flow; // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		_vex.Vex.Flow.Element = _element.Element;
		_vex.Vex.Flow.Fraction = _fraction.Fraction;
		_vex.Vex.Flow.Renderer = _renderer.Renderer;
		_vex.Vex.Flow.Formatter = _formatter.Formatter;
		_vex.Vex.Flow.Music = _music.Music;
		_vex.Vex.Flow.Glyph = _glyph.Glyph;
		_vex.Vex.Flow.Stave = _stave.Stave;
		_vex.Vex.Flow.StaveNote = _stavenote.StaveNote;
		_vex.Vex.Flow.StaveModifier = _stavemodifier.StaveModifier;
		_vex.Vex.Flow.Voice = _voice.Voice;
		_vex.Vex.Flow.Accidental = _accidental.Accidental;
		_vex.Vex.Flow.Beam = _beam.Beam;
		_vex.Vex.Flow.StaveTie = _stavetie.StaveTie;
		_vex.Vex.Flow.TabStave = _tabstave.TabStave;
		_vex.Vex.Flow.TabNote = _tabnote.TabNote;
		_vex.Vex.Flow.Bend = _bend.Bend;
		_vex.Vex.Flow.Vibrato = _vibrato.Vibrato;
		_vex.Vex.Flow.VibratoBracket = _vibratobracket.VibratoBracket;
		_vex.Vex.Flow.Note = _note.Note;
		_vex.Vex.Flow.ModifierContext = _modifiercontext.ModifierContext;
		_vex.Vex.Flow.TickContext = _tickcontext.TickContext;
		_vex.Vex.Flow.Articulation = _articulation.Articulation;
		_vex.Vex.Flow.Annotation = _annotation.Annotation;
		_vex.Vex.Flow.Barline = _stavebarline.Barline;
		_vex.Vex.Flow.NoteHead = _notehead.NoteHead;
		_vex.Vex.Flow.StaveConnector = _staveconnector.StaveConnector;
		_vex.Vex.Flow.ClefNote = _clefnote.ClefNote;
		_vex.Vex.Flow.KeySignature = _keysignature.KeySignature;
		_vex.Vex.Flow.TimeSignature = _timesignature.TimeSignature;
		_vex.Vex.Flow.TimeSigNote = _timesignote.TimeSigNote;
		_vex.Vex.Flow.Stem = _stem.Stem;
		_vex.Vex.Flow.TabTie = _tabtie.TabTie;
		_vex.Vex.Flow.Clef = _clef.Clef;
		_vex.Vex.Flow.Modifier = _modifier.Modifier;
		_vex.Vex.Flow.TabSlide = _tabslide.TabSlide;
		_vex.Vex.Flow.Tuplet = _tuplet.Tuplet;
		_vex.Vex.Flow.GraceNote = _gracenote.GraceNote;
		_vex.Vex.Flow.GraceTabNote = _gracetabnote.GraceTabNote;
		_vex.Vex.Flow.Tuning = _tuning.Tuning;
		_vex.Vex.Flow.KeyManager = _keymanager.KeyManager;
		_vex.Vex.Flow.StaveHairpin = _stavehairpin.StaveHairpin;
		_vex.Vex.Flow.BoundingBox = _boundingbox.BoundingBox;
		_vex.Vex.Flow.Stroke = _strokes.Stroke;
		_vex.Vex.Flow.TextNote = _textnote.TextNote;
		_vex.Vex.Flow.Curve = _curve.Curve;
		_vex.Vex.Flow.TextDynamics = _textdynamics.TextDynamics;
		_vex.Vex.Flow.StaveLine = _staveline.StaveLine;
		_vex.Vex.Flow.Ornament = _ornament.Ornament;
		_vex.Vex.Flow.PedalMarking = _pedalmarking.PedalMarking;
		_vex.Vex.Flow.TextBracket = _textbracket.TextBracket;
		_vex.Vex.Flow.FretHandFinger = _frethandfinger.FretHandFinger;
		_vex.Vex.Flow.Repetition = _staverepetition.Repetition;
		_vex.Vex.Flow.BarNote = _barnote.BarNote;
		_vex.Vex.Flow.GhostNote = _ghostnote.GhostNote;
		_vex.Vex.Flow.NoteSubGroup = _notesubgroup.NoteSubGroup;
		_vex.Vex.Flow.GraceNoteGroup = _gracenotegroup.GraceNoteGroup;
		_vex.Vex.Flow.Tremolo = _tremolo.Tremolo;
		_vex.Vex.Flow.StringNumber = _stringnumber.StringNumber;
		_vex.Vex.Flow.Crescendo = _crescendo.Crescendo;
		_vex.Vex.Flow.Volta = _stavevolta.Volta;
		_vex.Vex.Flow.Font = _vexflow_font.Font;
		_vex.Vex.Flow.System = _system.System;
		_vex.Vex.Flow.Factory = _factory.Factory;
		_vex.Vex.Flow.Parser = _parser.Parser;
		_vex.Vex.Flow.EasyScore = _easyscore.EasyScore;
		_vex.Vex.Flow.Registry = _registry.Registry;
		_vex.Vex.Flow.StaveTempo = _stavetempo.StaveTempo;
		
		exports.default = _vex.Vex;
		module.exports = exports['default'];
	
	/***/ },
	/* 1 */
	/***/ function(module, exports) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
		
		// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This file implements utility methods used by the rest of the VexFlow
		// codebase.
		//
		
		var Vex = function Vex() {};
		
		// Default log function sends all arguments to console.
		Vex.L = function (block, args) {
		  if (!args) return;
		  var line = Array.prototype.slice.call(args).join(' ');
		  window.console.log(block + ': ' + line);
		};
		
		Vex.MakeException = function (name) {
		  var exception = function (_Error) {
		    _inherits(exception, _Error);
		
		    function exception(message, data) {
		      _classCallCheck(this, exception);
		
		      var _this = _possibleConstructorReturn(this, (exception.__proto__ || Object.getPrototypeOf(exception)).call(this, message));
		
		      _this.name = name;
		      _this.message = message;
		      _this.data = data;
		      return _this;
		    }
		
		    return exception;
		  }(Error);
		
		  return exception;
		};
		
		// Default runtime exception.
		
		var RuntimeError = function () {
		  function RuntimeError(code, message) {
		    _classCallCheck(this, RuntimeError);
		
		    this.code = code;
		    this.message = message;
		  }
		
		  _createClass(RuntimeError, [{
		    key: 'toString',
		    value: function toString() {
		      return '[RuntimeError] ' + this.code + ':' + this.message;
		    }
		  }]);
		
		  return RuntimeError;
		}();
		
		// Shortcut method for `RuntimeError`.
		
		
		Vex.RuntimeError = RuntimeError;
		Vex.RERR = Vex.RuntimeError;
		
		// Merge `destination` hash with `source` hash, overwriting like keys
		// in `source` if necessary.
		Vex.Merge = function (destination, source) {
		  for (var property in source) {
		    // eslint-disable-line guard-for-in
		    destination[property] = source[property];
		  }
		  return destination;
		};
		
		// DEPRECATED. Use `Math.*`.
		Vex.Min = Math.min;
		Vex.Max = Math.max;
		Vex.forEach = function (a, fn) {
		  for (var i = 0; i < a.length; i++) {
		    fn(a[i], i);
		  }
		};
		
		// Round number to nearest fractional value (`.5`, `.25`, etc.)
		Vex.RoundN = function (x, n) {
		  return x % n >= n / 2 ? parseInt(x / n, 10) * n + n : parseInt(x / n, 10) * n;
		};
		
		// Locate the mid point between stave lines. Returns a fractional line if a space.
		Vex.MidLine = function (a, b) {
		  var mid_line = b + (a - b) / 2;
		  if (mid_line % 2 > 0) {
		    mid_line = Vex.RoundN(mid_line * 10, 5) / 10;
		  }
		  return mid_line;
		};
		
		// Take `arr` and return a new list consisting of the sorted, unique,
		// contents of arr. Does not modify `arr`.
		Vex.SortAndUnique = function (arr, cmp, eq) {
		  if (arr.length > 1) {
		    var newArr = [];
		    var last = void 0;
		    arr.sort(cmp);
		
		    for (var i = 0; i < arr.length; ++i) {
		      if (i === 0 || !eq(arr[i], last)) {
		        newArr.push(arr[i]);
		      }
		      last = arr[i];
		    }
		
		    return newArr;
		  } else {
		    return arr;
		  }
		};
		
		// Check if array `a` contains `obj`.
		Vex.Contains = function (a, obj) {
		  var i = a.length;
		  while (i--) {
		    if (a[i] === obj) {
		      return true;
		    }
		  }
		  return false;
		};
		
		// Get the 2D Canvas context from DOM element `canvas_sel`.
		Vex.getCanvasContext = function (canvas_sel) {
		  if (!canvas_sel) {
		    throw new Vex.RERR('BadArgument', 'Invalid canvas selector: ' + canvas_sel);
		  }
		
		  var canvas = document.getElementById(canvas_sel);
		  if (!(canvas && canvas.getContext)) {
		    throw new Vex.RERR('UnsupportedBrowserError', 'This browser does not support HTML5 Canvas');
		  }
		
		  return canvas.getContext('2d');
		};
		
		// Draw a tiny dot marker on the specified canvas. A great debugging aid.
		//
		// `ctx`: Canvas context.
		// `x`, `y`: Dot coordinates.
		Vex.drawDot = function (ctx, x, y) {
		  var color = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '#55';
		
		  ctx.save();
		  ctx.setFillStyle(color);
		
		  // draw a circle
		  ctx.beginPath();
		  ctx.arc(x, y, 3, 0, Math.PI * 2, true);
		  ctx.closePath();
		  ctx.fill();
		  ctx.restore();
		};
		
		// Benchmark. Run function `f` once and report time elapsed shifted by `s` milliseconds.
		Vex.BM = function (s, f) {
		  var start_time = new Date().getTime();
		  f();
		  var elapsed = new Date().getTime() - start_time;
		  Vex.L(s + elapsed + 'ms');
		};
		
		// Get stack trace.
		Vex.StackTrace = function () {
		  var err = new Error();
		  return err.stack;
		};
		
		// Dump warning to console.
		Vex.W = function () {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  var line = args.join(' ');
		  window.console.log('Warning: ', line, Vex.StackTrace());
		};
		
		// Used by various classes (e.g., SVGContext) to provide a
		// unique prefix to element names (or other keys in shared namespaces).
		Vex.Prefix = function (text) {
		  return Vex.Prefix.prefix + text;
		};
		Vex.Prefix.prefix = 'vf-';
		
		exports.Vex = Vex;
	
	/***/ },
	/* 2 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Flow = undefined;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		/* eslint-disable key-spacing */
		
		var _vex = __webpack_require__(1);
		
		var _fraction = __webpack_require__(3);
		
		var _glyph = __webpack_require__(4);
		
		var Flow = {
		  STEM_WIDTH: 1.5,
		  STEM_HEIGHT: 35,
		  STAVE_LINE_THICKNESS: 1,
		  RESOLUTION: 16384,
		  DEFAULT_NOTATION_FONT_SCALE: 39,
		  DEFAULT_TABLATURE_FONT_SCALE: 39,
		  SLASH_NOTEHEAD_WIDTH: 15,
		
		  // HACK:
		  // Since text origins are positioned at the baseline, we must
		  // compensate for the ascender of the text. Of course, 1 staff space is
		  // a very poor approximation.
		  //
		  // This will be deprecated in the future. This is a temporary solution until
		  // we have more robust text metrics.
		  TEXT_HEIGHT_OFFSET_HACK: 1,
		
		  /* Kerning (DEPRECATED) */
		  IsKerned: true
		};
		
		Flow.clefProperties = function (clef) {
		  if (!clef) throw new _vex.Vex.RERR('BadArgument', 'Invalid clef: ' + clef);
		
		  var props = Flow.clefProperties.values[clef];
		  if (!props) throw new _vex.Vex.RERR('BadArgument', 'Invalid clef: ' + clef);
		
		  return props;
		};
		
		Flow.clefProperties.values = {
		  'treble': { line_shift: 0 },
		  'bass': { line_shift: 6 },
		  'tenor': { line_shift: 4 },
		  'alto': { line_shift: 3 },
		  'soprano': { line_shift: 1 },
		  'percussion': { line_shift: 0 },
		  'mezzo-soprano': { line_shift: 2 },
		  'baritone-c': { line_shift: 5 },
		  'baritone-f': { line_shift: 5 },
		  'subbass': { line_shift: 7 },
		  'french': { line_shift: -1 }
		};
		
		/*
		  Take a note in the format "Key/Octave" (e.g., "C/5") and return properties.
		
		  The last argument, params, is a struct the currently can contain one option,
		  octave_shift for clef ottavation (0 = default; 1 = 8va; -1 = 8vb, etc.).
		*/
		Flow.keyProperties = function (key, clef, params) {
		  if (clef === undefined) {
		    clef = 'treble';
		  }
		
		  var options = { octave_shift: 0 };
		
		  if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
		    _vex.Vex.Merge(options, params);
		  }
		
		  var pieces = key.split('/');
		
		  if (pieces.length < 2) {
		    throw new _vex.Vex.RERR('BadArguments', 'Key must have note + octave and an optional glyph: ' + key);
		  }
		
		  var k = pieces[0].toUpperCase();
		  var value = Flow.keyProperties.note_values[k];
		  if (!value) throw new _vex.Vex.RERR('BadArguments', 'Invalid key name: ' + k);
		  if (value.octave) pieces[1] = value.octave;
		
		  var octave = parseInt(pieces[1], 10);
		
		  // Octave_shift is the shift to compensate for clef 8va/8vb.
		  octave += -1 * options.octave_shift;
		
		  var base_index = octave * 7 - 4 * 7;
		  var line = (base_index + value.index) / 2;
		  line += Flow.clefProperties(clef).line_shift;
		
		  var stroke = 0;
		
		  if (line <= 0 && line * 2 % 2 === 0) stroke = 1; // stroke up
		  if (line >= 6 && line * 2 % 2 === 0) stroke = -1; // stroke down
		
		  // Integer value for note arithmetic.
		  var int_value = typeof value.int_val !== 'undefined' ? octave * 12 + value.int_val : null;
		
		  /* Check if the user specified a glyph. */
		  var code = value.code;
		  var shift_right = value.shift_right;
		  if (pieces.length > 2 && pieces[2]) {
		    var glyph_name = pieces[2].toUpperCase();
		    var note_glyph = Flow.keyProperties.note_glyph[glyph_name];
		    if (note_glyph) {
		      code = note_glyph.code;
		      shift_right = note_glyph.shift_right;
		    }
		  }
		
		  return {
		    key: k,
		    octave: octave,
		    line: line,
		    int_value: int_value,
		    accidental: value.accidental,
		    code: code,
		    stroke: stroke,
		    shift_right: shift_right,
		    displaced: false
		  };
		};
		
		Flow.keyProperties.note_values = {
		  'C': { index: 0, int_val: 0, accidental: null },
		  'CN': { index: 0, int_val: 0, accidental: 'n' },
		  'C#': { index: 0, int_val: 1, accidental: '#' },
		  'C##': { index: 0, int_val: 2, accidental: '##' },
		  'CB': { index: 0, int_val: -1, accidental: 'b' },
		  'CBB': { index: 0, int_val: -2, accidental: 'bb' },
		  'D': { index: 1, int_val: 2, accidental: null },
		  'DN': { index: 1, int_val: 2, accidental: 'n' },
		  'D#': { index: 1, int_val: 3, accidental: '#' },
		  'D##': { index: 1, int_val: 4, accidental: '##' },
		  'DB': { index: 1, int_val: 1, accidental: 'b' },
		  'DBB': { index: 1, int_val: 0, accidental: 'bb' },
		  'E': { index: 2, int_val: 4, accidental: null },
		  'EN': { index: 2, int_val: 4, accidental: 'n' },
		  'E#': { index: 2, int_val: 5, accidental: '#' },
		  'E##': { index: 2, int_val: 6, accidental: '##' },
		  'EB': { index: 2, int_val: 3, accidental: 'b' },
		  'EBB': { index: 2, int_val: 2, accidental: 'bb' },
		  'F': { index: 3, int_val: 5, accidental: null },
		  'FN': { index: 3, int_val: 5, accidental: 'n' },
		  'F#': { index: 3, int_val: 6, accidental: '#' },
		  'F##': { index: 3, int_val: 7, accidental: '##' },
		  'FB': { index: 3, int_val: 4, accidental: 'b' },
		  'FBB': { index: 3, int_val: 3, accidental: 'bb' },
		  'G': { index: 4, int_val: 7, accidental: null },
		  'GN': { index: 4, int_val: 7, accidental: 'n' },
		  'G#': { index: 4, int_val: 8, accidental: '#' },
		  'G##': { index: 4, int_val: 9, accidental: '##' },
		  'GB': { index: 4, int_val: 6, accidental: 'b' },
		  'GBB': { index: 4, int_val: 5, accidental: 'bb' },
		  'A': { index: 5, int_val: 9, accidental: null },
		  'AN': { index: 5, int_val: 9, accidental: 'n' },
		  'A#': { index: 5, int_val: 10, accidental: '#' },
		  'A##': { index: 5, int_val: 11, accidental: '##' },
		  'AB': { index: 5, int_val: 8, accidental: 'b' },
		  'ABB': { index: 5, int_val: 7, accidental: 'bb' },
		  'B': { index: 6, int_val: 11, accidental: null },
		  'BN': { index: 6, int_val: 11, accidental: 'n' },
		  'B#': { index: 6, int_val: 12, accidental: '#' },
		  'B##': { index: 6, int_val: 13, accidental: '##' },
		  'BB': { index: 6, int_val: 10, accidental: 'b' },
		  'BBB': { index: 6, int_val: 9, accidental: 'bb' },
		  'R': { index: 6, int_val: 9, rest: true }, // Rest
		  'X': {
		    index: 6,
		    accidental: '',
		    octave: 4,
		    code: 'v3e',
		    shift_right: 5.5
		  }
		};
		
		Flow.keyProperties.note_glyph = {
		  /* Diamond */
		  'D0': { code: 'v27', shift_right: -0.5 },
		  'D1': { code: 'v2d', shift_right: -0.5 },
		  'D2': { code: 'v22', shift_right: -0.5 },
		  'D3': { code: 'v70', shift_right: -0.5 },
		
		  /* Triangle */
		  'T0': { code: 'v49', shift_right: -2 },
		  'T1': { code: 'v93', shift_right: 0.5 },
		  'T2': { code: 'v40', shift_right: 0.5 },
		  'T3': { code: 'v7d', shift_right: 0.5 },
		
		  /* Cross */
		  'X0': { code: 'v92', shift_right: -2 },
		  'X1': { code: 'v95', shift_right: -0.5 },
		  'X2': { code: 'v7f', shift_right: 0.5 },
		  'X3': { code: 'v3b', shift_right: -2 }
		};
		
		Flow.integerToNote = function (integer) {
		  if (typeof integer === 'undefined') {
		    throw new _vex.Vex.RERR('BadArguments', 'Undefined integer for integerToNote');
		  }
		
		  if (integer < -2) {
		    throw new _vex.Vex.RERR('BadArguments', 'integerToNote requires integer > -2: ' + integer);
		  }
		
		  var noteValue = Flow.integerToNote.table[integer];
		  if (!noteValue) {
		    throw new _vex.Vex.RERR('BadArguments', 'Unknown note value for integer: ' + integer);
		  }
		
		  return noteValue;
		};
		
		Flow.integerToNote.table = {
		  0: 'C',
		  1: 'C#',
		  2: 'D',
		  3: 'D#',
		  4: 'E',
		  5: 'F',
		  6: 'F#',
		  7: 'G',
		  8: 'G#',
		  9: 'A',
		  10: 'A#',
		  11: 'B'
		};
		
		Flow.tabToGlyph = function (fret) {
		  var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1.0;
		
		  var glyph = null;
		  var width = 0;
		  var shift_y = 0;
		
		  if (fret.toString().toUpperCase() === 'X') {
		    var glyphMetrics = new _glyph.Glyph('v7f', Flow.DEFAULT_TABLATURE_FONT_SCALE).getMetrics();
		    glyph = 'v7f';
		    width = glyphMetrics.width;
		    shift_y = -glyphMetrics.height / 2;
		  } else {
		    width = Flow.textWidth(fret.toString());
		  }
		
		  return {
		    text: fret,
		    code: glyph,
		    getWidth: function getWidth() {
		      return width * scale;
		    },
		    shift_y: shift_y
		  };
		};
		
		Flow.textWidth = function (text) {
		  return 7 * text.toString().length;
		};
		
		Flow.articulationCodes = function (artic) {
		  return Flow.articulationCodes.articulations[artic];
		};
		
		Flow.articulationCodes.articulations = {
		  'a.': { code: 'v23', between_lines: true }, // Staccato
		  'av': { code: 'v28', between_lines: true }, // Staccatissimo
		  'a>': { code: 'v42', between_lines: true }, // Accent
		  'a-': { code: 'v25', between_lines: true }, // Tenuto
		  'a^': { code: 'va', between_lines: false }, // Marcato
		  'a+': { code: 'v8b', between_lines: false }, // Left hand pizzicato
		  'ao': { code: 'v94', between_lines: false }, // Snap pizzicato
		  'ah': { code: 'vb9', between_lines: false }, // Natural harmonic or open note
		  'a@a': { code: 'v43', between_lines: false }, // Fermata above staff
		  'a@u': { code: 'v5b', between_lines: false }, // Fermata below staff
		  'a|': { code: 'v75', between_lines: false }, // Bow up - up stroke
		  'am': { code: 'v97', between_lines: false }, // Bow down - down stroke
		  'a,': { code: 'vb3', between_lines: false } };
		
		Flow.accidentalCodes = function (acc) {
		  return Flow.accidentalCodes.accidentals[acc];
		};
		
		Flow.accidentalCodes.accidentals = {
		  '#': { code: 'v18', parenRightPaddingAdjustment: -1 },
		  '##': { code: 'v7f', parenRightPaddingAdjustment: -1 },
		  'b': { code: 'v44', parenRightPaddingAdjustment: -2 },
		  'bb': { code: 'v26', parenRightPaddingAdjustment: -2 },
		  'n': { code: 'v4e', parenRightPaddingAdjustment: -1 },
		  '{': { code: 'v9c', parenRightPaddingAdjustment: -1 },
		  '}': { code: 'v84', parenRightPaddingAdjustment: -1 },
		  'db': { code: 'v9e', parenRightPaddingAdjustment: -1 },
		  'd': { code: 'vab', parenRightPaddingAdjustment: 0 },
		  'bbs': { code: 'v90', parenRightPaddingAdjustment: -1 },
		  '++': { code: 'v51', parenRightPaddingAdjustment: -1 },
		  '+': { code: 'v78', parenRightPaddingAdjustment: -1 },
		  '+-': { code: 'v8d', parenRightPaddingAdjustment: -1 },
		  '++-': { code: 'v7a', parenRightPaddingAdjustment: -1 },
		  'bs': { code: 'vb7', parenRightPaddingAdjustment: -1 },
		  'bss': { code: 'v39', parenRightPaddingAdjustment: -1 },
		  'o': { code: 'vd0', parenRightPaddingAdjustment: -1 },
		  'k': { code: 'vd1', parenRightPaddingAdjustment: -1 }
		};
		
		Flow.accidentalColumnsTable = {
		  1: {
		    a: [1],
		    b: [1]
		  },
		  2: {
		    a: [1, 2]
		  },
		  3: {
		    a: [1, 3, 2],
		    b: [1, 2, 1],
		    second_on_bottom: [1, 2, 3]
		  },
		  4: {
		    a: [1, 3, 4, 2],
		    b: [1, 2, 3, 1],
		    spaced_out_tetrachord: [1, 2, 1, 2]
		  },
		  5: {
		    a: [1, 3, 5, 4, 2],
		    b: [1, 2, 4, 3, 1],
		    spaced_out_pentachord: [1, 2, 3, 2, 1],
		    very_spaced_out_pentachord: [1, 2, 1, 2, 1] },
		  6: {
		    a: [1, 3, 5, 6, 4, 2],
		    b: [1, 2, 4, 5, 3, 1],
		    spaced_out_hexachord: [1, 3, 2, 1, 3, 2],
		    very_spaced_out_hexachord: [1, 2, 1, 2, 1, 2]
		  }
		};
		
		Flow.ornamentCodes = function (acc) {
		  return Flow.ornamentCodes.ornaments[acc];
		};
		
		Flow.ornamentCodes.ornaments = {
		  'mordent': { code: 'v1e' },
		  'mordent_inverted': { code: 'v45' },
		  'turn': { code: 'v72' },
		  'turn_inverted': { code: 'v33' },
		  'tr': { code: 'v1f' },
		  'upprall': { code: 'v60' },
		  'downprall': { code: 'vb4' },
		  'prallup': { code: 'v6d' },
		  'pralldown': { code: 'v2c' },
		  'upmordent': { code: 'v29' },
		  'downmordent': { code: 'v68' },
		  'lineprall': { code: 'v20' },
		  'prallprall': { code: 'v86' }
		};
		
		Flow.keySignature = function (spec) {
		  var keySpec = Flow.keySignature.keySpecs[spec];
		
		  if (!keySpec) {
		    throw new _vex.Vex.RERR('BadKeySignature', 'Bad key signature spec: \'' + spec + '\'');
		  }
		
		  if (!keySpec.acc) {
		    return [];
		  }
		
		  var notes = Flow.keySignature.accidentalList(keySpec.acc);
		
		  var acc_list = [];
		  for (var i = 0; i < keySpec.num; ++i) {
		    var line = notes[i];
		    acc_list.push({ type: keySpec.acc, line: line });
		  }
		
		  return acc_list;
		};
		
		Flow.keySignature.keySpecs = {
		  'C': { acc: null, num: 0 },
		  'Am': { acc: null, num: 0 },
		  'F': { acc: 'b', num: 1 },
		  'Dm': { acc: 'b', num: 1 },
		  'Bb': { acc: 'b', num: 2 },
		  'Gm': { acc: 'b', num: 2 },
		  'Eb': { acc: 'b', num: 3 },
		  'Cm': { acc: 'b', num: 3 },
		  'Ab': { acc: 'b', num: 4 },
		  'Fm': { acc: 'b', num: 4 },
		  'Db': { acc: 'b', num: 5 },
		  'Bbm': { acc: 'b', num: 5 },
		  'Gb': { acc: 'b', num: 6 },
		  'Ebm': { acc: 'b', num: 6 },
		  'Cb': { acc: 'b', num: 7 },
		  'Abm': { acc: 'b', num: 7 },
		  'G': { acc: '#', num: 1 },
		  'Em': { acc: '#', num: 1 },
		  'D': { acc: '#', num: 2 },
		  'Bm': { acc: '#', num: 2 },
		  'A': { acc: '#', num: 3 },
		  'F#m': { acc: '#', num: 3 },
		  'E': { acc: '#', num: 4 },
		  'C#m': { acc: '#', num: 4 },
		  'B': { acc: '#', num: 5 },
		  'G#m': { acc: '#', num: 5 },
		  'F#': { acc: '#', num: 6 },
		  'D#m': { acc: '#', num: 6 },
		  'C#': { acc: '#', num: 7 },
		  'A#m': { acc: '#', num: 7 }
		};
		
		Flow.unicode = {
		  // Unicode accidentals
		  'sharp': String.fromCharCode(parseInt('266F', 16)),
		  'flat': String.fromCharCode(parseInt('266D', 16)),
		  'natural': String.fromCharCode(parseInt('266E', 16)),
		  // Major Chord
		  'triangle': String.fromCharCode(parseInt('25B3', 16)),
		  // half-diminished
		  'o-with-slash': String.fromCharCode(parseInt('00F8', 16)),
		  // Diminished
		  'degrees': String.fromCharCode(parseInt('00B0', 16)),
		  'circle': String.fromCharCode(parseInt('25CB', 16))
		};
		
		Flow.keySignature.accidentalList = function (acc) {
		  var patterns = {
		    'b': [2, 0.5, 2.5, 1, 3, 1.5, 3.5],
		    '#': [0, 1.5, -0.5, 1, 2.5, 0.5, 2]
		  };
		
		  return patterns[acc];
		};
		
		Flow.parseNoteDurationString = function (durationString) {
		  if (typeof durationString !== 'string') {
		    return null;
		  }
		
		  var regexp = /(\d*\/?\d+|[a-z])(d*)([nrhms]|$)/;
		
		  var result = regexp.exec(durationString);
		  if (!result) {
		    return null;
		  }
		
		  var duration = result[1];
		  var dots = result[2].length;
		  var type = result[3];
		
		  if (type.length === 0) {
		    type = 'n';
		  }
		
		  return {
		    duration: duration,
		    dots: dots,
		    type: type
		  };
		};
		
		Flow.parseNoteData = function (noteData) {
		  var duration = noteData.duration;
		
		  // Preserve backwards-compatibility
		  var durationStringData = Flow.parseNoteDurationString(duration);
		  if (!durationStringData) {
		    return null;
		  }
		
		  var ticks = Flow.durationToTicks(durationStringData.duration);
		  if (ticks == null) {
		    return null;
		  }
		
		  var type = noteData.type;
		
		  if (type) {
		    if (!(type === 'n' || type === 'r' || type === 'h' || type === 'm' || type === 's')) {
		      return null;
		    }
		  } else {
		    type = durationStringData.type;
		    if (!type) {
		      type = 'n';
		    }
		  }
		
		  var dots = noteData.dots ? noteData.dots : durationStringData.dots;
		
		  if (typeof dots !== 'number') {
		    return null;
		  }
		
		  var currentTicks = ticks;
		
		  for (var i = 0; i < dots; i++) {
		    if (currentTicks <= 1) return null;
		
		    currentTicks = currentTicks / 2;
		    ticks += currentTicks;
		  }
		
		  return {
		    duration: durationStringData.duration,
		    type: type,
		    dots: dots,
		    ticks: ticks
		  };
		};
		
		// Used to convert duration aliases to the number based duration.
		// If the input isn't an alias, simply return the input.
		//
		// example: 'q' -> '4', '8' -> '8'
		Flow.sanitizeDuration = function (duration) {
		  var alias = Flow.durationAliases[duration];
		  if (alias !== undefined) {
		    duration = alias;
		  }
		
		  if (Flow.durationToTicks.durations[duration] === undefined) {
		    throw new _vex.Vex.RERR('BadArguments', 'The provided duration is not valid: ' + duration);
		  }
		
		  return duration;
		};
		
		// Convert the `duration` to an fraction
		Flow.durationToFraction = function (duration) {
		  return new _fraction.Fraction().parse(Flow.sanitizeDuration(duration));
		};
		
		// Convert the `duration` to an number
		Flow.durationToNumber = function (duration) {
		  return Flow.durationToFraction(duration).value();
		};
		
		// Convert the `duration` to total ticks
		Flow.durationToTicks = function (duration) {
		  duration = Flow.sanitizeDuration(duration);
		
		  var ticks = Flow.durationToTicks.durations[duration];
		  if (ticks === undefined) {
		    return null;
		  }
		
		  return ticks;
		};
		
		Flow.durationToTicks.durations = {
		  '1/2': Flow.RESOLUTION * 2,
		  '1': Flow.RESOLUTION / 1,
		  '2': Flow.RESOLUTION / 2,
		  '4': Flow.RESOLUTION / 4,
		  '8': Flow.RESOLUTION / 8,
		  '16': Flow.RESOLUTION / 16,
		  '32': Flow.RESOLUTION / 32,
		  '64': Flow.RESOLUTION / 64,
		  '128': Flow.RESOLUTION / 128,
		  '256': Flow.RESOLUTION / 256
		};
		
		Flow.durationAliases = {
		  'w': '1',
		  'h': '2',
		  'q': '4',
		
		  // This is the default duration used to render bars (BarNote). Bars no longer
		  // consume ticks, so this should be a no-op.
		  //
		  // TODO(0xfe): This needs to be cleaned up.
		  'b': '256'
		};
		
		Flow.durationToGlyph = function (duration, type) {
		  duration = Flow.sanitizeDuration(duration);
		
		  var code = Flow.durationToGlyph.duration_codes[duration];
		  if (code === undefined) {
		    return null;
		  }
		
		  if (!type) {
		    type = 'n';
		  }
		
		  var glyphTypeProperties = code.type[type];
		  if (glyphTypeProperties === undefined) {
		    return null;
		  }
		
		  return _vex.Vex.Merge(_vex.Vex.Merge({}, code.common), glyphTypeProperties);
		};
		
		Flow.durationToGlyph.duration_codes = {
		  '1/2': {
		    common: {
		      getWidth: function getWidth() {
		        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Flow.DEFAULT_NOTATION_FONT_SCALE;
		
		        return new _glyph.Glyph(this.code_head || 'v53', scale).getMetrics().width;
		      },
		
		      stem: false,
		      stem_offset: 0,
		      flag: false,
		      stem_up_extension: -Flow.STEM_HEIGHT,
		      stem_down_extension: -Flow.STEM_HEIGHT,
		      gracenote_stem_up_extension: -Flow.STEM_HEIGHT,
		      gracenote_stem_down_extension: -Flow.STEM_HEIGHT,
		      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,
		      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Breve note
		        code_head: 'v53'
		      },
		      'h': { // Breve note harmonic
		        code_head: 'v59'
		      },
		      'm': { // Breve note muted -
		        code_head: 'vf',
		        stem_offset: 0
		      },
		      'r': { // Breve rest
		        code_head: 'v31',
		        rest: true,
		        position: 'B/5',
		        dot_shiftY: 0.5
		      },
		      's': { // Breve note slash -
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '1': {
		    common: {
		      getWidth: function getWidth() {
		        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Flow.DEFAULT_NOTATION_FONT_SCALE;
		
		        return new _glyph.Glyph(this.code_head || 'v1d', scale).getMetrics().width;
		      },
		
		      stem: false,
		      stem_offset: 0,
		      flag: false,
		      stem_up_extension: -Flow.STEM_HEIGHT,
		      stem_down_extension: -Flow.STEM_HEIGHT,
		      gracenote_stem_up_extension: -Flow.STEM_HEIGHT,
		      gracenote_stem_down_extension: -Flow.STEM_HEIGHT,
		      tabnote_stem_up_extension: -Flow.STEM_HEIGHT,
		      tabnote_stem_down_extension: -Flow.STEM_HEIGHT,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Whole note
		        code_head: 'v1d'
		      },
		      'h': { // Whole note harmonic
		        code_head: 'v46'
		      },
		      'm': { // Whole note muted
		        code_head: 'v92',
		        stem_offset: -3
		      },
		      'r': { // Whole rest
		        code_head: 'v5c',
		        rest: true,
		        position: 'D/5',
		        dot_shiftY: 0.5
		      },
		      's': { // Whole note slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '2': {
		    common: {
		      getWidth: function getWidth() {
		        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Flow.DEFAULT_NOTATION_FONT_SCALE;
		
		        return new _glyph.Glyph(this.code_head || 'v81', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: false,
		      stem_up_extension: 0,
		      stem_down_extension: 0,
		      gracenote_stem_up_extension: -14,
		      gracenote_stem_down_extension: -14,
		      tabnote_stem_up_extension: 0,
		      tabnote_stem_down_extension: 0,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Half note
		        code_head: 'v81'
		      },
		      'h': { // Half note harmonic
		        code_head: 'v2d'
		      },
		      'm': { // Half note muted
		        code_head: 'v95',
		        stem_offset: -3
		      },
		      'r': { // Half rest
		        code_head: 'vc',
		        stem: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: -0.5
		      },
		      's': { // Half note slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '4': {
		    common: {
		      getWidth: function getWidth() {
		        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Flow.DEFAULT_NOTATION_FONT_SCALE;
		
		        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: false,
		      stem_up_extension: 0,
		      stem_down_extension: 0,
		      gracenote_stem_up_extension: -14,
		      gracenote_stem_down_extension: -14,
		      tabnote_stem_up_extension: 0,
		      tabnote_stem_down_extension: 0,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Quarter note
		        code_head: 'vb'
		      },
		      'h': { // Quarter harmonic
		        code_head: 'v22'
		      },
		      'm': { // Quarter muted
		        code_head: 'v3e',
		        stem_offset: -3
		      },
		      'r': { // Quarter rest
		        code_head: 'v7c',
		        stem: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: -0.5,
		        line_above: 1.5,
		        line_below: 1.5
		      },
		      's': { // Quarter slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '8': {
		    common: {
		      getWidth: function getWidth() {
		        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Flow.DEFAULT_NOTATION_FONT_SCALE;
		
		        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: true,
		      beam_count: 1,
		      code_flag_upstem: 'v54',
		      code_flag_downstem: 'v9a',
		      stem_up_extension: 0,
		      stem_down_extension: 0,
		      gracenote_stem_up_extension: -14,
		      gracenote_stem_down_extension: -14,
		      tabnote_stem_up_extension: 0,
		      tabnote_stem_down_extension: 0,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Eighth note
		        code_head: 'vb'
		      },
		      'h': { // Eighth note harmonic
		        code_head: 'v22'
		      },
		      'm': { // Eighth note muted
		        code_head: 'v3e'
		      },
		      'r': { // Eighth rest
		        code_head: 'va5',
		        stem: false,
		        flag: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: -0.5,
		        line_above: 1.0,
		        line_below: 1.0
		      },
		      's': { // Eight slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '16': {
		    common: {
		      beam_count: 2,
		      getWidth: function getWidth() {
		        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Flow.DEFAULT_NOTATION_FONT_SCALE;
		
		        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: true,
		      code_flag_upstem: 'v3f',
		      code_flag_downstem: 'v8f',
		      stem_up_extension: 0,
		      stem_down_extension: 0,
		      gracenote_stem_up_extension: -14,
		      gracenote_stem_down_extension: -14,
		      tabnote_stem_up_extension: 0,
		      tabnote_stem_down_extension: 0,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Sixteenth note
		        code_head: 'vb'
		      },
		      'h': { // Sixteenth note harmonic
		        code_head: 'v22'
		      },
		      'm': { // Sixteenth note muted
		        code_head: 'v3e'
		      },
		      'r': { // Sixteenth rest
		        code_head: 'v3c',
		        stem: false,
		        flag: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: -0.5,
		        line_above: 1.0,
		        line_below: 2.0
		      },
		      's': { // Sixteenth slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '32': {
		    common: {
		      beam_count: 3,
		      getWidth: function getWidth() {
		        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Flow.DEFAULT_NOTATION_FONT_SCALE;
		
		        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: true,
		      code_flag_upstem: 'v47',
		      code_flag_downstem: 'v2a',
		      stem_up_extension: 9,
		      stem_down_extension: 9,
		      gracenote_stem_up_extension: -12,
		      gracenote_stem_down_extension: -12,
		      tabnote_stem_up_extension: 8,
		      tabnote_stem_down_extension: 5,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Thirty-second note
		        code_head: 'vb'
		      },
		      'h': { // Thirty-second harmonic
		        code_head: 'v22'
		      },
		      'm': { // Thirty-second muted
		        code_head: 'v3e'
		      },
		      'r': { // Thirty-second rest
		        code_head: 'v55',
		        stem: false,
		        flag: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: -1.5,
		        line_above: 2.0,
		        line_below: 2.0
		      },
		      's': { // Thirty-second slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '64': {
		    common: {
		      beam_count: 4,
		      getWidth: function getWidth() {
		        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Flow.DEFAULT_NOTATION_FONT_SCALE;
		
		        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: true,
		      code_flag_upstem: 'va9',
		      code_flag_downstem: 'v58',
		      stem_up_extension: 13,
		      stem_down_extension: 13,
		      gracenote_stem_up_extension: -10,
		      gracenote_stem_down_extension: -10,
		      tabnote_stem_up_extension: 12,
		      tabnote_stem_down_extension: 9,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Sixty-fourth note
		        code_head: 'vb'
		      },
		      'h': { // Sixty-fourth harmonic
		        code_head: 'v22'
		      },
		      'm': { // Sixty-fourth muted
		        code_head: 'v3e'
		      },
		      'r': { // Sixty-fourth rest
		        code_head: 'v38',
		        stem: false,
		        flag: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: -1.5,
		        line_above: 2.0,
		        line_below: 3.0
		      },
		      's': { // Sixty-fourth slash
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  },
		  '128': {
		    common: {
		      beam_count: 5,
		      getWidth: function getWidth() {
		        var scale = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Flow.DEFAULT_NOTATION_FONT_SCALE;
		
		        return new _glyph.Glyph(this.code_head || 'vb', scale).getMetrics().width;
		      },
		
		      stem: true,
		      stem_offset: 0,
		      flag: true,
		      code_flag_upstem: 'v9b',
		      code_flag_downstem: 'v30',
		      stem_up_extension: 22,
		      stem_down_extension: 22,
		      gracenote_stem_up_extension: -8,
		      gracenote_stem_down_extension: -8,
		      tabnote_stem_up_extension: 21,
		      tabnote_stem_down_extension: 18,
		      dot_shiftY: 0,
		      line_above: 0,
		      line_below: 0
		    },
		    type: {
		      'n': { // Hundred-twenty-eight note
		        code_head: 'vb'
		      },
		      'h': { // Hundred-twenty-eight harmonic
		        code_head: 'v22'
		      },
		      'm': { // Hundred-twenty-eight muted
		        code_head: 'v3e'
		      },
		      'r': { // Hundred-twenty-eight rest
		        code_head: 'vaa',
		        stem: false,
		        flag: false,
		        rest: true,
		        position: 'B/4',
		        dot_shiftY: 1.5,
		        line_above: 3.0,
		        line_below: 3.0
		      },
		      's': { // Hundred-twenty-eight rest
		        // Drawn with canvas primitives
		        getWidth: function getWidth() {
		          return Flow.SLASH_NOTEHEAD_WIDTH;
		        },
		        position: 'B/4'
		      }
		    }
		  }
		};
		
		// Some defaults
		Flow.TIME4_4 = {
		  num_beats: 4,
		  beat_value: 4,
		  resolution: Flow.RESOLUTION
		};
		exports.Flow = Flow;
	
	/***/ },
	/* 3 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Fraction = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// Fraction class that represents a rational number
		//
		// @author zz85
		// @author incompleteopus (modifications)
		
		/* eslint-disable no-underscore-dangle */
		
		var _vex = __webpack_require__(1);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Fraction = function () {
		  _createClass(Fraction, null, [{
		    key: 'GCD',
		
		
		    /**
		     * GCD: Find greatest common divisor using Euclidean algorithm
		     */
		    value: function GCD(a, b) {
		      if (typeof a !== 'number' || typeof b !== 'number') {
		        throw new _vex.Vex.RERR('BadArgument', 'Invalid numbers: ' + a + ', ' + b);
		      }
		
		      var t = void 0;
		
		      while (b !== 0) {
		        t = b;
		        b = a % b;
		        a = t;
		      }
		
		      return a;
		    }
		
		    /**
		     * LCM: Lowest common multiple
		     */
		
		  }, {
		    key: 'LCM',
		    value: function LCM(a, b) {
		      return a * b / Fraction.GCD(a, b);
		    }
		
		    /**
		     * LCMM: Lowest common multiple for more than two numbers
		     */
		
		  }, {
		    key: 'LCMM',
		    value: function LCMM(args) {
		      if (args.length === 0) {
		        return 0;
		      } else if (args.length === 1) {
		        return args[0];
		      } else if (args.length === 2) {
		        return Fraction.LCM(args[0], args[1]);
		      } else {
		        var arg0 = args[0];
		        args.shift();
		        return Fraction.LCM(arg0, Fraction.LCMM(args));
		      }
		    }
		  }]);
		
		  function Fraction(numerator, denominator) {
		    _classCallCheck(this, Fraction);
		
		    this.set(numerator, denominator);
		  }
		
		  _createClass(Fraction, [{
		    key: 'set',
		    value: function set(numerator, denominator) {
		      this.numerator = numerator === undefined ? 1 : numerator;
		      this.denominator = denominator === undefined ? 1 : denominator;
		      return this;
		    }
		  }, {
		    key: 'value',
		    value: function value() {
		      return this.numerator / this.denominator;
		    }
		  }, {
		    key: 'simplify',
		    value: function simplify() {
		      var u = this.numerator;
		      var d = this.denominator;
		
		      var gcd = Fraction.GCD(u, d);
		      u /= gcd;
		      d /= gcd;
		
		      if (d < 0) {
		        d = -d;
		        u = -u;
		      }
		      return this.set(u, d);
		    }
		  }, {
		    key: 'add',
		    value: function add(param1, param2) {
		      var otherNumerator = void 0;
		      var otherDenominator = void 0;
		
		      if (param1 instanceof Fraction) {
		        otherNumerator = param1.numerator;
		        otherDenominator = param1.denominator;
		      } else {
		        if (param1 !== undefined) {
		          otherNumerator = param1;
		        } else {
		          otherNumerator = 0;
		        }
		
		        if (param2 !== undefined) {
		          otherDenominator = param2;
		        } else {
		          otherDenominator = 1;
		        }
		      }
		
		      var lcm = Fraction.LCM(this.denominator, otherDenominator);
		      var a = lcm / this.denominator;
		      var b = lcm / otherDenominator;
		
		      var u = this.numerator * a + otherNumerator * b;
		      return this.set(u, lcm);
		    }
		  }, {
		    key: 'subtract',
		    value: function subtract(param1, param2) {
		      var otherNumerator = void 0;
		      var otherDenominator = void 0;
		
		      if (param1 instanceof Fraction) {
		        otherNumerator = param1.numerator;
		        otherDenominator = param1.denominator;
		      } else {
		        if (param1 !== undefined) {
		          otherNumerator = param1;
		        } else {
		          otherNumerator = 0;
		        }
		
		        if (param2 !== undefined) {
		          otherDenominator = param2;
		        } else {
		          otherDenominator = 1;
		        }
		      }
		
		      var lcm = Fraction.LCM(this.denominator, otherDenominator);
		      var a = lcm / this.denominator;
		      var b = lcm / otherDenominator;
		
		      var u = this.numerator * a - otherNumerator * b;
		      return this.set(u, lcm);
		    }
		  }, {
		    key: 'multiply',
		    value: function multiply(param1, param2) {
		      var otherNumerator = void 0;
		      var otherDenominator = void 0;
		
		      if (param1 instanceof Fraction) {
		        otherNumerator = param1.numerator;
		        otherDenominator = param1.denominator;
		      } else {
		        if (param1 !== undefined) {
		          otherNumerator = param1;
		        } else {
		          otherNumerator = 1;
		        }
		
		        if (param2 !== undefined) {
		          otherDenominator = param2;
		        } else {
		          otherDenominator = 1;
		        }
		      }
		
		      return this.set(this.numerator * otherNumerator, this.denominator * otherDenominator);
		    }
		  }, {
		    key: 'divide',
		    value: function divide(param1, param2) {
		      var otherNumerator = void 0;
		      var otherDenominator = void 0;
		
		      if (param1 instanceof Fraction) {
		        otherNumerator = param1.numerator;
		        otherDenominator = param1.denominator;
		      } else {
		        if (param1 !== undefined) {
		          otherNumerator = param1;
		        } else {
		          otherNumerator = 1;
		        }
		
		        if (param2 !== undefined) {
		          otherDenominator = param2;
		        } else {
		          otherDenominator = 1;
		        }
		      }
		
		      return this.set(this.numerator * otherDenominator, this.denominator * otherNumerator);
		    }
		
		    // Simplifies both sides and checks if they are equal.
		
		  }, {
		    key: 'equals',
		    value: function equals(compare) {
		      var a = Fraction.__compareA.copy(compare).simplify();
		      var b = Fraction.__compareB.copy(this).simplify();
		
		      return a.numerator === b.numerator && a.denominator === b.denominator;
		    }
		
		    // Greater than operator.
		
		  }, {
		    key: 'greaterThan',
		    value: function greaterThan(compare) {
		      var a = Fraction.__compareB.copy(this);
		      a.subtract(compare);
		      return a.numerator > 0;
		    }
		
		    // Greater than or equals operator.
		
		  }, {
		    key: 'greaterThanEquals',
		    value: function greaterThanEquals(compare) {
		      var a = Fraction.__compareB.copy(this);
		      a.subtract(compare);
		      return a.numerator >= 0;
		    }
		
		    // Less than operator.
		
		  }, {
		    key: 'lessThan',
		    value: function lessThan(compare) {
		      return !this.greaterThanEquals(compare);
		    }
		
		    // Less than or equals operator.
		
		  }, {
		    key: 'lessThanEquals',
		    value: function lessThanEquals(compare) {
		      return !this.greaterThan(compare);
		    }
		
		    // Creates a new copy with this current values.
		
		  }, {
		    key: 'clone',
		    value: function clone() {
		      return new Fraction(this.numerator, this.denominator);
		    }
		
		    // Copies value of another Fraction into itself.
		
		  }, {
		    key: 'copy',
		    value: function copy(_copy) {
		      return this.set(_copy.numerator, _copy.denominator);
		    }
		
		    // Returns the integer component eg. (4/2) == 2
		
		  }, {
		    key: 'quotient',
		    value: function quotient() {
		      return Math.floor(this.numerator / this.denominator);
		    }
		
		    // Returns the fraction component when reduced to a mixed number
		
		  }, {
		    key: 'fraction',
		    value: function fraction() {
		      return this.numerator % this.denominator;
		    }
		
		    // Returns the absolute value
		
		  }, {
		    key: 'abs',
		    value: function abs() {
		      this.denominator = Math.abs(this.denominator);
		      this.numerator = Math.abs(this.numerator);
		      return this;
		    }
		
		    // Returns a raw string representation
		
		  }, {
		    key: 'toString',
		    value: function toString() {
		      return this.numerator + '/' + this.denominator;
		    }
		
		    // Returns a simplified string respresentation
		
		  }, {
		    key: 'toSimplifiedString',
		    value: function toSimplifiedString() {
		      return Fraction.__tmp.copy(this).simplify().toString();
		    }
		
		    // Returns string representation in mixed form
		
		  }, {
		    key: 'toMixedString',
		    value: function toMixedString() {
		      var s = '';
		      var q = this.quotient();
		      var f = Fraction.__tmp.copy(this);
		
		      if (q < 0) {
		        f.abs().fraction();
		      } else {
		        f.fraction();
		      }
		
		      if (q !== 0) {
		        s += q;
		
		        if (f.numerator !== 0) {
		          s += ' ' + f.toSimplifiedString();
		        }
		      } else {
		        if (f.numerator === 0) {
		          s = '0';
		        } else {
		          s = f.toSimplifiedString();
		        }
		      }
		
		      return s;
		    }
		
		    // Parses a fraction string
		
		  }, {
		    key: 'parse',
		    value: function parse(str) {
		      var i = str.split('/');
		      var n = parseInt(i[0], 10);
		      var d = i[1] ? parseInt(i[1], 10) : 1;
		
		      return this.set(n, d);
		    }
		  }]);
		
		  return Fraction;
		}();
		
		// Temporary cached objects
		
		
		exports.Fraction = Fraction;
		Fraction.__compareA = new Fraction();
		Fraction.__compareB = new Fraction();
		Fraction.__tmp = new Fraction();
	
	/***/ },
	/* 4 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Glyph = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _boundingboxcomputation = __webpack_require__(7);
		
		var _boundingbox = __webpack_require__(8);
		
		var _vexflow_font = __webpack_require__(9);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		function processOutline(outline, originX, originY, scaleX, scaleY, outlineFns) {
		  var command = void 0;
		  var x = void 0;
		  var y = void 0;
		  var i = 0;
		
		  function nextX() {
		    return originX + outline[i++] * scaleX;
		  }
		  function nextY() {
		    return originY + outline[i++] * scaleY;
		  }
		
		  while (i < outline.length) {
		    command = outline[i++];
		    switch (command) {
		      case 'm':
		      case 'l':
		        outlineFns[command](nextX(), nextY());
		        break;
		      case 'q':
		        x = nextX();
		        y = nextY();
		        outlineFns.q(nextX(), nextY(), x, y);
		        break;
		      case 'b':
		        x = nextX();
		        y = nextY();
		        outlineFns.b(nextX(), nextY(), nextX(), nextY(), x, y);
		        break;
		      default:
		        break;
		    }
		  }
		}
		
		var Glyph = exports.Glyph = function (_Element) {
		  _inherits(Glyph, _Element);
		
		  _createClass(Glyph, null, [{
		    key: 'loadMetrics',
		
		    /* Static methods used to implement loading / unloading of glyphs */
		    value: function loadMetrics(font, code, cache) {
		      var glyph = font.glyphs[code];
		      if (!glyph) {
		        throw new _vex.Vex.RERR('BadGlyph', 'Glyph ' + code + ' does not exist in font.');
		      }
		
		      var x_min = glyph.x_min;
		      var x_max = glyph.x_max;
		      var ha = glyph.ha;
		
		      var outline = void 0;
		
		      if (glyph.o) {
		        if (cache) {
		          if (glyph.cached_outline) {
		            outline = glyph.cached_outline;
		          } else {
		            outline = glyph.o.split(' ');
		            glyph.cached_outline = outline;
		          }
		        } else {
		          if (glyph.cached_outline) delete glyph.cached_outline;
		          outline = glyph.o.split(' ');
		        }
		
		        return {
		          x_min: x_min,
		          x_max: x_max,
		          ha: ha,
		          outline: outline
		        };
		      } else {
		        throw new _vex.Vex.RERR('BadGlyph', 'Glyph ' + code + ' has no outline defined.');
		      }
		    }
		
		    /**
		     * A quick and dirty static glyph renderer. Renders glyphs from the default
		     * font defined in Vex.Flow.Font.
		     *
		     * @param {!Object} ctx The canvas context.
		     * @param {number} x_pos X coordinate.
		     * @param {number} y_pos Y coordinate.
		     * @param {number} point The point size to use.
		     * @param {string} val The glyph code in Vex.Flow.Font.
		     * @param {boolean} nocache If set, disables caching of font outline.
		     */
		
		  }, {
		    key: 'renderGlyph',
		    value: function renderGlyph(ctx, x_pos, y_pos, point, val, nocache) {
		      var scale = point * 72.0 / (_vexflow_font.Font.resolution * 100.0);
		      var metrics = Glyph.loadMetrics(_vexflow_font.Font, val, !nocache);
		      Glyph.renderOutline(ctx, metrics.outline, scale, x_pos, y_pos);
		    }
		  }, {
		    key: 'renderOutline',
		    value: function renderOutline(ctx, outline, scale, x_pos, y_pos) {
		      ctx.beginPath();
		      ctx.moveTo(x_pos, y_pos);
		      processOutline(outline, x_pos, y_pos, scale, -scale, {
		        m: ctx.moveTo.bind(ctx),
		        l: ctx.lineTo.bind(ctx),
		        q: ctx.quadraticCurveTo.bind(ctx),
		        b: ctx.bezierCurveTo.bind(ctx)
		      });
		      ctx.fill();
		    }
		  }, {
		    key: 'getOutlineBoundingBox',
		    value: function getOutlineBoundingBox(outline, scale, x_pos, y_pos) {
		      var bboxComp = new _boundingboxcomputation.BoundingBoxComputation();
		
		      processOutline(outline, x_pos, y_pos, scale, -scale, {
		        m: bboxComp.addPoint.bind(bboxComp),
		        l: bboxComp.addPoint.bind(bboxComp),
		        q: bboxComp.addQuadraticCurve.bind(bboxComp),
		        b: bboxComp.addBezierCurve.bind(bboxComp)
		      });
		
		      return new _boundingbox.BoundingBox(bboxComp.x1, bboxComp.y1, bboxComp.width(), bboxComp.height());
		    }
		
		    /**
		     * @constructor
		     */
		
		  }]);
		
		  function Glyph(code, point, options) {
		    _classCallCheck(this, Glyph);
		
		    var _this = _possibleConstructorReturn(this, (Glyph.__proto__ || Object.getPrototypeOf(Glyph)).call(this));
		
		    _this.setAttribute('type', 'Glyph');
		
		    _this.code = code;
		    _this.point = point;
		    _this.options = {
		      cache: true,
		      font: _vexflow_font.Font
		    };
		
		    _this.metrics = null;
		    _this.x_shift = 0;
		    _this.y_shift = 0;
		
		    _this.originShift = {
		      x: 0,
		      y: 0
		    };
		
		    if (options) {
		      _this.setOptions(options);
		    } else {
		      _this.reset();
		    }
		    return _this;
		  }
		
		  _createClass(Glyph, [{
		    key: 'setOptions',
		    value: function setOptions(options) {
		      _vex.Vex.Merge(this.options, options);
		      this.reset();
		    }
		  }, {
		    key: 'setPoint',
		    value: function setPoint(point) {
		      this.point = point;return this;
		    }
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      this.stave = stave;return this;
		    }
		  }, {
		    key: 'setXShift',
		    value: function setXShift(x_shift) {
		      this.x_shift = x_shift;return this;
		    }
		  }, {
		    key: 'setYShift',
		    value: function setYShift(y_shift) {
		      this.y_shift = y_shift;return this;
		    }
		  }, {
		    key: 'reset',
		    value: function reset() {
		      this.scale = this.point * 72 / (this.options.font.resolution * 100);
		      this.metrics = Glyph.loadMetrics(this.options.font, this.code, this.options.cache);
		      this.bbox = Glyph.getOutlineBoundingBox(this.metrics.outline, this.scale, 0, 0);
		    }
		  }, {
		    key: 'getMetrics',
		    value: function getMetrics() {
		      if (!this.metrics) {
		        throw new _vex.Vex.RuntimeError('BadGlyph', 'Glyph ' + this.code + ' is not initialized.');
		      }
		
		      return {
		        x_min: this.metrics.x_min * this.scale,
		        x_max: this.metrics.x_max * this.scale,
		        width: this.bbox.getW(),
		        height: this.bbox.getH()
		      };
		    }
		  }, {
		    key: 'setOriginX',
		    value: function setOriginX(x) {
		      var bbox = this.bbox;
		
		      var originX = Math.abs(bbox.getX() / bbox.getW());
		      var xShift = (x - originX) * bbox.getW();
		      this.originShift.x = -xShift;
		    }
		  }, {
		    key: 'setOriginY',
		    value: function setOriginY(y) {
		      var bbox = this.bbox;
		
		      var originY = Math.abs(bbox.getY() / bbox.getH());
		      var yShift = (y - originY) * bbox.getH();
		      this.originShift.y = -yShift;
		    }
		  }, {
		    key: 'setOrigin',
		    value: function setOrigin(x, y) {
		      this.setOriginX(x);
		      this.setOriginY(y);
		    }
		  }, {
		    key: 'render',
		    value: function render(ctx, x, y) {
		      if (!this.metrics) {
		        throw new _vex.Vex.RuntimeError('BadGlyph', 'Glyph ' + this.code + ' is not initialized.');
		      }
		
		      var outline = this.metrics.outline;
		      var scale = this.scale;
		
		      this.setRendered();
		      Glyph.renderOutline(ctx, outline, scale, x + this.originShift.x, y + this.originShift.y);
		    }
		  }, {
		    key: 'renderToStave',
		    value: function renderToStave(x) {
		      this.checkContext();
		
		      if (!this.metrics) {
		        throw new _vex.Vex.RuntimeError('BadGlyph', 'Glyph ' + this.code + ' is not initialized.');
		      }
		
		      if (!this.stave) {
		        throw new _vex.Vex.RuntimeError('GlyphError', 'No valid stave');
		      }
		
		      var outline = this.metrics.outline;
		      var scale = this.scale;
		
		      this.setRendered();
		      Glyph.renderOutline(this.context, outline, scale, x + this.x_shift, this.stave.getYForGlyphs() + this.y_shift);
		    }
		  }]);
	
		  return Glyph;
		}(_element.Element);
	
	/***/ },
	/* 5 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Element = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// @author Mohit Cheppudira
		//
		// ## Description
		//
		// This file implements a generic base class for VexFlow, with implementations
		// of general functions and properties that can be inherited by all VexFlow elements.
		
		var _vex = __webpack_require__(1);
		
		var _registry = __webpack_require__(6);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Element = exports.Element = function () {
		  _createClass(Element, null, [{
		    key: 'newID',
		    value: function newID() {
		      return 'auto' + Element.ID++;
		    }
		  }]);
		
		  function Element() {
		    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
		        type = _ref.type;
		
		    _classCallCheck(this, Element);
		
		    this.attrs = {
		      id: Element.newID(),
		      el: null,
		      type: type || 'Base',
		      classes: {}
		    };
		
		    this.boundingBox = null;
		    this.context = null;
		    this.rendered = false;
		
		    // If a default registry exist, then register with it right away.
		    if (_registry.Registry.getDefaultRegistry()) {
		      _registry.Registry.getDefaultRegistry().register(this);
		    }
		  }
		
		  // An element can have multiple class labels.
		
		
		  _createClass(Element, [{
		    key: 'hasClass',
		    value: function hasClass(className) {
		      return this.attrs.classes[className] === true;
		    }
		  }, {
		    key: 'addClass',
		    value: function addClass(className) {
		      this.attrs.classes[className] = true;
		      if (this.registry) {
		        this.registry.onUpdate({
		          id: this.getAttribute('id'),
		          name: 'class',
		          value: className,
		          oldValue: null
		        });
		      }
		      return this;
		    }
		  }, {
		    key: 'removeClass',
		    value: function removeClass(className) {
		      delete this.attrs.classes[className];
		      if (this.registry) {
		        this.registry.onUpdate({
		          id: this.getAttribute('id'),
		          name: 'class',
		          value: null,
		          oldValue: className
		        });
		      }
		      return this;
		    }
		
		    // This is called by the registry after the element is registered.
		
		  }, {
		    key: 'onRegister',
		    value: function onRegister(registry) {
		      this.registry = registry;return this;
		    }
		  }, {
		    key: 'isRendered',
		    value: function isRendered() {
		      return this.rendered;
		    }
		  }, {
		    key: 'setRendered',
		    value: function setRendered() {
		      var rendered = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
		      this.rendered = rendered;return this;
		    }
		  }, {
		    key: 'getAttributes',
		    value: function getAttributes() {
		      return this.attrs;
		    }
		  }, {
		    key: 'getAttribute',
		    value: function getAttribute(name) {
		      return this.attrs[name];
		    }
		  }, {
		    key: 'setAttribute',
		    value: function setAttribute(name, value) {
		      var id = this.attrs.id;
		      var oldValue = this.attrs[name];
		      this.attrs[name] = value;
		      if (this.registry) {
		        // Register with old id to support id changes.
		        this.registry.onUpdate({ id: id, name: name, value: value, oldValue: oldValue });
		      }
		      return this;
		    }
		  }, {
		    key: 'getContext',
		    value: function getContext() {
		      return this.context;
		    }
		  }, {
		    key: 'setContext',
		    value: function setContext(context) {
		      this.context = context;return this;
		    }
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      return this.boundingBox;
		    }
		
		    // Validators
		
		  }, {
		    key: 'checkContext',
		    value: function checkContext() {
		      if (!this.context) {
		        throw new _vex.Vex.RERR('NoContext', 'No rendering context attached to instance');
		      }
		      return this.context;
		    }
		  }]);
		
		  return Element;
		}();
		
		Element.ID = 1000;
	
	/***/ },
	/* 6 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Registry = exports.X = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// @author Mohit Cheppudira
		//
		// ## Description
		//
		// This file implements a registry for VexFlow elements. It allows users
		// to track, query, and manage some subset of generated elements, and
		// dynamically get and set attributes.
		//
		// There are two ways to regiser with a registry:
		//
		// 1) Explicitly call `element.register(registry)`, or,
		// 2) Call `Registry.enableDefaultRegistry(registry)` when ready, and all future
		//    elements will automatically register with it.
		//
		// Once an element is registered, selected attributes are tracked and indexed by
		// the registry. This allows fast look up of elements by attributes like id, type,
		// and class.
		
		var _vex = __webpack_require__(1);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var X = exports.X = _vex.Vex.MakeException('RegistryError');
		
		function setIndexValue(index, name, value, id, elem) {
		  if (!index[name][value]) index[name][value] = {};
		  index[name][value][id] = elem;
		}
		
		var Registry = exports.Registry = function () {
		  _createClass(Registry, null, [{
		    key: 'INDEXES',
		    get: function get() {
		      return ['type'];
		    }
		  }]);
		
		  function Registry() {
		    _classCallCheck(this, Registry);
		
		    this.clear();
		  }
		
		  // If you call `enableDefaultRegistry`, any new elements will auto-register with
		  // the provided registry as soon as they're constructed.
		
		
		  _createClass(Registry, [{
		    key: 'clear',
		    value: function clear() {
		      // Indexes are represented as maps of maps (of maps). This allows
		      // for both multi-labeling (e.g., an element can have multiple classes)
		      // and efficient lookup.
		      this.index = {
		        id: {},
		        type: {},
		        class: {}
		      };
		      return this;
		    }
		
		    // Updates the indexes for element 'id'. If an element's attribute changes
		    // from A -> B, make sure to remove the element from A.
		
		  }, {
		    key: 'updateIndex',
		    value: function updateIndex(_ref) {
		      var id = _ref.id,
		          name = _ref.name,
		          value = _ref.value,
		          oldValue = _ref.oldValue;
		
		      var elem = this.getElementById(id);
		      if (oldValue !== null && this.index[name][oldValue]) {
		        delete this.index[name][oldValue][id];
		      }
		      if (value !== null) {
		        setIndexValue(this.index, name, value, elem.getAttribute('id'), elem);
		      }
		    }
		
		    // Register element `elem` with this registry. This adds the element to its index and watches
		    // it for attribute changes.
		
		  }, {
		    key: 'register',
		    value: function register(elem, id) {
		      var _this = this;
		
		      id = id || elem.getAttribute('id');
		
		      if (!id) {
		        throw new X('Can\'t add element without `id` attribute to registry', elem);
		      }
		
		      // Manually add id to index, then update other indexes.
		      elem.setAttribute('id', id);
		      setIndexValue(this.index, 'id', id, id, elem);
		      Registry.INDEXES.forEach(function (name) {
		        _this.updateIndex({ id: id, name: name, value: elem.getAttribute(name), oldValue: null });
		      });
		      elem.onRegister(this);
		      return this;
		    }
		  }, {
		    key: 'getElementById',
		    value: function getElementById(id) {
		      return this.index.id[id] ? this.index.id[id][id] : null;
		    }
		  }, {
		    key: 'getElementsByAttribute',
		    value: function getElementsByAttribute(attrName, value) {
		      var index = this.index[attrName];
		      if (index && index[value]) {
		        return Object.keys(index[value]).map(function (i) {
		          return index[value][i];
		        });
		      } else {
		        return [];
		      }
		    }
		  }, {
		    key: 'getElementsByType',
		    value: function getElementsByType(type) {
		      return this.getElementsByAttribute('type', type);
		    }
		  }, {
		    key: 'getElementsByClass',
		    value: function getElementsByClass(className) {
		      return this.getElementsByAttribute('class', className);
		    }
		
		    // This is called by the element when an attribute value changes. If an indexed
		    // attribute changes, then update the local index.
		
		  }, {
		    key: 'onUpdate',
		    value: function onUpdate(_ref2) {
		      var id = _ref2.id,
		          name = _ref2.name,
		          value = _ref2.value,
		          oldValue = _ref2.oldValue;
		
		      function includes(array, value) {
		        return array.filter(function (x) {
		          return x === value;
		        }).length > 0;
		      }
		
		      if (!includes(Registry.INDEXES.concat(['id', 'class']), name)) return this;
		      this.updateIndex({ id: id, name: name, value: value, oldValue: oldValue });
		      return this;
		    }
		  }], [{
		    key: 'enableDefaultRegistry',
		    value: function enableDefaultRegistry(registry) {
		      Registry.defaultRegistry = registry;
		    }
		  }, {
		    key: 'getDefaultRegistry',
		    value: function getDefaultRegistry() {
		      return Registry.defaultRegistry;
		    }
		  }, {
		    key: 'disableDefaultRegistry',
		    value: function disableDefaultRegistry() {
		      Registry.defaultRegistry = null;
		    }
		  }]);
		
		  return Registry;
		}();
		
		Registry.defaultRegistry = null;
	
	/***/ },
	/* 7 */
	/***/ function(module, exports) {
	
		"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// ## Description
		//
		// Object which computes metrics for a bounding box by continuously
		// taking canvas path commands
		
		// Warning: This file is merely a crutch to get bounding box information without
		// explicit metadata. This is likely to get deprecated following SMuFL support.
		//
		// taken from: https://github.com/gabelerner/canvg/blob/860e418aca67b9a41e858a223d74d375793ec364/ca
		// nvg.js#L449
		
		var BoundingBoxComputation = exports.BoundingBoxComputation = function () {
		  function BoundingBoxComputation(x1, y1, x2, y2) {
		    _classCallCheck(this, BoundingBoxComputation);
		
		    // pass in initial points if you want
		    this.x1 = Number.NaN;
		    this.y1 = Number.NaN;
		    this.x2 = Number.NaN;
		    this.y2 = Number.NaN;
		
		    this.addPoint(x1, y1);
		    this.addPoint(x2, y2);
		  }
		
		  _createClass(BoundingBoxComputation, [{
		    key: "width",
		    value: function width() {
		      return this.x2 - this.x1;
		    }
		  }, {
		    key: "height",
		    value: function height() {
		      return this.y2 - this.y1;
		    }
		  }, {
		    key: "addPoint",
		    value: function addPoint(x, y) {
		      if (x != null) {
		        if (isNaN(this.x1) || isNaN(this.x2)) {
		          this.x1 = x;
		          this.x2 = x;
		        }
		        if (x < this.x1) this.x1 = x;
		        if (x > this.x2) this.x2 = x;
		      }
		
		      if (y != null) {
		        if (isNaN(this.y1) || isNaN(this.y2)) {
		          this.y1 = y;
		          this.y2 = y;
		        }
		        if (y < this.y1) this.y1 = y;
		        if (y > this.y2) this.y2 = y;
		      }
		    }
		  }, {
		    key: "addX",
		    value: function addX(x) {
		      this.addPoint(x, null);
		    }
		  }, {
		    key: "addY",
		    value: function addY(y) {
		      this.addPoint(null, y);
		    }
		  }, {
		    key: "addQuadraticCurve",
		    value: function addQuadraticCurve(p0x, p0y, p1x, p1y, p2x, p2y) {
		      var cp1x = p0x + 2 / 3 * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)
		      var cp1y = p0y + 2 / 3 * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)
		      var cp2x = cp1x + 1 / 3 * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)
		      var cp2y = cp1y + 1 / 3 * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)
		      this.addBezierCurve(p0x, p0y, cp1x, cp1y, cp2x, cp2y, p2x, p2y);
		    }
		  }, {
		    key: "addBezierCurve",
		    value: function addBezierCurve(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {
		      // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
		      var p0 = [p0x, p0y];
		      var p1 = [p1x, p1y];
		      var p2 = [p2x, p2y];
		      var p3 = [p3x, p3y];
		      var i = void 0;
		
		      this.addPoint(p0[0], p0[1]);
		      this.addPoint(p3[0], p3[1]);
		
		      var f = function f(t, i) {
		        return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];
		      };
		
		      for (i = 0; i <= 1; i++) {
		        var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
		        var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
		        var c = 3 * p1[i] - 3 * p0[i];
		
		        if (a === 0) {
		          if (b === 0) continue;
		          var t = -c / b;
		          if (0 < t && t < 1) {
		            if (i === 0) this.addX(f(t, i));
		            if (i === 1) this.addY(f(t, i));
		          }
		          continue;
		        }
		
		        var b2ac = Math.pow(b, 2) - 4 * c * a;
		        if (b2ac < 0) continue;
		        var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
		        if (0 < t1 && t1 < 1) {
		          if (i === 0) this.addX(f(t1, i));
		          if (i === 1) this.addY(f(t1, i));
		        }
		        var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
		        if (0 < t2 && t2 < 1) {
		          if (i === 0) this.addX(f(t2, i));
		          if (i === 1) this.addY(f(t2, i));
		        }
		      }
		    }
		  }]);
	
		  return BoundingBoxComputation;
		}();
	
	/***/ },
	/* 8 */
	/***/ function(module, exports) {
	
		"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// Vex Music Notation
		// Mohit Muthanna <mohit@muthanna.com>
		//
		// Copyright Mohit Muthanna 2010
		
		// Bounding boxes for interactive notation
		
		var BoundingBox = exports.BoundingBox = function () {
		  _createClass(BoundingBox, null, [{
		    key: "copy",
		    value: function copy(that) {
		      return new BoundingBox(that.x, that.y, that.w, that.h);
		    }
		  }]);
		
		  function BoundingBox(x, y, w, h) {
		    _classCallCheck(this, BoundingBox);
		
		    this.x = x;
		    this.y = y;
		    this.w = w;
		    this.h = h;
		  }
		
		  _createClass(BoundingBox, [{
		    key: "getX",
		    value: function getX() {
		      return this.x;
		    }
		  }, {
		    key: "getY",
		    value: function getY() {
		      return this.y;
		    }
		  }, {
		    key: "getW",
		    value: function getW() {
		      return this.w;
		    }
		  }, {
		    key: "getH",
		    value: function getH() {
		      return this.h;
		    }
		  }, {
		    key: "setX",
		    value: function setX(x) {
		      this.x = x;return this;
		    }
		  }, {
		    key: "setY",
		    value: function setY(y) {
		      this.y = y;return this;
		    }
		  }, {
		    key: "setW",
		    value: function setW(w) {
		      this.w = w;return this;
		    }
		  }, {
		    key: "setH",
		    value: function setH(h) {
		      this.h = h;return this;
		    }
		  }, {
		    key: "move",
		    value: function move(x, y) {
		      this.x += x;this.y += y;
		    }
		  }, {
		    key: "clone",
		    value: function clone() {
		      return BoundingBox.copy(this);
		    }
		
		    // Merge my box with given box. Creates a bigger bounding box unless
		    // the given box is contained in this one.
		
		  }, {
		    key: "mergeWith",
		    value: function mergeWith(boundingBox, ctx) {
		      var that = boundingBox;
		
		      var new_x = this.x < that.x ? this.x : that.x;
		      var new_y = this.y < that.y ? this.y : that.y;
		      var new_w = Math.max(this.x + this.w, that.x + that.w) - new_x;
		      var new_h = Math.max(this.y + this.h, that.y + that.h) - new_y;
		
		      this.x = new_x;
		      this.y = new_y;
		      this.w = new_w;
		      this.h = new_h;
		
		      if (ctx) this.draw(ctx);
		      return this;
		    }
		  }, {
		    key: "draw",
		    value: function draw(ctx, x, y) {
		      if (!x) x = 0;
		      if (!y) y = 0;
		      ctx.rect(this.x + x, this.y + y, this.w, this.h);
		      ctx.stroke();
		    }
		  }]);
	
		  return BoundingBox;
		}();
	
	/***/ },
	/* 9 */
	/***/ function(module, exports) {
	
		"use strict";
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		var Font = exports.Font = {
		  "glyphs": {
		    "v0": { "x_min": 0, "x_max": 514.5, "ha": 525, "o": "m 236 648 b 246 648 238 648 242 648 b 288 646 261 648 283 648 b 472 513 364 634 428 587 b 514 347 502 464 514 413 b 462 163 514 272 499 217 b 257 44 409 83 333 44 b 50 163 181 44 103 83 b 0 347 14 217 0 272 b 40 513 0 413 12 464 b 236 648 87 591 155 638 m 277 614 b 253 616 273 616 261 616 b 242 616 247 616 243 616 b 170 499 193 609 181 589 b 159 348 163 446 159 398 b 166 222 159 308 161 266 b 201 91 174 138 183 106 b 257 76 215 81 235 76 b 311 91 277 76 299 81 b 347 222 330 106 338 138 b 353 348 352 266 353 308 b 344 499 353 398 351 446 b 277 614 333 587 322 606 m 257 -1 l 258 -1 l 255 -1 l 257 -1 m 257 673 l 258 673 l 255 673 l 257 673 " },
		    "v1": { "x_min": -1.359375, "x_max": 344.359375, "ha": 351, "o": "m 126 637 l 129 638 l 198 638 l 266 638 l 269 635 b 274 631 272 634 273 632 l 277 627 l 277 395 b 279 156 277 230 277 161 b 329 88 281 123 295 106 b 344 69 341 81 344 79 b 337 55 344 62 343 59 l 333 54 l 197 54 l 61 54 l 58 55 b 50 69 53 59 50 62 b 65 88 50 79 53 81 b 80 97 72 91 74 93 b 117 156 103 113 112 129 b 117 345 117 161 117 222 l 117 528 l 100 503 l 38 406 b 14 383 24 384 23 383 b -1 398 5 383 -1 390 b 4 415 -1 403 1 409 b 16 437 5 416 10 426 l 72 539 l 100 596 b 121 632 119 631 119 631 b 126 637 122 634 125 635 m 171 -1 l 172 -1 l 170 -1 l 171 -1 m 171 673 l 172 673 l 170 673 l 171 673 " },
		    "v2": { "x_min": -1.359375, "x_max": 458.6875, "ha": 468, "o": "m 197 648 b 216 648 201 648 208 648 b 258 646 232 648 253 648 b 419 546 333 637 393 599 b 432 489 428 528 432 509 b 356 342 432 440 405 384 b 235 278 322 313 288 295 b 69 170 166 256 107 217 b 69 169 69 170 69 169 b 69 169 69 169 69 169 b 74 173 69 169 72 170 b 209 222 112 204 163 222 b 310 195 247 222 274 215 b 371 179 332 184 352 179 b 396 181 379 179 387 179 b 428 202 409 184 423 194 b 442 212 431 209 436 212 b 458 197 450 212 458 206 b 441 148 458 190 449 165 b 299 44 409 84 353 44 b 288 45 295 44 292 44 b 250 61 274 45 268 49 b 122 99 212 86 164 99 b 73 91 104 99 88 97 b 28 63 53 84 34 72 b 14 54 25 56 20 54 b 1 62 9 54 4 56 l -1 65 l -1 79 b 0 99 -1 91 0 95 b 2 113 1 102 2 108 b 164 309 20 197 81 272 b 285 470 232 341 277 398 b 287 487 287 476 287 481 b 171 595 287 551 239 595 b 155 595 166 595 160 595 b 142 592 145 594 142 594 b 145 589 142 592 142 591 b 179 527 168 576 179 551 b 132 455 179 496 163 467 b 104 451 122 452 112 451 b 27 530 62 451 27 487 b 29 555 27 538 27 546 b 197 648 44 601 115 639 m 228 -1 l 230 -1 l 227 -1 l 228 -1 m 228 673 l 230 673 l 227 673 l 228 673 " },
		    "v3": { "x_min": -1.359375, "x_max": 409.6875, "ha": 418, "o": "m 174 648 b 191 648 176 648 183 648 b 225 648 204 648 220 648 b 402 523 317 638 389 588 b 404 503 404 517 404 510 b 402 484 404 495 404 488 b 264 373 389 437 334 394 b 257 370 259 371 257 371 b 257 370 257 370 257 370 b 264 369 258 370 261 369 b 409 202 359 334 409 267 b 318 72 409 152 381 104 b 200 43 281 52 240 43 b 23 113 134 43 69 68 b 0 169 6 129 0 149 b 77 249 0 210 29 249 l 77 249 b 152 174 125 249 152 212 b 103 102 152 145 137 116 b 103 102 103 102 103 102 b 147 94 103 101 132 95 b 153 94 149 94 151 94 b 265 206 219 94 265 141 b 264 226 265 213 265 219 b 147 355 253 299 204 353 b 126 371 133 356 126 362 b 147 388 126 383 132 388 b 254 474 196 391 238 424 b 259 502 258 484 259 494 b 182 592 259 544 228 582 b 156 595 175 595 166 595 b 115 592 142 595 129 594 l 111 591 l 115 588 b 152 524 141 574 152 549 b 92 449 152 491 130 458 b 76 448 87 448 81 448 b -1 530 32 448 -1 488 b 20 581 -1 548 5 566 b 174 648 55 619 108 641 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 " },
		    "v4": { "x_min": 0, "x_max": 468.21875, "ha": 478, "o": "m 174 637 b 232 638 175 638 189 638 b 277 638 245 638 259 638 l 378 638 l 381 635 b 389 623 386 632 389 627 b 382 609 389 617 386 613 b 366 589 381 606 372 598 l 313 528 l 245 451 l 209 410 l 155 348 l 84 267 b 59 240 72 252 59 240 b 59 240 59 240 59 240 b 151 238 59 238 68 238 l 242 238 l 242 303 b 243 371 242 369 242 370 b 289 426 245 374 254 385 l 303 441 l 317 456 l 338 483 l 360 506 l 371 520 b 386 527 375 526 381 527 b 400 519 392 527 397 524 b 401 440 401 516 401 514 b 401 377 401 423 401 402 l 401 238 l 426 238 b 453 237 449 238 450 238 b 465 217 461 234 465 226 b 460 202 465 212 464 206 b 426 197 454 197 453 197 l 401 197 l 401 180 b 451 88 402 129 412 109 b 468 69 465 81 468 79 b 461 55 468 62 466 59 l 458 54 l 321 54 l 185 54 l 182 55 b 175 69 176 59 175 62 b 191 88 175 79 176 81 b 240 180 230 109 240 129 l 240 197 l 125 197 b 73 195 104 195 87 195 b 8 197 10 195 9 197 b 0 212 2 199 0 205 b 0 212 0 212 0 212 b 20 242 0 219 0 219 b 163 610 104 344 163 492 b 174 637 163 628 166 634 m 234 -1 l 235 -1 l 232 -1 l 234 -1 m 234 673 l 235 673 l 232 673 l 234 673 " },
		    "v5": { "x_min": 0, "x_max": 409.6875, "ha": 418, "o": "m 47 637 b 53 638 49 638 50 638 b 69 634 55 638 61 637 b 210 610 114 619 161 610 b 363 634 259 610 311 619 b 382 638 372 637 378 638 b 392 634 386 638 389 637 b 397 623 396 630 397 627 b 393 610 397 620 396 616 b 298 505 368 552 338 520 b 212 494 277 498 246 494 b 65 517 163 494 106 502 b 61 517 62 517 61 517 b 61 517 61 517 61 517 b 51 408 61 517 51 412 b 51 408 51 408 51 408 b 51 408 51 408 51 408 b 61 412 53 408 55 409 b 125 434 80 421 103 430 b 185 441 145 440 166 441 b 409 244 310 441 409 353 b 401 191 409 227 406 209 b 197 43 375 105 287 43 b 159 47 183 43 171 44 b 23 123 112 56 61 86 b 0 180 6 140 0 159 b 76 260 0 220 31 260 b 92 259 81 260 87 259 b 152 183 132 251 152 216 b 100 112 152 152 134 122 b 95 111 98 112 95 111 b 95 111 95 111 95 111 b 129 98 95 109 119 101 b 148 97 136 97 141 97 b 264 235 206 97 261 158 b 265 248 265 240 265 244 b 210 398 265 312 243 373 b 179 408 201 406 194 408 b 174 408 178 408 176 408 b 53 369 130 408 88 394 b 34 359 39 359 38 359 b 17 374 24 359 17 365 b 39 628 17 384 38 625 b 47 637 40 631 43 635 m 204 -1 l 205 -1 l 202 -1 l 204 -1 m 204 673 l 205 673 l 202 673 l 204 673 " },
		    "v6": { "x_min": 0, "x_max": 475.03125, "ha": 485, "o": "m 255 648 b 274 648 259 648 266 648 b 314 646 288 648 307 648 b 450 555 374 637 438 594 b 454 530 453 546 454 538 b 375 451 454 485 416 451 b 328 467 359 451 343 455 b 300 526 310 483 300 503 b 352 598 300 557 319 589 b 356 599 355 598 356 599 b 352 602 356 599 355 601 b 288 616 330 612 308 616 b 210 584 257 616 230 605 b 164 433 189 559 174 508 b 160 374 163 415 160 381 b 160 374 160 374 160 374 b 160 374 160 374 160 374 b 168 377 160 374 164 376 b 258 395 200 390 228 395 b 366 367 294 395 328 387 b 475 223 436 333 475 283 b 472 197 475 215 473 206 b 349 65 462 141 419 95 b 259 43 317 51 288 43 b 167 69 230 43 200 52 b 4 290 80 113 20 195 b 0 349 1 309 0 328 b 20 467 0 391 6 433 b 255 648 58 563 155 637 m 269 363 b 257 363 265 363 261 363 b 210 345 236 363 220 356 b 186 226 196 324 186 272 b 187 198 186 216 186 206 b 213 95 191 151 202 112 b 257 76 221 83 238 76 b 270 77 261 76 266 76 b 321 156 299 81 310 99 b 329 229 326 183 329 206 b 321 301 329 252 326 274 b 269 363 311 342 298 359 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 " },
		    "v7": { "x_min": 0, "x_max": 442.359375, "ha": 451, "o": "m 147 648 b 166 649 153 649 160 649 b 313 598 217 649 273 630 b 340 587 323 588 328 587 l 341 587 b 412 628 367 587 390 601 b 427 638 416 635 421 638 b 439 632 431 638 435 637 b 442 623 441 630 442 628 b 430 569 442 616 439 603 b 352 369 408 492 377 410 b 300 259 325 324 313 298 b 273 84 283 205 273 140 b 265 55 273 65 272 59 l 261 54 l 181 54 l 99 54 l 96 55 b 91 61 95 56 92 59 l 89 63 l 89 77 b 147 263 89 133 111 202 b 261 401 176 313 212 355 b 378 541 315 449 349 489 l 382 548 l 375 544 b 240 495 333 512 285 495 b 129 535 198 495 160 509 b 84 560 108 552 95 560 b 76 559 81 560 78 560 b 31 487 59 555 43 530 b 14 470 27 473 24 470 b 1 477 8 470 4 471 l 0 480 l 0 553 l 0 627 l 1 630 b 16 638 4 635 9 638 b 23 635 17 638 20 637 b 49 626 36 626 39 626 b 96 638 59 626 80 630 b 104 639 99 638 102 639 b 117 644 107 641 112 642 b 147 648 125 645 137 648 m 220 -1 l 221 -1 l 219 -1 l 220 -1 m 220 673 l 221 673 l 219 673 l 220 673 " },
		    "v8": { "x_min": 0, "x_max": 488.640625, "ha": 499, "o": "m 217 648 b 245 649 225 648 235 649 b 453 516 343 649 430 595 b 458 478 455 503 458 491 b 412 370 458 440 441 398 b 411 369 412 369 411 369 b 415 365 411 367 412 367 b 488 231 462 331 488 281 b 472 165 488 208 483 186 b 243 43 434 86 338 43 b 63 104 178 43 112 62 b 0 233 20 140 0 186 b 73 365 0 283 24 331 l 77 369 l 72 374 b 29 476 42 406 29 441 b 217 648 29 557 103 635 m 258 605 b 242 606 253 605 247 606 b 157 552 198 606 157 580 b 160 541 157 548 159 544 b 319 413 176 503 242 452 l 337 403 l 338 406 b 359 476 352 428 359 452 b 258 605 359 537 318 595 m 138 326 b 130 330 134 328 130 330 b 130 330 130 330 130 330 b 107 305 127 330 112 313 b 84 231 91 281 84 256 b 243 86 84 156 151 86 b 249 87 245 86 246 87 b 347 156 303 88 347 120 b 344 172 347 162 345 167 b 156 319 325 227 257 281 b 138 326 151 322 144 324 m 243 -1 l 245 -1 l 242 -1 l 243 -1 m 243 673 l 245 673 l 242 673 l 243 673 " },
		    "v9": { "x_min": 0, "x_max": 475.03125, "ha": 485, "o": "m 191 646 b 212 649 198 648 205 649 b 255 644 227 649 243 646 b 458 448 348 616 428 539 b 475 342 469 415 475 378 b 460 244 475 308 469 274 b 193 44 421 124 303 44 b 91 69 157 44 122 51 b 19 161 43 97 19 126 b 21 181 19 167 20 174 b 98 241 32 220 65 241 b 170 186 129 241 160 223 b 172 166 171 179 172 173 b 121 94 172 134 152 102 b 117 93 118 94 117 93 b 121 90 117 93 118 91 b 185 76 142 80 164 76 b 270 119 220 76 251 91 b 308 259 287 145 300 194 b 313 317 310 277 313 310 b 313 317 313 317 313 317 b 313 317 313 317 313 317 b 304 315 313 317 308 316 b 216 295 273 302 245 295 b 145 308 193 295 170 299 b 19 398 88 327 42 360 b 0 469 5 420 0 444 b 24 551 0 496 8 526 b 191 646 54 596 125 637 m 227 614 b 215 616 224 616 220 616 b 202 614 210 616 206 616 b 152 535 174 610 163 592 b 144 463 147 509 144 485 b 152 391 144 440 147 417 b 216 328 163 344 179 328 b 280 391 253 328 269 344 b 288 463 285 417 288 440 b 280 535 288 485 285 509 b 227 614 269 594 258 610 m 236 -1 l 238 -1 l 235 -1 l 236 -1 m 236 673 l 238 673 l 235 673 l 236 673 " },
		    "va": { "x_min": -149.71875, "x_max": 148.359375, "ha": 151, "o": "m -8 -1 b -1 0 -5 -1 -4 0 b 16 -11 5 0 13 -4 b 83 -186 17 -12 47 -90 l 148 -358 l 148 -363 b 127 -385 148 -376 138 -385 b 112 -378 122 -385 118 -383 b 54 -226 110 -374 114 -385 b 0 -81 24 -147 0 -81 b -55 -226 -1 -81 -25 -147 b -114 -378 -115 -385 -111 -374 b -129 -385 -119 -383 -123 -385 b -149 -363 -140 -385 -149 -376 l -149 -358 l -84 -186 b -19 -11 -49 -90 -19 -12 b -8 -1 -17 -8 -12 -4 " },
		    "vb": { "x_min": 0, "x_max": 428.75, "ha": 438, "o": "m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 " },
		    "vc": { "x_min": 0, "x_max": 447.8125, "ha": 457, "o": "m 0 86 l 0 173 l 223 173 l 447 173 l 447 86 l 447 0 l 223 0 l 0 0 l 0 86 " },
		    "vf": { "x_min": 0, "x_max": 370.21875, "ha": 378, "o": "m 0 0 l 0 277 l 61 277 l 122 277 l 122 0 l 122 -278 l 61 -278 l 0 -278 l 0 0 m 246 -1 l 246 277 l 308 277 l 370 277 l 370 -1 l 370 -278 l 308 -278 l 246 -278 l 246 -1 " },
		    "v10": { "x_min": 0, "x_max": 559.421875, "ha": 571, "o": "m 5 127 b 14 127 6 127 9 127 b 51 126 25 127 43 127 b 175 98 93 122 138 112 l 186 94 b 279 51 210 86 255 65 b 285 47 280 51 283 48 b 319 27 291 44 311 31 l 326 22 b 359 0 332 19 352 4 l 367 -6 b 371 -9 368 -6 370 -8 l 379 -15 b 387 -22 383 -18 386 -20 l 398 -30 l 411 -40 l 417 -47 l 427 -55 l 434 -61 b 441 -66 436 -62 439 -65 l 446 -72 l 453 -77 l 462 -87 b 558 -188 490 -113 549 -176 b 559 -195 559 -191 559 -194 b 548 -205 559 -201 555 -205 b 541 -204 547 -205 544 -205 b 534 -198 539 -201 536 -199 l 525 -191 b 481 -162 518 -187 490 -167 b 472 -155 477 -159 472 -156 b 468 -152 470 -155 469 -154 b 461 -149 466 -152 464 -151 b 428 -130 454 -145 441 -137 b 371 -99 413 -122 372 -99 b 363 -95 371 -99 367 -98 b 353 -91 357 -94 353 -91 b 348 -90 353 -91 352 -91 b 332 -81 343 -87 341 -86 b 27 -12 230 -37 127 -13 b 0 -5 4 -11 2 -11 b 0 58 0 -2 0 27 b 0 122 0 88 0 120 b 5 127 1 124 4 126 " },
		    "v11": { "x_min": -155.171875, "x_max": 153.8125, "ha": 157, "o": "m -137 353 b -130 353 -136 353 -133 353 b -112 349 -125 353 -119 352 b -100 342 -110 347 -104 344 b 0 317 -69 326 -35 317 b 111 349 38 317 76 328 b 129 353 117 352 123 353 b 153 327 142 353 153 344 b 144 302 153 320 153 317 b 27 6 93 226 50 113 b 21 -13 24 -11 24 -11 b 0 -26 17 -22 8 -26 b -24 -12 -9 -26 -19 -22 b -28 5 -24 -9 -27 -2 b -145 302 -53 117 -95 224 b -155 327 -155 317 -155 320 b -137 353 -155 340 -148 349 " },
		    "v18": { "x_min": 0, "x_max": 323.9375, "ha": 331, "o": "m 217 535 b 225 537 220 537 221 537 b 245 524 235 537 242 533 l 246 521 l 247 390 l 247 258 l 273 265 b 306 270 288 269 299 270 b 322 259 315 270 319 267 b 323 208 323 256 323 233 b 322 158 323 184 323 159 b 288 140 318 148 315 147 b 247 130 254 131 247 130 b 247 65 247 130 247 104 b 247 20 247 51 247 36 l 247 -88 l 273 -81 b 306 -76 289 -77 299 -76 b 318 -81 311 -76 315 -77 b 323 -123 323 -87 323 -86 l 323 -138 l 323 -154 b 318 -195 323 -191 323 -190 b 269 -210 314 -199 315 -199 b 249 -216 259 -213 250 -216 l 247 -216 l 247 -349 l 246 -483 l 245 -487 b 225 -499 242 -495 234 -499 b 206 -487 219 -499 210 -495 l 205 -483 l 205 -355 l 205 -227 l 204 -227 l 181 -233 l 138 -244 b 117 -249 127 -247 117 -249 b 115 -385 115 -249 115 -256 l 115 -523 l 114 -526 b 95 -538 110 -534 102 -538 b 74 -526 87 -538 78 -534 l 73 -523 l 73 -391 b 72 -260 73 -269 73 -260 b 72 -260 72 -260 72 -260 b 19 -273 61 -263 23 -273 b 0 -260 10 -273 4 -267 b 0 -209 0 -256 0 -256 l 0 -162 l 1 -158 b 61 -134 5 -148 5 -148 l 73 -131 l 73 -22 b 72 86 73 79 73 86 b 72 86 72 86 72 86 b 19 74 61 83 23 74 b 0 86 10 74 4 79 b 0 137 0 90 0 90 l 0 184 l 1 188 b 61 212 5 198 5 198 l 73 215 l 73 348 l 73 481 l 74 485 b 95 498 78 492 87 498 b 103 495 98 498 100 496 b 114 485 107 494 111 489 l 115 481 l 115 353 l 115 226 l 121 226 b 159 235 123 227 141 231 l 198 247 l 205 248 l 205 384 l 205 521 l 206 524 b 217 535 209 528 212 533 m 205 9 b 205 119 205 70 205 119 l 205 119 b 182 113 204 119 194 116 l 138 102 b 117 97 127 99 117 97 b 115 -12 115 97 115 91 l 115 -122 l 121 -120 b 159 -111 123 -119 141 -115 l 198 -101 l 205 -98 l 205 9 " },
		    "v1b": { "x_min": 0, "x_max": 559.421875, "ha": 571, "o": "m 544 204 b 548 204 545 204 547 204 b 559 194 555 204 559 199 b 559 190 559 192 559 191 b 530 156 559 188 556 184 b 462 86 510 134 481 104 b 453 76 458 81 454 77 l 446 70 l 441 65 b 434 59 439 63 436 61 l 427 54 b 409 37 426 51 416 44 b 392 23 398 29 394 26 b 387 19 389 22 387 20 b 379 13 386 19 383 16 l 371 8 l 367 5 l 359 -1 l 337 -16 b 285 -48 319 -29 298 -41 l 279 -52 b 186 -95 255 -66 210 -87 l 175 -99 b 23 -129 127 -117 68 -129 b 17 -129 20 -129 19 -129 b 1 -123 2 -129 2 -129 b 0 -49 0 -122 0 -83 b 0 4 0 -22 0 1 b 27 11 2 9 4 9 b 185 31 78 12 145 20 b 198 34 186 31 193 33 b 314 73 234 44 277 58 b 349 88 328 79 340 84 b 353 90 352 90 353 90 b 363 94 353 90 357 93 b 371 98 367 97 371 98 b 428 129 372 98 413 120 b 461 148 441 136 454 144 b 468 151 464 149 466 151 b 472 154 469 152 470 154 b 481 161 473 155 477 158 b 525 190 490 166 518 186 l 534 197 b 540 201 536 198 539 199 b 544 204 541 202 544 204 " },
		    "v1d": { "x_min": 0, "x_max": 619.3125, "ha": 632, "o": "m 274 184 b 307 186 285 186 296 186 b 616 22 465 186 597 116 b 619 -1 617 13 619 5 b 308 -187 619 -104 483 -187 b 0 -1 133 -187 0 -102 b 5 36 0 11 1 23 b 274 184 29 115 141 176 m 289 161 b 272 162 284 162 277 162 b 171 41 209 162 171 108 b 205 -73 171 5 182 -34 b 345 -163 243 -133 298 -163 b 436 -98 385 -163 420 -142 b 446 -43 443 -80 446 -62 b 289 161 446 47 377 147 " },
		    "v1e": { "x_min": -402.890625, "x_max": 401.53125, "ha": 410, "o": "m -219 173 b -213 174 -217 174 -215 174 b -202 173 -209 174 -205 173 b -114 86 -200 172 -179 151 b -28 0 -66 37 -28 0 b 40 84 -28 0 2 37 b 117 174 111 173 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b -42 -86 27 0 -4 -38 b -118 -174 -112 -174 -111 -173 b -123 -176 -119 -176 -121 -176 b -133 -174 -126 -176 -130 -174 b -296 -12 -136 -173 -172 -137 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 172 -398 -43 -228 167 b -219 173 -223 172 -220 173 " },
		    "v1f": { "x_min": -340.28125, "x_max": 338.921875, "ha": 346, "o": "m -32 520 b -29 521 -31 520 -31 521 b -23 519 -27 521 -24 520 b -20 513 -21 517 -20 516 b -21 506 -20 512 -20 509 b -31 474 -23 502 -27 488 l -53 402 l -66 352 l -68 349 l -57 349 b -32 351 -51 349 -40 351 b 123 370 19 352 74 359 b 137 371 127 370 133 371 b 170 356 152 371 164 366 b 171 355 170 355 170 355 b 216 366 174 355 183 358 b 280 378 268 377 266 377 b 287 378 283 378 284 378 b 332 349 307 378 322 369 b 338 319 336 341 338 330 b 332 301 338 310 336 302 b 242 280 329 299 246 280 b 242 280 242 280 242 280 b 235 288 236 280 235 283 b 235 292 235 290 235 291 b 236 302 236 297 236 299 b 220 337 236 316 230 330 l 216 340 l 210 335 b 159 276 189 322 172 301 b 118 149 152 265 156 274 b 81 34 84 36 85 36 b -8 13 78 33 -4 13 b -8 13 -8 13 -8 13 b -14 20 -12 15 -14 15 b -8 44 -14 24 -12 31 b -2 66 -5 55 -2 65 b -2 66 -2 66 -2 66 l -2 66 b -43 41 -2 66 -21 55 b -114 4 -98 8 -98 8 b -144 0 -123 0 -134 0 b -242 99 -197 0 -242 43 b -242 109 -242 102 -242 105 b -212 219 -240 122 -242 116 b -185 312 -197 270 -185 312 l -185 312 b -189 312 -185 312 -186 312 b -259 312 -200 312 -227 312 b -321 310 -291 312 -310 310 b -334 312 -330 310 -334 312 b -340 319 -338 313 -340 316 b -336 326 -340 322 -338 324 b -291 337 -334 326 -314 331 l -247 347 l -210 348 b -172 348 -190 348 -172 348 b -168 363 -172 348 -171 355 b -145 442 -151 424 -145 441 b -133 452 -144 444 -140 446 l -77 489 b -32 520 -53 506 -32 520 m 57 334 b 53 335 55 335 54 335 b 44 334 50 335 49 335 b -70 316 8 326 -28 320 b -78 309 -78 316 -78 316 b -108 202 -80 305 -88 274 b -141 81 -136 112 -141 93 b -140 74 -141 79 -141 77 b -117 49 -137 59 -127 49 b -107 52 -114 49 -110 51 b 16 127 -106 54 14 126 b 42 217 16 127 42 215 b 49 241 42 222 44 229 b 73 320 53 251 73 317 b 57 334 73 327 65 333 " },
		    "v20": { "x_min": -571.671875, "x_max": 570.3125, "ha": 582, "o": "m -559 351 b -551 352 -556 352 -553 352 b -530 338 -543 352 -533 348 b -529 169 -530 337 -529 291 l -529 1 l -507 27 l -441 112 b -382 174 -394 169 -390 174 b -378 174 -381 174 -379 174 b -281 86 -370 174 -375 179 b -196 0 -234 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 279 172 b 289 174 285 174 288 174 b 300 173 294 174 298 173 b 462 11 303 172 340 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 375 -176 371 -176 b 280 -87 367 -173 347 -152 b 194 0 234 -38 194 0 b 126 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 44 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -140 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -288 -176 b -300 -174 -294 -176 -298 -174 b -464 -11 -303 -173 -374 -102 l -476 0 l -506 -37 b -539 -76 -528 -65 -537 -74 b -551 -80 -543 -79 -547 -80 b -570 -68 -558 -80 -566 -76 l -571 -65 l -571 136 b -570 340 -571 331 -571 337 b -559 351 -568 344 -564 348 " },
		    "v22": { "x_min": 0, "x_max": 432.828125, "ha": 442, "o": "m 209 186 b 213 187 210 187 212 187 b 216 187 215 187 216 187 b 224 174 216 186 220 180 b 420 -1 269 105 338 43 b 432 -12 431 -8 432 -9 b 421 -23 432 -15 432 -16 b 228 -180 345 -70 264 -137 b 219 -188 221 -188 221 -188 l 219 -188 b 208 -177 215 -188 215 -188 b 10 1 163 -106 93 -44 b 0 11 0 6 0 8 b 10 22 0 13 0 15 b 202 179 87 69 167 136 b 209 186 206 183 209 186 " },
		    "v23": { "x_min": 0, "x_max": 133.390625, "ha": 136, "o": "m 54 66 b 65 68 58 68 61 68 b 122 37 88 68 110 56 b 133 -1 130 26 133 12 b 104 -58 133 -23 123 -44 b 66 -69 92 -65 78 -69 b 10 -38 44 -69 23 -58 b 0 -1 2 -27 0 -13 b 54 66 0 30 20 61 " },
		    "v25": { "x_min": 0, "x_max": 318.5, "ha": 325, "o": "m 20 376 b 167 377 23 377 96 377 b 296 376 231 377 294 377 b 318 347 311 371 318 359 b 296 316 318 333 311 320 b 159 315 294 315 227 315 b 21 316 91 315 24 315 b 0 345 6 320 0 333 b 20 376 0 359 6 371 " },
		    "v26": { "x_min": -21.78125, "x_max": 483.1875, "ha": 493, "o": "m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 179 164 199 187 192 l 210 176 l 210 396 l 210 617 l 212 621 b 231 632 216 628 223 632 b 250 620 239 632 247 628 b 251 383 251 616 251 616 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 " },
		    "v27": { "x_min": 0, "x_max": 432.828125, "ha": 442, "o": "m 208 184 b 213 187 209 186 212 187 b 224 176 217 187 221 183 b 245 147 225 172 235 159 b 419 -1 288 90 347 38 b 431 -8 424 -4 431 -8 b 432 -12 432 -9 432 -11 b 430 -18 432 -13 432 -16 b 364 -61 424 -20 383 -47 b 225 -183 307 -102 250 -152 b 223 -187 224 -184 223 -187 b 220 -188 221 -188 220 -188 b 208 -176 216 -188 210 -184 b 187 -148 205 -173 197 -159 b 12 0 144 -90 84 -38 b 0 11 4 5 0 8 b 16 24 0 13 4 18 b 183 158 83 69 141 115 b 208 184 194 169 198 173 m 183 105 b 176 113 181 109 176 113 b 172 109 176 113 175 112 b 92 45 149 90 117 62 l 88 41 l 102 31 b 247 -105 160 -6 210 -55 l 254 -115 l 257 -112 l 269 -102 b 340 -45 287 -87 319 -61 l 344 -43 l 330 -33 b 183 105 272 6 221 54 " },
		    "v28": { "x_min": -73.5, "x_max": 72.140625, "ha": 74, "o": "m -72 252 l -73 254 l 0 254 l 72 254 l 70 252 b 0 -1 70 248 0 -1 b -72 252 -1 -1 -72 248 " },
		    "v29": { "x_min": -590.71875, "x_max": 589.359375, "ha": 601, "o": "m 175 273 b 182 274 178 273 181 274 b 202 262 190 274 198 269 b 204 158 204 259 204 259 l 204 56 l 250 112 b 303 174 296 172 298 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 208 -6 213 0 210 -2 l 204 -12 l 204 -147 b 204 -210 204 -173 204 -194 b 198 -292 204 -297 204 -287 b 183 -299 194 -297 189 -299 b 164 -287 175 -299 167 -295 b 163 -174 163 -284 163 -284 l 161 -63 l 119 -117 b 65 -176 76 -170 73 -176 b 61 -176 63 -176 62 -176 b -35 -87 51 -174 57 -180 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -363 174 -374 170 -371 174 b -359 174 -362 174 -360 174 b -262 86 -351 174 -356 179 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 147 11 -13 172 35 123 l 157 -1 l 160 1 l 163 4 l 163 130 b 164 260 163 256 163 258 b 175 273 166 266 170 270 " },
		    "v2a": { "x_min": -21.78125, "x_max": 366.140625, "ha": 374, "o": "m 276 1378 b 284 1379 279 1379 281 1379 b 306 1360 292 1379 298 1374 b 352 1247 326 1326 343 1286 b 366 1139 362 1213 366 1175 b 347 1009 366 1093 359 1049 l 344 1002 l 347 992 b 352 971 348 986 351 977 b 366 863 362 936 366 899 b 347 732 366 818 359 773 l 344 725 l 347 716 b 352 695 348 710 351 700 b 366 588 362 659 366 623 b 223 262 366 464 314 345 b 189 233 212 252 212 252 b 35 76 126 183 73 129 b -1 16 20 56 2 27 b -19 4 -4 9 -12 4 l -21 4 l -21 137 l -21 270 l -17 270 b 186 344 59 281 134 308 b 319 606 270 399 319 499 b 317 650 319 620 319 635 l 315 659 l 314 655 b 223 537 288 607 258 570 b 189 509 212 528 212 528 b 35 352 126 459 73 405 b -1 292 20 333 2 303 b -19 280 -4 285 -12 280 l -21 280 l -21 413 l -21 546 l -17 546 b 186 620 59 557 134 584 b 319 882 270 675 319 775 b 317 925 319 896 319 911 l 315 935 l 314 931 b 223 813 288 884 258 846 b 189 785 212 805 212 805 b 35 628 126 735 73 681 b -1 569 20 609 2 580 b -19 556 -4 562 -12 556 l -21 556 l -21 689 l -21 823 l -17 823 b 202 907 68 835 152 867 b 319 1157 280 968 319 1061 b 270 1338 319 1218 303 1281 b 262 1358 264 1349 262 1353 b 262 1364 262 1360 262 1363 b 276 1378 265 1371 269 1376 " },
		    "v2c": { "x_min": -597.53125, "x_max": 596.171875, "ha": 608, "o": "m -413 173 b -408 174 -412 174 -409 174 b -397 173 -404 174 -400 173 b -308 86 -394 172 -374 151 b -223 0 -261 37 -223 0 b -153 84 -223 0 -191 37 b -77 174 -83 173 -84 172 b -72 174 -76 174 -74 174 b -62 173 -68 174 -63 173 b 25 86 -59 172 -39 151 b 112 0 73 37 111 0 b 181 84 112 0 144 37 b 257 174 251 173 251 172 b 262 174 258 174 261 174 b 273 173 266 174 270 173 b 436 9 276 172 347 101 l 447 -1 l 477 36 b 522 79 511 79 513 79 l 522 79 b 552 51 533 79 539 73 b 596 -112 582 6 596 -51 b 567 -262 596 -161 586 -213 b 539 -322 558 -287 544 -316 b 524 -327 534 -326 529 -327 b 504 -315 515 -327 507 -323 b 503 -308 503 -312 503 -309 b 511 -285 503 -302 504 -297 b 555 -113 540 -227 555 -169 b 544 -34 555 -86 551 -59 b 522 19 540 -16 530 8 l 521 22 l 481 -26 l 405 -122 b 353 -176 366 -172 362 -176 b 349 -176 352 -176 351 -176 b 253 -87 341 -176 347 -180 b 167 0 206 -38 167 0 b 99 -86 167 0 136 -38 b 21 -174 27 -174 28 -173 b 17 -176 20 -176 19 -176 b 6 -174 13 -176 9 -174 b -81 -87 4 -173 -14 -152 b -167 0 -129 -38 -167 0 b -236 -86 -167 0 -198 -38 b -313 -174 -307 -174 -306 -173 b -318 -176 -314 -176 -315 -176 b -328 -174 -321 -176 -325 -174 b -491 -12 -330 -173 -367 -137 l -503 0 l -530 -34 b -570 -77 -562 -73 -564 -76 b -577 -79 -571 -79 -574 -79 b -597 -58 -588 -79 -597 -69 b -596 -49 -597 -55 -597 -52 b -417 172 -593 -43 -423 167 b -413 173 -417 172 -415 173 " },
		    "v2d": { "x_min": 0, "x_max": 438.28125, "ha": 447, "o": "m 212 190 b 219 191 213 191 216 191 b 236 176 225 191 228 190 b 419 18 277 105 341 49 b 436 5 431 13 434 11 b 438 -1 438 4 438 1 b 424 -16 438 -8 432 -13 b 356 -49 409 -20 379 -36 b 234 -180 306 -83 258 -133 b 219 -192 230 -188 224 -192 b 200 -176 213 -192 206 -187 b 9 -15 157 -102 89 -45 b 0 0 2 -12 0 -6 b 16 18 0 9 2 12 b 200 176 93 48 159 104 b 212 190 205 186 208 188 m 239 113 b 236 117 238 116 238 117 b 230 108 235 117 234 115 b 92 -15 196 58 140 8 b 88 -18 91 -16 88 -18 b 92 -20 88 -18 91 -19 b 198 -116 130 -43 166 -74 b 200 -117 200 -117 200 -117 b 201 -117 200 -117 201 -117 b 264 -43 212 -98 242 -62 b 345 15 288 -19 321 4 b 348 18 347 16 348 16 b 344 20 348 18 347 19 b 239 113 307 41 266 79 " },
		    "v2f": { "x_min": -1.359375, "x_max": 680.5625, "ha": 694, "o": "m 597 1042 b 604 1042 600 1042 602 1042 b 642 1002 627 1042 642 1022 b 619 966 642 988 635 974 b 439 927 574 942 503 927 l 426 927 l 426 921 b 430 838 428 893 430 866 b 345 480 430 696 398 560 b 179 391 307 423 249 391 b 156 392 171 391 164 392 b 138 394 149 394 142 394 b 103 434 115 396 103 416 b 129 471 103 451 111 466 b 141 474 133 473 137 474 b 172 459 153 474 164 469 b 181 455 175 456 176 455 b 187 456 182 455 185 455 b 253 520 212 460 234 483 b 315 836 294 605 315 714 b 311 928 315 867 314 898 b 302 945 310 943 311 942 b 245 953 283 950 262 953 b 130 891 193 953 149 931 b 84 860 119 870 102 860 b 36 905 61 860 39 877 b 36 910 36 907 36 909 b 80 970 36 931 50 949 b 249 1017 125 1000 187 1017 b 322 1009 273 1017 299 1014 l 341 1003 b 436 991 372 995 406 991 b 577 1031 495 991 545 1004 b 597 1042 583 1038 590 1041 m 416 360 b 424 360 419 360 421 360 b 481 309 454 360 479 338 b 503 145 484 280 495 199 b 585 -185 525 16 555 -106 b 630 -245 596 -213 613 -237 l 634 -247 l 638 -245 b 647 -244 641 -245 645 -244 b 680 -278 666 -244 680 -262 b 664 -308 680 -290 675 -301 b 638 -312 658 -310 650 -312 b 613 -309 631 -312 623 -310 b 477 -201 555 -303 502 -260 b 417 -2 460 -159 434 -72 b 416 5 417 1 416 5 b 416 5 416 5 416 5 b 411 -5 415 5 413 0 b 359 -97 397 -33 377 -70 b 353 -106 355 -102 353 -105 b 359 -112 353 -108 355 -109 b 409 -130 375 -123 390 -129 b 426 -134 420 -130 421 -131 b 431 -147 428 -137 431 -141 b 420 -162 431 -152 427 -159 b 382 -169 409 -166 396 -169 b 323 -155 363 -169 341 -165 l 317 -152 l 314 -155 b 62 -303 240 -240 148 -295 b 36 -305 55 -305 44 -305 b 23 -303 29 -305 24 -305 b -1 -273 6 -299 -1 -287 b 31 -240 -1 -256 10 -240 b 36 -240 32 -240 34 -240 b 42 -241 38 -241 39 -241 b 134 -204 63 -241 99 -226 b 367 288 265 -115 357 81 b 375 330 368 313 370 320 b 416 360 383 347 400 358 m 360 -359 b 379 -359 363 -359 371 -359 b 424 -360 396 -359 416 -359 b 646 -502 536 -373 624 -430 b 649 -527 649 -510 649 -519 b 530 -673 649 -578 604 -635 l 521 -677 l 529 -681 b 653 -811 592 -714 637 -762 b 660 -853 658 -827 660 -839 b 645 -911 660 -873 656 -892 b 426 -1021 608 -981 519 -1021 b 283 -989 377 -1021 328 -1011 b 235 -949 249 -972 239 -964 b 234 -936 234 -946 234 -941 b 234 -928 234 -934 234 -931 l 235 -925 l 234 -927 l 225 -934 b 87 -982 186 -966 138 -982 b 80 -982 85 -982 83 -982 b 55 -981 70 -981 58 -981 b 17 -943 32 -981 17 -964 b 54 -904 17 -921 35 -904 b 78 -914 62 -904 72 -909 l 83 -918 l 88 -918 b 190 -831 122 -918 166 -881 b 269 -506 242 -727 269 -612 b 268 -462 269 -492 269 -477 b 266 -449 266 -458 266 -452 b 265 -444 266 -445 266 -444 b 257 -446 264 -444 261 -445 b 132 -545 196 -470 152 -505 b 88 -573 122 -563 104 -573 b 39 -523 63 -573 39 -553 b 63 -476 39 -505 44 -494 b 360 -359 136 -408 235 -369 m 419 -424 b 393 -423 411 -423 406 -423 l 375 -423 l 377 -426 b 379 -439 377 -427 378 -434 b 383 -510 382 -463 383 -487 b 314 -811 383 -609 360 -710 b 266 -893 296 -850 285 -870 b 264 -898 265 -896 264 -898 l 264 -898 b 264 -898 264 -898 264 -898 b 268 -898 264 -898 266 -898 b 273 -898 270 -898 272 -898 b 300 -909 283 -898 291 -900 b 426 -957 340 -941 385 -957 b 476 -949 443 -957 460 -954 b 547 -853 522 -931 547 -893 b 485 -745 547 -816 526 -775 b 397 -707 460 -727 432 -714 b 366 -675 375 -703 366 -692 b 396 -642 366 -657 377 -645 b 530 -557 455 -637 511 -601 b 536 -527 534 -548 536 -537 b 419 -424 536 -480 490 -437 " },
		    "v30": { "x_min": -21.78125, "x_max": 367.5, "ha": 375, "o": "m 276 1900 b 284 1901 279 1900 281 1901 b 306 1883 291 1901 298 1896 b 367 1686 347 1825 367 1757 b 343 1558 367 1643 359 1600 l 338 1549 l 343 1537 b 367 1411 359 1497 367 1454 b 343 1282 367 1367 359 1324 l 338 1272 l 343 1261 b 367 1135 359 1221 367 1178 b 343 1007 367 1090 359 1047 l 338 996 l 343 985 b 367 859 359 945 367 902 b 343 731 367 814 359 771 l 338 720 l 343 709 b 367 582 359 667 367 626 b 289 362 367 503 340 426 b 239 312 276 345 259 330 b 29 77 152 237 76 152 b -1 18 14 54 2 30 b -19 4 -4 11 -12 4 l -21 4 l -21 133 l -20 260 l -13 262 b 98 299 17 269 62 284 b 111 305 103 302 110 305 b 167 334 123 310 156 327 b 319 595 264 391 319 491 b 313 659 319 616 318 638 b 310 667 311 664 311 667 b 307 663 310 667 308 666 b 240 588 289 637 269 614 b 16 331 141 505 62 413 b -1 294 8 316 1 302 b -19 280 -4 287 -12 280 l -21 280 l -21 408 l -20 537 l -13 538 b 98 576 17 545 62 560 b 111 581 103 578 110 581 b 167 610 123 587 156 603 b 319 871 264 667 319 767 b 313 935 319 892 318 913 b 310 942 311 941 311 942 b 307 939 310 942 308 941 b 240 864 289 913 269 889 b 16 607 141 781 62 689 b -1 570 8 592 1 578 b -19 556 -4 563 -12 556 l -21 556 l -21 684 l -20 813 l -13 814 b 98 852 17 821 62 836 b 111 857 103 855 110 857 b 167 886 123 863 156 880 b 319 1147 264 943 319 1043 b 313 1211 319 1168 318 1189 b 310 1218 311 1217 311 1218 b 307 1215 310 1218 308 1217 b 240 1140 289 1188 269 1165 b 16 884 141 1057 62 966 b -1 846 8 868 1 855 b -19 832 -4 839 -12 832 l -21 832 l -21 960 l -20 1089 l -13 1090 b 98 1128 17 1097 62 1111 b 111 1134 103 1131 110 1134 b 167 1163 123 1139 156 1156 b 319 1424 264 1220 319 1320 b 313 1486 319 1444 318 1465 b 310 1494 311 1493 311 1494 b 307 1492 310 1494 308 1493 b 240 1417 289 1464 269 1442 b 16 1160 141 1333 62 1242 b -1 1121 8 1145 1 1131 b -19 1109 -4 1115 -12 1109 l -21 1109 l -21 1236 l -20 1365 l -13 1367 b 98 1404 17 1374 62 1388 b 111 1410 103 1407 110 1410 b 250 1508 172 1437 215 1467 b 319 1701 296 1564 319 1633 b 270 1859 319 1757 303 1814 b 262 1882 265 1868 262 1875 b 276 1900 262 1890 266 1896 " },
		    "v31": { "x_min": 0, "x_max": 386.5625, "ha": 394, "o": "m 0 173 l 0 347 l 193 347 l 386 347 l 386 173 l 386 0 l 193 0 l 0 0 l 0 173 " },
		    "v33": { "x_min": -423.3125, "x_max": 421.9375, "ha": 431, "o": "m -10 276 b -2 277 -8 277 -5 277 b 17 265 5 277 13 273 b 19 163 19 260 19 260 l 19 68 l 39 45 b 277 -95 122 -34 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -54 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 200 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 137 b 421 22 421 37 421 29 b 257 -198 421 -86 347 -188 b 242 -198 251 -198 247 -198 b 20 -105 181 -198 95 -163 l 19 -104 l 19 -183 b 19 -216 19 -195 19 -206 b 12 -273 19 -272 17 -267 b -2 -278 8 -277 2 -278 b -21 -266 -10 -278 -19 -274 b -23 -165 -23 -263 -23 -262 l -23 -69 l -44 -47 b -250 86 -117 23 -183 66 b -295 94 -270 93 -284 94 b -315 91 -302 94 -308 94 b -381 5 -356 81 -381 43 b -355 -56 -381 -16 -372 -40 b -299 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -168 -77 -196 -58 -179 -65 b -151 -122 -156 -90 -151 -105 b -179 -174 -151 -141 -160 -162 b -239 -195 -194 -184 -217 -192 b -257 -197 -245 -195 -250 -197 b -423 -5 -349 -197 -423 -113 b -423 0 -423 -4 -423 -1 b -277 194 -420 97 -362 173 b -247 197 -268 197 -258 197 b -24 104 -185 197 -100 162 l -23 102 l -23 181 b -21 265 -23 260 -23 260 b -10 276 -20 269 -14 274 " },
		    "v34": { "x_min": 0, "x_max": 622.03125, "ha": 635, "o": "m 398 417 b 406 419 401 419 404 419 b 427 398 417 419 427 409 b 427 391 427 395 427 392 b 34 -274 424 385 38 -272 b 20 -280 29 -278 25 -280 b 0 -259 9 -280 0 -270 b 0 -252 0 -256 0 -254 b 393 413 2 -247 389 410 b 398 417 394 415 397 416 m 592 417 b 600 419 594 419 597 419 b 622 398 611 419 622 409 b 620 391 622 395 620 392 b 227 -274 617 385 231 -272 b 213 -280 223 -278 219 -280 b 193 -259 202 -280 193 -270 b 194 -252 193 -256 193 -254 b 586 413 196 -247 582 410 b 592 417 588 415 590 416 " },
		    "v36": { "x_min": -1.359375, "x_max": 1064.390625, "ha": 1086, "o": "m 296 692 b 314 694 302 694 307 694 b 386 685 337 694 366 689 b 548 498 480 660 548 580 b 548 481 548 492 548 487 b 455 395 541 426 499 395 b 370 462 420 395 383 417 b 362 496 364 477 362 488 b 377 514 362 509 367 514 b 393 501 386 514 390 510 b 432 474 397 484 413 474 b 470 487 445 474 458 478 b 491 530 484 496 491 510 b 490 544 491 534 491 539 b 333 660 479 606 411 657 l 323 662 l 315 646 b 269 524 285 591 269 556 b 321 431 269 492 287 466 b 349 395 338 413 343 408 b 363 342 359 378 363 362 b 359 312 363 333 362 322 b 285 158 348 266 318 206 b 281 152 283 155 281 152 b 281 152 281 152 281 152 b 287 154 283 152 284 152 b 318 155 298 154 308 155 b 461 98 371 155 419 136 l 464 97 l 483 112 b 503 129 494 120 503 127 b 504 130 503 129 504 129 b 503 138 504 131 503 134 b 500 180 500 152 500 166 b 553 326 500 238 518 288 b 604 366 560 331 592 358 b 649 381 617 376 632 381 b 696 362 665 381 681 374 b 724 302 714 347 724 324 b 695 238 724 278 714 255 b 660 210 691 234 662 212 b 579 148 658 209 582 151 b 579 148 579 148 579 148 b 596 106 579 144 589 119 b 622 77 604 88 609 83 b 657 69 632 72 645 69 b 748 112 688 69 721 84 b 755 123 754 117 755 120 b 755 127 755 124 755 126 b 751 165 752 137 751 151 b 758 219 751 183 754 202 b 894 387 774 290 820 347 b 896 390 896 388 896 388 b 891 398 896 391 895 392 b 622 560 827 477 730 535 b 600 580 605 564 600 569 b 617 596 600 591 607 596 b 628 595 622 596 624 596 b 1057 248 846 552 1020 412 b 1064 191 1061 229 1064 209 b 922 0 1064 94 1005 9 b 902 -1 916 -1 909 -1 b 774 76 847 -1 800 26 b 769 83 770 81 770 83 b 769 81 769 83 769 83 b 627 -1 733 29 677 -1 b 548 27 597 -1 570 8 b 515 88 537 37 525 61 l 513 95 l 510 93 l 453 45 b 390 0 396 0 396 0 b 390 0 390 0 390 0 b 374 15 381 0 377 4 b 268 105 359 69 314 105 b 250 104 262 105 257 105 l 243 102 l 234 90 b 155 1 201 49 159 2 b 147 -1 152 0 149 -1 b 130 15 138 -1 130 6 b 132 20 130 18 132 19 b 136 31 133 22 134 27 b 220 131 149 74 178 109 b 231 137 225 134 230 136 b 302 278 280 202 302 244 b 265 335 302 299 295 309 b 209 442 234 363 213 402 b 209 455 209 446 209 451 b 279 648 209 502 232 564 l 285 659 l 283 659 b 176 627 238 653 210 645 b 57 477 111 594 66 538 b 55 459 55 471 55 464 b 72 409 55 437 61 415 b 93 403 78 405 87 403 b 152 467 123 403 151 431 b 168 488 153 483 157 488 b 185 462 181 488 185 483 l 185 460 b 137 344 183 409 168 369 b 78 322 119 328 98 322 b 13 360 50 322 25 335 b -1 426 4 380 -1 402 b 89 610 -1 488 32 559 b 296 692 147 659 210 685 m 926 348 b 921 353 924 351 922 353 b 914 348 920 353 918 351 b 823 167 857 306 823 237 b 828 124 823 154 826 138 b 890 31 837 79 862 40 b 896 31 892 31 894 31 b 956 104 916 31 940 59 b 970 191 965 129 970 159 b 966 241 970 208 969 224 b 926 348 959 277 945 313 m 627 326 b 619 326 624 326 622 326 b 598 316 611 326 604 323 b 568 215 579 288 568 255 b 568 208 568 213 568 210 b 571 183 570 195 570 184 l 571 183 b 594 201 571 183 582 191 l 634 231 b 660 259 653 247 656 248 b 664 278 662 266 664 272 b 627 326 664 299 649 320 " },
		    "v38": { "x_min": -1.359375, "x_max": 651.96875, "ha": 665, "o": "m 389 644 b 405 645 394 645 400 645 b 504 566 450 645 492 613 b 507 541 506 557 507 549 b 480 471 507 514 498 489 l 477 467 l 483 470 b 609 591 539 485 586 531 b 613 601 611 595 613 599 b 631 609 619 607 624 609 b 651 588 641 609 651 602 b 200 -946 651 584 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 537 313 478 300 508 b 389 644 300 585 334 635 " },
		    "v39": { "x_min": -171.5, "x_max": 251.8125, "ha": 257, "o": "m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 553 20 616 20 614 b 20 491 20 503 20 491 l 20 491 b 153 535 47 501 149 535 b 174 514 167 535 174 524 b 164 496 174 508 171 501 b 92 470 164 495 132 484 l 20 445 l 20 390 b 20 363 20 378 20 370 b 20 333 20 340 20 333 l 20 333 b 153 377 47 344 149 377 b 174 356 167 377 174 367 b 164 338 174 349 171 342 b 92 312 164 338 132 326 l 20 288 l 20 219 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b -1 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 30 -21 -212 -21 -212 b -21 273 -21 163 -21 273 b -84 252 -21 273 -50 263 b -152 230 -133 234 -145 230 b -157 231 -155 230 -156 231 b -171 252 -166 234 -171 244 b -160 270 -171 259 -167 266 b -27 316 -159 270 -93 294 l -21 319 l -21 374 b -21 431 -21 406 -21 431 b -84 409 -21 431 -50 421 b -152 388 -133 392 -145 388 b -157 390 -155 388 -156 388 b -171 409 -166 392 -171 401 b -160 428 -171 417 -167 424 b -27 474 -159 428 -93 451 l -21 476 l -21 546 b -20 620 -21 614 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 " },
		    "v3b": { "x_min": 0, "x_max": 484.5625, "ha": 494, "o": "m 228 245 b 239 247 234 247 239 247 b 243 247 240 247 242 247 b 303 238 257 247 287 242 b 484 -2 417 208 484 104 b 412 -177 484 -65 461 -127 b 243 -248 363 -226 303 -248 b 6 -63 138 -248 36 -180 b 0 -1 1 -41 0 -20 b 228 245 0 127 98 240 m 255 181 b 240 183 247 183 245 183 b 232 181 238 183 235 183 b 142 152 200 180 168 170 l 138 149 l 190 97 l 242 44 l 294 97 l 345 149 l 340 152 b 255 181 315 169 284 180 m 147 -54 l 197 -1 l 147 51 l 95 104 l 91 99 b 62 -1 72 70 62 34 b 66 -43 62 -15 63 -29 b 91 -101 72 -63 80 -84 l 95 -106 l 147 -54 m 393 99 b 389 104 390 102 389 104 b 337 51 389 104 366 80 l 285 -1 l 337 -54 l 389 -106 l 393 -101 b 421 -1 412 -72 421 -36 b 393 99 421 34 412 69 m 294 -98 b 242 -45 265 -69 242 -45 b 190 -98 242 -45 219 -69 l 138 -151 l 142 -154 b 242 -184 172 -174 206 -184 b 340 -154 276 -184 311 -174 l 345 -151 l 294 -98 " },
		    "v3c": { "x_min": 0, "x_max": 450.53125, "ha": 460, "o": "m 189 302 b 204 303 193 302 198 303 b 303 224 250 303 292 270 b 306 199 304 216 306 208 b 279 129 306 173 296 147 l 276 126 l 281 127 b 408 249 337 142 385 190 b 412 259 409 254 412 258 b 430 267 417 265 423 267 b 450 247 441 267 450 259 b 200 -605 450 242 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 194 111 136 99 165 b 189 302 99 244 133 292 " },
		    "v3e": { "x_min": 0, "x_max": 406.96875, "ha": 415, "o": "m 21 183 b 28 183 24 183 25 183 b 42 181 34 183 39 183 b 127 108 47 179 47 179 b 202 41 168 72 202 41 b 279 108 204 41 238 72 b 357 177 321 145 356 176 b 375 183 363 181 370 183 b 406 151 392 183 406 169 b 404 137 406 147 405 141 b 322 62 401 131 398 129 b 251 0 284 27 251 0 b 322 -63 251 -1 284 -29 b 404 -138 398 -130 401 -133 b 406 -152 405 -142 406 -148 b 375 -184 406 -170 392 -184 b 357 -179 370 -184 363 -183 b 279 -109 356 -177 321 -147 b 202 -43 238 -73 204 -43 b 127 -109 202 -43 168 -73 b 49 -179 85 -147 50 -177 b 31 -184 43 -183 36 -184 b 0 -152 13 -184 0 -170 b 2 -138 0 -148 0 -142 b 83 -63 5 -133 8 -130 b 155 0 122 -29 155 -1 b 83 62 155 0 122 27 b 8 129 43 97 10 127 b 0 151 2 136 0 144 b 21 183 0 165 8 177 " },
		    "v3f": { "x_min": -24.5, "x_max": 317.140625, "ha": 324, "o": "m -24 -147 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 58 -123 6 -43 31 -86 b 196 -278 93 -173 134 -219 b 317 -570 274 -356 317 -460 b 294 -713 317 -617 308 -666 l 289 -724 l 294 -735 b 317 -873 308 -780 317 -827 b 235 -1132 317 -963 288 -1054 b 209 -1165 228 -1140 224 -1146 b 189 -1177 204 -1172 196 -1177 b 171 -1164 182 -1177 175 -1172 b 168 -1154 170 -1161 168 -1159 b 181 -1132 168 -1149 172 -1142 b 269 -891 238 -1064 269 -975 b 269 -881 269 -886 269 -884 b 262 -814 269 -857 265 -827 b 258 -800 261 -811 259 -806 b 142 -628 240 -731 198 -667 b -8 -589 112 -606 47 -589 b -20 -589 -13 -589 -19 -589 l -24 -589 l -24 -449 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 58 -424 6 -345 31 -388 b 194 -580 93 -476 136 -523 b 259 -660 221 -606 245 -635 b 261 -663 259 -662 261 -663 b 264 -656 262 -663 262 -660 b 269 -587 268 -632 269 -610 b 264 -521 269 -566 268 -544 b 262 -512 264 -517 262 -513 b 258 -498 261 -509 259 -503 b 142 -326 240 -428 198 -365 b -8 -287 112 -303 47 -288 b -20 -287 -13 -287 -19 -287 l -24 -287 l -24 -147 " },
		    "v40": { "x_min": -1.359375, "x_max": 436.921875, "ha": 446, "o": "m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 " },
		    "v41": { "x_min": -1.359375, "x_max": 556.6875, "ha": 568, "o": "m 294 322 b 318 323 299 322 308 323 b 360 320 334 323 352 322 b 526 217 430 310 490 273 b 543 166 537 202 543 184 b 447 70 543 117 503 70 b 445 70 447 70 446 70 b 359 159 394 72 359 113 b 368 201 359 173 362 187 b 442 245 382 229 412 245 b 455 244 446 245 451 245 b 460 244 458 244 460 244 b 460 244 460 244 460 244 b 454 248 460 244 458 245 b 325 291 417 276 372 291 b 285 287 313 291 299 290 b 144 -2 183 269 144 190 b 281 -290 144 -208 179 -280 b 304 -291 289 -291 298 -291 b 524 -105 412 -291 506 -212 b 541 -84 526 -88 530 -84 b 556 -101 551 -84 556 -90 b 549 -138 556 -111 553 -122 b 334 -322 521 -237 435 -310 b 302 -324 323 -323 313 -324 b 13 -101 172 -324 54 -234 b -1 -1 4 -68 -1 -34 b 294 322 -1 161 121 303 " },
		    "v42": { "x_min": -348.4375, "x_max": 24.5, "ha": 25, "o": "m -330 155 b -322 156 -329 156 -326 156 b -315 156 -319 156 -317 156 b -298 147 -311 155 -308 154 b -19 30 -224 98 -122 55 l 2 26 b 24 -1 17 22 24 13 b 2 -27 24 -15 17 -23 l -19 -31 b -298 -148 -122 -56 -224 -99 b -322 -158 -313 -158 -315 -158 b -348 -131 -338 -158 -348 -145 b -344 -117 -348 -127 -347 -122 b -328 -104 -341 -112 -338 -111 b -127 -8 -269 -65 -202 -33 b -106 0 -115 -4 -106 -1 b -127 6 -106 0 -115 2 b -328 102 -202 31 -269 63 b -344 116 -338 109 -341 111 b -348 130 -347 120 -348 124 b -330 155 -348 141 -341 152 " },
		    "v43": { "x_min": -442.359375, "x_max": 441, "ha": 450, "o": "m -31 487 b -1 488 -21 488 -10 488 b 434 104 216 488 397 330 b 441 27 438 79 441 47 b 439 12 441 20 439 15 b 419 0 435 4 427 0 b 404 5 413 0 408 1 b 398 30 400 11 398 13 b 0 351 390 213 213 351 b -59 348 -20 351 -39 349 b -400 30 -251 324 -393 191 b -405 5 -400 13 -401 11 b -420 0 -409 1 -415 0 b -441 12 -428 0 -436 4 b -442 27 -441 15 -442 20 b -435 104 -442 47 -439 79 b -31 487 -401 316 -235 474 m -13 131 b -1 133 -9 133 -5 133 b 51 105 19 133 39 123 b 61 70 58 95 61 83 b 51 34 61 58 58 45 b -1 6 39 16 19 6 b -46 27 -17 6 -34 13 b -62 69 -57 38 -62 54 b -13 131 -62 98 -44 124 " },
		    "v44": { "x_min": -21.78125, "x_max": 251.8125, "ha": 257, "o": "m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 383 20 616 20 616 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 l -21 -212 l -21 201 l -21 616 l -20 620 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 " },
		    "v45": { "x_min": -402.890625, "x_max": 401.53125, "ha": 410, "o": "m -10 273 b -4 274 -9 273 -6 274 b 16 262 4 274 12 269 b 17 158 17 259 17 259 l 17 56 l 62 112 b 117 174 110 172 110 172 b 122 174 118 174 119 174 b 132 173 125 174 129 173 b 295 11 134 172 171 134 l 307 -1 l 336 34 b 374 76 366 72 368 74 b 381 77 375 77 378 77 b 401 56 392 77 401 68 b 400 48 401 54 401 51 b 223 -172 397 41 230 -166 b 210 -176 220 -174 215 -176 b 201 -174 206 -176 204 -176 b 112 -87 198 -173 178 -152 b 27 0 65 -38 27 0 b 21 -6 27 0 24 -2 l 17 -12 l 17 -147 b 17 -210 17 -173 17 -194 b 10 -292 17 -297 16 -287 b -2 -299 6 -297 2 -299 b -21 -287 -10 -299 -19 -295 b -24 -174 -23 -284 -23 -284 l -24 -63 l -66 -117 b -121 -176 -110 -170 -114 -176 b -125 -176 -122 -176 -123 -176 b -296 -12 -134 -174 -125 -184 l -308 0 l -337 -34 b -375 -77 -367 -73 -370 -76 b -382 -79 -377 -79 -379 -79 b -402 -58 -393 -79 -402 -69 b -401 -49 -402 -55 -402 -52 b -224 170 -398 -43 -231 165 b -212 174 -221 173 -216 174 b -202 173 -208 174 -205 174 b -39 11 -200 172 -151 122 l -28 -1 l -25 1 l -24 4 l -24 130 b -23 260 -24 256 -24 258 b -10 273 -20 266 -16 270 " },
		    "v46": { "x_min": 0, "x_max": 627.46875, "ha": 640, "o": "m 306 190 b 314 191 308 191 311 191 b 326 184 318 191 322 190 l 336 173 b 510 52 377 127 442 80 b 515 49 513 51 515 49 b 611 16 537 40 579 24 b 627 0 624 13 627 9 b 607 -18 627 -11 624 -13 b 330 -181 490 -49 389 -109 b 314 -192 323 -190 319 -192 b 306 -191 311 -192 308 -192 b 294 -177 302 -188 302 -188 b 257 -140 287 -170 265 -148 b 19 -18 193 -84 114 -44 b 0 0 2 -13 0 -11 b 16 16 0 9 2 13 b 110 49 47 24 89 40 b 117 52 111 49 114 51 b 145 65 126 56 130 58 b 281 163 200 93 245 124 b 300 186 288 170 291 174 b 306 190 300 187 303 188 m 317 137 b 313 142 315 141 314 142 b 308 137 313 142 311 141 b 161 4 276 84 220 33 b 155 0 159 1 155 0 b 163 -4 155 0 159 -2 b 308 -138 220 -34 276 -84 b 313 -142 311 -141 313 -142 b 317 -138 314 -142 315 -141 b 464 -4 351 -84 406 -34 b 470 0 468 -2 470 0 b 464 4 470 0 468 1 b 317 137 406 33 351 84 " },
		    "v47": { "x_min": -24.5, "x_max": 315.78125, "ha": 322, "o": "m -24 -145 l -24 -5 l -20 -5 b 1 -26 -10 -5 -6 -9 b 175 -241 31 -86 96 -166 b 314 -548 259 -323 304 -420 b 315 -589 315 -555 315 -571 b 314 -630 315 -606 315 -623 b 298 -730 311 -664 306 -699 l 295 -742 l 296 -748 b 314 -850 304 -778 311 -813 b 315 -892 315 -857 315 -874 b 314 -932 315 -909 315 -925 b 298 -1032 311 -967 306 -1002 l 295 -1045 l 296 -1050 b 314 -1153 304 -1081 311 -1115 b 315 -1193 315 -1160 315 -1177 b 314 -1235 315 -1211 315 -1228 b 217 -1526 306 -1338 270 -1444 b 201 -1533 213 -1532 208 -1533 b 182 -1522 193 -1533 185 -1529 b 179 -1514 181 -1518 179 -1517 b 189 -1489 179 -1508 182 -1501 b 266 -1217 240 -1403 266 -1308 b 262 -1156 266 -1196 265 -1177 b 110 -907 247 -1043 190 -950 b 0 -889 87 -895 50 -889 l -1 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 1 -631 -10 -610 -6 -614 b 175 -846 31 -691 96 -771 b 259 -956 213 -884 236 -914 b 265 -966 262 -961 264 -966 b 265 -966 265 -966 265 -966 b 265 -953 265 -964 265 -959 b 266 -920 266 -943 266 -932 b 262 -853 266 -898 265 -873 b 110 -605 247 -741 190 -648 b 0 -587 87 -592 50 -587 l -1 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 1 -328 -10 -308 -6 -312 b 175 -544 31 -388 96 -469 b 259 -655 213 -581 236 -612 b 265 -663 262 -659 264 -663 b 265 -663 265 -663 265 -663 b 265 -650 265 -663 265 -657 b 266 -617 266 -641 266 -630 b 262 -551 266 -595 265 -570 b 110 -303 247 -438 190 -345 b 0 -284 87 -290 50 -284 l -1 -284 l -24 -284 l -24 -145 " },
		    "v49": { "x_min": 0, "x_max": 630.203125, "ha": 643, "o": "m 308 204 b 314 205 310 205 313 205 b 326 201 319 205 323 204 b 355 154 328 199 338 180 b 401 83 362 142 392 95 l 409 72 b 431 41 412 66 424 49 b 619 -174 498 -51 570 -134 b 630 -192 626 -180 630 -186 b 626 -202 630 -195 628 -199 b 616 -206 623 -205 620 -206 b 552 -188 608 -206 592 -202 b 310 -155 488 -169 392 -155 b 268 -156 295 -155 281 -155 b 77 -188 197 -161 126 -173 b 13 -206 35 -202 20 -206 b 9 -206 12 -206 10 -206 b 0 -191 2 -202 0 -197 b 8 -176 0 -186 2 -180 b 204 49 58 -136 138 -43 l 220 72 l 227 83 b 295 188 245 108 281 166 b 308 204 299 197 304 202 m 315 147 b 314 147 315 147 314 147 b 314 147 314 147 314 147 b 306 129 314 145 310 138 l 296 105 b 281 72 292 97 284 77 l 274 56 b 181 -123 247 -4 212 -72 l 174 -134 l 176 -133 b 314 -123 215 -127 272 -123 b 451 -133 356 -123 413 -127 l 454 -134 l 449 -123 b 353 56 417 -72 381 -4 l 347 72 b 332 105 344 77 336 97 l 322 129 b 315 147 318 138 315 145 " },
		    "v4a": { "x_min": 70.78125, "x_max": 378.390625, "ha": 315, "o": "m 246 373 b 254 373 249 373 251 373 b 372 324 303 373 360 351 b 378 302 377 317 378 309 b 338 251 378 278 362 255 b 328 249 334 249 332 249 b 283 294 303 249 283 270 b 288 315 283 301 284 308 b 289 319 289 317 289 319 b 289 319 289 319 289 319 b 283 320 289 320 287 320 b 270 322 279 322 274 322 b 206 288 242 322 215 308 b 206 283 206 287 206 285 b 257 223 206 267 230 238 b 284 206 272 213 277 210 b 351 90 328 173 351 130 b 340 47 351 74 348 59 b 205 -30 314 -2 264 -30 b 182 -29 198 -30 190 -30 b 84 15 147 -24 103 -5 b 70 48 74 24 70 36 b 108 99 70 70 85 94 b 121 102 112 101 117 102 b 167 56 147 102 167 80 b 159 31 167 48 164 40 l 156 26 l 157 26 b 190 20 167 22 178 20 b 220 26 201 20 212 22 b 258 65 243 34 258 51 b 257 70 258 66 258 69 b 204 126 249 94 234 109 b 114 258 148 158 114 209 b 125 302 114 273 118 288 b 246 373 147 342 193 370 " },
		    "v4b": { "x_min": 0, "x_max": 503.609375, "ha": 514, "o": "m 274 430 b 277 430 276 430 277 430 b 310 394 296 430 310 415 b 308 383 310 391 308 387 b 306 367 307 381 307 374 b 236 120 298 305 272 210 b 40 -273 189 -5 125 -134 b 20 -287 35 -283 27 -287 b 5 -281 14 -287 9 -285 b 0 -267 1 -277 0 -273 b 9 -242 0 -262 2 -255 b 246 395 137 -12 232 242 b 274 430 249 416 257 427 m 468 430 b 472 430 469 430 470 430 b 503 394 490 430 503 415 b 502 383 503 391 503 387 b 499 367 502 381 500 374 b 431 120 491 305 465 210 b 234 -273 382 -5 318 -134 b 213 -287 228 -283 220 -287 b 198 -281 208 -287 202 -285 b 193 -267 194 -277 193 -273 b 202 -242 193 -262 196 -255 b 439 395 330 -12 426 242 b 468 430 442 416 451 427 " },
		    "v4d": { "x_min": -311.6875, "x_max": 310.328125, "ha": 317, "o": "m -9 388 b -2 390 -8 390 -5 390 b 5 388 1 390 4 390 b 19 378 10 387 16 383 b 23 333 23 371 23 371 b 24 298 23 299 24 298 b 81 276 34 298 65 285 b 213 91 145 240 190 177 b 224 24 217 76 224 36 b 257 24 224 24 235 24 b 299 19 292 24 292 24 b 310 -1 306 15 310 6 b 299 -23 310 -11 306 -19 b 257 -27 292 -27 292 -27 b 224 -29 235 -27 224 -29 b 213 -95 224 -40 217 -80 b 81 -280 190 -181 145 -244 b 24 -301 65 -290 34 -301 b 23 -335 24 -301 23 -303 l 23 -340 b 17 -381 23 -374 23 -374 b -1 -391 13 -388 5 -391 b -21 -381 -9 -391 -17 -388 b -27 -340 -27 -374 -27 -374 l -27 -335 b -28 -301 -27 -303 -27 -301 b -85 -280 -38 -301 -69 -290 b -217 -95 -149 -244 -194 -181 b -228 -29 -221 -80 -228 -40 b -259 -27 -228 -29 -238 -27 b -300 -23 -294 -27 -294 -27 b -311 -2 -307 -19 -311 -11 b -294 23 -311 8 -304 19 b -259 24 -291 23 -284 24 b -228 24 -239 24 -228 24 b -217 91 -228 36 -221 76 b -85 276 -194 177 -149 240 b -28 298 -69 285 -38 298 b -27 333 -27 298 -27 299 b -27 371 -27 362 -27 369 b -9 388 -24 378 -17 385 m -27 136 b -28 247 -27 197 -28 247 b -61 216 -31 247 -53 226 b -123 33 -95 172 -121 98 l -125 24 l -76 24 l -27 24 l -27 136 m 29 242 b 24 247 27 245 24 247 b 23 136 24 247 23 197 l 23 24 l 72 24 l 121 24 l 119 33 b 29 242 115 116 77 206 m -27 -140 l -27 -27 l -76 -27 l -125 -27 l -123 -36 b -61 -220 -121 -102 -95 -176 b -28 -251 -53 -230 -31 -251 b -27 -140 -28 -251 -27 -201 m 119 -36 l 121 -27 l 72 -27 l 23 -27 l 23 -140 b 24 -251 23 -201 24 -251 b 57 -220 27 -251 49 -230 b 119 -36 91 -176 117 -102 " },
		    "v4e": { "x_min": 0, "x_max": 239.5625, "ha": 244, "o": "m 10 460 b 20 462 13 462 14 462 b 39 449 28 462 35 458 l 40 446 l 40 326 b 40 205 40 259 40 205 b 127 227 40 205 80 215 b 220 249 196 244 213 249 b 227 247 224 249 225 248 b 238 237 231 245 235 241 l 239 233 l 239 -106 l 239 -448 l 238 -451 b 219 -463 234 -459 225 -463 b 198 -451 210 -463 202 -459 l 197 -448 l 197 -324 b 197 -201 197 -248 197 -201 b 110 -223 196 -201 157 -210 b 17 -245 42 -240 24 -245 b 10 -242 13 -245 13 -244 b 0 -233 6 -241 2 -237 l 0 -230 l 0 108 l 0 446 l 0 449 b 10 460 2 453 6 458 m 197 22 b 197 70 197 41 197 58 b 196 116 197 113 197 116 l 196 116 b 118 97 196 116 160 106 l 40 77 l 40 -18 b 40 -112 40 -69 40 -112 l 119 -93 l 197 -73 l 197 22 " },
		    "v51": { "x_min": -1.359375, "x_max": 455.96875, "ha": 465, "o": "m 352 541 b 357 542 353 542 355 542 b 377 530 364 542 372 537 l 378 526 l 378 394 l 379 262 l 404 266 b 436 270 420 269 430 270 b 450 265 443 270 446 269 b 455 220 455 259 455 260 l 455 208 l 455 161 l 454 156 b 411 140 449 147 447 147 b 378 133 393 137 379 134 b 378 68 378 133 378 106 b 378 22 378 54 378 38 l 379 -87 l 404 -83 b 436 -79 420 -80 430 -79 b 450 -84 443 -79 446 -80 b 455 -129 455 -90 455 -88 l 455 -141 l 455 -188 l 454 -192 b 413 -209 449 -202 447 -202 b 382 -215 398 -212 383 -215 l 378 -215 l 378 -345 l 378 -380 b 375 -485 378 -484 378 -480 b 357 -494 371 -491 364 -494 b 340 -485 351 -494 344 -491 b 336 -383 337 -480 336 -484 l 336 -349 l 336 -223 l 334 -223 b 291 -231 334 -223 314 -227 l 247 -240 l 247 -371 l 246 -503 l 245 -506 b 225 -519 242 -514 234 -519 b 206 -506 219 -519 210 -514 l 205 -503 l 205 -376 l 205 -248 l 160 -256 l 115 -265 l 115 -396 l 115 -527 l 114 -531 b 95 -544 110 -539 102 -544 b 76 -531 87 -544 78 -539 l 73 -527 l 73 -399 b 73 -273 73 -330 73 -273 b 49 -277 73 -273 61 -274 b 17 -281 32 -280 24 -281 b 4 -276 10 -281 8 -280 b -1 -234 0 -269 -1 -272 b 0 -219 -1 -229 0 -224 l 0 -170 l 1 -167 b 10 -158 2 -163 6 -159 b 49 -149 13 -156 16 -155 l 73 -145 l 73 -34 b 73 76 73 26 73 76 b 49 72 73 76 61 74 b 17 68 32 69 24 68 b 4 73 10 68 8 69 b -1 115 0 80 -1 77 b 0 130 -1 120 0 124 l 0 179 l 1 181 b 10 191 2 186 6 190 b 49 199 13 192 16 194 l 73 204 l 73 338 b 73 374 73 352 73 365 b 77 483 73 484 73 477 b 95 492 81 489 88 492 b 111 483 100 492 107 489 b 115 378 115 477 115 483 l 115 342 b 117 212 115 223 115 212 b 204 229 117 212 200 227 l 205 229 l 205 365 l 205 502 l 206 505 b 225 517 210 513 219 517 b 245 505 234 517 242 513 l 246 502 l 247 369 l 247 237 l 249 237 b 336 254 253 238 336 254 b 337 390 336 254 337 302 l 337 526 l 338 530 b 352 541 341 535 347 539 m 336 15 b 336 126 336 102 336 126 l 336 126 b 291 117 336 126 315 122 l 247 109 l 247 -1 l 247 -112 l 249 -112 b 336 -95 253 -111 336 -95 b 336 15 336 -95 336 -56 m 205 -120 b 205 -55 205 -120 205 -93 b 205 -9 205 -41 205 -24 l 205 101 l 160 93 l 115 84 l 115 -26 b 115 -83 115 -49 115 -69 b 117 -137 115 -133 115 -137 b 205 -120 118 -137 204 -120 " },
		    "v52": { "x_min": -10.890625, "x_max": 298.078125, "ha": 294, "o": "m 138 473 b 142 474 140 473 141 474 b 164 459 148 474 153 470 b 191 402 183 442 191 423 b 181 353 191 388 187 371 b 178 349 179 352 178 349 b 179 348 178 348 179 348 b 185 349 181 348 182 348 b 255 376 210 355 234 363 b 272 381 264 381 266 381 b 298 355 287 381 298 370 b 288 330 298 348 298 345 b 171 34 238 254 194 141 b 166 13 168 16 168 16 b 144 1 161 5 152 1 b 121 15 134 1 125 5 b 115 33 119 18 117 24 b 0 330 91 145 49 252 b -10 355 -9 345 -10 348 b 13 381 -10 371 0 381 b 31 376 19 381 25 380 b 132 345 61 358 103 345 l 136 345 l 137 355 b 145 378 138 359 142 370 b 152 415 149 394 152 405 b 137 452 152 427 148 438 b 133 464 134 458 133 460 b 138 473 133 467 134 470 " },
		    "v53": { "x_min": 0, "x_max": 902.421875, "ha": 921, "o": "m 17 240 b 24 241 19 241 21 241 b 32 240 28 241 31 241 b 46 229 38 238 43 234 b 50 88 50 223 50 237 b 50 -1 50 63 50 34 b 50 -90 50 -36 50 -65 b 46 -231 50 -238 50 -224 b 25 -242 42 -238 34 -242 b 0 -224 14 -242 4 -235 b 0 2 0 -222 0 -108 b 0 223 0 112 0 220 b 17 240 2 230 9 237 m 110 240 b 118 241 111 241 114 241 b 126 240 121 241 123 241 b 142 223 133 237 140 230 b 144 123 144 220 144 205 b 144 29 144 45 144 29 b 144 29 144 29 144 29 b 393 183 166 106 264 167 b 450 186 412 184 431 186 b 756 29 600 186 732 120 b 756 29 756 29 756 29 b 758 123 758 29 758 45 b 760 227 758 226 758 223 b 784 241 766 237 774 241 b 804 229 792 241 800 237 b 809 88 808 223 809 237 l 809 -1 l 809 -90 b 804 -231 809 -238 808 -224 b 784 -242 800 -238 792 -242 b 762 -231 775 -242 766 -238 b 758 -124 756 -224 758 -231 b 756 -30 758 -47 758 -30 b 756 -30 756 -30 756 -30 b 509 -184 736 -108 637 -169 b 450 -187 488 -187 469 -187 b 144 -30 300 -187 168 -122 b 144 -30 144 -30 144 -30 b 144 -124 144 -30 144 -47 b 140 -231 144 -231 144 -224 b 118 -242 134 -238 126 -242 b 92 -224 107 -242 96 -235 b 92 2 92 -222 92 -108 b 92 223 92 112 92 220 b 110 240 95 230 102 237 m 432 161 b 413 162 426 162 420 162 b 313 41 351 162 313 109 b 347 -73 313 5 323 -34 b 487 -163 385 -133 439 -163 b 578 -97 526 -163 562 -142 b 588 -43 585 -80 588 -62 b 432 161 588 47 518 147 m 868 240 b 876 241 869 241 872 241 b 884 240 879 241 882 241 b 898 229 890 238 894 234 b 902 88 902 223 902 237 l 902 -1 l 902 -90 b 898 -231 902 -238 902 -224 b 876 -242 892 -238 884 -242 b 852 -224 865 -242 854 -235 b 850 2 850 -222 850 -108 b 852 223 850 112 850 220 b 868 240 853 230 860 237 " },
		    "v54": { "x_min": -24.5, "x_max": 317.140625, "ha": 324, "o": "m -24 -161 l -24 -5 l -20 -5 b 0 -24 -9 -5 -2 -12 b 171 -315 21 -124 84 -233 b 317 -660 268 -406 317 -531 b 187 -1014 317 -782 274 -909 b 161 -1034 172 -1034 171 -1034 b 141 -1013 149 -1034 141 -1025 b 152 -991 141 -1004 142 -1002 b 266 -682 228 -899 266 -788 b 174 -430 266 -588 236 -498 b -23 -317 136 -388 66 -348 b -24 -161 -23 -316 -24 -285 " },
		    "v55": { "x_min": 0, "x_max": 551.25, "ha": 563, "o": "m 289 644 b 304 645 294 645 299 645 b 404 566 349 645 392 613 b 406 541 405 557 406 549 b 379 471 406 514 397 489 l 377 467 l 382 470 b 509 591 438 485 485 531 b 513 601 510 595 513 599 b 530 609 518 607 524 609 b 551 588 540 609 551 602 b 200 -605 551 584 204 -599 b 182 -616 197 -612 190 -616 b 163 -602 174 -616 166 -610 b 161 -598 161 -601 161 -601 b 217 -402 161 -589 170 -562 b 272 -213 247 -298 272 -213 b 272 -213 272 -213 272 -213 b 264 -219 272 -213 268 -216 b 140 -262 227 -247 182 -262 b 36 -226 102 -262 65 -249 b 0 -145 12 -206 0 -176 b 17 -84 0 -124 5 -104 b 103 -38 38 -54 70 -38 b 191 -91 137 -38 172 -56 b 205 -141 201 -106 205 -124 b 178 -212 205 -167 196 -194 l 175 -215 l 182 -213 b 307 -93 236 -198 284 -151 b 372 129 308 -88 372 127 b 372 129 372 129 372 129 b 364 122 372 129 368 126 b 240 80 328 94 283 80 b 137 115 202 80 166 91 b 99 195 112 136 99 165 b 118 256 99 217 106 238 b 204 303 138 287 171 303 b 292 249 238 303 273 285 b 306 199 302 234 306 217 b 279 129 306 173 296 148 l 276 126 l 281 127 b 408 248 336 142 385 190 b 473 470 409 254 473 469 b 473 470 473 470 473 470 b 465 464 473 470 469 467 b 341 421 428 435 383 421 b 236 458 303 421 266 433 b 200 537 212 478 200 508 b 289 644 200 585 234 635 " },
		    "v58": { "x_min": -21.78125, "x_max": 367.5, "ha": 375, "o": "m 259 1553 b 265 1553 261 1553 264 1553 b 288 1540 272 1553 277 1550 b 367 1351 340 1493 367 1424 b 336 1221 367 1308 357 1263 l 332 1211 l 333 1208 b 367 1077 356 1170 367 1124 b 336 945 367 1032 357 986 l 332 935 l 333 932 b 367 800 356 893 367 848 b 336 669 367 756 357 710 l 332 659 l 333 656 b 367 523 356 617 367 571 b 345 412 367 485 360 446 b 231 273 322 356 284 310 b -1 19 121 195 27 93 b -17 4 -4 11 -10 5 l -21 4 l -21 134 l -21 265 l -17 265 b 133 291 20 265 96 278 b 318 537 245 328 318 433 b 307 603 318 559 315 582 b 303 614 304 612 304 614 b 298 609 302 614 300 613 b 231 549 281 589 258 567 b -1 295 121 471 27 369 b -17 280 -4 287 -10 281 l -21 280 l -21 410 l -21 541 l -17 541 b 133 567 20 541 96 555 b 318 813 245 605 318 709 b 307 880 318 835 315 859 b 303 891 304 888 304 891 b 298 885 302 891 300 888 b 231 825 281 866 258 843 b -1 571 121 748 27 645 b -17 556 -4 563 -10 557 l -21 556 l -21 687 l -21 817 l -17 817 b 133 843 20 817 96 830 b 318 1089 245 881 318 985 b 307 1156 318 1111 315 1134 b 303 1167 304 1164 304 1167 b 298 1161 302 1167 300 1164 b 231 1102 281 1140 258 1120 b -1 848 121 1024 27 921 b -17 832 -4 839 -10 834 l -21 832 l -21 963 l -21 1093 l -17 1093 b 114 1113 12 1093 78 1103 b 313 1314 215 1142 289 1218 b 318 1364 317 1331 318 1347 b 255 1511 318 1422 295 1478 b 243 1532 247 1519 243 1525 b 259 1553 243 1540 250 1550 " },
		    "v59": { "x_min": 0, "x_max": 464.140625, "ha": 474, "o": "m 0 0 l 0 347 l 76 347 l 153 347 l 153 0 l 153 -348 l 76 -348 l 0 -348 l 0 0 m 308 -1 l 308 347 l 386 347 l 464 347 l 464 -1 l 464 -348 l 386 -348 l 308 -348 l 308 -1 " },
		    "v5a": { "x_min": -171.5, "x_max": 170.140625, "ha": 174, "o": "m -6 566 b 0 567 -5 567 -2 567 b 14 556 6 567 12 563 b 92 285 14 555 50 433 b 170 13 166 33 170 19 b 168 13 170 13 170 13 b 161 1 168 8 167 4 l 159 0 l 122 0 l 84 0 l 81 1 b 21 195 76 5 78 -5 b -32 381 -8 297 -32 381 b -87 197 -32 381 -57 298 b -141 8 -115 94 -140 9 b -155 0 -142 2 -149 0 b -171 15 -163 0 -171 5 b -14 556 -171 18 -24 528 b -6 566 -14 560 -10 564 " },
		    "v5b": { "x_min": -441, "x_max": 439.640625, "ha": 449, "o": "m -428 -2 b -421 0 -427 -1 -424 0 b -406 -6 -416 0 -409 -2 b -400 -31 -401 -12 -400 -15 b -1 -352 -392 -215 -215 -352 b 58 -349 19 -352 38 -351 b 398 -31 250 -326 392 -192 b 404 -6 398 -15 400 -12 b 419 -1 408 -2 413 -1 b 439 -13 427 -1 435 -5 b 439 -29 439 -16 439 -22 b 434 -105 439 -48 438 -80 b 0 -489 397 -333 213 -489 b -68 -484 -23 -489 -44 -488 b -441 -36 -280 -452 -436 -263 b -441 -30 -441 -34 -441 -31 b -428 -2 -441 -11 -439 -5 m -13 -9 b -1 -8 -9 -8 -5 -8 b 50 -36 19 -8 39 -19 b 61 -72 57 -47 61 -59 b 50 -106 61 -84 57 -97 b -1 -134 39 -124 19 -134 b -46 -115 -17 -134 -34 -129 b -62 -72 -57 -102 -62 -87 b -13 -9 -62 -44 -44 -16 " },
		    "v5c": { "x_min": 0, "x_max": 447.8125, "ha": 457, "o": "m 0 -87 l 0 0 l 223 0 l 447 0 l 447 -87 l 447 -174 l 223 -174 l 0 -174 l 0 -87 " },
		    "v5d": { "x_min": -1.359375, "x_max": 592.078125, "ha": 604, "o": "m 280 692 b 295 694 283 692 289 694 b 310 692 300 694 307 692 b 357 630 340 684 357 657 b 336 580 357 612 351 594 b 311 538 321 566 311 549 b 352 492 311 512 330 492 b 366 495 357 492 362 492 b 397 553 390 503 397 517 b 415 603 397 576 402 591 b 460 623 427 617 443 623 b 509 599 479 623 498 614 b 522 559 518 587 522 573 b 494 506 522 538 513 519 b 451 495 481 498 473 496 b 415 488 432 495 426 494 b 394 449 404 483 394 464 b 394 448 394 448 394 448 l 394 440 l 397 433 b 428 409 404 420 413 413 b 438 408 431 408 435 408 b 479 431 450 408 462 415 b 528 455 495 448 510 455 b 548 452 534 455 541 453 b 592 391 577 442 592 416 b 549 331 592 365 577 340 b 528 327 541 328 534 327 b 479 351 510 327 495 335 b 438 374 464 367 450 374 b 417 369 431 374 424 373 b 394 333 402 360 394 348 b 400 312 394 326 396 319 b 451 287 408 294 420 288 b 513 258 484 285 499 278 b 522 223 519 247 522 234 b 461 159 522 190 496 159 b 449 161 457 159 453 159 b 397 229 416 167 397 191 b 366 288 397 265 390 278 b 352 290 362 290 357 290 b 315 262 336 290 321 280 b 311 245 313 256 311 251 b 334 204 311 233 318 220 b 355 170 348 190 351 184 b 357 152 356 166 357 159 b 355 136 357 147 356 140 b 295 88 345 104 321 88 b 232 152 264 88 232 112 b 255 204 232 174 238 186 b 279 244 273 222 279 231 l 279 245 b 238 290 279 270 259 290 b 224 288 234 290 228 290 b 193 229 200 278 193 265 b 141 161 193 191 174 167 b 129 159 137 159 133 159 b 68 223 93 159 68 190 b 77 258 68 234 70 247 b 138 287 91 278 106 285 b 185 302 166 287 175 291 b 196 333 193 312 196 323 b 174 369 196 347 187 360 b 152 374 166 373 159 374 b 111 351 140 374 126 367 b 62 327 95 335 80 327 b 51 328 58 327 54 327 b -1 391 16 334 -1 363 b 53 455 -1 420 17 449 b 62 455 57 455 59 455 b 111 431 80 455 95 448 b 152 408 127 415 140 408 b 161 409 155 408 159 408 b 193 433 176 413 186 420 l 196 440 l 196 448 b 196 451 196 449 196 449 b 190 471 196 459 194 463 b 137 495 182 489 167 495 l 134 495 l 134 495 b 68 560 95 495 68 521 b 129 623 68 596 95 623 b 144 621 134 623 138 623 b 193 553 175 614 193 589 b 224 495 193 517 200 503 b 238 492 228 492 234 492 b 279 538 259 492 279 512 b 254 580 279 549 269 566 b 232 630 239 594 232 612 b 280 692 232 657 250 684 m 307 456 b 295 458 303 458 299 458 b 230 391 258 458 230 426 b 236 360 230 381 231 371 b 295 324 249 337 272 324 b 353 360 318 324 341 337 b 360 391 357 370 360 381 b 307 456 360 421 340 451 " },
		    "v60": { "x_min": -590.71875, "x_max": 589.359375, "ha": 601, "o": "m -367 173 b -362 174 -366 174 -364 174 b -351 173 -357 174 -353 173 b -262 86 -348 172 -328 151 b -176 0 -216 37 -176 0 b -107 84 -176 0 -145 37 b -31 174 -36 173 -38 172 b -25 174 -29 174 -28 174 b -16 173 -23 174 -19 173 b 72 86 -13 172 6 151 b 157 0 119 37 157 0 b 227 84 159 0 189 37 b 303 174 298 173 296 172 b 308 174 304 174 307 174 b 318 173 313 174 317 173 b 481 11 322 172 357 134 l 494 -1 l 522 34 b 560 76 553 72 555 74 b 567 77 563 77 564 77 b 589 56 579 77 589 68 b 586 48 589 54 588 51 b 411 -172 583 41 416 -166 b 397 -176 406 -174 401 -176 b 387 -174 393 -176 390 -176 b 299 -87 386 -173 366 -152 b 213 0 253 -38 213 0 b 144 -86 213 0 182 -38 b 68 -174 73 -174 74 -173 b 62 -176 66 -176 65 -176 b 53 -174 59 -176 55 -174 b -35 -87 50 -173 29 -152 b -121 0 -83 -38 -121 0 b -190 -86 -122 0 -152 -38 b -266 -174 -261 -174 -259 -173 b -272 -176 -268 -176 -270 -176 b -281 -174 -276 -176 -280 -174 b -371 -86 -284 -173 -304 -152 b -457 0 -417 -38 -457 0 l -457 0 b -477 -26 -457 0 -470 -16 b -548 -227 -524 -88 -548 -161 b -536 -303 -548 -254 -544 -280 b -533 -317 -534 -309 -533 -313 b -553 -338 -533 -330 -541 -338 b -577 -315 -566 -338 -571 -333 b -590 -227 -586 -287 -590 -258 b -518 -9 -590 -154 -564 -77 b -465 56 -509 2 -504 8 l -402 134 b -367 173 -375 169 -372 172 " },
		    "v62": { "x_min": 46.28125, "x_max": 669.671875, "ha": 563, "o": "m 183 376 b 189 376 185 376 187 376 b 212 374 197 376 208 376 b 265 337 234 369 253 355 b 274 317 268 331 273 320 b 274 316 274 317 274 316 b 280 323 276 316 276 319 b 311 358 288 337 299 348 b 319 366 315 360 318 365 b 356 376 326 373 340 376 b 382 371 364 376 374 374 b 428 337 400 366 417 352 b 436 317 431 331 436 320 b 438 316 436 317 436 316 b 442 323 438 316 439 319 b 475 358 451 337 462 348 b 483 366 477 360 481 365 b 518 376 488 373 503 376 b 544 373 528 376 536 376 b 604 285 579 360 604 326 b 597 249 604 273 601 258 b 543 63 596 247 544 70 b 541 54 543 61 541 55 b 540 44 540 51 540 47 b 552 23 540 33 545 23 b 552 23 552 23 552 23 b 647 126 586 29 627 72 b 658 138 651 136 653 138 b 660 138 660 138 660 138 b 669 129 666 137 669 136 b 654 88 669 122 665 109 b 562 -12 631 43 602 9 l 549 -19 b 521 -27 540 -24 530 -27 b 447 30 490 -27 458 -4 b 443 58 445 38 443 48 b 450 93 443 72 446 84 b 504 278 453 97 504 272 b 507 288 506 283 506 287 b 509 298 507 292 509 295 b 491 326 509 310 502 320 b 487 327 490 327 488 327 b 479 324 484 327 483 326 b 441 270 462 316 443 288 b 435 249 441 265 436 254 b 398 127 434 248 419 195 b 362 4 379 61 362 5 b 328 -1 359 -1 362 -1 b 314 -1 323 -1 319 -1 b 302 -1 310 -1 306 -1 b 266 4 266 -1 269 -1 b 265 6 265 5 265 5 b 303 144 265 13 272 34 b 343 278 325 216 343 276 b 344 288 343 281 344 285 b 345 298 345 291 345 295 b 330 326 345 310 340 320 b 323 327 328 327 325 327 b 317 324 322 327 321 326 b 279 270 300 316 281 288 b 273 249 279 265 274 254 b 236 127 272 248 255 195 b 200 4 216 61 200 5 b 164 -1 197 -1 198 -1 b 151 -1 161 -1 156 -1 b 140 -1 147 -1 142 -1 b 103 4 104 -1 106 -1 b 103 6 103 5 103 5 b 141 144 103 13 108 34 b 181 278 161 216 179 276 b 182 288 181 281 181 285 b 183 298 182 291 183 295 b 168 324 183 310 178 320 b 160 327 166 326 163 327 b 141 320 156 327 151 324 b 69 230 112 305 85 272 b 57 215 65 217 62 215 b 55 215 57 215 55 215 b 46 224 49 215 46 217 b 59 260 46 231 50 242 b 151 363 81 306 112 341 b 161 369 155 365 160 367 b 183 376 166 371 174 374 " },
		    "v68": { "x_min": -597.53125, "x_max": 596.171875, "ha": 608, "o": "m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 155 11 -5 172 43 123 l 166 -1 l 168 1 l 170 4 l 170 130 b 171 260 170 256 170 258 b 191 274 175 269 183 274 b 205 267 196 274 201 272 b 212 158 212 262 210 273 l 212 56 l 257 112 b 311 173 304 172 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 216 -6 221 -1 219 -2 l 212 -12 l 212 -147 b 212 -210 212 -173 212 -194 b 205 -292 212 -297 210 -287 b 191 -299 201 -297 196 -299 b 172 -287 183 -299 175 -295 b 170 -174 171 -284 171 -284 l 170 -63 l 127 -117 b 73 -176 84 -170 80 -176 b 68 -176 72 -176 70 -176 b -27 -87 59 -174 65 -180 b -114 0 -74 -38 -112 0 b -182 -86 -114 0 -145 -38 b -258 -174 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 " },
		    "v6c": { "x_min": -1.359375, "x_max": 193.28125, "ha": 197, "o": "m 78 233 b 87 233 81 233 84 233 b 187 140 132 233 174 195 b 193 102 190 127 193 115 b 43 -113 193 22 136 -62 b 27 -119 36 -116 31 -119 b 19 -108 21 -119 19 -115 b 29 -97 19 -102 20 -101 b 102 13 73 -72 102 -27 b 92 51 102 26 98 40 l 91 54 l 84 54 b 8 104 53 54 21 74 b -1 142 1 116 -1 130 b 78 233 -1 187 31 227 " },
		    "v6d": { "x_min": -590.71875, "x_max": 589.359375, "ha": 601, "o": "m 544 335 b 553 337 548 337 551 337 b 575 313 563 337 570 330 b 589 226 583 285 589 256 b 517 8 589 152 563 76 b 464 -58 507 -4 503 -9 l 401 -136 b 362 -176 372 -172 370 -176 b 357 -176 360 -176 359 -176 b 261 -87 349 -174 355 -180 b 175 0 215 -38 175 0 b 106 -86 175 0 144 -38 b 29 -174 35 -174 36 -173 b 24 -176 28 -176 27 -176 b 14 -174 21 -176 17 -174 b -73 -87 12 -173 -8 -152 b -159 0 -121 -38 -159 0 b -228 -86 -160 0 -190 -38 b -304 -174 -299 -174 -298 -173 b -310 -176 -306 -176 -308 -176 b -319 -174 -314 -176 -318 -174 b -483 -12 -323 -173 -359 -137 l -495 0 l -524 -34 b -562 -77 -553 -73 -556 -76 b -568 -79 -564 -79 -566 -79 b -590 -58 -581 -79 -590 -69 b -588 -49 -590 -55 -589 -52 b -412 170 -585 -43 -417 165 b -398 174 -408 173 -402 174 b -389 173 -394 174 -392 174 b -300 86 -387 172 -366 151 b -215 -1 -254 37 -215 -1 b -145 84 -215 -1 -183 37 b -69 173 -74 173 -76 172 b -63 174 -68 174 -66 174 b -54 173 -61 174 -57 173 b 34 86 -51 172 -31 151 b 119 -1 81 37 119 -1 b 189 84 121 -1 151 37 b 265 173 259 173 258 172 b 270 174 266 174 269 174 b 280 173 274 174 279 173 b 370 84 283 172 303 151 b 455 -1 416 37 455 -1 l 455 -1 b 476 24 455 -1 469 15 b 547 226 522 87 547 159 b 534 302 547 252 543 278 b 532 317 533 308 532 313 b 544 335 532 326 536 333 " },
		    "v6f": { "x_min": -80.3125, "x_max": 78.9375, "ha": 81, "o": "m 63 191 b 69 192 65 192 66 192 b 77 188 72 192 76 191 b 78 183 78 187 78 186 b 74 158 78 179 77 172 l 66 115 b 9 -161 49 30 10 -158 b -10 -187 6 -172 -1 -181 b -34 -194 -17 -191 -25 -194 b -80 -147 -58 -194 -80 -174 b -80 -141 -80 -144 -80 -142 b 9 70 -80 -134 -73 -117 l 49 163 b 63 191 59 188 61 190 " },
		    "v70": { "x_min": 0, "x_max": 436.921875, "ha": 446, "o": "m 213 190 b 217 191 215 191 216 191 b 231 184 223 191 228 188 b 249 154 240 167 246 159 b 419 18 292 91 348 45 b 436 -1 435 11 436 8 b 424 -16 436 -9 434 -13 b 308 -87 394 -26 340 -59 b 231 -186 276 -117 257 -142 b 219 -192 228 -191 225 -192 b 198 -174 209 -192 208 -191 b 47 -33 161 -113 110 -63 b 10 -16 34 -26 17 -19 b 0 -1 2 -13 0 -9 b 17 18 0 8 1 11 b 198 173 95 48 156 101 b 213 190 206 187 208 188 " },
		    "v72": { "x_min": -423.3125, "x_max": 421.9375, "ha": 431, "o": "m -262 197 b -247 197 -257 197 -253 197 b -118 162 -210 197 -163 184 b 40 45 -61 134 -13 98 b 277 -95 119 -33 200 -81 b 289 -97 281 -97 285 -97 b 378 0 332 -97 371 -55 b 378 11 378 4 378 6 b 302 83 378 55 345 83 b 242 66 283 83 262 77 b 208 56 231 59 219 56 b 148 120 175 56 148 81 b 201 186 148 151 164 172 b 261 198 220 194 240 198 b 420 45 341 198 411 136 b 421 22 421 37 421 29 b 245 -199 421 -93 338 -199 b 238 -198 243 -199 240 -199 b -44 -47 148 -194 50 -141 b -250 86 -114 22 -183 66 b -295 94 -270 91 -283 94 b -315 91 -302 94 -307 94 b -381 4 -356 81 -381 43 b -355 -56 -381 -18 -372 -40 b -298 -81 -338 -73 -319 -81 b -246 -68 -283 -81 -265 -77 b -212 -58 -234 -61 -223 -58 b -178 -69 -200 -58 -189 -62 b -151 -122 -160 -81 -151 -101 b -171 -167 -151 -138 -157 -155 b -239 -195 -185 -181 -213 -192 b -257 -197 -245 -197 -250 -197 b -423 -5 -352 -197 -423 -109 b -412 65 -423 16 -419 40 b -262 197 -389 137 -329 188 " },
		    "v74": { "x_min": -206.890625, "x_max": 428.75, "ha": 438, "o": "m 389 -351 b 394 -351 390 -351 393 -351 b 428 -385 413 -351 428 -367 b 428 -394 428 -388 428 -391 b 394 -428 426 -406 421 -410 l 332 -473 l 269 -516 l 205 -560 l 141 -603 l 77 -648 l 13 -692 l -50 -737 l -114 -780 l -145 -802 b -171 -813 -157 -810 -163 -813 b -175 -813 -172 -813 -174 -813 b -206 -777 -194 -811 -206 -795 b -202 -760 -206 -771 -205 -766 b -87 -675 -197 -752 -206 -757 l -34 -639 l 83 -557 l 145 -514 l 209 -470 l 272 -427 b 389 -351 375 -356 381 -352 " },
		    "v75": { "x_min": -149.71875, "x_max": 148.359375, "ha": 151, "o": "m -137 381 b -130 383 -134 383 -133 383 b -111 371 -122 383 -114 378 b -55 224 -110 370 -85 305 b 0 80 -25 145 -1 80 b 54 224 0 80 24 145 b 112 377 114 384 110 373 b 127 384 118 381 122 384 b 148 362 138 384 148 374 l 148 356 l 83 183 b 16 9 47 88 17 11 b -1 0 12 2 5 0 b -14 5 -5 0 -10 1 b -84 183 -19 9 -13 -6 l -149 356 l -149 362 b -137 381 -149 371 -145 378 " },
		    "v78": { "x_min": 0, "x_max": 193.28125, "ha": 197, "o": "m 85 514 b 95 517 88 517 89 517 b 114 505 103 517 110 513 l 115 502 l 115 376 b 115 249 115 306 115 249 b 141 258 117 249 127 252 l 167 266 l 172 266 b 190 254 181 265 187 262 l 193 251 l 193 202 l 193 188 b 187 147 193 149 191 152 b 147 130 183 142 182 141 l 115 119 l 115 9 b 115 -99 115 -51 115 -99 b 141 -91 115 -99 127 -95 b 171 -81 166 -81 167 -81 l 171 -81 b 191 -94 181 -81 189 -87 b 193 -142 191 -97 193 -120 b 191 -195 193 -167 191 -194 b 125 -227 187 -205 187 -204 l 115 -230 l 115 -366 l 115 -503 l 114 -506 b 95 -519 110 -514 102 -519 b 74 -506 87 -519 78 -514 l 73 -503 l 73 -374 b 73 -245 73 -260 73 -245 b 73 -245 73 -245 73 -245 b 55 -252 72 -245 63 -249 l 32 -260 b 19 -263 27 -262 23 -263 b 4 -256 13 -263 8 -260 b 0 -215 0 -251 0 -254 b 0 -199 0 -210 0 -206 l 0 -152 l 1 -149 b 8 -140 2 -145 5 -141 b 42 -127 9 -140 24 -133 l 73 -116 l 73 -5 b 73 23 73 4 73 15 b 73 105 73 70 73 105 b 49 97 73 105 61 101 b 17 88 32 91 23 88 b 4 95 10 88 8 91 b 0 137 0 101 0 98 b 0 151 0 141 0 145 l 0 199 l 1 202 b 43 224 5 212 5 212 l 73 234 l 73 367 l 73 502 l 74 505 b 85 514 77 509 81 513 " },
		    "v79": { "x_min": -1.359375, "x_max": 899.703125, "ha": 918, "o": "m 307 349 b 332 351 315 351 323 351 b 443 340 367 351 408 347 b 741 47 607 306 720 195 b 744 0 743 31 744 16 b 660 -303 744 -90 713 -206 b 28 -755 534 -531 304 -695 b 14 -756 23 -755 19 -756 b -1 -741 4 -756 -1 -750 b 21 -720 -1 -731 1 -728 b 567 -56 337 -601 548 -344 b 568 -11 568 -41 568 -24 b 442 285 568 129 525 233 b 325 319 406 308 367 319 b 93 177 232 319 137 266 b 84 154 91 170 84 155 b 84 154 84 154 84 154 b 88 156 84 154 85 155 b 159 177 110 170 134 177 b 257 134 194 177 231 162 b 294 41 281 108 294 73 b 171 -97 294 -24 246 -90 b 156 -98 166 -97 161 -98 b 6 74 73 -98 6 -22 b 6 80 6 76 6 79 b 307 349 10 223 141 340 m 839 215 b 845 216 841 216 842 216 b 862 213 852 216 860 215 b 899 163 887 206 899 184 b 872 117 899 145 890 127 b 847 111 865 112 856 111 b 808 130 833 111 818 117 b 796 162 800 140 796 151 b 839 215 796 187 812 212 m 839 -112 b 845 -112 841 -112 842 -112 b 862 -115 852 -112 860 -113 b 899 -165 887 -122 899 -144 b 872 -210 899 -183 890 -201 b 847 -217 865 -215 856 -217 b 808 -198 833 -217 818 -210 b 796 -165 800 -188 796 -177 b 839 -112 796 -140 812 -116 " },
		    "v7a": { "x_min": -1.359375, "x_max": 386.5625, "ha": 394, "o": "m 249 535 b 257 537 251 537 253 537 b 276 524 266 537 273 533 l 277 521 l 279 419 l 279 316 l 304 323 b 337 328 319 326 330 328 b 353 316 347 328 349 324 b 355 266 355 315 355 290 b 353 215 355 241 355 217 b 319 198 349 206 347 205 b 279 187 284 190 279 188 b 279 156 279 187 279 174 b 279 136 279 151 279 144 l 279 84 l 289 87 l 330 98 b 367 105 352 102 362 105 b 378 101 372 105 375 104 b 386 61 385 95 386 94 b 386 40 386 55 386 48 l 386 -5 l 385 -8 b 374 -19 383 -12 378 -18 b 291 -40 372 -19 347 -26 b 279 -43 284 -41 279 -43 b 279 -83 279 -43 279 -59 b 279 -95 279 -87 279 -91 l 279 -145 l 304 -140 b 337 -133 321 -136 330 -133 b 349 -140 343 -133 347 -136 b 355 -181 355 -145 355 -142 l 355 -197 l 355 -210 b 349 -252 355 -249 355 -247 b 300 -269 345 -258 347 -258 b 280 -274 291 -272 281 -273 l 279 -274 l 277 -378 l 277 -483 l 276 -487 b 257 -499 273 -495 265 -499 b 238 -487 249 -499 242 -495 l 236 -483 l 236 -384 l 236 -285 l 235 -285 l 212 -291 l 170 -301 b 148 -308 159 -305 148 -306 b 147 -415 147 -308 147 -313 l 147 -523 l 145 -526 b 126 -538 141 -534 133 -538 b 106 -526 118 -538 110 -534 l 104 -523 l 104 -420 b 103 -317 104 -326 104 -317 b 103 -317 103 -317 103 -317 b 50 -330 92 -322 54 -330 b 31 -317 42 -330 35 -326 b 29 -267 29 -315 29 -315 l 29 -219 l 32 -216 b 92 -192 36 -206 36 -206 l 104 -190 l 104 -138 b 103 -87 104 -91 104 -87 b 103 -87 103 -87 103 -87 b 88 -91 103 -87 96 -88 l 49 -101 b 17 -106 32 -105 23 -106 b 6 -102 13 -106 10 -105 b -1 -62 0 -97 -1 -95 b 0 -41 -1 -56 0 -49 l 0 4 l 1 6 b 10 16 2 11 6 15 b 91 37 12 18 38 24 l 104 41 l 104 93 b 103 144 104 140 104 144 b 103 144 103 144 103 144 b 50 131 92 141 54 131 b 31 144 42 131 35 137 b 29 195 29 147 29 148 l 29 242 l 32 245 b 92 269 36 255 36 255 l 104 273 l 104 377 l 104 481 l 106 485 b 126 498 110 492 118 498 b 134 495 129 498 132 496 b 145 485 138 494 142 489 l 147 481 l 147 383 l 147 283 l 152 284 b 190 294 155 285 171 290 l 230 303 l 236 305 l 236 413 l 236 521 l 238 524 b 249 535 240 528 243 533 m 236 126 b 235 177 236 154 236 177 l 235 177 b 213 172 235 177 225 174 l 170 161 b 147 155 157 158 147 155 b 147 124 147 155 147 142 b 147 102 147 117 147 111 l 147 52 l 153 54 l 228 72 l 236 74 l 236 126 m 236 -105 b 235 -54 236 -65 236 -54 l 235 -54 b 231 -55 235 -54 234 -54 b 172 -69 227 -55 204 -62 l 149 -76 l 147 -76 l 147 -127 l 147 -179 l 152 -177 b 190 -167 155 -177 171 -173 l 230 -158 l 236 -156 l 236 -105 " },
		    "v7c": { "x_min": 0, "x_max": 300.8125, "ha": 307, "o": "m 49 505 b 53 506 50 505 51 506 b 70 496 58 506 62 503 b 81 485 73 492 78 488 l 96 473 l 111 459 l 122 449 l 134 438 l 182 396 l 255 330 b 292 291 292 298 292 298 l 292 290 l 292 284 l 283 270 b 209 36 234 197 209 113 b 288 -170 209 -44 235 -119 b 299 -184 295 -179 299 -181 b 300 -191 300 -187 300 -188 b 285 -206 300 -199 294 -206 b 280 -206 283 -206 281 -206 b 247 -201 270 -202 259 -201 b 176 -222 223 -201 197 -208 b 114 -340 136 -249 114 -292 b 172 -471 114 -384 134 -433 b 185 -492 182 -481 185 -487 b 181 -502 185 -496 183 -499 b 171 -508 176 -505 174 -508 b 152 -498 166 -508 160 -503 b 0 -284 65 -428 12 -352 b 0 -260 0 -278 0 -270 b 1 -238 0 -252 0 -242 b 148 -140 16 -177 73 -140 b 209 -148 167 -140 189 -142 b 215 -149 212 -148 215 -149 b 215 -149 215 -149 215 -149 l 215 -149 b 201 -136 215 -148 209 -142 l 157 -97 l 96 -41 b 17 34 21 24 17 29 b 17 37 17 36 17 36 b 17 38 17 37 17 38 b 25 56 17 44 17 44 b 110 298 81 131 110 219 b 46 474 110 367 88 431 b 38 491 40 480 38 487 b 49 505 38 498 42 502 " },
		    "v7d": { "x_min": -1.359375, "x_max": 436.921875, "ha": 446, "o": "m 213 205 b 217 205 215 205 216 205 b 234 194 224 205 234 199 b 236 187 234 194 235 190 l 245 167 l 261 129 l 270 106 b 355 -61 294 54 329 -13 b 420 -163 381 -105 402 -138 b 436 -188 435 -184 436 -184 b 436 -191 436 -190 436 -190 b 421 -206 436 -201 431 -206 l 421 -206 l 416 -206 l 405 -201 b 217 -158 347 -172 283 -158 b 31 -201 153 -158 88 -172 l 20 -206 l 14 -206 l 14 -206 b 0 -191 5 -206 0 -201 b -1 -188 0 -190 -1 -190 b 14 -163 -1 -186 0 -184 b 95 -34 36 -136 72 -77 b 166 106 119 8 148 68 l 175 129 l 183 148 l 200 188 b 213 205 205 199 208 202 " },
		    "v7f": { "x_min": 0, "x_max": 367.5, "ha": 375, "o": "m 0 124 l 0 187 l 61 187 l 122 187 l 122 138 l 122 91 l 153 61 l 183 30 l 213 61 l 243 91 l 243 138 l 243 187 l 306 187 l 367 187 l 367 124 l 367 61 l 321 61 l 274 61 l 243 30 l 213 0 l 243 -31 l 274 -62 l 321 -62 l 367 -62 l 367 -124 l 367 -188 l 306 -188 l 243 -188 l 243 -140 l 243 -93 l 213 -62 l 183 -31 l 153 -62 l 122 -93 l 122 -140 l 122 -188 l 61 -188 l 0 -188 l 0 -124 l 0 -62 l 46 -62 l 92 -62 l 123 -31 l 153 0 l 123 30 l 92 61 l 46 61 l 0 61 l 0 124 " },
		    "v80": { "x_min": 29.9375, "x_max": 420.578125, "ha": 371, "o": "m 115 345 b 221 347 117 345 166 347 b 411 345 306 347 409 345 b 420 330 416 342 420 335 b 415 319 420 326 419 321 b 178 118 397 303 179 118 b 178 117 178 118 178 117 b 181 117 178 117 178 117 b 189 117 182 117 185 117 b 193 117 190 117 191 117 b 247 98 215 117 232 111 b 296 75 266 83 280 76 b 302 75 299 75 300 75 b 322 91 311 75 315 79 b 322 91 322 91 322 91 b 322 91 322 91 322 91 b 319 91 322 91 321 91 b 313 90 318 90 315 90 b 283 107 300 90 288 97 b 277 126 279 114 277 121 b 319 167 277 149 295 167 b 319 167 319 167 319 167 b 362 118 347 167 362 147 b 355 82 362 108 359 96 b 311 33 349 65 340 55 b 224 1 284 12 253 1 b 194 5 213 1 204 2 b 168 18 183 8 178 11 b 110 36 151 30 130 36 b 57 15 88 36 68 29 b 47 11 54 12 51 11 b 31 20 40 11 34 13 b 29 26 31 22 29 25 b 68 66 29 36 39 45 b 285 250 73 71 281 248 b 285 250 285 250 285 250 b 231 252 285 252 261 252 b 137 250 190 252 141 250 b 93 227 122 248 110 241 b 78 220 88 222 83 220 b 66 227 74 220 70 222 b 63 234 65 229 63 231 b 85 291 63 241 69 252 b 115 345 108 342 108 344 " },
		    "v81": { "x_min": 0, "x_max": 428.75, "ha": 438, "o": "m 262 186 b 273 186 266 186 272 186 b 274 186 273 186 274 186 b 285 186 274 186 280 186 b 428 48 375 181 428 122 b 386 -68 428 12 416 -29 b 155 -187 329 -145 236 -187 b 12 -111 92 -187 38 -162 b 0 -51 4 -91 0 -72 b 262 186 0 58 122 179 m 366 131 b 352 134 362 133 357 134 b 219 81 321 134 269 115 b 47 -111 126 23 50 -62 b 47 -112 47 -111 47 -112 b 77 -136 47 -129 58 -136 b 264 -45 118 -136 194 -101 b 382 109 336 12 382 76 b 366 131 382 120 377 129 " },
		    "v83": { "x_min": -1.359375, "x_max": 847.96875, "ha": 865, "o": "m 488 1499 b 495 1500 490 1500 492 1500 b 541 1465 507 1500 521 1490 b 679 1078 622 1372 679 1210 b 677 1050 679 1068 677 1060 b 477 642 668 893 604 764 l 443 609 l 431 596 l 431 592 l 438 562 l 449 508 l 460 458 b 481 355 475 390 481 355 b 481 355 481 355 481 355 b 490 356 481 355 485 355 b 528 358 495 356 511 358 b 558 356 540 358 552 356 b 839 95 699 338 808 237 b 847 22 845 72 847 47 b 631 -303 847 -113 766 -242 b 620 -309 623 -308 620 -309 l 620 -310 b 631 -359 620 -310 626 -333 l 646 -435 l 660 -496 b 672 -588 668 -535 672 -563 b 664 -653 672 -610 669 -630 b 383 -875 630 -792 509 -875 b 201 -810 321 -875 257 -855 b 129 -680 151 -768 129 -730 b 274 -530 129 -592 200 -530 b 351 -553 300 -530 326 -538 b 412 -669 393 -582 412 -626 b 287 -805 412 -735 366 -800 l 279 -805 l 285 -809 b 383 -830 318 -823 351 -830 b 586 -718 464 -830 540 -789 b 626 -584 612 -678 626 -631 b 619 -528 626 -566 623 -548 b 612 -495 619 -526 616 -510 b 577 -324 590 -387 577 -324 b 577 -324 577 -324 577 -324 b 568 -326 575 -324 571 -324 b 528 -334 558 -328 537 -333 b 465 -338 506 -337 485 -338 b 24 -11 269 -338 87 -206 b -1 145 8 41 -1 93 b 96 442 -1 249 32 351 b 322 714 166 541 236 626 l 352 745 l 345 782 l 332 843 l 315 921 b 303 984 310 950 304 978 b 295 1082 298 1017 295 1049 b 413 1426 295 1208 336 1329 b 488 1499 436 1456 477 1496 m 549 1301 b 541 1301 547 1301 544 1301 b 411 1207 500 1301 447 1263 b 355 1004 374 1152 355 1079 b 359 942 355 984 356 963 b 371 881 362 927 363 917 l 385 818 b 392 782 389 799 392 784 l 392 782 b 434 828 393 782 424 816 b 607 1165 534 941 594 1060 b 608 1193 608 1175 608 1183 b 597 1270 608 1224 604 1254 b 549 1301 589 1286 571 1299 m 398 528 b 393 555 396 542 393 553 b 392 555 393 555 393 555 b 317 470 390 555 347 505 b 190 298 266 408 212 334 b 127 70 148 227 127 148 b 155 -77 127 19 137 -30 b 468 -303 209 -216 333 -303 b 519 -299 484 -303 502 -302 b 568 -284 541 -295 568 -287 l 568 -284 b 563 -263 568 -284 566 -274 l 534 -120 l 511 -13 l 496 61 l 480 133 b 469 187 472 176 469 187 b 468 188 469 187 469 188 b 416 162 462 188 430 172 b 337 13 364 126 337 69 b 413 -124 337 -40 363 -93 b 428 -144 424 -131 428 -137 b 428 -149 428 -145 428 -148 b 409 -166 426 -161 419 -166 b 394 -162 405 -166 400 -165 b 240 77 302 -122 240 -27 l 240 77 b 430 342 240 197 315 301 l 436 344 l 426 394 l 398 528 m 548 194 b 526 195 540 195 532 195 b 519 195 524 195 521 195 l 514 195 l 518 177 l 539 79 l 552 15 l 566 -48 l 594 -187 l 605 -240 b 612 -266 609 -254 611 -266 b 612 -266 612 -266 612 -266 b 641 -248 613 -266 630 -256 b 744 -98 692 -212 730 -156 b 751 -40 749 -79 751 -59 b 548 194 751 76 665 181 " },
		    "v84": { "x_min": 25.859375, "x_max": 164.6875, "ha": 168, "o": "m 34 369 b 40 370 35 370 38 370 b 59 353 49 370 50 367 b 164 40 122 254 155 158 b 164 0 164 33 164 16 b 164 -40 164 -16 164 -34 b 59 -353 155 -158 122 -254 b 40 -371 53 -366 47 -371 b 34 -370 38 -371 36 -370 b 25 -358 28 -367 25 -363 b 31 -337 25 -352 27 -347 b 92 0 72 -234 92 -117 b 31 335 92 116 72 233 b 25 356 27 345 25 352 b 34 369 25 363 28 366 " },
		    "v86": { "x_min": -571.671875, "x_max": 570.3125, "ha": 582, "o": "m -386 173 b -381 174 -385 174 -383 174 b -370 173 -377 174 -372 173 b -281 86 -367 172 -347 151 b -196 0 -235 37 -196 0 b -126 84 -196 0 -164 37 b -50 174 -55 173 -57 172 b -44 174 -49 174 -47 174 b -35 173 -42 174 -38 173 b 53 86 -32 172 -12 151 b 138 0 100 37 138 0 b 208 84 140 0 170 37 b 284 174 279 173 277 172 b 289 174 285 174 288 174 b 299 173 294 174 298 173 b 462 11 303 172 338 134 l 475 -1 l 503 34 b 541 76 534 72 536 74 b 548 77 544 77 545 77 b 570 56 560 77 570 68 b 567 48 570 54 568 51 b 392 -172 564 41 397 -166 b 378 -176 387 -174 382 -176 b 368 -174 374 -176 371 -176 b 280 -87 367 -173 345 -152 b 194 0 234 -38 194 0 b 125 -86 194 0 163 -38 b 49 -174 54 -174 55 -173 b 43 -176 47 -176 46 -176 b 34 -174 40 -176 36 -174 b -54 -87 31 -173 10 -152 b -140 0 -102 -38 -140 0 b -209 -86 -141 0 -171 -38 b -285 -174 -280 -174 -279 -173 b -291 -176 -287 -176 -289 -176 b -300 -174 -295 -176 -299 -174 b -464 -12 -304 -173 -340 -137 l -476 0 l -504 -34 b -543 -77 -534 -73 -537 -76 b -549 -79 -545 -79 -547 -79 b -571 -58 -562 -79 -571 -69 b -568 -49 -571 -55 -570 -52 b -392 172 -566 -43 -396 167 b -386 173 -390 172 -387 173 " },
		    "v8a": { "x_min": -170.140625, "x_max": 168.78125, "ha": 172, "o": "m -160 567 b -122 567 -159 567 -149 567 l -87 567 l -84 566 b -74 553 -78 563 -77 560 b -20 366 -73 551 -49 466 b 31 186 8 267 31 186 b 85 371 31 186 55 269 b 140 559 114 473 138 557 b 153 567 141 564 148 567 b 168 559 159 567 166 564 b 168 555 168 557 168 557 b 92 281 168 548 159 513 b 14 13 50 134 14 13 b 0 0 14 6 6 0 b -17 15 -8 0 -17 8 b -93 283 -17 15 -51 136 b -170 552 -166 533 -170 548 b -170 553 -170 552 -170 552 b -160 567 -170 560 -167 564 " },
		    "v8b": { "x_min": 0, "x_max": 319.859375, "ha": 326, "o": "m 149 508 b 159 509 152 509 155 509 b 186 494 170 509 181 503 b 190 440 190 487 190 488 l 190 430 l 190 377 l 242 377 l 251 377 b 303 373 298 377 296 377 b 319 345 314 367 319 356 b 304 319 319 335 314 324 b 250 315 296 315 299 315 l 242 315 l 190 315 l 190 262 l 190 252 b 186 198 190 204 190 205 b 159 183 179 188 170 183 b 132 198 148 183 138 188 b 127 252 127 205 127 204 l 127 262 l 127 315 l 76 315 l 68 315 b 14 319 20 315 21 315 b 0 347 4 324 0 335 b 14 373 0 356 4 367 b 68 377 21 377 20 377 l 76 377 l 127 377 l 127 430 l 127 440 b 132 494 127 488 127 487 b 149 508 136 501 142 505 " },
		    "v8c": { "x_min": -330.75, "x_max": 329.390625, "ha": 336, "o": "m -133 483 b -117 484 -127 484 -122 484 b 31 373 -51 484 9 440 b 35 348 34 365 35 356 b -25 285 35 313 10 285 b -87 331 -55 285 -76 302 b -167 402 -100 376 -133 402 b -191 398 -175 402 -183 401 b -227 341 -215 388 -227 369 b -225 320 -227 334 -227 327 b -13 74 -209 230 -125 133 b 6 65 -4 70 5 66 l 9 63 l 10 65 b 117 231 12 68 40 112 l 189 341 l 242 424 b 268 460 262 456 264 458 b 283 464 273 463 277 464 b 308 438 296 464 308 453 l 308 437 b 287 396 308 430 308 428 l 95 98 l 59 43 l 58 41 l 65 37 b 253 -156 151 -8 217 -77 b 281 -285 272 -199 281 -244 b 148 -481 281 -381 231 -463 b 115 -485 137 -484 126 -485 b -32 -376 51 -485 -9 -442 b -36 -349 -35 -366 -36 -358 b 25 -287 -36 -315 -12 -287 b 85 -333 54 -287 74 -302 b 166 -403 99 -377 133 -403 b 190 -399 174 -403 182 -402 b 225 -342 215 -390 225 -370 b 224 -322 225 -335 225 -328 b 12 -76 208 -231 125 -134 b -8 -66 2 -72 -6 -68 l -10 -65 l -12 -66 b -118 -231 -13 -68 -42 -113 l -190 -342 l -243 -426 b -269 -462 -264 -458 -265 -458 b -284 -466 -274 -464 -279 -466 b -310 -440 -298 -466 -310 -455 l -310 -438 b -288 -398 -310 -430 -308 -430 l -96 -99 l -59 -44 l -59 -43 l -66 -38 b -281 284 -198 33 -281 158 l -281 284 b -133 483 -281 392 -220 474 m 254 177 b 266 179 258 177 262 179 b 319 149 287 179 307 167 b 329 115 326 140 329 127 b 319 79 329 102 326 90 b 268 51 307 61 287 51 b 221 72 250 51 234 58 b 205 115 210 84 205 99 b 254 177 205 142 223 170 m -281 -54 b -269 -52 -277 -52 -273 -52 b -223 -73 -253 -52 -235 -59 b -206 -116 -212 -84 -206 -101 b -216 -151 -206 -129 -209 -141 b -269 -179 -228 -170 -249 -179 b -314 -159 -285 -179 -302 -173 b -330 -116 -325 -147 -330 -131 b -281 -54 -330 -88 -313 -61 " },
		    "v8d": { "x_min": -1.359375, "x_max": 255.890625, "ha": 261, "o": "m 118 514 b 127 517 121 517 122 517 b 147 505 136 517 142 513 l 148 502 l 148 403 b 148 306 148 351 148 306 b 174 315 149 306 160 310 l 200 324 l 205 323 b 223 312 213 323 220 319 l 225 308 l 225 260 b 225 245 225 255 225 249 b 220 204 225 208 224 209 b 179 188 216 199 215 199 l 148 177 l 148 124 l 148 70 l 189 84 b 236 98 219 94 230 98 b 247 94 240 98 243 97 b 255 52 254 88 255 87 b 255 33 255 47 255 40 l 254 -12 l 253 -15 b 249 -22 253 -18 250 -20 l 245 -24 l 196 -41 l 148 -58 l 148 -108 b 148 -158 148 -136 148 -158 b 174 -148 148 -158 160 -154 b 204 -140 198 -140 200 -140 l 204 -140 b 224 -152 213 -140 221 -145 b 225 -201 224 -155 225 -177 b 224 -254 225 -226 224 -251 b 157 -284 220 -262 220 -262 l 148 -288 l 148 -395 l 148 -503 l 147 -506 b 127 -519 142 -514 134 -519 b 107 -506 119 -519 111 -514 l 106 -503 l 106 -403 b 106 -303 106 -316 106 -303 b 104 -303 104 -303 104 -303 b 88 -310 104 -303 96 -306 l 63 -319 b 51 -322 59 -320 55 -322 b 36 -315 46 -322 40 -319 b 31 -273 32 -309 31 -312 b 31 -258 31 -269 31 -263 l 31 -210 l 34 -206 b 40 -198 35 -204 38 -199 b 74 -186 42 -197 57 -191 l 106 -173 l 106 -123 b 106 -97 106 -112 106 -104 b 106 -72 106 -76 106 -72 b 104 -72 106 -72 106 -72 b 20 -99 89 -79 23 -99 b 0 -84 10 -99 2 -93 b -1 -37 0 -81 -1 -59 b 0 11 -1 -15 0 9 b 58 40 4 22 2 22 l 106 56 l 106 109 b 106 123 106 115 106 119 b 106 162 106 147 106 162 b 81 155 106 162 93 159 b 50 147 65 149 55 147 b 36 152 43 147 40 148 b 31 194 32 158 31 156 b 31 209 31 198 31 204 l 31 256 l 34 260 b 76 281 38 269 38 269 l 106 292 l 106 396 l 106 502 l 107 505 b 118 514 110 509 114 513 " },
		    "v8f": { "x_min": -21.78125, "x_max": 362.0625, "ha": 369, "o": "m 302 1031 b 308 1032 304 1032 307 1032 b 330 1016 318 1032 325 1027 b 362 867 351 970 362 920 b 340 738 362 824 353 780 l 336 727 l 340 717 b 362 591 355 677 362 634 b 257 323 362 496 325 401 b 204 272 243 306 227 290 b 20 56 129 206 66 133 b -1 18 12 44 0 22 b -19 4 -4 9 -12 4 l -21 4 l -21 140 l -21 276 l -12 277 b 167 333 61 288 127 309 b 319 598 262 388 319 491 b 311 664 319 620 317 642 l 310 673 l 304 664 b 204 548 279 620 250 587 b 20 333 129 483 66 409 b -1 292 12 320 0 298 b -19 280 -4 285 -12 280 l -21 280 l -21 416 l -21 552 l -12 553 b 167 609 61 564 127 585 b 319 874 264 666 319 770 b 294 992 319 914 311 954 b 288 1011 288 1004 288 1007 b 302 1031 288 1021 294 1028 " },
		    "v90": { "x_min": -171.5, "x_max": 483.1875, "ha": 493, "o": "m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 495 20 616 20 616 b 20 373 20 427 20 373 b 115 410 20 373 63 390 l 210 448 l 210 531 b 212 620 210 614 210 616 b 231 632 215 628 223 632 b 246 627 236 632 242 631 b 251 541 251 620 251 628 l 251 463 l 315 489 b 387 514 368 509 381 514 b 393 513 390 514 392 514 b 406 494 402 510 406 502 b 397 476 406 487 404 480 b 323 446 396 474 363 462 l 251 417 l 251 283 l 251 148 l 254 151 b 370 199 291 183 332 199 b 415 191 385 199 400 197 b 483 84 458 176 483 134 b 461 0 483 58 476 29 b 332 -142 439 -40 411 -72 l 255 -215 b 231 -229 240 -229 239 -229 b 216 -223 224 -229 220 -227 b 210 -158 210 -217 210 -223 b 210 -120 210 -148 210 -136 l 210 -29 l 205 -34 b 100 -142 182 -65 159 -88 l 23 -215 b -1 -229 9 -229 6 -229 b -19 -217 -9 -229 -16 -224 l -20 -215 l -21 48 l -21 310 l -83 287 b -152 262 -133 266 -145 262 b -157 263 -153 262 -155 262 b -171 283 -166 266 -171 274 b -161 301 -171 290 -167 297 b -91 328 -160 302 -129 315 l -21 356 l -21 487 l -20 617 l -19 621 b -8 631 -17 626 -12 630 m 210 288 b 210 401 210 351 210 401 b 114 365 209 401 167 384 l 20 327 l 20 238 l 20 148 l 21 151 b 140 199 59 183 102 199 b 206 180 164 199 187 192 l 209 177 b 209 177 209 177 209 177 b 210 288 210 177 210 199 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 m 341 131 b 328 133 337 133 332 133 b 322 133 326 133 323 133 b 257 87 296 129 273 113 l 251 80 l 251 -37 l 251 -156 l 255 -152 b 375 81 328 -72 375 20 l 375 83 b 341 131 375 113 367 126 " },
		    "v92": { "x_min": 0, "x_max": 598.890625, "ha": 611, "o": "m 62 181 b 77 183 66 183 72 183 b 91 181 83 183 88 183 b 202 131 100 180 106 177 l 299 87 l 394 131 b 517 183 499 181 502 183 b 519 183 517 183 518 183 b 598 104 567 183 598 144 b 577 49 598 84 592 65 b 518 15 567 38 563 37 b 484 0 499 6 484 0 b 518 -16 484 -1 499 -8 b 577 -51 563 -38 567 -40 b 598 -105 592 -66 598 -86 b 519 -184 598 -145 567 -184 b 517 -184 518 -184 517 -184 b 394 -133 502 -184 499 -183 l 299 -88 l 202 -133 b 81 -184 99 -183 95 -184 b 77 -184 80 -184 78 -184 b 0 -105 29 -184 0 -145 b 20 -51 0 -86 5 -66 b 80 -16 29 -40 34 -38 b 114 -1 98 -8 114 -1 b 80 15 114 0 98 6 b 20 49 34 37 29 38 b 0 104 6 65 0 84 b 62 181 0 140 23 174 m 88 134 b 74 136 85 134 80 136 b 68 134 72 136 69 136 b 46 104 54 130 46 117 b 55 81 46 95 49 88 b 149 34 59 76 53 80 b 224 -1 190 15 224 0 b 144 -38 224 -1 187 -18 b 54 -84 59 -79 58 -79 b 46 -105 49 -90 46 -98 b 76 -137 46 -122 58 -137 b 78 -137 77 -137 77 -137 b 194 -86 87 -137 76 -141 b 298 -36 250 -58 298 -36 b 298 -36 298 -36 298 -36 b 402 -84 299 -36 345 -58 b 518 -137 522 -141 510 -137 b 521 -137 519 -137 519 -137 b 551 -105 539 -137 551 -122 b 541 -83 551 -98 548 -90 b 447 -36 537 -77 544 -81 b 374 -1 406 -16 374 -1 b 447 34 374 0 406 15 b 541 81 544 80 537 76 b 551 104 548 88 551 97 b 521 136 551 120 539 136 b 518 136 519 136 519 136 b 517 136 518 136 517 136 l 517 136 b 402 83 511 136 511 136 b 298 34 345 56 299 34 b 298 34 298 34 298 34 b 194 84 298 34 250 56 b 88 134 137 111 89 133 " },
		    "v93": { "x_min": 0, "x_max": 438.28125, "ha": 447, "o": "m 212 205 b 219 205 213 205 216 205 b 239 183 228 205 231 204 b 421 -163 298 40 363 -83 b 438 -191 434 -180 438 -186 b 436 -197 438 -192 438 -195 b 424 -206 434 -204 431 -206 b 406 -201 420 -206 415 -205 b 216 -156 347 -172 281 -156 b 23 -205 148 -156 80 -173 b 14 -206 20 -206 17 -206 b 0 -191 6 -206 0 -201 b 6 -176 0 -187 1 -183 b 202 192 63 -104 142 45 b 212 205 205 199 208 202 m 264 48 l 249 81 l 243 94 l 242 91 b 89 -126 208 36 137 -66 b 81 -138 85 -133 81 -138 b 81 -138 81 -138 81 -138 b 81 -138 81 -138 81 -138 b 95 -133 81 -138 87 -136 b 280 -94 156 -108 221 -94 b 334 -98 299 -94 317 -95 b 343 -99 338 -99 343 -99 b 343 -99 343 -99 343 -99 b 338 -94 343 -99 341 -97 b 264 48 318 -58 287 1 " },
		    "v94": { "x_min": -149.71875, "x_max": 148.359375, "ha": 151, "o": "m -9 215 b 0 217 -6 217 -4 217 b 19 205 8 217 14 213 b 20 142 20 202 20 201 l 20 84 l 23 84 b 144 -27 81 74 129 30 b 148 -66 147 -40 148 -54 b 36 -213 148 -134 103 -197 b 0 -219 24 -217 12 -219 b -145 -104 -68 -219 -129 -173 b -149 -68 -148 -91 -149 -79 b -24 84 -149 6 -98 74 l -21 84 l -21 142 b -19 205 -20 201 -20 202 b -9 215 -17 209 -13 213 m -21 -15 b -23 41 -21 37 -21 41 b -23 41 -23 41 -23 41 b -76 11 -35 40 -62 26 b -108 -65 -98 -11 -108 -38 b -1 -176 -108 -122 -65 -176 b 107 -65 63 -176 107 -122 b 74 11 107 -38 96 -11 b 20 41 61 26 32 41 b 20 -15 20 41 20 15 b 19 -74 20 -72 20 -72 b 0 -87 14 -83 6 -87 b -19 -74 -8 -87 -16 -83 b -21 -15 -20 -72 -20 -72 " },
		    "v95": { "x_min": 0, "x_max": 406.96875, "ha": 415, "o": "m 55 181 b 70 183 61 183 66 183 b 111 170 85 183 99 179 b 160 130 115 167 137 149 l 202 95 l 245 130 b 319 181 299 176 302 179 b 334 183 325 183 330 183 b 406 109 375 183 406 148 b 401 81 406 99 405 91 b 348 24 394 65 390 59 b 318 -1 332 11 318 0 b 348 -26 318 -1 332 -12 b 401 -83 390 -61 394 -66 b 406 -111 405 -93 406 -101 b 334 -184 406 -149 375 -184 b 319 -183 330 -184 325 -184 b 245 -131 302 -180 299 -177 l 202 -97 l 160 -131 b 85 -183 107 -177 103 -180 b 70 -184 80 -184 76 -184 b 0 -111 31 -184 0 -149 b 4 -83 0 -101 1 -93 b 58 -26 10 -66 16 -61 b 88 -1 74 -12 88 -1 b 58 24 88 0 74 11 b 10 69 23 54 17 59 b 0 109 2 81 0 95 b 55 181 0 142 21 173 m 83 133 b 72 136 78 136 76 136 b 57 131 66 136 61 134 b 46 109 49 126 46 117 b 50 93 46 104 47 98 b 107 45 51 91 77 70 b 160 0 137 20 160 0 b 107 -47 160 -1 137 -22 b 50 -94 77 -72 51 -93 b 46 -111 47 -99 46 -105 b 59 -134 46 -120 50 -130 b 72 -137 62 -136 68 -137 b 83 -136 76 -137 80 -136 b 144 -84 84 -134 107 -116 b 202 -36 176 -58 202 -36 b 261 -84 202 -36 230 -58 b 323 -136 299 -116 321 -134 b 334 -137 326 -136 330 -137 b 345 -134 338 -137 343 -136 b 360 -111 355 -130 360 -120 b 355 -94 360 -105 359 -99 b 299 -47 353 -93 329 -72 b 245 0 269 -22 245 -1 b 299 45 245 0 269 20 b 355 93 329 70 353 91 b 360 109 359 98 360 104 b 345 133 360 119 355 129 b 334 136 343 134 338 136 b 323 134 330 136 326 134 b 261 83 321 133 299 115 b 202 34 230 56 202 34 b 144 83 202 34 176 56 b 83 133 106 115 84 133 " },
		    "v97": { "x_min": -228.671875, "x_max": 227.3125, "ha": 232, "o": "m -217 487 l -213 488 l 0 488 l 212 488 l 216 487 b 225 476 220 484 224 480 l 227 473 l 227 244 l 227 15 l 225 12 b 206 0 223 4 215 0 b 197 1 204 0 200 0 b 187 12 193 4 189 6 l 186 15 l 186 138 l 186 262 l -1 262 l -187 262 l -187 138 l -187 15 l -189 12 b -208 0 -193 4 -200 0 b -227 12 -216 0 -223 4 l -228 15 l -228 244 l -228 473 l -227 476 b -217 487 -225 480 -221 484 " },
		    "v9a": { "x_min": -21.78125, "x_max": 367.5, "ha": 375, "o": "m 230 1031 b 238 1032 232 1032 235 1032 b 259 1014 245 1032 251 1027 b 367 662 330 906 367 782 b 364 602 367 641 367 621 b 232 317 352 488 304 384 b 57 120 155 245 103 187 b -1 18 31 84 6 40 b -19 4 -4 11 -12 4 l -21 4 l -21 159 l -21 315 l -16 315 b 96 335 10 315 62 324 b 315 695 227 380 315 527 b 313 738 315 709 314 724 b 224 991 304 825 273 916 b 216 1013 219 999 216 1007 b 230 1031 216 1021 220 1028 " },
		    "v9b": { "x_min": -24.5, "x_max": 313.0625, "ha": 319, "o": "m -24 -133 l -24 -5 l -20 -5 b -1 -19 -12 -5 -4 -11 b 142 -213 13 -61 74 -144 b 258 -376 196 -269 230 -315 b 313 -605 295 -449 313 -528 b 292 -742 313 -652 306 -699 b 288 -752 289 -748 288 -752 b 288 -752 288 -752 288 -752 b 292 -764 289 -753 291 -757 b 313 -907 306 -811 313 -860 b 292 -1045 313 -954 306 -1002 b 288 -1054 289 -1050 288 -1054 b 288 -1054 288 -1054 288 -1054 b 292 -1067 289 -1054 291 -1060 b 313 -1210 306 -1113 313 -1161 b 292 -1346 313 -1257 306 -1304 b 288 -1357 289 -1353 288 -1357 b 288 -1357 288 -1357 288 -1357 b 292 -1368 289 -1357 291 -1363 b 313 -1512 306 -1415 313 -1464 b 292 -1648 313 -1560 306 -1605 b 288 -1660 289 -1654 288 -1660 b 288 -1660 288 -1660 288 -1660 b 292 -1671 289 -1660 291 -1665 b 313 -1814 306 -1719 313 -1766 b 250 -2040 313 -1897 291 -1977 b 232 -2062 238 -2057 236 -2059 b 221 -2065 230 -2063 225 -2065 b 200 -2045 210 -2065 201 -2057 b 200 -2043 200 -2044 200 -2044 b 208 -2026 200 -2037 202 -2034 b 269 -1826 249 -1966 269 -1897 b 153 -1544 269 -1726 230 -1625 b -9 -1472 115 -1506 58 -1481 b -21 -1471 -14 -1471 -19 -1471 l -24 -1471 l -24 -1343 l -24 -1215 l -20 -1215 b -1 -1229 -12 -1215 -4 -1221 b 142 -1424 13 -1270 74 -1353 b 257 -1582 196 -1478 228 -1524 b 264 -1594 261 -1589 264 -1594 l 264 -1594 b 265 -1582 264 -1594 264 -1589 b 270 -1525 268 -1562 270 -1544 b 153 -1243 270 -1424 228 -1321 b -9 -1170 115 -1203 58 -1178 b -21 -1168 -14 -1170 -19 -1168 l -24 -1168 l -24 -1041 l -24 -913 l -20 -913 b -1 -927 -12 -913 -4 -918 b 142 -1121 13 -967 74 -1050 b 257 -1281 196 -1175 228 -1221 b 264 -1292 261 -1286 264 -1292 l 264 -1292 b 265 -1279 264 -1292 264 -1286 b 270 -1222 268 -1261 270 -1242 b 153 -941 270 -1121 228 -1018 b -9 -867 115 -900 58 -875 b -21 -866 -14 -867 -19 -866 l -24 -866 l -24 -738 l -24 -610 l -20 -610 b -1 -624 -12 -610 -4 -616 b 142 -818 13 -664 74 -749 b 257 -978 196 -873 228 -918 b 264 -989 261 -984 264 -989 l 264 -989 b 265 -977 264 -989 264 -984 b 270 -920 268 -959 270 -939 b 153 -638 270 -818 228 -716 b -9 -564 115 -598 58 -573 b -21 -563 -14 -564 -19 -563 l -24 -563 l -24 -435 l -24 -308 l -20 -308 b -1 -322 -12 -308 -4 -313 b 142 -516 13 -363 74 -446 b 257 -675 196 -571 228 -616 b 264 -687 261 -681 264 -687 l 264 -687 b 265 -674 264 -687 264 -681 b 270 -617 268 -656 270 -637 b 153 -335 270 -516 228 -413 b -9 -262 115 -295 58 -270 b -21 -260 -14 -262 -19 -260 l -24 -260 l -24 -133 " },
		    "v9c": { "x_min": -166.0625, "x_max": -25.859375, "ha": 0, "o": "m -49 369 b -42 370 -46 369 -44 370 b -27 360 -36 370 -29 366 b -25 355 -27 359 -25 358 b -32 335 -25 351 -28 347 b -92 52 -66 248 -87 159 b -93 -1 -93 43 -93 20 b -92 -54 -93 -23 -93 -45 b -32 -337 -85 -162 -66 -251 b -25 -355 -27 -349 -25 -352 b -42 -371 -25 -365 -32 -371 b -61 -353 -50 -371 -51 -369 b -163 -63 -119 -262 -153 -165 b -166 -1 -166 -37 -166 -31 b -163 62 -166 30 -166 36 b -61 352 -153 163 -119 260 b -49 369 -54 365 -51 366 " },
		    "v9e": { "x_min": 0, "x_max": 607.0625, "ha": 619, "o": "m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 m 347 631 b 353 632 348 632 351 632 b 374 620 363 632 371 628 b 375 383 375 616 375 616 l 375 148 l 377 151 b 492 199 415 183 454 199 b 537 191 507 199 522 197 b 607 84 582 176 607 134 b 583 0 607 58 598 29 b 455 -142 562 -40 533 -72 l 378 -215 b 355 -229 364 -229 362 -229 b 334 -216 345 -229 337 -224 l 333 -212 l 333 201 l 333 616 l 334 620 b 347 631 337 624 341 630 m 465 131 b 451 133 461 133 455 133 b 445 133 449 133 446 133 b 379 87 419 129 396 113 l 375 80 l 375 -37 l 375 -156 l 378 -152 b 499 81 451 -72 499 20 l 499 83 b 465 131 499 113 490 126 " },
		    "va3": { "x_min": 58.53125, "x_max": 228.671875, "ha": 294, "o": "m 138 371 b 142 373 140 371 141 373 b 178 342 149 373 156 366 b 228 251 217 297 228 278 b 228 244 228 248 228 247 b 176 147 227 212 212 184 b 123 73 152 122 132 93 b 121 62 122 70 121 66 b 145 13 121 48 129 31 b 153 -2 151 6 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 145 -11 b 129 -1 140 -11 136 -8 b 61 87 89 37 68 68 b 58 113 59 95 58 105 b 110 215 58 144 74 177 b 163 287 134 240 155 269 b 166 299 166 291 166 295 b 141 348 166 313 157 330 b 133 360 134 356 133 358 b 133 363 133 362 133 362 b 138 371 133 367 136 370 " },
		    "va5": { "x_min": 0, "x_max": 349.8125, "ha": 357, "o": "m 88 302 b 103 303 93 302 98 303 b 202 224 149 303 191 270 b 205 199 204 216 205 208 b 178 129 205 173 196 147 l 175 126 l 182 127 b 307 249 236 142 284 190 b 313 259 308 254 311 258 b 329 267 317 265 323 267 b 349 247 340 267 349 259 b 201 -263 349 242 204 -258 b 182 -273 197 -270 190 -273 b 163 -260 174 -273 166 -269 b 161 -256 161 -259 161 -258 b 217 -59 161 -248 170 -220 b 272 129 247 43 272 127 b 272 129 272 129 272 129 b 264 122 272 129 268 126 b 140 80 227 94 183 80 b 36 115 102 80 65 91 b 0 194 10 136 0 165 b 88 302 0 244 32 292 " },
		    "va9": { "x_min": -24.5, "x_max": 314.421875, "ha": 321, "o": "m -24 -145 l -24 -5 l -20 -5 b 0 -23 -9 -5 -2 -12 b 27 -87 4 -38 14 -66 b 138 -220 53 -136 88 -177 b 235 -328 179 -255 208 -288 b 314 -592 287 -409 314 -501 b 292 -732 314 -639 307 -687 l 289 -742 l 294 -756 b 314 -896 307 -802 314 -849 b 292 -1035 314 -943 307 -991 l 289 -1045 l 294 -1057 b 314 -1197 307 -1104 314 -1152 b 292 -1338 314 -1246 307 -1292 l 289 -1347 l 294 -1360 b 314 -1500 307 -1407 314 -1454 b 273 -1689 314 -1565 300 -1628 b 250 -1712 265 -1710 261 -1712 b 228 -1691 236 -1712 228 -1704 l 228 -1685 l 234 -1675 b 270 -1507 258 -1621 270 -1564 b 98 -1193 270 -1381 209 -1261 b 40 -1174 76 -1179 58 -1174 b -10 -1189 24 -1174 8 -1178 b -20 -1192 -14 -1192 -16 -1192 l -24 -1192 l -24 -1052 l -24 -913 l -20 -913 b 0 -931 -9 -913 -2 -920 b 27 -995 4 -946 14 -974 b 138 -1128 53 -1043 88 -1085 b 257 -1275 190 -1172 228 -1220 b 262 -1283 259 -1279 262 -1283 l 262 -1283 b 269 -1249 264 -1282 268 -1260 b 270 -1206 270 -1233 270 -1220 b 98 -891 270 -1075 206 -957 b 40 -871 76 -877 58 -871 b -10 -886 24 -871 8 -875 b -20 -889 -14 -889 -16 -889 l -24 -889 l -24 -749 l -24 -610 l -20 -610 b 0 -628 -9 -610 -2 -617 b 27 -692 4 -644 14 -671 b 138 -825 53 -741 88 -782 b 257 -973 190 -870 228 -917 b 262 -981 259 -977 262 -981 l 262 -981 b 269 -946 264 -979 268 -957 b 270 -903 270 -931 270 -917 b 98 -588 270 -774 206 -655 b 40 -569 76 -574 58 -569 b -10 -584 24 -569 8 -574 b -20 -587 -14 -587 -16 -587 l -24 -587 l -24 -448 l -24 -308 l -20 -308 b 0 -326 -9 -308 -2 -315 b 27 -390 4 -341 14 -369 b 138 -523 53 -438 88 -480 b 257 -670 190 -567 228 -614 b 262 -678 259 -674 262 -678 b 262 -678 262 -678 262 -678 b 269 -644 264 -677 268 -656 b 270 -601 270 -628 270 -614 b 98 -285 270 -471 206 -352 b 40 -266 76 -273 58 -266 b -10 -281 24 -266 8 -272 b -20 -284 -14 -284 -16 -284 l -24 -284 l -24 -145 " },
		    "vaa": { "x_min": -1.359375, "x_max": 752.703125, "ha": 768, "o": "m 490 985 b 504 986 495 986 500 986 b 604 907 551 986 593 954 b 607 884 607 900 607 892 b 581 813 607 857 597 831 l 578 810 l 583 811 b 710 932 638 827 687 873 b 714 943 711 936 713 942 b 730 952 720 949 725 952 b 752 931 741 952 752 943 b 200 -946 752 927 204 -941 b 182 -957 197 -953 190 -957 b 163 -945 174 -957 166 -953 b 161 -939 161 -942 161 -942 b 217 -743 161 -931 170 -904 b 272 -555 247 -639 272 -555 b 272 -555 272 -555 272 -555 b 264 -560 272 -555 268 -557 b 140 -603 227 -589 182 -603 b 36 -567 102 -603 65 -592 b -1 -487 12 -548 -1 -517 b 17 -427 -1 -466 5 -445 b 103 -380 38 -395 70 -380 b 191 -433 137 -380 172 -398 b 205 -484 201 -448 205 -466 b 178 -553 205 -509 196 -535 l 175 -557 l 182 -555 b 307 -435 236 -539 284 -494 b 372 -213 308 -430 372 -215 b 372 -213 372 -213 372 -213 b 364 -219 372 -213 368 -216 b 240 -262 328 -247 283 -262 b 137 -226 202 -262 166 -249 b 99 -145 112 -206 99 -176 b 118 -84 99 -124 106 -104 b 204 -38 138 -54 171 -38 b 292 -91 238 -38 273 -56 b 306 -141 302 -106 306 -124 b 279 -212 306 -167 296 -194 l 276 -215 l 281 -213 b 408 -93 336 -198 385 -151 b 473 129 409 -88 473 127 b 473 129 473 129 473 129 b 465 122 473 129 469 126 b 341 80 428 94 383 80 b 236 115 303 80 266 91 b 200 195 213 136 200 165 b 217 256 200 217 206 238 b 304 303 239 287 272 303 b 393 249 338 303 374 285 b 406 199 402 234 406 217 b 379 129 406 173 397 148 l 377 126 l 382 127 b 509 248 436 142 485 190 b 574 470 510 254 574 469 b 574 470 574 470 574 470 b 566 464 574 470 570 467 b 442 421 529 435 484 421 b 337 458 404 421 367 433 b 300 538 314 477 300 508 b 318 598 300 559 306 580 b 404 645 340 630 372 645 b 494 592 439 645 475 627 b 507 541 502 577 507 559 b 480 471 507 516 498 489 l 477 467 l 483 470 b 608 589 537 485 586 531 b 675 811 611 595 675 810 b 675 811 675 811 675 811 b 666 806 675 811 671 809 b 543 763 628 777 585 763 b 438 799 504 763 468 775 b 401 878 412 820 401 849 b 490 985 401 928 434 977 " },
		    "vab": { "x_min": 0, "x_max": 272.21875, "ha": 278, "o": "m 243 631 b 250 632 246 632 249 632 b 270 620 259 632 268 628 l 272 616 l 272 201 l 272 -212 l 270 -216 b 251 -229 268 -224 259 -229 b 227 -215 243 -229 240 -229 l 151 -142 b 32 -16 81 -80 53 -49 b 0 84 9 18 0 52 b 111 199 0 149 42 199 b 137 197 119 199 127 198 b 228 151 168 191 197 177 l 231 148 l 231 383 b 232 620 231 616 231 616 b 243 631 234 624 238 630 m 168 131 b 152 133 163 133 157 133 b 107 102 130 133 111 120 b 106 86 107 97 106 91 b 111 41 106 73 108 56 b 227 -152 125 -13 171 -90 l 231 -156 l 231 -37 l 231 80 l 225 87 b 168 131 210 111 190 126 " },
		    "vad": { "x_min": 0, "x_max": 873.828125, "ha": 892, "o": "m 0 0 l 0 703 l 81 703 l 164 703 l 164 0 l 164 -705 l 81 -705 l 0 -705 l 0 0 m 225 0 l 225 703 l 246 703 l 268 703 l 268 366 l 268 30 l 274 36 b 314 79 284 44 302 63 b 413 302 357 137 392 213 b 432 327 419 324 421 327 b 449 306 443 327 447 322 b 611 115 457 195 529 115 b 651 122 624 115 638 117 b 728 316 705 140 724 188 b 729 388 728 342 729 366 b 671 635 729 533 711 602 b 581 662 649 652 616 662 b 477 637 545 662 510 653 l 475 635 l 477 634 b 503 627 488 632 495 631 b 545 556 532 612 545 584 b 491 480 545 524 526 491 b 465 474 481 476 473 474 b 379 563 417 474 379 516 b 389 602 379 576 382 588 b 541 691 409 641 479 681 b 582 694 555 692 568 694 b 865 462 714 694 834 598 b 873 392 871 440 873 416 b 865 317 873 367 871 341 b 639 84 839 194 748 101 b 612 83 630 83 620 83 b 511 116 577 83 543 94 b 504 120 509 119 506 120 b 504 120 504 120 504 120 b 469 59 504 120 488 93 l 432 -1 l 469 -61 b 504 -122 488 -94 504 -122 b 504 -122 504 -122 504 -122 b 511 -117 506 -122 509 -120 b 612 -84 543 -95 577 -84 b 665 -91 630 -84 647 -87 b 869 -338 771 -122 850 -216 b 873 -392 872 -356 873 -374 b 798 -595 873 -469 847 -539 b 581 -695 741 -662 660 -695 b 406 -626 517 -695 454 -671 b 381 -563 389 -607 381 -585 b 465 -477 381 -519 413 -477 b 545 -559 514 -477 545 -519 b 503 -628 545 -587 532 -613 b 477 -635 495 -632 488 -634 l 475 -637 l 477 -638 b 581 -663 510 -655 545 -663 b 671 -637 616 -663 649 -653 b 729 -391 711 -603 729 -534 b 728 -317 729 -367 728 -344 b 623 -117 722 -173 698 -124 b 611 -116 619 -116 615 -116 b 449 -308 528 -116 457 -198 b 432 -328 447 -323 443 -328 b 413 -303 421 -328 419 -326 b 314 -80 392 -215 357 -138 b 274 -37 302 -65 284 -45 l 268 -31 l 268 -367 l 268 -705 l 246 -705 l 225 -705 l 225 0 " },
		    "vb1": { "x_min": 78.9375, "x_max": 485.921875, "ha": 417, "o": "m 362 378 b 378 380 367 380 372 380 b 472 348 415 380 453 367 b 485 315 481 338 485 327 b 462 273 485 298 477 281 b 439 267 454 269 446 267 b 398 290 424 267 409 274 b 344 319 385 309 364 319 b 281 269 315 319 289 301 b 279 262 280 266 279 262 b 276 256 279 260 277 258 b 274 249 276 254 274 251 b 238 127 273 248 257 192 b 201 4 217 61 201 5 b 166 -1 198 -1 200 -1 b 153 -1 163 -1 157 -1 b 141 -1 148 -1 144 -1 b 104 4 106 -1 107 -1 b 104 6 104 5 104 5 b 142 144 104 13 110 34 b 182 278 164 219 181 276 b 183 288 182 281 182 285 b 185 302 185 292 185 298 b 164 330 185 317 176 328 b 159 330 163 330 161 330 b 102 302 140 330 119 320 b 91 294 95 295 93 294 b 88 294 91 294 89 294 b 78 303 83 294 78 298 b 81 312 78 306 78 309 b 200 373 106 347 160 373 b 215 371 205 373 209 371 b 266 335 235 367 254 353 b 269 331 268 333 269 331 b 269 331 269 331 269 331 b 273 335 269 331 270 334 b 362 378 298 359 330 376 " },
		    "vb3": { "x_min": 0, "x_max": 227.3125, "ha": 232, "o": "m 91 213 b 100 215 93 215 96 215 b 227 58 167 215 224 144 b 227 52 227 56 227 54 b 61 -201 227 -43 164 -138 b 29 -216 44 -212 36 -216 b 23 -210 27 -216 24 -213 b 21 -205 21 -208 21 -206 b 34 -192 21 -201 25 -197 b 122 -55 89 -161 122 -106 b 104 6 122 -33 117 -12 l 103 9 l 96 9 b 4 79 57 9 17 38 b 0 112 1 90 0 101 b 91 213 0 163 36 209 " },
		    "vb4": { "x_min": -597.53125, "x_max": 596.171875, "ha": 608, "o": "m -533 324 b -525 327 -530 326 -528 327 b -504 305 -514 327 -504 317 b -504 305 -504 305 -504 305 b -513 284 -504 299 -504 299 b -556 112 -541 226 -556 167 b -545 33 -556 84 -552 58 b -524 -20 -541 15 -532 -9 l -522 -23 l -491 15 l -413 111 b -355 174 -367 169 -363 174 b -351 174 -353 174 -352 174 b -254 86 -343 174 -348 179 b -168 -1 -208 37 -168 -1 b -100 84 -168 -1 -137 37 b -23 173 -28 173 -29 172 b -19 174 -21 174 -20 174 b -8 173 -14 174 -10 173 b 80 86 -5 172 13 151 b 166 -1 127 37 166 -1 b 235 84 166 -1 197 37 b 311 173 306 173 304 172 b 317 174 313 174 314 174 b 326 173 319 174 323 173 b 490 11 329 172 366 134 l 502 -1 l 530 34 b 568 76 560 72 563 74 b 575 77 570 77 573 77 b 596 56 586 77 596 68 b 594 48 596 54 596 51 b 417 -172 592 41 424 -166 b 405 -176 415 -174 409 -176 b 396 -174 401 -176 398 -176 b 307 -87 393 -173 372 -152 b 221 -1 259 -38 221 -1 b 152 -86 221 -1 190 -38 b 76 -176 81 -174 83 -173 b 70 -176 74 -176 73 -176 b 61 -174 66 -176 62 -174 b -27 -87 58 -173 38 -152 b -114 -1 -74 -38 -112 -1 b -182 -86 -114 -1 -145 -38 b -258 -176 -253 -174 -253 -173 b -264 -176 -259 -176 -262 -176 b -274 -174 -268 -176 -272 -174 b -438 -11 -277 -173 -348 -102 l -449 0 l -479 -37 b -524 -80 -513 -80 -514 -80 l -524 -80 b -553 -52 -534 -80 -540 -74 b -597 109 -583 -8 -597 48 b -560 280 -597 165 -585 224 b -533 324 -548 310 -540 322 " },
		    "vb6": { "x_min": 0, "x_max": 556.6875, "ha": 568, "o": "m 289 545 b 298 546 292 545 295 546 b 318 533 306 546 315 541 b 319 428 319 530 319 528 l 319 327 l 334 327 b 526 223 412 326 485 285 b 543 172 537 206 543 190 b 447 76 543 122 503 76 b 445 76 446 76 446 76 b 359 165 394 77 359 119 b 368 205 359 179 362 192 b 441 251 382 233 412 251 b 455 249 446 251 451 251 b 460 248 458 249 460 248 b 460 248 460 248 460 248 b 454 254 460 249 458 251 b 334 295 419 280 378 294 l 319 295 l 319 4 l 319 -287 l 321 -285 b 328 -285 322 -285 325 -285 b 524 -99 424 -277 507 -198 b 541 -79 526 -84 530 -79 b 556 -97 551 -79 556 -84 b 548 -133 556 -105 553 -117 b 334 -317 521 -233 434 -306 b 322 -319 329 -317 323 -317 l 319 -319 l 319 -424 b 319 -471 319 -444 319 -459 b 313 -541 319 -544 318 -535 b 298 -548 308 -545 303 -548 b 279 -534 289 -548 281 -542 b 277 -424 277 -531 277 -530 l 277 -317 l 273 -317 b 13 -95 153 -305 51 -217 b 0 2 4 -62 0 -29 b 182 295 0 126 66 238 b 274 324 210 309 249 320 l 277 324 l 277 427 b 279 533 277 528 277 530 b 289 545 281 538 285 542 m 277 2 b 277 291 277 161 277 291 b 268 288 277 291 273 290 b 144 1 179 265 144 184 b 276 -284 144 -199 175 -267 l 277 -285 l 277 2 " },
		    "vb7": { "x_min": -176.9375, "x_max": 251.8125, "ha": 257, "o": "m -8 631 b -1 632 -6 632 -4 632 b 19 620 8 632 16 628 b 20 503 20 616 20 614 b 20 391 20 442 20 391 b 84 424 20 391 49 406 l 147 456 l 152 456 b 153 456 153 456 153 456 b 175 435 166 456 175 446 b 172 427 175 433 174 430 b 92 380 170 420 172 421 l 20 342 l 20 245 l 20 148 l 21 151 b 137 199 59 183 99 199 b 182 191 152 199 167 197 b 251 84 227 176 251 134 b 228 0 251 58 243 29 b 100 -142 206 -40 178 -72 l 23 -215 b 0 -229 9 -229 6 -229 b -20 -216 -9 -229 -17 -224 b -21 54 -21 -212 -21 -212 b -21 322 -21 201 -21 322 b -85 290 -21 322 -50 308 l -148 256 l -153 256 b -155 256 -155 256 -155 256 b -176 277 -167 256 -176 266 b -174 285 -176 280 -175 283 b -93 333 -171 294 -174 292 l -21 370 l -21 494 b -20 620 -21 616 -21 616 b -8 631 -17 624 -13 630 m 110 131 b 96 133 106 133 100 133 b 89 133 93 133 91 133 b 24 87 63 129 40 113 l 20 80 l 20 -37 l 20 -156 l 23 -152 b 144 81 96 -72 144 20 l 144 83 b 110 131 144 113 134 126 " },
		    "vb9": { "x_min": -122.5, "x_max": 121.140625, "ha": 124, "o": "m -16 145 b 0 147 -10 147 -5 147 b 121 -1 66 147 121 77 b 114 -49 121 -16 118 -33 b -1 -148 95 -112 47 -148 b -85 -106 -31 -148 -61 -134 b -122 -1 -110 -76 -122 -38 b -16 145 -122 68 -81 134 m 12 111 b 0 113 8 113 4 113 b -68 22 -29 113 -61 73 b -70 0 -69 15 -70 6 b -13 -113 -70 -49 -47 -98 b -1 -115 -9 -115 -5 -115 b 63 -40 24 -115 53 -83 b 68 -1 66 -27 68 -15 b 12 111 68 48 46 97 " },
		    "vba": { "x_min": -118.421875, "x_max": 597.53125, "ha": 381, "o": "m 460 574 b 464 574 461 574 462 574 b 488 574 470 574 481 574 b 500 573 491 574 498 574 b 594 503 543 570 588 538 b 597 488 596 498 597 494 b 528 417 597 449 564 417 b 502 423 519 417 510 419 b 465 481 477 434 465 458 b 488 528 465 499 472 516 b 490 530 490 530 490 530 b 490 530 490 530 490 530 b 468 517 488 530 475 523 b 349 340 419 485 377 420 b 347 330 348 334 347 330 b 383 328 347 328 363 328 b 428 326 423 328 424 328 b 442 302 438 320 442 312 b 430 281 442 294 438 285 b 385 276 424 277 426 276 l 377 276 l 332 276 l 330 269 b 178 -117 303 126 250 -9 b 1 -249 129 -194 69 -237 b -20 -251 -6 -251 -13 -251 b -114 -187 -65 -251 -100 -227 b -118 -156 -117 -177 -118 -166 b -51 -84 -118 -116 -91 -84 b -31 -87 -46 -84 -39 -86 b 16 -152 0 -95 16 -124 b -12 -205 16 -173 8 -194 b -16 -208 -14 -206 -16 -208 b -14 -208 -16 -208 -14 -208 b -9 -206 -14 -208 -12 -208 b 74 -124 23 -197 54 -166 b 172 224 98 -79 125 22 b 185 276 178 252 183 274 b 185 276 185 276 185 276 b 141 276 185 276 181 276 b 91 280 96 276 96 276 b 77 302 83 285 77 294 b 91 326 77 312 83 320 b 148 328 95 328 96 328 l 198 330 l 202 341 b 460 574 249 473 351 566 " },
		    "vbf": { "x_min": -53.078125, "x_max": 513.140625, "ha": 485, "o": "m 185 383 b 196 384 187 383 191 384 b 277 334 230 384 259 365 b 288 301 281 324 288 306 b 288 297 288 298 288 297 b 294 302 289 297 291 299 b 394 370 323 338 367 367 b 404 371 398 370 401 371 b 510 272 453 371 498 328 b 513 237 513 262 513 251 b 507 172 513 217 511 192 b 326 -34 487 59 412 -26 b 314 -36 322 -36 318 -36 b 274 -24 298 -36 283 -31 l 265 -16 b 224 44 246 -1 232 20 b 223 49 224 47 223 49 b 223 49 223 49 223 49 b 149 -197 221 48 149 -194 b 149 -198 149 -197 149 -198 b 170 -210 149 -202 155 -205 b 187 -215 174 -210 175 -212 b 204 -231 201 -219 204 -222 b 197 -245 204 -240 202 -242 l 194 -248 l 76 -248 l -42 -248 l -46 -245 b -53 -231 -51 -242 -53 -240 b -35 -215 -53 -222 -49 -217 b -13 -210 -21 -212 -20 -212 b -6 -208 -10 -209 -8 -208 b 0 -206 -6 -208 -2 -206 b 25 -188 13 -201 21 -195 b 163 280 28 -183 163 276 b 166 291 163 283 164 287 b 167 302 167 295 167 299 b 155 324 167 315 161 324 b 155 324 155 324 155 324 b 65 230 125 322 85 280 b 53 215 61 217 58 215 b 51 215 53 215 51 215 b 42 224 46 215 42 217 b 57 263 42 231 47 244 b 140 360 77 305 104 337 b 152 370 144 365 149 369 b 185 383 157 376 172 381 m 374 306 b 366 308 371 308 368 308 b 300 273 348 308 321 294 b 284 254 288 262 287 259 b 280 242 283 249 281 245 b 257 169 279 240 270 213 l 236 98 l 236 93 b 251 48 238 77 243 61 b 279 27 258 37 272 27 b 281 27 279 27 280 27 b 291 31 281 27 287 30 b 396 170 334 52 378 109 b 406 247 402 197 406 224 b 401 277 406 259 405 270 b 374 306 397 290 383 303 " },
		    "vc3": { "x_min": -10.890625, "x_max": 299.4375, "ha": 294, "o": "m 136 460 b 142 462 137 462 140 462 b 166 449 152 462 161 456 b 171 428 168 446 168 445 b 288 131 194 322 238 209 b 298 115 295 120 296 117 b 299 106 298 112 299 109 b 273 81 299 91 287 81 b 255 86 268 81 261 83 b 155 116 225 104 183 116 l 152 116 l 149 108 b 141 83 148 102 144 91 b 134 48 137 69 134 58 b 149 9 134 34 140 24 b 153 -1 152 5 153 1 b 149 -9 153 -5 152 -6 b 144 -11 148 -11 147 -11 b 122 2 138 -11 133 -6 b 95 61 104 20 95 38 b 107 108 95 74 99 90 b 108 113 107 111 108 112 b 107 113 108 113 108 113 b 102 113 106 113 104 113 b 31 86 76 108 53 98 b 14 80 24 81 20 80 b -10 106 0 80 -10 91 b 0 131 -10 115 -9 116 b 115 430 49 209 91 317 b 136 460 119 451 123 456 " },
		    "vd0": { "x_min": -10.890625, "x_max": 299.4375, "ha": 294, "o": "m 44 174 b 51 174 47 174 49 174 b 68 173 55 174 61 174 l 287 112 l 551 40 b 615 20 617 22 609 23 b 626 0 622 16 626 8 b 615 -22 626 -9 622 -18 b 613 -23 613 -23 613 -23 b 613 -23 613 -23 613 -23 b 287 -113 613 -24 597 -29 l 68 -174 b 53 -176 61 -176 57 -176 b 39 -172 47 -176 43 -174 b 27 -151 31 -167 27 -159 b 39 -129 27 -141 31 -133 b 230 -74 43 -124 20 -131 l 370 -36 l 468 -9 b 498 0 484 -4 498 -1 b 468 8 498 0 484 2 l 370 34 l 230 73 b 40 126 28 129 43 124 b 27 149 31 131 27 140 b 44 174 27 161 34 170 m 205 110 l 205 300 b 205 330 245 330 245 300 l 245 300 l 245 -300 b 245 -330 205 -330 205 -300 l 205 -300 l 205 110 l 345 90 m 345 90 l 345 330 b 345 360 385 360 385 330 l 385 330 l 385 -270 b 385 -300 345 -300 345 -270 l 345 -270 l 345 90 " },
		    "vd1": { "x_min": -20, "x_max": 320, "ha": 257, "o": "m -8 200 b -8 210 8 200 16 200 l 20 148 -199 l 23 -615 b 0 -629 9 -629 6 -629 l -21 -612 l -21 -201 l -21 216 l -20 200 m 16 200 l 310 0 l 240 0 l 16 140 l 16 -120 l 240 0 l 310 0 l 16 -200 " }
		  },
		  "cssFontWeight": "normal", "ascender": 1903, "underlinePosition": -125, "cssFontStyle": "normal", "boundingBox": { "yMin": -2065.375, "xMin": -695.53125, "yMax": 1901.578125, "xMax": 1159.671875 },
		  "resolution": 1000, "descender": -2066, "familyName": "VexFlow-18", "lineHeight": 4093, "underlineThickness": 50
		};
	
	/***/ },
	/* 10 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Renderer = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// Support for different rendering contexts: Canvas, Raphael
		
		/* global document: false */
		
		var _canvascontext = __webpack_require__(11);
		
		var _raphaelcontext = __webpack_require__(12);
		
		var _svgcontext = __webpack_require__(13);
		
		var _vex = __webpack_require__(1);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var lastContext = null;
		
		var Renderer = exports.Renderer = function () {
		  _createClass(Renderer, null, [{
		    key: 'buildContext',
		    value: function buildContext(elementId, backend, width, height, background) {
		      var renderer = new Renderer(elementId, backend);
		      if (width && height) {
		        renderer.resize(width, height);
		      }
		
		      if (!background) background = '#FFF';
		      var ctx = renderer.getContext();
		      ctx.setBackgroundFillStyle(background);
		      Renderer.lastContext = ctx;
		      return ctx;
		    }
		  }, {
		    key: 'getCanvasContext',
		    value: function getCanvasContext(elementId, width, height, background) {
		      return Renderer.buildContext(elementId, Renderer.Backends.CANVAS, width, height, background);
		    }
		  }, {
		    key: 'getRaphaelContext',
		    value: function getRaphaelContext(elementId, width, height, background) {
		      return Renderer.buildContext(elementId, Renderer.Backends.RAPHAEL, width, height, background);
		    }
		  }, {
		    key: 'getSVGContext',
		    value: function getSVGContext(elementId, width, height, background) {
		      return Renderer.buildContext(elementId, Renderer.Backends.SVG, width, height, background);
		    }
		  }, {
		    key: 'bolsterCanvasContext',
		    value: function bolsterCanvasContext(ctx) {
		      if (Renderer.USE_CANVAS_PROXY) {
		        return new _canvascontext.CanvasContext(ctx);
		      }
		
		      var methodNames = ['clear', 'setFont', 'setRawFont', 'setFillStyle', 'setBackgroundFillStyle', 'setStrokeStyle', 'setShadowColor', 'setShadowBlur', 'setLineWidth', 'setLineCap', 'setLineDash', 'openGroup', 'closeGroup', 'getGroup'];
		
		      ctx.vexFlowCanvasContext = ctx;
		
		      methodNames.forEach(function (methodName) {
		        ctx[methodName] = ctx[methodName] || _canvascontext.CanvasContext.prototype[methodName];
		      });
		
		      return ctx;
		    }
		
		    // Draw a dashed line (horizontal, vertical or diagonal
		    // dashPattern = [3,3] draws a 3 pixel dash followed by a three pixel space.
		    // setting the second number to 0 draws a solid line.
		
		  }, {
		    key: 'drawDashedLine',
		    value: function drawDashedLine(context, fromX, fromY, toX, toY, dashPattern) {
		      context.beginPath();
		
		      var dx = toX - fromX;
		      var dy = toY - fromY;
		      var angle = Math.atan2(dy, dx);
		      var x = fromX;
		      var y = fromY;
		      context.moveTo(fromX, fromY);
		      var idx = 0;
		      var draw = true;
		      while (!((dx < 0 ? x <= toX : x >= toX) && (dy < 0 ? y <= toY : y >= toY))) {
		        var dashLength = dashPattern[idx++ % dashPattern.length];
		        var nx = x + Math.cos(angle) * dashLength;
		        x = dx < 0 ? Math.max(toX, nx) : Math.min(toX, nx);
		        var ny = y + Math.sin(angle) * dashLength;
		        y = dy < 0 ? Math.max(toY, ny) : Math.min(toY, ny);
		        if (draw) {
		          context.lineTo(x, y);
		        } else {
		          context.moveTo(x, y);
		        }
		        draw = !draw;
		      }
		
		      context.closePath();
		      context.stroke();
		    }
		  }, {
		    key: 'Backends',
		    get: function get() {
		      return {
		        CANVAS: 1,
		        RAPHAEL: 2,
		        SVG: 3,
		        VML: 4
		      };
		    }
		
		    // End of line types
		
		  }, {
		    key: 'LineEndType',
		    get: function get() {
		      return {
		        NONE: 1, // No leg
		        UP: 2, // Upward leg
		        DOWN: 3 };
		    }
		
		    // Set this to true if you're using VexFlow inside a runtime
		    // that does not allow modifiying canvas objects. There is a small
		    // performance degradation due to the extra indirection.
		
		  }, {
		    key: 'USE_CANVAS_PROXY',
		    get: function get() {
		      return false;
		    }
		  }, {
		    key: 'lastContext',
		    get: function get() {
		      return lastContext;
		    },
		    set: function set(ctx) {
		      lastContext = ctx;
		    }
		  }]);
		
		  function Renderer(elementId, backend) {
		    _classCallCheck(this, Renderer);
		
		    this.elementId = elementId;
		    if (!this.elementId) {
		      throw new _vex.Vex.RERR('BadArgument', 'Invalid id for renderer.');
		    }
		
		    this.element = document.getElementById(elementId);
		    if (!this.element) this.element = elementId;
		
		    // Verify backend and create context
		    this.ctx = null;
		    this.paper = null;
		    this.backend = backend;
		    if (this.backend === Renderer.Backends.CANVAS) {
		      // Create context.
		      if (!this.element.getContext) {
		        throw new _vex.Vex.RERR('BadElement', 'Can\'t get canvas context from element: ' + elementId);
		      }
		      this.ctx = Renderer.bolsterCanvasContext(this.element.getContext('2d'));
		    } else if (this.backend === Renderer.Backends.RAPHAEL) {
		      this.ctx = new _raphaelcontext.RaphaelContext(this.element);
		    } else if (this.backend === Renderer.Backends.SVG) {
		      this.ctx = new _svgcontext.SVGContext(this.element);
		    } else {
		      throw new _vex.Vex.RERR('InvalidBackend', 'No support for backend: ' + this.backend);
		    }
		  }
		
		  _createClass(Renderer, [{
		    key: 'resize',
		    value: function resize(width, height) {
		      if (this.backend === Renderer.Backends.CANVAS) {
		        if (!this.element.getContext) {
		          throw new _vex.Vex.RERR('BadElement', 'Can\'t get canvas context from element: ' + this.elementId);
		        }
		
		        var devicePixelRatio = window.devicePixelRatio || 1;
		
		        this.element.width = width * devicePixelRatio;
		        this.element.height = height * devicePixelRatio;
		        this.element.style.width = width + 'px';
		        this.element.style.height = height + 'px';
		
		        this.ctx = Renderer.bolsterCanvasContext(this.element.getContext('2d'));
		        this.ctx.scale(devicePixelRatio, devicePixelRatio);
		      } else {
		        this.ctx.resize(width, height);
		      }
		
		      return this;
		    }
		  }, {
		    key: 'getContext',
		    value: function getContext() {
		      return this.ctx;
		    }
		  }]);
	
		  return Renderer;
		}();
	
	/***/ },
	/* 11 */
	/***/ function(module, exports) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Mohit Muthanna <mohit@muthanna.com>
		//
		// A rendering context for the Raphael backend.
		//
		// Copyright Mohit Cheppudira 2010
		
		/** @constructor */
		var CanvasContext = exports.CanvasContext = function () {
		  _createClass(CanvasContext, null, [{
		    key: 'WIDTH',
		    get: function get() {
		      return 600;
		    }
		  }, {
		    key: 'HEIGHT',
		    get: function get() {
		      return 400;
		    }
		  }]);
		
		  function CanvasContext(context) {
		    _classCallCheck(this, CanvasContext);
		
		    // Use a name that is unlikely to clash with a canvas context
		    // property
		    this.vexFlowCanvasContext = context;
		    if (!context.canvas) {
		      this.canvas = {
		        width: CanvasContext.WIDTH,
		        height: CanvasContext.HEIGHT
		      };
		    } else {
		      this.canvas = context.canvas;
		    }
		  }
		
		  _createClass(CanvasContext, [{
		    key: 'clear',
		    value: function clear() {
		      this.vexFlowCanvasContext.clearRect(0, 0, this.canvas.width, this.canvas.height);
		    }
		
		    // Containers not implemented
		
		  }, {
		    key: 'openGroup',
		    value: function openGroup() {}
		  }, {
		    key: 'closeGroup',
		    value: function closeGroup() {}
		  }, {
		    key: 'add',
		    value: function add() {}
		  }, {
		    key: 'setFont',
		    value: function setFont(family, size, weight) {
		      this.vexFlowCanvasContext.font = (weight || '') + ' ' + size + 'pt ' + family;
		      return this;
		    }
		  }, {
		    key: 'setRawFont',
		    value: function setRawFont(font) {
		      this.vexFlowCanvasContext.font = font;
		      return this;
		    }
		  }, {
		    key: 'setFillStyle',
		    value: function setFillStyle(style) {
		      this.vexFlowCanvasContext.fillStyle = style;
		      return this;
		    }
		  }, {
		    key: 'setBackgroundFillStyle',
		    value: function setBackgroundFillStyle(style) {
		      this.background_fillStyle = style;
		      return this;
		    }
		  }, {
		    key: 'setStrokeStyle',
		    value: function setStrokeStyle(style) {
		      this.vexFlowCanvasContext.strokeStyle = style;
		      return this;
		    }
		  }, {
		    key: 'setShadowColor',
		    value: function setShadowColor(style) {
		      this.vexFlowCanvasContext.shadowColor = style;
		      return this;
		    }
		  }, {
		    key: 'setShadowBlur',
		    value: function setShadowBlur(blur) {
		      this.vexFlowCanvasContext.shadowBlur = blur;
		      return this;
		    }
		  }, {
		    key: 'setLineWidth',
		    value: function setLineWidth(width) {
		      this.vexFlowCanvasContext.lineWidth = width;
		      return this;
		    }
		  }, {
		    key: 'setLineCap',
		    value: function setLineCap(cap_type) {
		      this.vexFlowCanvasContext.lineCap = cap_type;
		      return this;
		    }
		
		    // setLineDash: is the one native method in a canvas context
		    // that begins with set, therefore we don't bolster the method
		    // if it already exists (see renderer.bolsterCanvasContext).
		    // If it doesn't exist, we bolster it and assume it's looking for
		    // a ctx.lineDash method, as previous versions of VexFlow
		    // expected.
		
		  }, {
		    key: 'setLineDash',
		    value: function setLineDash(dash) {
		      this.vexFlowCanvasContext.lineDash = dash;
		      return this;
		    }
		  }, {
		    key: 'scale',
		    value: function scale(x, y) {
		      return this.vexFlowCanvasContext.scale(parseFloat(x), parseFloat(y));
		    }
		  }, {
		    key: 'resize',
		    value: function resize(width, height) {
		      return this.vexFlowCanvasContext.resize(parseInt(width, 10), parseInt(height, 10));
		    }
		  }, {
		    key: 'rect',
		    value: function rect(x, y, width, height) {
		      return this.vexFlowCanvasContext.rect(x, y, width, height);
		    }
		  }, {
		    key: 'fillRect',
		    value: function fillRect(x, y, width, height) {
		      return this.vexFlowCanvasContext.fillRect(x, y, width, height);
		    }
		  }, {
		    key: 'clearRect',
		    value: function clearRect(x, y, width, height) {
		      return this.vexFlowCanvasContext.clearRect(x, y, width, height);
		    }
		  }, {
		    key: 'beginPath',
		    value: function beginPath() {
		      return this.vexFlowCanvasContext.beginPath();
		    }
		  }, {
		    key: 'moveTo',
		    value: function moveTo(x, y) {
		      return this.vexFlowCanvasContext.moveTo(x, y);
		    }
		  }, {
		    key: 'lineTo',
		    value: function lineTo(x, y) {
		      return this.vexFlowCanvasContext.lineTo(x, y);
		    }
		  }, {
		    key: 'bezierCurveTo',
		    value: function bezierCurveTo(x1, y1, x2, y2, x, y) {
		      return this.vexFlowCanvasContext.bezierCurveTo(x1, y1, x2, y2, x, y);
		    }
		  }, {
		    key: 'quadraticCurveTo',
		    value: function quadraticCurveTo(x1, y1, x, y) {
		      return this.vexFlowCanvasContext.quadraticCurveTo(x1, y1, x, y);
		    }
		
		    // This is an attempt (hack) to simulate the HTML5 canvas
		    // arc method.
		
		  }, {
		    key: 'arc',
		    value: function arc(x, y, radius, startAngle, endAngle, antiClockwise) {
		      return this.vexFlowCanvasContext.arc(x, y, radius, startAngle, endAngle, antiClockwise);
		    }
		
		    // Adapted from the source for Raphael's Element.glow
		
		  }, {
		    key: 'glow',
		    value: function glow() {
		      return this.vexFlowCanvasContext.glow();
		    }
		  }, {
		    key: 'fill',
		    value: function fill() {
		      return this.vexFlowCanvasContext.fill();
		    }
		  }, {
		    key: 'stroke',
		    value: function stroke() {
		      return this.vexFlowCanvasContext.stroke();
		    }
		  }, {
		    key: 'closePath',
		    value: function closePath() {
		      return this.vexFlowCanvasContext.closePath();
		    }
		  }, {
		    key: 'measureText',
		    value: function measureText(text) {
		      return this.vexFlowCanvasContext.measureText(text);
		    }
		  }, {
		    key: 'fillText',
		    value: function fillText(text, x, y) {
		      return this.vexFlowCanvasContext.fillText(text, x, y);
		    }
		  }, {
		    key: 'save',
		    value: function save() {
		      return this.vexFlowCanvasContext.save();
		    }
		  }, {
		    key: 'restore',
		    value: function restore() {
		      return this.vexFlowCanvasContext.restore();
		    }
		  }]);
	
		  return CanvasContext;
		}();
	
	/***/ },
	/* 12 */
	/***/ function(module, exports) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// A rendering context for the Raphael backend.
		//
		// ## Warning: Deprecated for SVGContext
		// Except in instances where SVG support for IE < 9.0 is
		// needed, SVGContext is recommended.
		
		var RaphaelContext = exports.RaphaelContext = function () {
		  function RaphaelContext(element) {
		    _classCallCheck(this, RaphaelContext);
		
		    this.element = element;
		    this.paper = Raphael(element); // eslint-disable-line
		    this.path = '';
		    this.pen = { x: 0, y: 0 };
		    this.lineWidth = 1.0;
		    this.state = {
		      scale: { x: 1, y: 1 },
		      font_family: 'Arial',
		      font_size: 8,
		      font_weight: 800
		    };
		
		    this.attributes = {
		      'stroke-width': 0.3,
		      'fill': 'black',
		      'stroke': 'black',
		      'font': '10pt Arial'
		    };
		
		    this.background_attributes = {
		      'stroke-width': 0,
		      'fill': 'white',
		      'stroke': 'white',
		      'font': '10pt Arial'
		    };
		
		    this.shadow_attributes = {
		      width: 0,
		      color: 'black'
		    };
		
		    this.state_stack = [];
		  }
		
		  // Containers not implemented
		
		
		  _createClass(RaphaelContext, [{
		    key: 'openGroup',
		    value: function openGroup() {}
		  }, {
		    key: 'closeGroup',
		    value: function closeGroup() {}
		  }, {
		    key: 'add',
		    value: function add() {}
		  }, {
		    key: 'setFont',
		    value: function setFont(family, size, weight) {
		      this.state.font_family = family;
		      this.state.font_size = size;
		      this.state.font_weight = weight;
		      this.attributes.font = (this.state.font_weight || '') + ' ' + this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;
		      return this;
		    }
		  }, {
		    key: 'setRawFont',
		    value: function setRawFont(font) {
		      this.attributes.font = font;
		      return this;
		    }
		  }, {
		    key: 'setFillStyle',
		    value: function setFillStyle(style) {
		      this.attributes.fill = style;
		      return this;
		    }
		  }, {
		    key: 'setBackgroundFillStyle',
		    value: function setBackgroundFillStyle(style) {
		      this.background_attributes.fill = style;
		      this.background_attributes.stroke = style;
		      return this;
		    }
		  }, {
		    key: 'setStrokeStyle',
		    value: function setStrokeStyle(style) {
		      this.attributes.stroke = style;
		      return this;
		    }
		  }, {
		    key: 'setShadowColor',
		    value: function setShadowColor(style) {
		      this.shadow_attributes.color = style;
		      return this;
		    }
		  }, {
		    key: 'setShadowBlur',
		    value: function setShadowBlur(blur) {
		      this.shadow_attributes.width = blur;
		      return this;
		    }
		  }, {
		    key: 'setLineWidth',
		    value: function setLineWidth(width) {
		      this.attributes['stroke-width'] = width;
		      this.lineWidth = width;
		    }
		
		    // Empty because there is no equivalent in SVG
		
		  }, {
		    key: 'setLineDash',
		    value: function setLineDash() {
		      return this;
		    }
		  }, {
		    key: 'setLineCap',
		    value: function setLineCap() {
		      return this;
		    }
		  }, {
		    key: 'scale',
		    value: function scale(x, y) {
		      this.state.scale = { x: x, y: y };
		      // The scale() method is deprecated as of Raphael.JS 2.0, and
		      // can no longer be used as an option in an Element.attr() call.
		      // It is preserved here for users running earlier versions of
		      // Raphael.JS, though it has no effect on the SVG output in
		      // Raphael 2 and higher.
		      this.attributes.transform = 'S' + x + ',' + y + ',0,0';
		      this.attributes.scale = x + ',' + y + ',0,0';
		      this.attributes.font = this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;
		      this.background_attributes.transform = 'S' + x + ',' + y + ',0,0';
		      this.background_attributes.font = this.state.font_size * this.state.scale.x + 'pt ' + this.state.font_family;
		      return this;
		    }
		  }, {
		    key: 'clear',
		    value: function clear() {
		      this.paper.clear();
		    }
		  }, {
		    key: 'resize',
		    value: function resize(width, height) {
		      this.element.style.width = width;
		      this.paper.setSize(width, height);
		      return this;
		    }
		
		    // Sets the SVG `viewBox` property, which results in auto scaling images when its container
		    // is resized.
		    //
		    // Usage: `ctx.setViewBox("0 0 600 400")`
		
		  }, {
		    key: 'setViewBox',
		    value: function setViewBox(viewBox) {
		      this.paper.canvas.setAttribute('viewBox', viewBox);
		    }
		  }, {
		    key: 'rect',
		    value: function rect(x, y, width, height) {
		      if (height < 0) {
		        y += height;
		        height = -height;
		      }
		
		      this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.attributes).attr('fill', 'none').attr('stroke-width', this.lineWidth);
		      return this;
		    }
		  }, {
		    key: 'fillRect',
		    value: function fillRect(x, y, width, height) {
		      if (height < 0) {
		        y += height;
		        height = -height;
		      }
		
		      this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.attributes);
		      return this;
		    }
		  }, {
		    key: 'clearRect',
		    value: function clearRect(x, y, width, height) {
		      if (height < 0) {
		        y += height;
		        height = -height;
		      }
		
		      this.paper.rect(x, y, width - 0.5, height - 0.5).attr(this.background_attributes);
		      return this;
		    }
		  }, {
		    key: 'beginPath',
		    value: function beginPath() {
		      this.path = '';
		      this.pen.x = 0;
		      this.pen.y = 0;
		      return this;
		    }
		  }, {
		    key: 'moveTo',
		    value: function moveTo(x, y) {
		      this.path += 'M' + x + ',' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		  }, {
		    key: 'lineTo',
		    value: function lineTo(x, y) {
		      this.path += 'L' + x + ',' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		  }, {
		    key: 'bezierCurveTo',
		    value: function bezierCurveTo(x1, y1, x2, y2, x, y) {
		      this.path += 'C' + x1 + ',' + y1 + ',' + x2 + ',' + y2 + ',' + x + ',' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		  }, {
		    key: 'quadraticCurveTo',
		    value: function quadraticCurveTo(x1, y1, x, y) {
		      this.path += 'Q' + x1 + ',' + y1 + ',' + x + ',' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		
		    // This is an attempt (hack) to simulate the HTML5 canvas
		    // arc method.
		
		  }, {
		    key: 'arc',
		    value: function arc(x, y, radius, startAngle, endAngle, antiClockwise) {
		      function normalizeAngle(angle) {
		        while (angle < 0) {
		          angle += Math.PI * 2;
		        }
		
		        while (angle > Math.PI * 2) {
		          angle -= Math.PI * 2;
		        }
		        return angle;
		      }
		
		      startAngle = normalizeAngle(startAngle);
		      endAngle = normalizeAngle(endAngle);
		
		      if (startAngle > endAngle) {
		        var tmp = startAngle;
		        startAngle = endAngle;
		        endAngle = tmp;
		        antiClockwise = !antiClockwise;
		      }
		
		      var delta = endAngle - startAngle;
		
		      if (delta > Math.PI) {
		        this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);
		        this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);
		      } else {
		        this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);
		      }
		      return this;
		    }
		  }, {
		    key: 'arcHelper',
		    value: function arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {
		      var x1 = x + radius * Math.cos(startAngle);
		      var y1 = y + radius * Math.sin(startAngle);
		
		      var x2 = x + radius * Math.cos(endAngle);
		      var y2 = y + radius * Math.sin(endAngle);
		
		      var largeArcFlag = 0;
		      var sweepFlag = 0;
		      if (antiClockwise) {
		        sweepFlag = 1;
		        if (endAngle - startAngle < Math.PI) {
		          largeArcFlag = 1;
		        }
		      } else if (endAngle - startAngle > Math.PI) {
		        largeArcFlag = 1;
		      }
		
		      this.path += 'M' + x1 + ',' + y1 + ',A' + radius + ',' + radius + ',0,' + largeArcFlag + ',' + sweepFlag + ',' + x2 + ',' + y2 + 'M' + this.pen.x + ',' + this.pen.y;
		    }
		
		    // Adapted from the source for Raphael's Element.glow
		
		  }, {
		    key: 'glow',
		    value: function glow() {
		      var out = this.paper.set();
		      if (this.shadow_attributes.width > 0) {
		        var sa = this.shadow_attributes;
		        var num_paths = sa.width / 2;
		        for (var i = 1; i <= num_paths; i++) {
		          out.push(this.paper.path(this.path).attr({
		            stroke: sa.color,
		            'stroke-linejoin': 'round',
		            'stroke-linecap': 'round',
		            'stroke-width': +(sa.width / num_paths * i).toFixed(3),
		            opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3),
		            // See note in this.scale(): In Raphael the scale() method
		            // is deprecated and removed as of Raphael 2.0 and replaced
		            // by the transform() method.  It is preserved here for
		            // users with earlier versions of Raphael, but has no effect
		            // on the output SVG in Raphael 2.0+.
		            transform: this.attributes.transform,
		            scale: this.attributes.scale
		          }));
		        }
		      }
		      return out;
		    }
		  }, {
		    key: 'fill',
		    value: function fill() {
		      var elem = this.paper.path(this.path).attr(this.attributes).attr('stroke-width', 0);
		      this.glow(elem);
		      return this;
		    }
		  }, {
		    key: 'stroke',
		    value: function stroke() {
		      // The first line of code below is, unfortunately, a bit of a hack:
		      // Raphael's transform() scaling does not scale the stroke-width, so
		      // in order to scale a stroke, we have to manually scale the
		      // stroke-width.
		      //
		      // This works well so long as the X & Y states for this.scale() are
		      // relatively similar.  However, if they are very different, we
		      // would expect horizontal and vertical lines to have different
		      // stroke-widths.
		      //
		      // In the future, if we want to support very divergent values for
		      // horizontal and vertical scaling, we may want to consider
		      // implementing SVG scaling with properties of the SVG viewBox &
		      // viewPort and removing it entirely from the Element.attr() calls.
		      // This would more closely parallel the approach taken in
		      // canvascontext.js as well.
		
		      var strokeWidth = this.lineWidth * (this.state.scale.x + this.state.scale.y) / 2;
		      var elem = this.paper.path(this.path).attr(this.attributes).attr('fill', 'none').attr('stroke-width', strokeWidth);
		      this.glow(elem);
		      return this;
		    }
		  }, {
		    key: 'closePath',
		    value: function closePath() {
		      this.path += 'Z';
		      return this;
		    }
		  }, {
		    key: 'measureText',
		    value: function measureText(text) {
		      var txt = this.paper.text(0, 0, text).attr(this.attributes).attr('fill', 'none').attr('stroke', 'none');
		      var bounds = txt.getBBox();
		      txt.remove();
		
		      return {
		        width: bounds.width,
		        height: bounds.height
		      };
		    }
		  }, {
		    key: 'fillText',
		    value: function fillText(text, x, y) {
		      this.paper.text(x + this.measureText(text).width / 2, y - this.state.font_size / (2.25 * this.state.scale.y), text).attr(this.attributes);
		
		      return this;
		    }
		  }, {
		    key: 'save',
		    value: function save() {
		      // TODO(mmuthanna): State needs to be deep-copied.
		      this.state_stack.push({
		        state: {
		          font_family: this.state.font_family
		        },
		        attributes: {
		          font: this.attributes.font,
		          fill: this.attributes.fill,
		          stroke: this.attributes.stroke,
		          'stroke-width': this.attributes['stroke-width']
		        },
		        shadow_attributes: {
		          width: this.shadow_attributes.width,
		          color: this.shadow_attributes.color
		        }
		      });
		      return this;
		    }
		  }, {
		    key: 'restore',
		    value: function restore() {
		      // TODO(0xfe): State needs to be deep-restored.
		      var state = this.state_stack.pop();
		      this.state.font_family = state.state.font_family;
		      this.attributes.font = state.attributes.font;
		      this.attributes.fill = state.attributes.fill;
		      this.attributes.stroke = state.attributes.stroke;
		      this.attributes['stroke-width'] = state.attributes['stroke-width'];
		      this.shadow_attributes.width = state.shadow_attributes.width;
		      this.shadow_attributes.color = state.shadow_attributes.color;
		      return this;
		    }
		  }]);
	
		  return RaphaelContext;
		}();
	
	/***/ },
	/* 13 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.SVGContext = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// @author Gregory Ristow (2015)
		
		var _vex = __webpack_require__(1);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var SVGContext = exports.SVGContext = function () {
		  function SVGContext(element) {
		    _classCallCheck(this, SVGContext);
		
		    // element is the parent DOM object
		    this.element = element;
		    // Create the SVG in the SVG namespace:
		    this.svgNS = 'http://www.w3.org/2000/svg';
		    var svg = this.create('svg');
		    // Add it to the canvas:
		    this.element.appendChild(svg);
		
		    // Point to it:
		    this.svg = svg;
		    this.groups = [this.svg]; // Create the group stack
		    this.parent = this.svg;
		
		    this.path = '';
		    this.pen = { x: 0, y: 0 };
		    this.lineWidth = 1.0;
		    this.state = {
		      scale: { x: 1, y: 1 },
		      'font-family': 'Arial',
		      'font-size': '8pt',
		      'font-weight': 'normal'
		    };
		
		    this.attributes = {
		      'stroke-width': 0.3,
		      'fill': 'black',
		      'stroke': 'black',
		      'stroke-dasharray': 'none',
		      'font-family': 'Arial',
		      'font-size': '10pt',
		      'font-weight': 'normal',
		      'font-style': 'normal'
		    };
		
		    this.background_attributes = {
		      'stroke-width': 0,
		      'fill': 'white',
		      'stroke': 'white',
		      'stroke-dasharray': 'none',
		      'font-family': 'Arial',
		      'font-size': '10pt',
		      'font-weight': 'normal',
		      'font-style': 'normal'
		    };
		
		    this.shadow_attributes = {
		      width: 0,
		      color: 'black'
		    };
		
		    this.state_stack = [];
		
		    // Test for Internet Explorer
		    this.iePolyfill();
		  }
		
		  _createClass(SVGContext, [{
		    key: 'create',
		    value: function create(svgElementType) {
		      return document.createElementNS(this.svgNS, svgElementType);
		    }
		
		    // Allow grouping elements in containers for interactivity.
		
		  }, {
		    key: 'openGroup',
		    value: function openGroup(cls, id, attrs) {
		      var group = this.create('g');
		      this.groups.push(group);
		      this.parent.appendChild(group);
		      this.parent = group;
		      if (cls) group.setAttribute('class', _vex.Vex.Prefix(cls));
		      if (id) group.setAttribute('id', _vex.Vex.Prefix(id));
		
		      if (attrs && attrs.pointerBBox) {
		        group.setAttribute('pointer-events', 'bounding-box');
		      }
		      return group;
		    }
		  }, {
		    key: 'closeGroup',
		    value: function closeGroup() {
		      this.groups.pop();
		      this.parent = this.groups[this.groups.length - 1];
		    }
		  }, {
		    key: 'add',
		    value: function add(elem) {
		      this.parent.appendChild(elem);
		    }
		
		    // Tests if the browser is Internet Explorer; if it is,
		    // we do some tricks to improve text layout.  See the
		    // note at ieMeasureTextFix() for details.
		
		  }, {
		    key: 'iePolyfill',
		    value: function iePolyfill() {
		      if (typeof navigator !== 'undefined') {
		        this.ie = /MSIE 9/i.test(navigator.userAgent) || /MSIE 10/i.test(navigator.userAgent) || /rv:11\.0/i.test(navigator.userAgent) || /Trident/i.test(navigator.userAgent);
		      }
		    }
		
		    // ### Styling & State Methods:
		
		  }, {
		    key: 'setFont',
		    value: function setFont(family, size, weight) {
		      // Unlike canvas, in SVG italic is handled by font-style,
		      // not weight. So: we search the weight argument and
		      // apply bold and italic to weight and style respectively.
		      var bold = false;
		      var italic = false;
		      var style = 'normal';
		      // Weight might also be a number (200, 400, etc...) so we
		      // test its type to be sure we have access to String methods.
		      if (typeof weight === 'string') {
		        // look for "italic" in the weight:
		        if (weight.indexOf('italic') !== -1) {
		          weight = weight.replace(/italic/g, '');
		          italic = true;
		        }
		        // look for "bold" in weight
		        if (weight.indexOf('bold') !== -1) {
		          weight = weight.replace(/bold/g, '');
		          bold = true;
		        }
		        // remove any remaining spaces
		        weight = weight.replace(/ /g, '');
		      }
		      weight = bold ? 'bold' : weight;
		      weight = typeof weight === 'undefined' || weight === '' ? 'normal' : weight;
		
		      style = italic ? 'italic' : style;
		
		      var fontAttributes = {
		        'font-family': family,
		        'font-size': size + 'pt',
		        'font-weight': weight,
		        'font-style': style
		      };
		
		      // Store the font size so that if the browser is Internet
		      // Explorer we can fix its calculations of text width.
		      this.fontSize = Number(size);
		
		      _vex.Vex.Merge(this.attributes, fontAttributes);
		      _vex.Vex.Merge(this.state, fontAttributes);
		
		      return this;
		    }
		  }, {
		    key: 'setRawFont',
		    value: function setRawFont(font) {
		      font = font.trim();
		      // Assumes size first, splits on space -- which is presently
		      // how all existing modules are calling this.
		      var fontArray = font.split(' ');
		
		      this.attributes['font-family'] = fontArray[1];
		      this.state['font-family'] = fontArray[1];
		
		      this.attributes['font-size'] = fontArray[0];
		      this.state['font-size'] = fontArray[0];
		
		      // Saves fontSize for IE polyfill
		      this.fontSize = Number(fontArray[0].match(/\d+/));
		      return this;
		    }
		  }, {
		    key: 'setFillStyle',
		    value: function setFillStyle(style) {
		      this.attributes.fill = style;
		      return this;
		    }
		  }, {
		    key: 'setBackgroundFillStyle',
		    value: function setBackgroundFillStyle(style) {
		      this.background_attributes.fill = style;
		      this.background_attributes.stroke = style;
		      return this;
		    }
		  }, {
		    key: 'setStrokeStyle',
		    value: function setStrokeStyle(style) {
		      this.attributes.stroke = style;
		      return this;
		    }
		  }, {
		    key: 'setShadowColor',
		    value: function setShadowColor(style) {
		      this.shadow_attributes.color = style;
		      return this;
		    }
		  }, {
		    key: 'setShadowBlur',
		    value: function setShadowBlur(blur) {
		      this.shadow_attributes.width = blur;
		      return this;
		    }
		  }, {
		    key: 'setLineWidth',
		    value: function setLineWidth(width) {
		      this.attributes['stroke-width'] = width;
		      this.lineWidth = width;
		    }
		
		    // @param array {lineDash} as [dashInt, spaceInt, dashInt, spaceInt, etc...]
		
		  }, {
		    key: 'setLineDash',
		    value: function setLineDash(lineDash) {
		      if (Object.prototype.toString.call(lineDash) === '[object Array]') {
		        lineDash = lineDash.join(', ');
		        this.attributes['stroke-dasharray'] = lineDash;
		        return this;
		      } else {
		        throw new _vex.Vex.RERR('ArgumentError', 'lineDash must be an array of integers.');
		      }
		    }
		  }, {
		    key: 'setLineCap',
		    value: function setLineCap(lineCap) {
		      this.attributes['stroke-linecap'] = lineCap;
		      return this;
		    }
		
		    // ### Sizing & Scaling Methods:
		
		    // TODO (GCR): See note at scale() -- seperate our internal
		    // conception of pixel-based width/height from the style.width
		    // and style.height properties eventually to allow users to
		    // apply responsive sizing attributes to the SVG.
		
		  }, {
		    key: 'resize',
		    value: function resize(width, height) {
		      this.width = width;
		      this.height = height;
		      this.element.style.width = width;
		      var attributes = {
		        width: width,
		        height: height
		      };
		      this.applyAttributes(this.svg, attributes);
		      return this;
		    }
		  }, {
		    key: 'scale',
		    value: function scale(x, y) {
		      // uses viewBox to scale
		      // TODO (GCR): we may at some point want to distinguish the
		      // style.width / style.height properties that are applied to
		      // the SVG object from our internal conception of the SVG
		      // width/height.  This would allow us to create automatically
		      // scaling SVG's that filled their containers, for instance.
		      //
		      // As this isn't implemented in Canvas or Raphael contexts,
		      // I've left as is for now, but in using the viewBox to
		      // handle internal scaling, am trying to make it possible
		      // for us to eventually move in that direction.
		
		      this.state.scale = { x: x, y: y };
		      var visibleWidth = this.width / x;
		      var visibleHeight = this.height / y;
		      this.setViewBox(0, 0, visibleWidth, visibleHeight);
		
		      return this;
		    }
		  }, {
		    key: 'setViewBox',
		    value: function setViewBox() {
		      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		        args[_key] = arguments[_key];
		      }
		
		      // Override for "x y w h" style:
		      if (args.length === 1) {
		        var viewBox = args[0];
		
		        this.svg.setAttribute('viewBox', viewBox);
		      } else {
		        var xMin = args[0],
		            yMin = args[1],
		            width = args[2],
		            height = args[3];
		
		        var viewBoxString = xMin + ' ' + yMin + ' ' + width + ' ' + height;
		        this.svg.setAttribute('viewBox', viewBoxString);
		      }
		    }
		
		    // ### Drawing helper methods:
		
		  }, {
		    key: 'applyAttributes',
		    value: function applyAttributes(element, attributes) {
		      Object.keys(attributes).forEach(function (propertyName) {
		        return element.setAttributeNS(null, propertyName, attributes[propertyName]);
		      });
		
		      return element;
		    }
		
		    // ### Shape & Path Methods:
		
		  }, {
		    key: 'clear',
		    value: function clear() {
		      // Clear the SVG by removing all inner children.
		
		      // (This approach is usually slightly more efficient
		      // than removing the old SVG & adding a new one to
		      // the container element, since it does not cause the
		      // container to resize twice.  Also, the resize
		      // triggered by removing the entire SVG can trigger
		      // a touchcancel event when the element resizes away
		      // from a touch point.)
		
		      while (this.svg.lastChild) {
		        this.svg.removeChild(this.svg.lastChild);
		      }
		
		      // Replace the viewbox attribute we just removed:
		      this.scale(this.state.scale.x, this.state.scale.y);
		    }
		
		    // ## Rectangles:
		
		  }, {
		    key: 'rect',
		    value: function rect(x, y, width, height, attributes) {
		      // Avoid invalid negative height attribs by
		      // flipping the rectangle on its head:
		      if (height < 0) {
		        y += height;
		        height *= -1;
		      }
		
		      // Create the rect & style it:
		      var rectangle = this.create('rect');
		      if (typeof attributes === 'undefined') {
		        attributes = {
		          fill: 'none',
		          'stroke-width': this.lineWidth,
		          stroke: 'black'
		        };
		      }
		
		      _vex.Vex.Merge(attributes, {
		        x: x,
		        y: y,
		        width: width,
		        height: height
		      });
		
		      this.applyAttributes(rectangle, attributes);
		
		      this.add(rectangle);
		      return this;
		    }
		  }, {
		    key: 'fillRect',
		    value: function fillRect(x, y, width, height) {
		      if (height < 0) {
		        y += height;
		        height *= -1;
		      }
		
		      this.rect(x, y, width, height, this.attributes);
		      return this;
		    }
		  }, {
		    key: 'clearRect',
		    value: function clearRect(x, y, width, height) {
		      // TODO(GCR): Improve implementation of this...
		      // Currently it draws a box of the background color, rather
		      // than creating alpha through lower z-levels.
		      //
		      // See the implementation of this in SVGKit:
		      // http://sourceforge.net/projects/svgkit/
		      // as a starting point.
		      //
		      // Adding a large number of transform paths (as we would
		      // have to do) could be a real performance hit.  Since
		      // tabNote seems to be the only module that makes use of this
		      // it may be worth creating a seperate tabStave that would
		      // draw lines around locations of tablature fingering.
		      //
		
		      this.rect(x, y, width, height, this.background_attributes);
		      return this;
		    }
		
		    // ## Paths:
		
		  }, {
		    key: 'beginPath',
		    value: function beginPath() {
		      this.path = '';
		      this.pen.x = 0;
		      this.pen.y = 0;
		      return this;
		    }
		  }, {
		    key: 'moveTo',
		    value: function moveTo(x, y) {
		      this.path += 'M' + x + ' ' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		  }, {
		    key: 'lineTo',
		    value: function lineTo(x, y) {
		      this.path += 'L' + x + ' ' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		  }, {
		    key: 'bezierCurveTo',
		    value: function bezierCurveTo(x1, y1, x2, y2, x, y) {
		      this.path += 'C' + x1 + ' ' + y1 + ',' + x2 + ' ' + y2 + ',' + x + ' ' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		  }, {
		    key: 'quadraticCurveTo',
		    value: function quadraticCurveTo(x1, y1, x, y) {
		      this.path += 'Q' + x1 + ' ' + y1 + ',' + x + ' ' + y;
		      this.pen.x = x;
		      this.pen.y = y;
		      return this;
		    }
		
		    // This is an attempt (hack) to simulate the HTML5 canvas
		    // arc method.
		
		  }, {
		    key: 'arc',
		    value: function arc(x, y, radius, startAngle, endAngle, antiClockwise) {
		      function normalizeAngle(angle) {
		        while (angle < 0) {
		          angle += Math.PI * 2;
		        }
		
		        while (angle > Math.PI * 2) {
		          angle -= Math.PI * 2;
		        }
		        return angle;
		      }
		
		      startAngle = normalizeAngle(startAngle);
		      endAngle = normalizeAngle(endAngle);
		
		      if (startAngle > endAngle) {
		        var tmp = startAngle;
		        startAngle = endAngle;
		        endAngle = tmp;
		        antiClockwise = !antiClockwise;
		      }
		
		      var delta = endAngle - startAngle;
		
		      if (delta > Math.PI) {
		        this.arcHelper(x, y, radius, startAngle, startAngle + delta / 2, antiClockwise);
		        this.arcHelper(x, y, radius, startAngle + delta / 2, endAngle, antiClockwise);
		      } else {
		        this.arcHelper(x, y, radius, startAngle, endAngle, antiClockwise);
		      }
		      return this;
		    }
		  }, {
		    key: 'arcHelper',
		    value: function arcHelper(x, y, radius, startAngle, endAngle, antiClockwise) {
		      var x1 = x + radius * Math.cos(startAngle);
		      var y1 = y + radius * Math.sin(startAngle);
		
		      var x2 = x + radius * Math.cos(endAngle);
		      var y2 = y + radius * Math.sin(endAngle);
		
		      var largeArcFlag = 0;
		      var sweepFlag = 0;
		      if (antiClockwise) {
		        sweepFlag = 1;
		        if (endAngle - startAngle < Math.PI) {
		          largeArcFlag = 1;
		        }
		      } else if (endAngle - startAngle > Math.PI) {
		        largeArcFlag = 1;
		      }
		
		      this.path += 'M' + x1 + ' ' + y1 + ' A' + radius + ' ' + radius + ' 0 ' + largeArcFlag + ' ' + sweepFlag + ' ' + x2 + ' ' + y2 + 'M' + this.pen.x + ' ' + this.pen.y;
		    }
		  }, {
		    key: 'closePath',
		    value: function closePath() {
		      this.path += 'Z';
		
		      return this;
		    }
		
		    // Adapted from the source for Raphael's Element.glow
		
		  }, {
		    key: 'glow',
		    value: function glow() {
		      // Calculate the width & paths of the glow:
		      if (this.shadow_attributes.width > 0) {
		        var sa = this.shadow_attributes;
		        var num_paths = sa.width / 2;
		        // Stroke at varying widths to create effect of gaussian blur:
		        for (var i = 1; i <= num_paths; i++) {
		          var attributes = {
		            stroke: sa.color,
		            'stroke-linejoin': 'round',
		            'stroke-linecap': 'round',
		            'stroke-width': +(sa.width * 0.4 / num_paths * i).toFixed(3),
		            opacity: +((sa.opacity || 0.3) / num_paths).toFixed(3)
		          };
		
		          var path = this.create('path');
		          attributes.d = this.path;
		          this.applyAttributes(path, attributes);
		          this.add(path);
		        }
		      }
		      return this;
		    }
		  }, {
		    key: 'fill',
		    value: function fill(attributes) {
		      // If our current path is set to glow, make it glow
		      this.glow();
		
		      var path = this.create('path');
		      if (typeof attributes === 'undefined') {
		        attributes = {};
		        _vex.Vex.Merge(attributes, this.attributes);
		        attributes.stroke = 'none';
		      }
		
		      attributes.d = this.path;
		
		      this.applyAttributes(path, attributes);
		      this.add(path);
		      return this;
		    }
		  }, {
		    key: 'stroke',
		    value: function stroke() {
		      // If our current path is set to glow, make it glow.
		      this.glow();
		
		      var path = this.create('path');
		      var attributes = {};
		      _vex.Vex.Merge(attributes, this.attributes);
		      attributes.fill = 'none';
		      attributes['stroke-width'] = this.lineWidth;
		      attributes.d = this.path;
		
		      this.applyAttributes(path, attributes);
		      this.add(path);
		      return this;
		    }
		
		    // ## Text Methods:
		
		  }, {
		    key: 'measureText',
		    value: function measureText(text) {
		      var txt = this.create('text');
		      if (typeof txt.getBBox !== 'function') {
		        return { x: 0, y: 0, width: 0, height: 0 };
		      }
		
		      txt.textContent = text;
		      this.applyAttributes(txt, this.attributes);
		
		      // Temporarily add it to the document for measurement.
		      this.svg.appendChild(txt);
		
		      var bbox = txt.getBBox();
		      if (this.ie && text !== '' && this.attributes['font-style'] === 'italic') {
		        bbox = this.ieMeasureTextFix(bbox, text);
		      }
		
		      this.svg.removeChild(txt);
		      return bbox;
		    }
		  }, {
		    key: 'ieMeasureTextFix',
		    value: function ieMeasureTextFix(bbox) {
		      // Internet Explorer over-pads text in italics,
		      // resulting in giant width estimates for measureText.
		      // To fix this, we use this formula, tested against
		      // ie 11:
		      // overestimate (in pixels) = FontSize(in pt) * 1.196 + 1.96
		      // And then subtract the overestimate from calculated width.
		
		      var fontSize = Number(this.fontSize);
		      var m = 1.196;
		      var b = 1.9598;
		      var widthCorrection = m * fontSize + b;
		      var width = bbox.width - widthCorrection;
		      var height = bbox.height - 1.5;
		
		      // Get non-protected copy:
		      var box = {
		        x: bbox.x,
		        y: bbox.y,
		        width: width,
		        height: height
		      };
		
		      return box;
		    }
		  }, {
		    key: 'fillText',
		    value: function fillText(text, x, y) {
		      var attributes = {};
		      _vex.Vex.Merge(attributes, this.attributes);
		      attributes.stroke = 'none';
		      attributes.x = x;
		      attributes.y = y;
		
		      var txt = this.create('text');
		      txt.textContent = text;
		      this.applyAttributes(txt, attributes);
		      this.add(txt);
		    }
		  }, {
		    key: 'save',
		    value: function save() {
		      // TODO(mmuthanna): State needs to be deep-copied.
		      this.state_stack.push({
		        state: {
		          'font-family': this.state['font-family'],
		          'font-weight': this.state['font-weight'],
		          'font-style': this.state['font-style'],
		          'font-size': this.state['font-size']
		        },
		        attributes: {
		          'font-family': this.attributes['font-family'],
		          'font-weight': this.attributes['font-weight'],
		          'font-style': this.attributes['font-style'],
		          'font-size': this.attributes['font-size'],
		          fill: this.attributes.fill,
		          stroke: this.attributes.stroke,
		          'stroke-width': this.attributes['stroke-width'],
		          'stroke-dasharray': this.attributes['stroke-dasharray']
		        },
		        shadow_attributes: {
		          width: this.shadow_attributes.width,
		          color: this.shadow_attributes.color
		        }
		      });
		      return this;
		    }
		  }, {
		    key: 'restore',
		    value: function restore() {
		      // TODO(0xfe): State needs to be deep-restored.
		      var state = this.state_stack.pop();
		      this.state['font-family'] = state.state['font-family'];
		      this.state['font-weight'] = state.state['font-weight'];
		      this.state['font-style'] = state.state['font-style'];
		      this.state['font-size'] = state.state['font-size'];
		
		      this.attributes['font-family'] = state.attributes['font-family'];
		      this.attributes['font-weight'] = state.attributes['font-weight'];
		      this.attributes['font-style'] = state.attributes['font-style'];
		      this.attributes['font-size'] = state.attributes['font-size'];
		
		      this.attributes.fill = state.attributes.fill;
		      this.attributes.stroke = state.attributes.stroke;
		      this.attributes['stroke-width'] = state.attributes['stroke-width'];
		      this.attributes['stroke-dasharray'] = state.attributes['stroke-dasharray'];
		
		      this.shadow_attributes.width = state.shadow_attributes.width;
		      this.shadow_attributes.color = state.shadow_attributes.color;
		      return this;
		    }
		  }]);
	
		  return SVGContext;
		}();
	
	/***/ },
	/* 14 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Formatter = undefined;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements the formatting and layout algorithms that are used
		// to position notes in a voice. The algorithm can align multiple voices both
		// within a stave, and across multiple staves.
		//
		// To do this, the formatter breaks up voices into a grid of rational-valued
		// `ticks`, to which each note is assigned. Then, minimum widths are assigned
		// to each tick based on the widths of the notes and modifiers in that tick. This
		// establishes the smallest amount of space required for each tick.
		//
		// Finally, the formatter distributes the left over space proportionally to
		// all the ticks, setting the `x` values of the notes in each tick.
		//
		// See `tests/formatter_tests.js` for usage examples. The helper functions included
		// here (`FormatAndDraw`, `FormatAndDrawTab`) also serve as useful usage examples.
		
		var _vex = __webpack_require__(1);
		
		var _beam = __webpack_require__(15);
		
		var _tables = __webpack_require__(2);
		
		var _fraction = __webpack_require__(3);
		
		var _voice = __webpack_require__(18);
		
		var _staveconnector = __webpack_require__(19);
		
		var _stavenote = __webpack_require__(20);
		
		var _note = __webpack_require__(22);
		
		var _modifiercontext = __webpack_require__(27);
		
		var _tickcontext = __webpack_require__(39);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// To enable logging for this class. Set `Vex.Flow.Formatter.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Formatter.DEBUG) _vex.Vex.L('Vex.Flow.Formatter', args);
		}
		
		// Helper function to locate the next non-rest note(s).
		function lookAhead(notes, restLine, i, compare) {
		  // If no valid next note group, nextRestLine is same as current.
		  var nextRestLine = restLine;
		
		  // Get the rest line for next valid non-rest note group.
		  for (i += 1; i < notes.length; i += 1) {
		    var note = notes[i];
		    if (!note.isRest() && !note.shouldIgnoreTicks()) {
		      nextRestLine = note.getLineForRest();
		      break;
		    }
		  }
		
		  // Locate the mid point between two lines.
		  if (compare && restLine !== nextRestLine) {
		    var top = Math.max(restLine, nextRestLine);
		    var bot = Math.min(restLine, nextRestLine);
		    nextRestLine = _vex.Vex.MidLine(top, bot);
		  }
		  return nextRestLine;
		}
		
		// Take an array of `voices` and place aligned tickables in the same context. Returns
		// a mapping from `tick` to `ContextType`, a list of `tick`s, and the resolution
		// multiplier.
		//
		// Params:
		// * `voices`: Array of `Voice` instances.
		// * `ContextType`: A context class (e.g., `ModifierContext`, `TickContext`)
		// * `addToContext`: Function to add tickable to context.
		function createContexts(voices, ContextType, addToContext) {
		  if (!voices || !voices.length) {
		    throw new _vex.Vex.RERR('BadArgument', 'No voices to format');
		  }
		
		  // Find out highest common multiple of resolution multipliers.
		  // The purpose of this is to find out a common denominator
		  // for all fractional tick values in all tickables of all voices,
		  // so that the values can be expanded and the numerator used
		  // as an integer tick value.
		  var totalTicks = voices[0].getTotalTicks();
		  var resolutionMultiplier = voices.reduce(function (resolutionMultiplier, voice) {
		    if (!voice.getTotalTicks().equals(totalTicks)) {
		      throw new _vex.Vex.RERR('TickMismatch', 'Voices should have same total note duration in ticks.');
		    }
		
		    if (voice.getMode() === _voice.Voice.Mode.STRICT && !voice.isComplete()) {
		      throw new _vex.Vex.RERR('IncompleteVoice', 'Voice does not have enough notes.');
		    }
		
		    return Math.max(resolutionMultiplier, _fraction.Fraction.LCM(resolutionMultiplier, voice.getResolutionMultiplier()));
		  }, 1);
		
		  // Initialize tick maps.
		  var tickToContextMap = {};
		  var tickList = [];
		  var contexts = [];
		
		  // For each voice, extract notes and create a context for every
		  // new tick that hasn't been seen before.
		  voices.forEach(function (voice) {
		    // Use resolution multiplier as denominator to expand ticks
		    // to suitable integer values, so that no additional expansion
		    // of fractional tick values is needed.
		    var ticksUsed = new _fraction.Fraction(0, resolutionMultiplier);
		
		    voice.getTickables().forEach(function (tickable) {
		      var integerTicks = ticksUsed.numerator;
		
		      // If we have no tick context for this tick, create one.
		      if (!tickToContextMap[integerTicks]) {
		        var newContext = new ContextType();
		        contexts.push(newContext);
		        tickToContextMap[integerTicks] = newContext;
		      }
		
		      // Add this tickable to the TickContext.
		      addToContext(tickable, tickToContextMap[integerTicks]);
		
		      // Maintain a sorted list of tick contexts.
		      tickList.push(integerTicks);
		      ticksUsed.add(tickable.getTicks());
		    });
		  });
		
		  return {
		    map: tickToContextMap,
		    array: contexts,
		    list: _vex.Vex.SortAndUnique(tickList, function (a, b) {
		      return a - b;
		    }, function (a, b) {
		      return a === b;
		    }),
		    resolutionMultiplier: resolutionMultiplier
		  };
		}
		
		var Formatter = exports.Formatter = function () {
		  _createClass(Formatter, null, [{
		    key: 'SimpleFormat',
		
		    // Helper function to layout "notes" one after the other without
		    // regard for proportions. Useful for tests and debugging.
		    value: function SimpleFormat(notes) {
		      var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
		
		      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
		          _ref$paddingBetween = _ref.paddingBetween,
		          paddingBetween = _ref$paddingBetween === undefined ? 10 : _ref$paddingBetween;
		
		      notes.reduce(function (x, note) {
		        note.addToModifierContext(new _modifiercontext.ModifierContext());
		        var tick = new _tickcontext.TickContext().addTickable(note).preFormat();
		        var extra = tick.getExtraPx();
		        tick.setX(x + extra.left);
		
		        return x + tick.getWidth() + extra.right + paddingBetween;
		      }, x);
		    }
		
		    // Helper function to plot formatter debug info.
		
		  }, {
		    key: 'plotDebugging',
		    value: function plotDebugging(ctx, formatter, xPos, y1, y2) {
		      var x = xPos + _note.Note.STAVEPADDING;
		      var contextGaps = formatter.contextGaps;
		      function stroke(x1, x2, color) {
		        ctx.beginPath();
		        ctx.setStrokeStyle(color);
		        ctx.setFillStyle(color);
		        ctx.setLineWidth(1);
		        ctx.fillRect(x1, y1, x2 - x1, y2 - y1);
		      }
		
		      ctx.save();
		      ctx.setFont('Arial', 8, '');
		
		      contextGaps.gaps.forEach(function (gap) {
		        stroke(x + gap.x1, x + gap.x2, '#aaa');
		        // Vex.drawDot(ctx, xPos + gap.x1, yPos, 'blue');
		        ctx.fillText(Math.round(gap.x2 - gap.x1), x + gap.x1, y2 + 12);
		      });
		
		      ctx.fillText(Math.round(contextGaps.total) + 'px', x - 20, y2 + 12);
		      ctx.setFillStyle('red');
		
		      ctx.fillText('Loss: ' + formatter.lossHistory.map(function (loss) {
		        return Math.round(loss);
		      }), x - 20, y2 + 22);
		      ctx.restore();
		    }
		
		    // Helper function to format and draw a single voice. Returns a bounding
		    // box for the notation.
		    //
		    // Parameters:
		    // * `ctx` - The rendering context
		    // * `stave` - The stave to which to draw (`Stave` or `TabStave`)
		    // * `notes` - Array of `Note` instances (`StaveNote`, `TextNote`, `TabNote`, etc.)
		    // * `params` - One of below:
		    //    * Setting `autobeam` only `(context, stave, notes, true)` or
		    //      `(ctx, stave, notes, {autobeam: true})`
		    //    * Setting `align_rests` a struct is needed `(context, stave, notes, {align_rests: true})`
		    //    * Setting both a struct is needed `(context, stave, notes, {
		    //      autobeam: true, align_rests: true})`
		    //
		    // `autobeam` automatically generates beams for the notes.
		    // `align_rests` aligns rests with nearby notes.
		
		  }, {
		    key: 'FormatAndDraw',
		    value: function FormatAndDraw(ctx, stave, notes, params) {
		      var options = {
		        auto_beam: false,
		        align_rests: false
		      };
		
		      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
		        _vex.Vex.Merge(options, params);
		      } else if (typeof params === 'boolean') {
		        options.auto_beam = params;
		      }
		
		      // Start by creating a voice and adding all the notes to it.
		      var voice = new _voice.Voice(_tables.Flow.TIME4_4).setMode(_voice.Voice.Mode.SOFT).addTickables(notes);
		
		      // Then create beams, if requested.
		      var beams = options.auto_beam ? _beam.Beam.applyAndGetBeams(voice) : [];
		
		      // Instantiate a `Formatter` and format the notes.
		      new Formatter().joinVoices([voice], { align_rests: options.align_rests }).formatToStave([voice], stave, { align_rests: options.align_rests, stave: stave });
		
		      // Render the voice and beams to the stave.
		      voice.setStave(stave).draw(ctx, stave);
		      beams.forEach(function (beam) {
		        return beam.setContext(ctx).draw();
		      });
		
		      // Return the bounding box of the voice.
		      return voice.getBoundingBox();
		    }
		
		    // Helper function to format and draw aligned tab and stave notes in two
		    // separate staves.
		    //
		    // Parameters:
		    // * `ctx` - The rendering context
		    // * `tabstave` - A `TabStave` instance on which to render `TabNote`s.
		    // * `stave` - A `Stave` instance on which to render `Note`s.
		    // * `notes` - Array of `Note` instances for the stave (`StaveNote`, `BarNote`, etc.)
		    // * `tabnotes` - Array of `Note` instances for the tab stave (`TabNote`, `BarNote`, etc.)
		    // * `autobeam` - Automatically generate beams.
		    // * `params` - A configuration object:
		    //    * `autobeam` automatically generates beams for the notes.
		    //    * `align_rests` aligns rests with nearby notes.
		
		  }, {
		    key: 'FormatAndDrawTab',
		    value: function FormatAndDrawTab(ctx, tabstave, stave, tabnotes, notes, autobeam, params) {
		      var opts = {
		        auto_beam: autobeam,
		        align_rests: false
		      };
		
		      if ((typeof params === 'undefined' ? 'undefined' : _typeof(params)) === 'object') {
		        _vex.Vex.Merge(opts, params);
		      } else if (typeof params === 'boolean') {
		        opts.auto_beam = params;
		      }
		
		      // Create a `4/4` voice for `notes`.
		      var notevoice = new _voice.Voice(_tables.Flow.TIME4_4).setMode(_voice.Voice.Mode.SOFT).addTickables(notes);
		
		      // Create a `4/4` voice for `tabnotes`.
		      var tabvoice = new _voice.Voice(_tables.Flow.TIME4_4).setMode(_voice.Voice.Mode.SOFT).addTickables(tabnotes);
		
		      // Then create beams, if requested.
		      var beams = opts.auto_beam ? _beam.Beam.applyAndGetBeams(notevoice) : [];
		
		      // Instantiate a `Formatter` and align tab and stave notes.
		      new Formatter().joinVoices([notevoice], { align_rests: opts.align_rests }).joinVoices([tabvoice]).formatToStave([notevoice, tabvoice], stave, { align_rests: opts.align_rests });
		
		      // Render voices and beams to staves.
		      notevoice.draw(ctx, stave);
		      tabvoice.draw(ctx, tabstave);
		      beams.forEach(function (beam) {
		        return beam.setContext(ctx).draw();
		      });
		
		      // Draw a connector between tab and note staves.
		      new _staveconnector.StaveConnector(stave, tabstave).setContext(ctx).draw();
		    }
		
		    // Auto position rests based on previous/next note positions.
		    //
		    // Params:
		    // * `notes`: An array of notes.
		    // * `alignAllNotes`: If set to false, only aligns non-beamed notes.
		    // * `alignTuplets`: If set to false, ignores tuplets.
		
		  }, {
		    key: 'AlignRestsToNotes',
		    value: function AlignRestsToNotes(notes, alignAllNotes, alignTuplets) {
		      notes.forEach(function (note, index) {
		        if (note instanceof _stavenote.StaveNote && note.isRest()) {
		          if (note.tuplet && !alignTuplets) return;
		
		          // If activated rests not on default can be rendered as specified.
		          var position = note.getGlyph().position.toUpperCase();
		          if (position !== 'R/4' && position !== 'B/4') return;
		
		          if (alignAllNotes || note.beam != null) {
		            // Align rests with previous/next notes.
		            var props = note.getKeyProps()[0];
		            if (index === 0) {
		              props.line = lookAhead(notes, props.line, index, false);
		              note.setKeyLine(0, props.line);
		            } else if (index > 0 && index < notes.length) {
		              // If previous note is a rest, use its line number.
		              var restLine = void 0;
		              if (notes[index - 1].isRest()) {
		                restLine = notes[index - 1].getKeyProps()[0].line;
		                props.line = restLine;
		              } else {
		                restLine = notes[index - 1].getLineForRest();
		                // Get the rest line for next valid non-rest note group.
		                props.line = lookAhead(notes, restLine, index, true);
		              }
		              note.setKeyLine(0, props.line);
		            }
		          }
		        }
		      });
		
		      return this;
		    }
		  }]);
		
		  function Formatter() {
		    _classCallCheck(this, Formatter);
		
		    // Minimum width required to render all the notes in the voices.
		    this.minTotalWidth = 0;
		
		    // This is set to `true` after `minTotalWidth` is calculated.
		    this.hasMinTotalWidth = false;
		
		    // Total number of ticks in the voice.
		    this.totalTicks = new _fraction.Fraction(0, 1);
		
		    // Arrays of tick and modifier contexts.
		    this.tickContexts = null;
		    this.modiferContexts = null;
		
		    // Gaps between contexts, for free movement of notes post
		    // formatting.
		    this.contextGaps = {
		      total: 0,
		      gaps: []
		    };
		
		    this.voices = [];
		  }
		
		  // Find all the rests in each of the `voices` and align them
		  // to neighboring notes. If `alignAllNotes` is `false`, then only
		  // align non-beamed notes.
		
		
		  _createClass(Formatter, [{
		    key: 'alignRests',
		    value: function alignRests(voices, alignAllNotes) {
		      if (!voices || !voices.length) {
		        throw new _vex.Vex.RERR('BadArgument', 'No voices to format rests');
		      }
		
		      voices.forEach(function (voice) {
		        return Formatter.AlignRestsToNotes(voice.getTickables(), alignAllNotes);
		      });
		    }
		
		    // Calculate the minimum width required to align and format `voices`.
		
		  }, {
		    key: 'preCalculateMinTotalWidth',
		    value: function preCalculateMinTotalWidth(voices) {
		      // Cache results.
		      if (this.hasMinTotalWidth) return this.minTotalWidth;
		
		      // Create tick contexts if not already created.
		      if (!this.tickContexts) {
		        if (!voices) {
		          throw new _vex.Vex.RERR('BadArgument', "'voices' required to run preCalculateMinTotalWidth");
		        }
		
		        this.createTickContexts(voices);
		      }
		
		      var _tickContexts = this.tickContexts,
		          contextList = _tickContexts.list,
		          contextMap = _tickContexts.map;
		
		      // Go through each tick context and calculate total width.
		
		      this.minTotalWidth = contextList.map(function (tick) {
		        var context = contextMap[tick];
		        context.preFormat();
		        return context.getWidth();
		      }).reduce(function (a, b) {
		        return a + b;
		      }, 0);
		
		      this.hasMinTotalWidth = true;
		
		      return this.minTotalWidth;
		    }
		
		    // Get minimum width required to render all voices. Either `format` or
		    // `preCalculateMinTotalWidth` must be called before this method.
		
		  }, {
		    key: 'getMinTotalWidth',
		    value: function getMinTotalWidth() {
		      if (!this.hasMinTotalWidth) {
		        throw new _vex.Vex.RERR('NoMinTotalWidth', "Call 'preCalculateMinTotalWidth' or 'preFormat' before calling 'getMinTotalWidth'");
		      }
		
		      return this.minTotalWidth;
		    }
		
		    // Create `ModifierContext`s for each tick in `voices`.
		
		  }, {
		    key: 'createModifierContexts',
		    value: function createModifierContexts(voices) {
		      var contexts = createContexts(voices, _modifiercontext.ModifierContext, function (tickable, context) {
		        return tickable.addToModifierContext(context);
		      });
		
		      this.modiferContexts = contexts;
		      return contexts;
		    }
		
		    // Create `TickContext`s for each tick in `voices`. Also calculate the
		    // total number of ticks in voices.
		
		  }, {
		    key: 'createTickContexts',
		    value: function createTickContexts(voices) {
		      var contexts = createContexts(voices, _tickcontext.TickContext, function (tickable, context) {
		        return context.addTickable(tickable);
		      });
		
		      contexts.array.forEach(function (context) {
		        context.tContexts = contexts.array;
		      });
		
		      this.totalTicks = voices[0].getTicksUsed().clone();
		      this.tickContexts = contexts;
		      return contexts;
		    }
		
		    // This is the core formatter logic. Format voices and justify them
		    // to `justifyWidth` pixels. `renderingContext` is required to justify elements
		    // that can't retreive widths without a canvas. This method sets the `x` positions
		    // of all the tickables/notes in the formatter.
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      var justifyWidth = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
		      var renderingContext = arguments[1];
		
		      var _this = this;
		
		      var voices = arguments[2];
		      var stave = arguments[3];
		
		      // Initialize context maps.
		      var contexts = this.tickContexts;
		      var contextList = contexts.list,
		          contextMap = contexts.map,
		          resolutionMultiplier = contexts.resolutionMultiplier;
		
		      // If voices and a stave were provided, set the Stave for each voice
		      // and preFormat to apply Y values to the notes;
		
		      if (voices && stave) {
		        voices.forEach(function (voice) {
		          return voice.setStave(stave).preFormat();
		        });
		      }
		
		      // Now distribute the ticks to each tick context, and assign them their
		      // own X positions.
		      var x = 0;
		      var shift = 0;
		      var centerX = justifyWidth / 2;
		      this.minTotalWidth = 0;
		
		      // Pass 1: Give each note maximum width requested by context.
		      contextList.forEach(function (tick) {
		        var context = contextMap[tick];
		        if (renderingContext) context.setContext(renderingContext);
		
		        // Make sure that all tickables in this context have calculated their
		        // space requirements.
		        context.preFormat();
		
		        var width = context.getWidth();
		        _this.minTotalWidth += width;
		
		        var metrics = context.getMetrics();
		        x = x + shift + metrics.extraLeftPx;
		        context.setX(x);
		
		        // Calculate shift for the next tick.
		        shift = width - metrics.extraLeftPx;
		      });
		
		      this.minTotalWidth = x + shift;
		      this.hasMinTotalWidth = true;
		
		      // No justification needed. End formatting.
		      if (justifyWidth <= 0) return;
		
		      // Pass 2: Take leftover width, and distribute it to proportionately to
		      // all notes.
		      var remainingX = justifyWidth - this.minTotalWidth;
		      var leftoverPxPerTick = remainingX / (this.totalTicks.value() * resolutionMultiplier);
		      var spaceAccum = 0;
		
		      contextList.forEach(function (tick, index) {
		        var prevTick = contextList[index - 1] || 0;
		        var context = contextMap[tick];
		        var tickSpace = (tick - prevTick) * leftoverPxPerTick;
		
		        spaceAccum += tickSpace;
		        context.setX(context.getX() + spaceAccum);
		
		        // Move center aligned tickables to middle
		        context.getCenterAlignedTickables().forEach(function (tickable) {
		          // eslint-disable-line
		          tickable.center_x_shift = centerX - context.getX();
		        });
		      });
		
		      // Just one context. Done formatting.
		      if (contextList.length === 1) return;
		
		      this.justifyWidth = justifyWidth;
		      this.lossHistory = [];
		      this.evaluate();
		    }
		
		    // Calculate the total cost of this formatting decision.
		
		  }, {
		    key: 'evaluate',
		    value: function evaluate() {
		      var _this2 = this;
		
		      var justifyWidth = this.justifyWidth;
		      // Calculate available slack per tick context. This works out how much freedom
		      // to move a context has in either direction, without affecting other notes.
		      this.contextGaps = { total: 0, gaps: [] };
		      this.tickContexts.list.forEach(function (tick, index) {
		        if (index === 0) return;
		        var prevTick = _this2.tickContexts.list[index - 1];
		        var prevContext = _this2.tickContexts.map[prevTick];
		        var context = _this2.tickContexts.map[tick];
		        var prevMetrics = prevContext.getMetrics();
		
		        var insideRightEdge = prevContext.getX() + prevMetrics.width;
		        var insideLeftEdge = context.getX();
		        var gap = insideLeftEdge - insideRightEdge;
		        _this2.contextGaps.total += gap;
		        _this2.contextGaps.gaps.push({ x1: insideRightEdge, x2: insideLeftEdge });
		
		        // Tell the tick contexts how much they can reposition themselves.
		        context.getFormatterMetrics().freedom.left = gap;
		        prevContext.getFormatterMetrics().freedom.right = gap;
		      });
		
		      // Calculate mean distance in each voice for each duration type, then calculate
		      // how far each note is from the mean.
		      var durationStats = this.durationStats = {};
		
		      function updateStats(duration, space) {
		        var stats = durationStats[duration];
		        if (stats === undefined) {
		          durationStats[duration] = { mean: space, count: 1 };
		        } else {
		          stats.count += 1;
		          stats.mean = (stats.mean + space) / 2;
		        }
		      }
		
		      this.voices.forEach(function (voice) {
		        voice.getTickables().forEach(function (note, i, notes) {
		          var duration = note.getTicks().clone().simplify().toString();
		          var metrics = note.getMetrics();
		          var formatterMetrics = note.getFormatterMetrics();
		          var leftNoteEdge = note.getX() + metrics.noteWidth + metrics.modRightPx + metrics.extraRightPx;
		          var space = 0;
		
		          if (i < notes.length - 1) {
		            var rightNote = notes[i + 1];
		            var rightMetrics = rightNote.getMetrics();
		            var rightNoteEdge = rightNote.getX() - rightMetrics.modLeftPx - rightMetrics.extraLeftPx;
		
		            space = rightNoteEdge - leftNoteEdge;
		            formatterMetrics.space.used = rightNote.getX() - note.getX();
		            rightNote.getFormatterMetrics().freedom.left = space;
		          } else {
		            space = justifyWidth - leftNoteEdge;
		            formatterMetrics.space.used = justifyWidth - note.getX();
		          }
		
		          formatterMetrics.freedom.right = space;
		          updateStats(duration, formatterMetrics.space.used);
		        });
		      });
		
		      // Calculate how much each note deviates from the mean. Loss function is square
		      // root of the sum of squared deviations.
		      var totalDeviation = 0;
		      this.voices.forEach(function (voice) {
		        voice.getTickables().forEach(function (note) {
		          var duration = note.getTicks().clone().simplify().toString();
		          var metrics = note.getFormatterMetrics();
		          metrics.iterations += 1;
		          metrics.space.deviation = metrics.space.used - durationStats[duration].mean;
		          metrics.duration = duration;
		          metrics.space.mean = durationStats[duration].mean;
		
		          totalDeviation += Math.pow(durationStats[duration].mean, 2);
		        });
		      });
		
		      this.totalCost = Math.sqrt(totalDeviation);
		      this.lossHistory.push(this.totalCost);
		      return this;
		    }
		
		    // Run a single iteration of rejustification. At a high level, this method calculates
		    // the overall "loss" (or cost) of this layout, and repositions tickcontexts in an
		    // attempt to reduce the cost. You can call this method multiple times until it finds
		    // and oscillates around a global minimum.
		
		  }, {
		    key: 'tune',
		    value: function tune() {
		      var _this3 = this;
		
		      var sum = function sum(means) {
		        return means.reduce(function (a, b) {
		          return a + b;
		        });
		      };
		
		      // Move `current` tickcontext by `shift` pixels, and adjust the freedom
		      // on adjacent tickcontexts.
		      function move(current, prev, next, shift) {
		        current.setX(current.getX() + shift);
		        current.getFormatterMetrics().freedom.left += shift;
		        current.getFormatterMetrics().freedom.right -= shift;
		
		        if (prev) prev.getFormatterMetrics().freedom.right += shift;
		        if (next) next.getFormatterMetrics().freedom.left -= shift;
		      }
		
		      var shift = 0;
		      this.tickContexts.list.forEach(function (tick, index, list) {
		        var context = _this3.tickContexts.map[tick];
		        var prevContext = index > 0 ? _this3.tickContexts.map[list[index - 1]] : null;
		        var nextContext = index < list.length - 1 ? _this3.tickContexts.map[list[index + 1]] : null;
		
		        move(context, prevContext, nextContext, shift);
		
		        var cost = -sum(context.getTickables().map(function (t) {
		          return t.getFormatterMetrics().space.deviation;
		        }));
		
		        if (cost > 0) {
		          shift = -Math.min(context.getFormatterMetrics().freedom.right, Math.abs(cost));
		        } else if (cost < 0) {
		          if (nextContext) {
		            shift = Math.min(nextContext.getFormatterMetrics().freedom.right, Math.abs(cost));
		          } else {
		            shift = 0;
		          }
		        }
		
		        var minShift = Math.min(5, Math.abs(shift));
		        shift = shift > 0 ? minShift : -minShift;
		      });
		
		      return this.evaluate();
		    }
		
		    // This is the top-level call for all formatting logic completed
		    // after `x` *and* `y` values have been computed for the notes
		    // in the voices.
		
		  }, {
		    key: 'postFormat',
		    value: function postFormat() {
		      var postFormatContexts = function postFormatContexts(contexts) {
		        return contexts.list.forEach(function (tick) {
		          return contexts.map[tick].postFormat();
		        });
		      };
		
		      postFormatContexts(this.modiferContexts);
		      postFormatContexts(this.tickContexts);
		
		      return this;
		    }
		
		    // Take all `voices` and create `ModifierContext`s out of them. This tells
		    // the formatters that the voices belong on a single stave.
		
		  }, {
		    key: 'joinVoices',
		    value: function joinVoices(voices) {
		      this.createModifierContexts(voices);
		      this.hasMinTotalWidth = false;
		      return this;
		    }
		
		    // Align rests in voices, justify the contexts, and position the notes
		    // so voices are aligned and ready to render onto the stave. This method
		    // mutates the `x` positions of all tickables in `voices`.
		    //
		    // Voices are full justified to fit in `justifyWidth` pixels.
		    //
		    // Set `options.context` to the rendering context. Set `options.align_rests`
		    // to true to enable rest alignment.
		
		  }, {
		    key: 'format',
		    value: function format(voices, justifyWidth, options) {
		      var opts = {
		        align_rests: false,
		        context: null,
		        stave: null
		      };
		
		      _vex.Vex.Merge(opts, options);
		      this.voices = voices;
		      this.alignRests(voices, opts.align_rests);
		      this.createTickContexts(voices);
		      this.preFormat(justifyWidth, opts.context, voices, opts.stave);
		
		      // Only postFormat if a stave was supplied for y value formatting
		      if (opts.stave) this.postFormat();
		
		      return this;
		    }
		
		    // This method is just like `format` except that the `justifyWidth` is inferred
		    // from the `stave`.
		
		  }, {
		    key: 'formatToStave',
		    value: function formatToStave(voices, stave, options) {
		      var justifyWidth = stave.getNoteEndX() - stave.getNoteStartX() - 10;
		      L('Formatting voices to width: ', justifyWidth);
		      var opts = { context: stave.getContext() };
		      _vex.Vex.Merge(opts, options);
		      return this.format(voices, justifyWidth, opts);
		    }
		  }]);
	
		  return Formatter;
		}();
	
	/***/ },
	/* 15 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Beam = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _element = __webpack_require__(5);
		
		var _fraction = __webpack_require__(3);
		
		var _tuplet = __webpack_require__(16);
		
		var _stem = __webpack_require__(17);
		
		function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements `Beams` that span over a set of `StemmableNotes`.
		
		function calculateStemDirection(notes) {
		  var lineSum = 0;
		  notes.forEach(function (note) {
		    if (note.keyProps) {
		      note.keyProps.forEach(function (keyProp) {
		        lineSum += keyProp.line - 3;
		      });
		    }
		  });
		
		  if (lineSum >= 0) {
		    return _stem.Stem.DOWN;
		  }
		  return _stem.Stem.UP;
		}
		
		var getStemSlope = function getStemSlope(firstNote, lastNote) {
		  var firstStemTipY = firstNote.getStemExtents().topY;
		  var firstStemX = firstNote.getStemX();
		  var lastStemTipY = lastNote.getStemExtents().topY;
		  var lastStemX = lastNote.getStemX();
		  return (lastStemTipY - firstStemTipY) / (lastStemX - firstStemX);
		};
		
		var Beam = exports.Beam = function (_Element) {
		  _inherits(Beam, _Element);
		
		  _createClass(Beam, null, [{
		    key: 'getDefaultBeamGroups',
		
		    // Gets the default beam groups for a provided time signature.
		    // Attempts to guess if the time signature is not found in table.
		    // Currently this is fairly naive.
		    value: function getDefaultBeamGroups(time_sig) {
		      if (!time_sig || time_sig === 'c') {
		        time_sig = '4/4';
		      }
		
		      var defaults = {
		        '1/2': ['1/2'],
		        '2/2': ['1/2'],
		        '3/2': ['1/2'],
		        '4/2': ['1/2'],
		
		        '1/4': ['1/4'],
		        '2/4': ['1/4'],
		        '3/4': ['1/4'],
		        '4/4': ['1/4'],
		
		        '1/8': ['1/8'],
		        '2/8': ['2/8'],
		        '3/8': ['3/8'],
		        '4/8': ['2/8'],
		
		        '1/16': ['1/16'],
		        '2/16': ['2/16'],
		        '3/16': ['3/16'],
		        '4/16': ['2/16']
		      };
		
		      var groups = defaults[time_sig];
		
		      if (groups === undefined) {
		        // If no beam groups found, naively determine
		        // the beam groupings from the time signature
		        var beatTotal = parseInt(time_sig.split('/')[0], 10);
		        var beatValue = parseInt(time_sig.split('/')[1], 10);
		
		        var tripleMeter = beatTotal % 3 === 0;
		
		        if (tripleMeter) {
		          return [new _fraction.Fraction(3, beatValue)];
		        } else if (beatValue > 4) {
		          return [new _fraction.Fraction(2, beatValue)];
		        } else if (beatValue <= 4) {
		          return [new _fraction.Fraction(1, beatValue)];
		        }
		      } else {
		        return groups.map(function (group) {
		          return new _fraction.Fraction().parse(group);
		        });
		      }
		
		      return [new _fraction.Fraction(1, 4)];
		    }
		
		    // A helper function to automatically build basic beams for a voice. For more
		    // complex auto-beaming use `Beam.generateBeams()`.
		    //
		    // Parameters:
		    // * `voice` - The voice to generate the beams for
		    // * `stem_direction` - A stem direction to apply to the entire voice
		    // * `groups` - An array of `Fraction` representing beat groupings for the beam
		
		  }, {
		    key: 'applyAndGetBeams',
		    value: function applyAndGetBeams(voice, stem_direction, groups) {
		      return Beam.generateBeams(voice.getTickables(), {
		        groups: groups,
		        stem_direction: stem_direction
		      });
		    }
		
		    // A helper function to autimatically build beams for a voice with
		    // configuration options.
		    //
		    // Example configuration object:
		    //
		    // ```
		    // config = {
		    //   groups: [new Vex.Flow.Fraction(2, 8)],
		    //   stem_direction: -1,
		    //   beam_rests: true,
		    //   beam_middle_only: true,
		    //   show_stemlets: false
		    // };
		    // ```
		    //
		    // Parameters:
		    // * `notes` - An array of notes to create the beams for
		    // * `config` - The configuration object
		    //    * `groups` - Array of `Fractions` that represent the beat structure to beam the notes
		    //    * `stem_direction` - Set to apply the same direction to all notes
		    //    * `beam_rests` - Set to `true` to include rests in the beams
		    //    * `beam_middle_only` - Set to `true` to only beam rests in the middle of the beat
		    //    * `show_stemlets` - Set to `true` to draw stemlets for rests
		    //    * `maintain_stem_directions` - Set to `true` to not apply new stem directions
		    //
		
		  }, {
		    key: 'generateBeams',
		    value: function generateBeams(notes, config) {
		      if (!config) config = {};
		
		      if (!config.groups || !config.groups.length) {
		        config.groups = [new _fraction.Fraction(2, 8)];
		      }
		
		      // Convert beam groups to tick amounts
		      var tickGroups = config.groups.map(function (group) {
		        if (!group.multiply) {
		          throw new _vex.Vex.RuntimeError('InvalidBeamGroups', 'The beam groups must be an array of Vex.Flow.Fractions');
		        }
		        return group.clone().multiply(_tables.Flow.RESOLUTION, 1);
		      });
		
		      var unprocessedNotes = notes;
		      var currentTickGroup = 0;
		      var noteGroups = [];
		      var currentGroup = [];
		
		      function getTotalTicks(vf_notes) {
		        return vf_notes.reduce(function (memo, note) {
		          return note.getTicks().clone().add(memo);
		        }, new _fraction.Fraction(0, 1));
		      }
		
		      function nextTickGroup() {
		        if (tickGroups.length - 1 > currentTickGroup) {
		          currentTickGroup += 1;
		        } else {
		          currentTickGroup = 0;
		        }
		      }
		
		      function createGroups() {
		        var nextGroup = [];
		
		        unprocessedNotes.forEach(function (unprocessedNote) {
		          nextGroup = [];
		          if (unprocessedNote.shouldIgnoreTicks()) {
		            noteGroups.push(currentGroup);
		            currentGroup = nextGroup;
		            return; // Ignore untickables (like bar notes)
		          }
		
		          currentGroup.push(unprocessedNote);
		          var ticksPerGroup = tickGroups[currentTickGroup].clone();
		          var totalTicks = getTotalTicks(currentGroup);
		
		          // Double the amount of ticks in a group, if it's an unbeamable tuplet
		          var unbeamable = _tables.Flow.durationToNumber(unprocessedNote.duration) < 8;
		          if (unbeamable && unprocessedNote.tuplet) {
		            ticksPerGroup.numerator *= 2;
		          }
		
		          // If the note that was just added overflows the group tick total
		          if (totalTicks.greaterThan(ticksPerGroup)) {
		            // If the overflow note can be beamed, start the next group
		            // with it. Unbeamable notes leave the group overflowed.
		            if (!unbeamable) {
		              nextGroup.push(currentGroup.pop());
		            }
		            noteGroups.push(currentGroup);
		            currentGroup = nextGroup;
		            nextTickGroup();
		          } else if (totalTicks.equals(ticksPerGroup)) {
		            noteGroups.push(currentGroup);
		            currentGroup = nextGroup;
		            nextTickGroup();
		          }
		        });
		
		        // Adds any remainder notes
		        if (currentGroup.length > 0) {
		          noteGroups.push(currentGroup);
		        }
		      }
		
		      function getBeamGroups() {
		        return noteGroups.filter(function (group) {
		          if (group.length > 1) {
		            var beamable = true;
		            group.forEach(function (note) {
		              if (note.getIntrinsicTicks() >= _tables.Flow.durationToTicks('4')) {
		                beamable = false;
		              }
		            });
		            return beamable;
		          }
		          return false;
		        });
		      }
		
		      // Splits up groups by Rest
		      function sanitizeGroups() {
		        var sanitizedGroups = [];
		        noteGroups.forEach(function (group) {
		          var tempGroup = [];
		          group.forEach(function (note, index, group) {
		            var isFirstOrLast = index === 0 || index === group.length - 1;
		            var prevNote = group[index - 1];
		
		            var breaksOnEachRest = !config.beam_rests && note.isRest();
		            var breaksOnFirstOrLastRest = config.beam_rests && config.beam_middle_only && note.isRest() && isFirstOrLast;
		
		            var breakOnStemChange = false;
		            if (config.maintain_stem_directions && prevNote && !note.isRest() && !prevNote.isRest()) {
		              var prevDirection = prevNote.getStemDirection();
		              var currentDirection = note.getStemDirection();
		              breakOnStemChange = currentDirection !== prevDirection;
		            }
		
		            var isUnbeamableDuration = parseInt(note.duration, 10) < 8;
		
		            // Determine if the group should be broken at this note
		            var shouldBreak = breaksOnEachRest || breaksOnFirstOrLastRest || breakOnStemChange || isUnbeamableDuration;
		
		            if (shouldBreak) {
		              // Add current group
		              if (tempGroup.length > 0) {
		                sanitizedGroups.push(tempGroup);
		              }
		
		              // Start a new group. Include the current note if the group
		              // was broken up by stem direction, as that note needs to start
		              // the next group of notes
		              tempGroup = breakOnStemChange ? [note] : [];
		            } else {
		              // Add note to group
		              tempGroup.push(note);
		            }
		          });
		
		          // If there is a remaining group, add it as well
		          if (tempGroup.length > 0) {
		            sanitizedGroups.push(tempGroup);
		          }
		        });
		
		        noteGroups = sanitizedGroups;
		      }
		
		      function formatStems() {
		        noteGroups.forEach(function (group) {
		          var stemDirection = void 0;
		          if (config.maintain_stem_directions) {
		            var _note = findFirstNote(group);
		            stemDirection = _note ? _note.getStemDirection() : _stem.Stem.UP;
		          } else {
		            if (config.stem_direction) {
		              stemDirection = config.stem_direction;
		            } else {
		              stemDirection = calculateStemDirection(group);
		            }
		          }
		          applyStemDirection(group, stemDirection);
		        });
		      }
		
		      function findFirstNote(group) {
		        for (var _i = 0; _i < group.length; _i++) {
		          var _note2 = group[_i];
		          if (!_note2.isRest()) {
		            return _note2;
		          }
		        }
		
		        return false;
		      }
		
		      function applyStemDirection(group, direction) {
		        group.forEach(function (note) {
		          note.setStemDirection(direction);
		        });
		      }
		
		      // Get all of the tuplets in all of the note groups
		      function getTuplets() {
		        var uniqueTuplets = [];
		
		        // Go through all of the note groups and inspect for tuplets
		        noteGroups.forEach(function (group) {
		          var tuplet = null;
		          group.forEach(function (note) {
		            if (note.tuplet && tuplet !== note.tuplet) {
		              tuplet = note.tuplet;
		              uniqueTuplets.push(tuplet);
		            }
		          });
		        });
		        return uniqueTuplets;
		      }
		
		      // Using closures to store the variables throughout the various functions
		      // IMO Keeps it this process lot cleaner - but not super consistent with
		      // the rest of the API's style - Silverwolf90 (Cyril)
		      createGroups();
		      sanitizeGroups();
		      formatStems();
		
		      // Get the notes to be beamed
		      var beamedNoteGroups = getBeamGroups();
		
		      // Get the tuplets in order to format them accurately
		      var allTuplets = getTuplets();
		
		      // Create a Vex.Flow.Beam from each group of notes to be beamed
		      var beams = [];
		      beamedNoteGroups.forEach(function (group) {
		        var beam = new Beam(group);
		
		        if (config.show_stemlets) {
		          beam.render_options.show_stemlets = true;
		        }
		        if (config.secondary_breaks) {
		          beam.render_options.secondary_break_ticks = _tables.Flow.durationToTicks(config.secondary_breaks);
		        }
		        if (config.flat_beams === true) {
		          beam.render_options.flat_beams = true;
		          beam.render_options.flat_beam_offset = config.flat_beam_offset;
		        }
		        beams.push(beam);
		      });
		
		      // Reformat tuplets
		      allTuplets.forEach(function (tuplet) {
		        // Set the tuplet location based on the stem direction
		        var direction = tuplet.notes[0].stem_direction === _stem.Stem.DOWN ? _tuplet.Tuplet.LOCATION_BOTTOM : _tuplet.Tuplet.LOCATION_TOP;
		        tuplet.setTupletLocation(direction);
		
		        // If any of the notes in the tuplet are not beamed, draw a bracket.
		        var bracketed = false;
		        for (var _i2 = 0; _i2 < tuplet.notes.length; _i2++) {
		          var _note3 = tuplet.notes[_i2];
		          if (_note3.beam === null) {
		            bracketed = true;
		            break;
		          }
		        }
		        tuplet.setBracketed(bracketed);
		      });
		
		      return beams;
		    }
		  }]);
		
		  function Beam(notes, auto_stem) {
		    _classCallCheck(this, Beam);
		
		    var _this = _possibleConstructorReturn(this, (Beam.__proto__ || Object.getPrototypeOf(Beam)).call(this));
		
		    _this.setAttribute('type', 'Beam');
		
		    if (!notes || notes === []) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'No notes provided for beam.');
		    }
		
		    if (notes.length === 1) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Too few notes for beam.');
		    }
		
		    // Validate beam line, direction and ticks.
		    _this.ticks = notes[0].getIntrinsicTicks();
		
		    if (_this.ticks >= _tables.Flow.durationToTicks('4')) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Beams can only be applied to notes shorter than a quarter note.');
		    }
		
		    var i = void 0; // shared iterator
		    var note = void 0;
		
		    _this.stem_direction = _stem.Stem.UP;
		
		    for (i = 0; i < notes.length; ++i) {
		      note = notes[i];
		      if (note.hasStem()) {
		        _this.stem_direction = note.getStemDirection();
		        break;
		      }
		    }
		
		    var stem_direction = _this.stem_direction;
		    // Figure out optimal stem direction based on given notes
		    if (auto_stem && notes[0].getCategory() === 'stavenotes') {
		      stem_direction = calculateStemDirection(notes);
		    } else if (auto_stem && notes[0].getCategory() === 'tabnotes') {
		      // Auto Stem TabNotes
		      var stem_weight = notes.reduce(function (memo, note) {
		        return memo + note.stem_direction;
		      }, 0);
		
		      stem_direction = stem_weight > -1 ? _stem.Stem.UP : _stem.Stem.DOWN;
		    }
		
		    // Apply stem directions and attach beam to notes
		    for (i = 0; i < notes.length; ++i) {
		      note = notes[i];
		      if (auto_stem) {
		        note.setStemDirection(stem_direction);
		        _this.stem_direction = stem_direction;
		      }
		      note.setBeam(_this);
		    }
		
		    _this.postFormatted = false;
		    _this.notes = notes;
		    _this.beam_count = _this.getBeamCount();
		    _this.break_on_indices = [];
		    _this.render_options = {
		      beam_width: 5,
		      max_slope: 0.25,
		      min_slope: -0.25,
		      slope_iterations: 20,
		      slope_cost: 100,
		      show_stemlets: false,
		      stemlet_extension: 7,
		      partial_beam_length: 10,
		      flat_beams: false,
		      min_flat_beam_offset: 15
		    };
		    return _this;
		  }
		
		  // Get the notes in this beam
		
		
		  _createClass(Beam, [{
		    key: 'getNotes',
		    value: function getNotes() {
		      return this.notes;
		    }
		
		    // Get the max number of beams in the set of notes
		
		  }, {
		    key: 'getBeamCount',
		    value: function getBeamCount() {
		      var beamCounts = this.notes.map(function (note) {
		        return note.getGlyph().beam_count;
		      });
		
		      var maxBeamCount = beamCounts.reduce(function (max, beamCount) {
		        return beamCount > max ? beamCount : max;
		      });
		
		      return maxBeamCount;
		    }
		
		    // Set which note `indices` to break the secondary beam at
		
		  }, {
		    key: 'breakSecondaryAt',
		    value: function breakSecondaryAt(indices) {
		      this.break_on_indices = indices;
		      return this;
		    }
		
		    // Return the y coordinate for linear function
		
		  }, {
		    key: 'getSlopeY',
		    value: function getSlopeY(x, first_x_px, first_y_px, slope) {
		      return first_y_px + (x - first_x_px) * slope;
		    }
		
		    // Calculate the best possible slope for the provided notes
		
		  }, {
		    key: 'calculateSlope',
		    value: function calculateSlope() {
		      var notes = this.notes,
		          stemDirection = this.stem_direction,
		          _render_options = this.render_options,
		          max_slope = _render_options.max_slope,
		          min_slope = _render_options.min_slope,
		          slope_iterations = _render_options.slope_iterations,
		          slope_cost = _render_options.slope_cost;
		
		
		      var firstNote = notes[0];
		      var initialSlope = getStemSlope(firstNote, notes[notes.length - 1]);
		      var increment = (max_slope - min_slope) / slope_iterations;
		      var minCost = Number.MAX_VALUE;
		      var bestSlope = 0;
		      var yShift = 0;
		
		      // iterate through slope values to find best weighted fit
		      for (var slope = min_slope; slope <= max_slope; slope += increment) {
		        var totalStemExtension = 0;
		        var yShiftTemp = 0;
		
		        // iterate through notes, calculating y shift and stem extension
		        for (var _i3 = 1; _i3 < notes.length; ++_i3) {
		          var _note4 = notes[_i3];
		          var adjustedStemTipY = this.getSlopeY(_note4.getStemX(), firstNote.getStemX(), firstNote.getStemExtents().topY, slope) + yShiftTemp;
		
		          var stemTipY = _note4.getStemExtents().topY;
		          // beam needs to be shifted up to accommodate note
		          if (stemTipY * stemDirection < adjustedStemTipY * stemDirection) {
		            var diff = Math.abs(stemTipY - adjustedStemTipY);
		            yShiftTemp += diff * -stemDirection;
		            totalStemExtension += diff * _i3;
		          } else {
		            // beam overshoots note, account for the difference
		            totalStemExtension += (stemTipY - adjustedStemTipY) * stemDirection;
		          }
		        }
		
		        // most engraving books suggest aiming for a slope about half the angle of the
		        // difference between the first and last notes' stem length;
		        var idealSlope = initialSlope / 2;
		        var distanceFromIdeal = Math.abs(idealSlope - slope);
		
		        // This tries to align most beams to something closer to the idealSlope, but
		        // doesn't go crazy. To disable, set this.render_options.slope_cost = 0
		        var cost = slope_cost * distanceFromIdeal + Math.abs(totalStemExtension);
		
		        // update state when a more ideal slope is found
		        if (cost < minCost) {
		          minCost = cost;
		          bestSlope = slope;
		          yShift = yShiftTemp;
		        }
		      }
		
		      this.slope = bestSlope;
		      this.y_shift = yShift;
		    }
		
		    // Calculate a slope and y-shift for flat beams
		
		  }, {
		    key: 'calculateFlatSlope',
		    value: function calculateFlatSlope() {
		      var notes = this.notes,
		          stem_direction = this.stem_direction,
		          _render_options2 = this.render_options,
		          beam_width = _render_options2.beam_width,
		          min_flat_beam_offset = _render_options2.min_flat_beam_offset,
		          flat_beam_offset = _render_options2.flat_beam_offset;
		
		      // If a flat beam offset has not yet been supplied or calculated,
		      // generate one based on the notes in this particular note group
		
		      var total = 0;
		      var extremeY = 0; // Store the highest or lowest note here
		      var extremeBeamCount = 0; // The beam count of the extreme note
		      var currentExtreme = 0;
		      for (var _i4 = 0; _i4 < notes.length; _i4++) {
		        // Total up all of the offsets so we can average them out later
		        var _note5 = notes[_i4];
		        var stemTipY = _note5.getStemExtents().topY;
		        total += stemTipY;
		
		        // Store the highest (stems-up) or lowest (stems-down) note so the
		        //  offset can be adjusted in case the average isn't enough
		        if (stem_direction === _stem.Stem.DOWN && currentExtreme < stemTipY) {
		          currentExtreme = stemTipY;
		          extremeY = Math.max.apply(Math, _toConsumableArray(_note5.getYs()));
		          extremeBeamCount = _note5.getBeamCount();
		        } else if (stem_direction === _stem.Stem.UP && (currentExtreme === 0 || currentExtreme > stemTipY)) {
		          currentExtreme = stemTipY;
		          extremeY = Math.min.apply(Math, _toConsumableArray(_note5.getYs()));
		          extremeBeamCount = _note5.getBeamCount();
		        }
		      }
		
		      // Average the offsets to try and come up with a reasonable one that
		      //  works for all of the notes in the beam group.
		      var offset = total / notes.length;
		
		      // In case the average isn't long enough, add or subtract some more
		      //  based on the highest or lowest note (again, based on the stem
		      //  direction). This also takes into account the added height due to
		      //  the width of the beams.
		      var beamWidth = beam_width * 1.5;
		      var extremeTest = min_flat_beam_offset + extremeBeamCount * beamWidth;
		      var newOffset = extremeY + extremeTest * -stem_direction;
		      if (stem_direction === _stem.Stem.DOWN && offset < newOffset) {
		        offset = extremeY + extremeTest;
		      } else if (stem_direction === _stem.Stem.UP && offset > newOffset) {
		        offset = extremeY - extremeTest;
		      }
		
		      if (!flat_beam_offset) {
		        // Set the offset for the group based on the calculations above.
		        this.render_options.flat_beam_offset = offset;
		      } else if (stem_direction === _stem.Stem.DOWN && offset > flat_beam_offset) {
		        this.render_options.flat_beam_offset = offset;
		      } else if (stem_direction === _stem.Stem.UP && offset < flat_beam_offset) {
		        this.render_options.flat_beam_offset = offset;
		      }
		
		      // for flat beams, the slope and y_shift are simply 0
		      this.slope = 0;
		      this.y_shift = 0;
		    }
		
		    // Create new stems for the notes in the beam, so that each stem
		    // extends into the beams.
		
		  }, {
		    key: 'applyStemExtensions',
		    value: function applyStemExtensions() {
		      var notes = this.notes,
		          slope = this.slope,
		          y_shift = this.y_shift,
		          stem_direction = this.stem_direction,
		          beam_count = this.beam_count,
		          _render_options3 = this.render_options,
		          show_stemlets = _render_options3.show_stemlets,
		          flat_beam_offset = _render_options3.flat_beam_offset,
		          flat_beams = _render_options3.flat_beams,
		          stemlet_extension = _render_options3.stemlet_extension,
		          beam_width = _render_options3.beam_width;
		
		
		      var firstNote = notes[0];
		      var firstStemTipY = firstNote.getStemExtents().topY;
		
		      // If rendering flat beams, and an offset exists, set the y-coordinat`e to
		      //  the offset so the stems all end at the beam offset.
		      if (flat_beams && flat_beam_offset) {
		        firstStemTipY = flat_beam_offset;
		      }
		      var firstStemX = firstNote.getStemX();
		
		      for (var _i5 = 0; _i5 < notes.length; ++_i5) {
		        var _note6 = notes[_i5];
		        var stemX = _note6.getStemX();
		
		        var _note6$getStemExtents = _note6.getStemExtents(),
		            stemTipY = _note6$getStemExtents.topY;
		
		        var beamedStemTipY = this.getSlopeY(stemX, firstStemX, firstStemTipY, slope) + y_shift;
		        var preBeamExtension = _note6.getStem().getExtension();
		        var beamExtension = stem_direction === _stem.Stem.UP ? stemTipY - beamedStemTipY : beamedStemTipY - stemTipY;
		
		        _note6.stem.setExtension(preBeamExtension + beamExtension);
		        _note6.stem.renderHeightAdjustment = -_stem.Stem.WIDTH / 2;
		
		        if (_note6.isRest() && show_stemlets) {
		          var beamWidth = beam_width;
		          var totalBeamWidth = (beam_count - 1) * beamWidth * 1.5 + beamWidth;
		          _note6.stem.setVisibility(true).setStemlet(true, totalBeamWidth + stemlet_extension);
		        }
		      }
		    }
		
		    // Get the x coordinates for the beam lines of specific `duration`
		
		  }, {
		    key: 'getBeamLines',
		    value: function getBeamLines(duration) {
		      var beam_lines = [];
		      var beam_started = false;
		      var current_beam = null;
		      var partial_beam_length = this.render_options.partial_beam_length;
		      var previous_should_break = false;
		      var tick_tally = 0;
		      for (var _i6 = 0; _i6 < this.notes.length; ++_i6) {
		        var _note7 = this.notes[_i6];
		
		        // See if we need to break secondary beams on this note.
		        var ticks = _note7.ticks.value();
		        tick_tally += ticks;
		        var should_break = false;
		
		        // 8th note beams are always drawn.
		        if (parseInt(duration, 10) >= 8) {
		          // First, check to see if any indices were set up through breakSecondaryAt()
		          should_break = this.break_on_indices.indexOf(_i6) !== -1;
		
		          // If the secondary breaks were auto-configured in the render options,
		          //  handle that as well.
		          if (this.render_options.secondary_break_ticks && tick_tally >= this.render_options.secondary_break_ticks) {
		            tick_tally = 0;
		            should_break = true;
		          }
		        }
		        var note_gets_beam = _note7.getIntrinsicTicks() < _tables.Flow.durationToTicks(duration);
		
		        var stem_x = _note7.getStemX() - _stem.Stem.WIDTH / 2;
		
		        // Check to see if the next note in the group will get a beam at this
		        //  level. This will help to inform the partial beam logic below.
		        var next_note = this.notes[_i6 + 1];
		        var beam_next = next_note && next_note.getIntrinsicTicks() < _tables.Flow.durationToTicks(duration);
		        if (note_gets_beam) {
		          // This note gets a beam at the current level
		          if (beam_started) {
		            // We're currently in the middle of a beam. Just continue it on to
		            //  the stem X of the current note.
		            current_beam = beam_lines[beam_lines.length - 1];
		            current_beam.end = stem_x;
		
		            // If a secondary beam break is set up, end the beam right now.
		            if (should_break) {
		              beam_started = false;
		              if (next_note && !beam_next && current_beam.end === null) {
		                // This note gets a beam,.but the next one does not. This means
		                //  we need a partial pointing right.
		                current_beam.end = current_beam.start - partial_beam_length;
		              }
		            }
		          } else {
		            // No beam started yet. Start a new one.
		            current_beam = { start: stem_x, end: null };
		            beam_started = true;
		            if (!beam_next) {
		              // The next note doesn't get a beam. Draw a partial.
		              if ((previous_should_break || _i6 === 0) && next_note) {
		                // This is the first note (but not the last one), or it is
		                //  following a secondary break. Draw a partial to the right.
		                current_beam.end = current_beam.start + partial_beam_length;
		              } else {
		                // By default, draw a partial to the left.
		                current_beam.end = current_beam.start - partial_beam_length;
		              }
		            } else if (should_break) {
		              // This note should have a secondary break after it. Even though
		              //  we just started a beam, it needs to end immediately.
		              current_beam.end = current_beam.start - partial_beam_length;
		              beam_started = false;
		            }
		            beam_lines.push(current_beam);
		          }
		        } else {
		          // The current note does not get a beam.
		          beam_started = false;
		        }
		
		        // Store the secondary break flag to inform the partial beam logic in
		        //  the next iteration of the loop.
		        previous_should_break = should_break;
		      }
		
		      // Add a partial beam pointing left if this is the last note in the group
		      var last_beam = beam_lines[beam_lines.length - 1];
		      if (last_beam && last_beam.end === null) {
		        last_beam.end = last_beam.start - partial_beam_length;
		      }
		      return beam_lines;
		    }
		
		    // Render the stems for each notes
		
		  }, {
		    key: 'drawStems',
		    value: function drawStems() {
		      var _this2 = this;
		
		      this.notes.forEach(function (note) {
		        if (note.getStem()) {
		          note.getStem().setContext(_this2.context).draw();
		        }
		      }, this);
		    }
		
		    // Render the beam lines
		
		  }, {
		    key: 'drawBeamLines',
		    value: function drawBeamLines() {
		      this.checkContext();
		
		      var valid_beam_durations = ['4', '8', '16', '32', '64'];
		
		      var firstNote = this.notes[0];
		
		      var firstStemTipY = firstNote.getStemExtents().topY;
		      var beamY = firstStemTipY;
		
		      // For flat beams, set the first and last Y to the offset, rather than
		      //  using the note's stem extents.
		      if (this.render_options.flat_beams && this.render_options.flat_beam_offset) {
		        beamY = this.render_options.flat_beam_offset;
		      }
		
		      var firstStemX = firstNote.getStemX();
		      var beamThickness = this.render_options.beam_width * this.stem_direction;
		
		      // Draw the beams.
		      for (var _i7 = 0; _i7 < valid_beam_durations.length; ++_i7) {
		        var duration = valid_beam_durations[_i7];
		        var beamLines = this.getBeamLines(duration);
		
		        for (var j = 0; j < beamLines.length; ++j) {
		          var beam_line = beamLines[j];
		          var startBeamX = beam_line.start;
		
		          var startBeamY = this.getSlopeY(startBeamX, firstStemX, beamY, this.slope);
		          var lastBeamX = beam_line.end;
		          var lastBeamY = this.getSlopeY(lastBeamX, firstStemX, beamY, this.slope);
		
		          this.context.beginPath();
		          this.context.moveTo(startBeamX, startBeamY);
		          this.context.lineTo(startBeamX, startBeamY + beamThickness);
		          this.context.lineTo(lastBeamX + 1, lastBeamY + beamThickness);
		          this.context.lineTo(lastBeamX + 1, lastBeamY);
		          this.context.closePath();
		          this.context.fill();
		        }
		
		        beamY += beamThickness * 1.5;
		      }
		    }
		
		    // Pre-format the beam
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      return this;
		    }
		
		    // Post-format the beam. This can only be called after
		    // the notes in the beam have both `x` and `y` values. ie: they've
		    // been formatted and have staves
		
		  }, {
		    key: 'postFormat',
		    value: function postFormat() {
		      if (this.postFormatted) return;
		
		      // Calculate a smart slope if we're not forcing the beams to be flat.
		      if (this.notes[0].getCategory() === 'tabnotes' || this.render_options.flat_beams) {
		        this.calculateFlatSlope();
		      } else {
		        this.calculateSlope();
		      }
		      this.applyStemExtensions();
		
		      this.postFormatted = true;
		    }
		
		    // Render the beam to the canvas context
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		      if (this.unbeamable) return;
		
		      if (!this.postFormatted) {
		        this.postFormat();
		      }
		      this.drawStems();
		      this.drawBeamLines();
		    }
		  }]);
	
		  return Beam;
		}(_element.Element);
	
	/***/ },
	/* 16 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Tuplet = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _formatter = __webpack_require__(14);
		
		var _glyph = __webpack_require__(4);
		
		var _stem = __webpack_require__(17);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		/**
		 * ## Description
		 *
		 * Create a new tuplet from the specified notes. The notes must
		 * be part of the same voice. If they are of different rhythmic
		 * values, then options.num_notes must be set.
		 *
		 * @constructor
		 * @param {Array.<Vex.Flow.StaveNote>} A set of notes: staveNotes,
		 *   notes, etc... any class that inherits stemmableNote at some
		 *   point in its prototype chain.
		 * @param options: object {
		 *
		 *   num_notes: fit this many notes into...
		 *   notes_occupied: ...the space of this many notes
		 *
		 *       Together, these two properties make up the tuplet ratio
		 *     in the form of num_notes : notes_occupied.
		 *       num_notes defaults to the number of notes passed in, so
		 *     it is important that if you omit this property, all of
		 *     the notes passed should be of the same note value.
		 *       notes_occupied defaults to 2 -- so you should almost
		 *     certainly pass this parameter for anything other than
		 *     a basic triplet.
		 *
		 *   location:
		 *     default 1, which is above the notes: ┌─── 3 ───┐
		 *      -1 is below the notes └─── 3 ───┘
		 *
		 *   bracketed: boolean, draw a bracket around the tuplet number
		 *     when true: ┌─── 3 ───┐   when false: 3
		 *     defaults to true if notes are not beamed, false otherwise
		 *
		 *   ratioed: boolean
		 *     when true: ┌─── 7:8 ───┐, when false: ┌─── 7 ───┐
		 *     defaults to true if the difference between num_notes and
		 *     notes_occupied is greater than 1.
		 *
		 *   y_offset: int, default 0
		 *     manually offset a tuplet, for instance to avoid collisions
		 *     with articulations, etc...
		 * }
		 */
		
		var Tuplet = exports.Tuplet = function (_Element) {
		  _inherits(Tuplet, _Element);
		
		  _createClass(Tuplet, null, [{
		    key: 'LOCATION_TOP',
		    get: function get() {
		      return 1;
		    }
		  }, {
		    key: 'LOCATION_BOTTOM',
		    get: function get() {
		      return -1;
		    }
		  }, {
		    key: 'NESTING_OFFSET',
		    get: function get() {
		      return 15;
		    }
		  }]);
		
		  function Tuplet(notes, options) {
		    _classCallCheck(this, Tuplet);
		
		    var _this = _possibleConstructorReturn(this, (Tuplet.__proto__ || Object.getPrototypeOf(Tuplet)).call(this));
		
		    _this.setAttribute('type', 'Tuplet');
		    if (!notes || !notes.length) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'No notes provided for tuplet.');
		    }
		
		    if (notes.length === 1) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Too few notes for tuplet.');
		    }
		
		    _this.options = _vex.Vex.Merge({}, options);
		    _this.notes = notes;
		    _this.num_notes = 'num_notes' in _this.options ? _this.options.num_notes : notes.length;
		
		    // We accept beats_occupied, but warn that it's deprecated:
		    // the preferred property name is now notes_occupied.
		    if (_this.options.beats_occupied) {
		      _this.beatsOccupiedDeprecationWarning();
		    }
		    _this.notes_occupied = _this.options.notes_occupied || _this.options.beats_occupied || 2;
		    if ('bracketed' in _this.options) {
		      _this.bracketed = _this.options.bracketed;
		    } else {
		      _this.bracketed = notes.some(function (note) {
		        return note.beam === null;
		      });
		    }
		
		    _this.ratioed = 'ratioed' in _this.options ? _this.options.ratioed : Math.abs(_this.notes_occupied - _this.num_notes) > 1;
		    _this.point = 28;
		    _this.y_pos = 16;
		    _this.x_pos = 100;
		    _this.width = 200;
		    _this.location = _this.options.location || Tuplet.LOCATION_TOP;
		
		    _formatter.Formatter.AlignRestsToNotes(notes, true, true);
		    _this.resolveGlyphs();
		    _this.attach();
		    return _this;
		  }
		
		  _createClass(Tuplet, [{
		    key: 'attach',
		    value: function attach() {
		      for (var i = 0; i < this.notes.length; i++) {
		        var note = this.notes[i];
		        note.setTuplet(this);
		      }
		    }
		  }, {
		    key: 'detach',
		    value: function detach() {
		      for (var i = 0; i < this.notes.length; i++) {
		        var note = this.notes[i];
		        note.resetTuplet(this);
		      }
		    }
		
		    /**
		     * Set whether or not the bracket is drawn.
		     */
		
		  }, {
		    key: 'setBracketed',
		    value: function setBracketed(bracketed) {
		      this.bracketed = !!bracketed;
		      return this;
		    }
		
		    /**
		     * Set whether or not the ratio is shown.
		     */
		
		  }, {
		    key: 'setRatioed',
		    value: function setRatioed(ratioed) {
		      this.ratioed = !!ratioed;
		      return this;
		    }
		
		    /**
		     * Set the tuplet to be displayed either on the top or bottom of the stave
		     */
		
		  }, {
		    key: 'setTupletLocation',
		    value: function setTupletLocation(location) {
		      if (!location) {
		        location = Tuplet.LOCATION_TOP;
		      } else if (location !== Tuplet.LOCATION_TOP && location !== Tuplet.LOCATION_BOTTOM) {
		        throw new _vex.Vex.RERR('BadArgument', 'Invalid tuplet location: ' + location);
		      }
		
		      this.location = location;
		      return this;
		    }
		  }, {
		    key: 'getNotes',
		    value: function getNotes() {
		      return this.notes;
		    }
		  }, {
		    key: 'getNoteCount',
		    value: function getNoteCount() {
		      return this.num_notes;
		    }
		  }, {
		    key: 'beatsOccupiedDeprecationWarning',
		    value: function beatsOccupiedDeprecationWarning() {
		      var msg = ['beats_occupied has been deprecated as an ', 'option for tuplets. Please use notes_occupied ', 'instead. Calls to getBeatsOccupied and ', 'setBeatsOccupied should now be routed to ', 'getNotesOccupied and setNotesOccupied instead'].join('');
		
		      if (console && console.warn) {
		        // eslint-disable-line no-console
		        console.warn(msg); // eslint-disable-line no-console
		      } else if (console) {
		        console.log(msg); // eslint-disable-line no-console
		      }
		    }
		  }, {
		    key: 'getBeatsOccupied',
		    value: function getBeatsOccupied() {
		      this.beatsOccupiedDeprecationWarning();
		      return this.getNotesOccupied();
		    }
		  }, {
		    key: 'setBeatsOccupied',
		    value: function setBeatsOccupied(beats) {
		      this.beatsOccupiedDeprecationWarning();
		      return this.setNotesOccupied(beats);
		    }
		  }, {
		    key: 'getNotesOccupied',
		    value: function getNotesOccupied() {
		      return this.notes_occupied;
		    }
		  }, {
		    key: 'setNotesOccupied',
		    value: function setNotesOccupied(notes) {
		      this.detach();
		      this.notes_occupied = notes;
		      this.resolveGlyphs();
		      this.attach();
		    }
		  }, {
		    key: 'resolveGlyphs',
		    value: function resolveGlyphs() {
		      this.num_glyphs = [];
		      var n = this.num_notes;
		      while (n >= 1) {
		        this.num_glyphs.push(new _glyph.Glyph('v' + n % 10, this.point));
		        n = parseInt(n / 10, 10);
		      }
		
		      this.denom_glyphs = [];
		      n = this.notes_occupied;
		      while (n >= 1) {
		        this.denom_glyphs.push(new _glyph.Glyph('v' + n % 10, this.point));
		        n = parseInt(n / 10, 10);
		      }
		    }
		
		    // determine how many tuplets are nested within this tuplet
		    // on the same side (above/below), to calculate a y
		    // offset for this tuplet:
		
		  }, {
		    key: 'getNestedTupletCount',
		    value: function getNestedTupletCount() {
		      var location = this.location;
		      var first_note = this.notes[0];
		      var maxTupletCount = countTuplets(first_note, location);
		      var minTupletCount = countTuplets(first_note, location);
		
		      // Count the tuplets that are on the same side (above/below)
		      // as this tuplet:
		      function countTuplets(note, location) {
		        return note.tupletStack.filter(function (tuplet) {
		          return tuplet.location === location;
		        }).length;
		      }
		
		      this.notes.forEach(function (note) {
		        var tupletCount = countTuplets(note, location);
		        maxTupletCount = tupletCount > maxTupletCount ? tupletCount : maxTupletCount;
		        minTupletCount = tupletCount < minTupletCount ? tupletCount : minTupletCount;
		      });
		
		      return maxTupletCount - minTupletCount;
		    }
		
		    // determine the y position of the tuplet:
		
		  }, {
		    key: 'getYPosition',
		    value: function getYPosition() {
		      // offset the tuplet for any nested tuplets between
		      // it and the notes:
		      var nested_tuplet_y_offset = this.getNestedTupletCount() * Tuplet.NESTING_OFFSET * -this.location;
		
		      // offset the tuplet for any manual y_offset:
		      var y_offset = this.options.y_offset || 0;
		
		      // now iterate through the notes and find our highest
		      // or lowest locations, to form a base y_pos
		      var first_note = this.notes[0];
		      var y_pos = void 0;
		      if (this.location === Tuplet.LOCATION_TOP) {
		        y_pos = first_note.getStave().getYForLine(0) - 15;
		        // y_pos = first_note.getStemExtents().topY - 10;
		
		        for (var i = 0; i < this.notes.length; ++i) {
		          var top_y = this.notes[i].getStemDirection() === _stem.Stem.UP ? this.notes[i].getStemExtents().topY - 10 : this.notes[i].getStemExtents().baseY - 20;
		
		          if (top_y < y_pos) {
		            y_pos = top_y;
		          }
		        }
		      } else {
		        y_pos = first_note.getStave().getYForLine(4) + 20;
		
		        for (var _i = 0; _i < this.notes.length; ++_i) {
		          var bottom_y = this.notes[_i].getStemDirection() === _stem.Stem.UP ? this.notes[_i].getStemExtents().baseY + 20 : this.notes[_i].getStemExtents().topY + 10;
		          if (bottom_y > y_pos) {
		            y_pos = bottom_y;
		          }
		        }
		      }
		
		      return y_pos + nested_tuplet_y_offset + y_offset;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _this2 = this;
		
		      this.checkContext();
		      this.setRendered();
		
		      // determine x value of left bound of tuplet
		      var first_note = this.notes[0];
		      var last_note = this.notes[this.notes.length - 1];
		
		      if (!this.bracketed) {
		        this.x_pos = first_note.getStemX();
		        this.width = last_note.getStemX() - this.x_pos;
		      } else {
		        this.x_pos = first_note.getTieLeftX() - 5;
		        this.width = last_note.getTieRightX() - this.x_pos + 5;
		      }
		
		      // determine y value for tuplet
		      this.y_pos = this.getYPosition();
		
		      var addGlyphWidth = function addGlyphWidth(width, glyph) {
		        return width + glyph.getMetrics().width;
		      };
		
		      // calculate total width of tuplet notation
		      var width = this.num_glyphs.reduce(addGlyphWidth, 0);
		      if (this.ratioed) {
		        width = this.denom_glyphs.reduce(addGlyphWidth, width);
		        width += this.point * 0.32;
		      }
		
		      var notation_center_x = this.x_pos + this.width / 2;
		      var notation_start_x = notation_center_x - width / 2;
		
		      // draw bracket if the tuplet is not beamed
		      if (this.bracketed) {
		        var line_width = this.width / 2 - width / 2 - 5;
		
		        // only draw the bracket if it has positive length
		        if (line_width > 0) {
		          this.context.fillRect(this.x_pos, this.y_pos, line_width, 1);
		          this.context.fillRect(this.x_pos + this.width / 2 + width / 2 + 5, this.y_pos, line_width, 1);
		          this.context.fillRect(this.x_pos, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM), 1, this.location * 10);
		          this.context.fillRect(this.x_pos + this.width, this.y_pos + (this.location === Tuplet.LOCATION_BOTTOM), 1, this.location * 10);
		        }
		      }
		
		      // draw numerator glyphs
		      var x_offset = 0;
		      this.num_glyphs.forEach(function (glyph) {
		        glyph.render(_this2.context, notation_start_x + x_offset, _this2.y_pos + _this2.point / 3 - 2);
		        x_offset += glyph.getMetrics().width;
		      });
		
		      // display colon and denominator if the ratio is to be shown
		      if (this.ratioed) {
		        var colon_x = notation_start_x + x_offset + this.point * 0.16;
		        var colon_radius = this.point * 0.06;
		        this.context.beginPath();
		        this.context.arc(colon_x, this.y_pos - this.point * 0.08, colon_radius, 0, Math.PI * 2, true);
		        this.context.closePath();
		        this.context.fill();
		        this.context.beginPath();
		        this.context.arc(colon_x, this.y_pos + this.point * 0.12, colon_radius, 0, Math.PI * 2, true);
		        this.context.closePath();
		        this.context.fill();
		        x_offset += this.point * 0.32;
		        this.denom_glyphs.forEach(function (glyph) {
		          glyph.render(_this2.context, notation_start_x + x_offset, _this2.y_pos + _this2.point / 3 - 2);
		          x_offset += glyph.getMetrics().width;
		        });
		      }
		    }
		  }]);
	
		  return Tuplet;
		}(_element.Element);
	
	/***/ },
	/* 17 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Stem = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _tables = __webpack_require__(2);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This file implements the `Stem` object. Generally this object is handled
		// by its parent `StemmableNote`.
		
		// To enable logging for this class. Set `Vex.Flow.Stem.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Stem.DEBUG) _vex.Vex.L('Vex.Flow.Stem', args);
		}
		
		var Stem = exports.Stem = function (_Element) {
		  _inherits(Stem, _Element);
		
		  _createClass(Stem, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'stem';
		    }
		
		    // Stem directions
		
		  }, {
		    key: 'UP',
		    get: function get() {
		      return 1;
		    }
		  }, {
		    key: 'DOWN',
		    get: function get() {
		      return -1;
		    }
		
		    // Theme
		
		  }, {
		    key: 'WIDTH',
		    get: function get() {
		      return _tables.Flow.STEM_WIDTH;
		    }
		  }, {
		    key: 'HEIGHT',
		    get: function get() {
		      return _tables.Flow.STEM_HEIGHT;
		    }
		  }]);
		
		  function Stem() {
		    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		
		    _classCallCheck(this, Stem);
		
		    var _this = _possibleConstructorReturn(this, (Stem.__proto__ || Object.getPrototypeOf(Stem)).call(this));
		
		    _this.setAttribute('type', 'Stem');
		
		    // Default notehead x bounds
		    _this.x_begin = options.x_begin || 0;
		    _this.x_end = options.x_end || 0;
		
		    // Y bounds for top/bottom most notehead
		    _this.y_top = options.y_top || 0;
		    _this.y_bottom = options.y_bottom || 0;
		
		    // Stem top extension
		    _this.stem_extension = options.stem_extension || 0;
		
		    // Direction of the stem
		    _this.stem_direction = options.stem_direction || 0;
		
		    // Flag to override all draw calls
		    _this.hide = options.hide || false;
		
		    _this.isStemlet = options.isStemlet || false;
		    _this.stemletHeight = options.stemletHeight || 0;
		
		    // Use to adjust the rendered height without affecting
		    // the results of `.getExtents()`
		    _this.renderHeightAdjustment = 0;
		    return _this;
		  }
		
		  // Set the x bounds for the default notehead
		
		
		  _createClass(Stem, [{
		    key: 'setNoteHeadXBounds',
		    value: function setNoteHeadXBounds(x_begin, x_end) {
		      this.x_begin = x_begin;
		      this.x_end = x_end;
		      return this;
		    }
		
		    // Set the direction of the stem in relation to the noteheads
		
		  }, {
		    key: 'setDirection',
		    value: function setDirection(direction) {
		      this.stem_direction = direction;
		    }
		
		    // Set the extension for the stem, generally for flags or beams
		
		  }, {
		    key: 'setExtension',
		    value: function setExtension(ext) {
		      this.stem_extension = ext;
		    }
		  }, {
		    key: 'getExtension',
		    value: function getExtension() {
		      return this.stem_extension;
		    }
		
		    // The the y bounds for the top and bottom noteheads
		
		  }, {
		    key: 'setYBounds',
		    value: function setYBounds(y_top, y_bottom) {
		      this.y_top = y_top;
		      this.y_bottom = y_bottom;
		    }
		
		    // The category of the object
		
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return Stem.CATEGORY;
		    }
		
		    // Gets the entire height for the stem
		
		  }, {
		    key: 'getHeight',
		    value: function getHeight() {
		      return (this.y_bottom - this.y_top) * this.stem_direction + (Stem.HEIGHT + this.stem_extension) * this.stem_direction;
		    }
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      throw new _vex.Vex.RERR('NotImplemented', 'getBoundingBox() not implemented.');
		    }
		
		    // Get the y coordinates for the very base of the stem to the top of
		    // the extension
		
		  }, {
		    key: 'getExtents',
		    value: function getExtents() {
		      var isStemUp = this.stem_direction === Stem.UP;
		      var ys = [this.y_top, this.y_bottom];
		      var stemHeight = Stem.HEIGHT + this.stem_extension;
		      var innerMostNoteheadY = (isStemUp ? Math.min : Math.max).apply(undefined, ys);
		      var outerMostNoteheadY = (isStemUp ? Math.max : Math.min).apply(undefined, ys);
		      var stemTipY = innerMostNoteheadY + stemHeight * -this.stem_direction;
		
		      return { topY: stemTipY, baseY: outerMostNoteheadY };
		    }
		
		    // set the draw style of a stem:
		
		  }, {
		    key: 'setStyle',
		    value: function setStyle(style) {
		      this.style = style;return this;
		    }
		  }, {
		    key: 'getStyle',
		    value: function getStyle() {
		      return this.style;
		    }
		  }, {
		    key: 'setVisibility',
		    value: function setVisibility(isVisible) {
		      this.hide = !isVisible;
		      return this;
		    }
		  }, {
		    key: 'setStemlet',
		    value: function setStemlet(isStemlet, stemletHeight) {
		      this.isStemlet = isStemlet;
		      this.stemletHeight = stemletHeight;
		      return this;
		    }
		
		    // Apply current style to Canvas `context`
		
		  }, {
		    key: 'applyStyle',
		    value: function applyStyle(context) {
		      var style = this.getStyle();
		      if (style) {
		        if (style.shadowColor) context.setShadowColor(style.shadowColor);
		        if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);
		        if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);
		      }
		      return this;
		    }
		
		    // Render the stem onto the canvas
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.setRendered();
		      if (this.hide) return;
		      var ctx = this.checkContext();
		
		      var stem_x = void 0;
		      var stem_y = void 0;
		      var stem_direction = this.stem_direction;
		
		      if (stem_direction === Stem.DOWN) {
		        // Down stems are rendered to the left of the head.
		        stem_x = this.x_begin;
		        stem_y = this.y_top;
		      } else {
		        // Up stems are rendered to the right of the head.
		        stem_x = this.x_end;
		        stem_y = this.y_bottom;
		      }
		
		      var stemHeight = this.getHeight();
		
		      L('Rendering stem - ', 'Top Y: ', this.y_top, 'Bottom Y: ', this.y_bottom);
		
		      // The offset from the stem's base which is required fo satisfy the stemlet height
		      var stemletYOffset = this.isStemlet ? stemHeight - this.stemletHeight * this.stem_direction : 0;
		
		      // Draw the stem
		      ctx.save();
		      this.applyStyle(ctx);
		      ctx.beginPath();
		      ctx.setLineWidth(Stem.WIDTH);
		      ctx.moveTo(stem_x, stem_y - stemletYOffset);
		      ctx.lineTo(stem_x, stem_y - stemHeight - this.renderHeightAdjustment * stem_direction);
		      ctx.stroke();
		      ctx.restore();
		    }
		  }]);
	
		  return Stem;
		}(_element.Element);
	
	/***/ },
	/* 18 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Voice = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _tables = __webpack_require__(2);
		
		var _fraction = __webpack_require__(3);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements the main Voice class. It's mainly a container
		// object to group `Tickables` for formatting.
		
		var Voice = exports.Voice = function (_Element) {
		  _inherits(Voice, _Element);
		
		  _createClass(Voice, null, [{
		    key: 'Mode',
		
		    // Modes allow the addition of ticks in three different ways:
		    //
		    // STRICT: This is the default. Ticks must fill the voice.
		    // SOFT:   Ticks can be added without restrictions.
		    // FULL:   Ticks do not need to fill the voice, but can't exceed the maximum
		    //         tick length.
		    get: function get() {
		      return {
		        STRICT: 1,
		        SOFT: 2,
		        FULL: 3
		      };
		    }
		  }]);
		
		  function Voice(time) {
		    _classCallCheck(this, Voice);
		
		    var _this = _possibleConstructorReturn(this, (Voice.__proto__ || Object.getPrototypeOf(Voice)).call(this));
		
		    _this.setAttribute('type', 'Voice');
		
		    // Time signature shortcut: "4/4", "3/8", etc.
		    if (typeof time === 'string') {
		      var match = time.match(/(\d+)\/(\d+)/);
		      if (match) {
		        time = {
		          num_beats: match[1],
		          beat_value: match[2],
		          resolution: _tables.Flow.RESOLUTION
		        };
		      }
		    }
		
		    // Default time sig is 4/4
		    _this.time = _vex.Vex.Merge({
		      num_beats: 4,
		      beat_value: 4,
		      resolution: _tables.Flow.RESOLUTION
		    }, time);
		
		    // Recalculate total ticks.
		    _this.totalTicks = new _fraction.Fraction(_this.time.num_beats * (_this.time.resolution / _this.time.beat_value), 1);
		
		    _this.resolutionMultiplier = 1;
		
		    // Set defaults
		    _this.tickables = [];
		    _this.ticksUsed = new _fraction.Fraction(0, 1);
		    _this.smallestTickCount = _this.totalTicks.clone();
		    _this.largestTickWidth = 0;
		    _this.stave = null;
		    // Do we care about strictly timed notes
		    _this.mode = Voice.Mode.STRICT;
		
		    // This must belong to a VoiceGroup
		    _this.voiceGroup = null;
		    return _this;
		  }
		
		  // Get the total ticks in the voice
		
		
		  _createClass(Voice, [{
		    key: 'getTotalTicks',
		    value: function getTotalTicks() {
		      return this.totalTicks;
		    }
		
		    // Get the total ticks used in the voice by all the tickables
		
		  }, {
		    key: 'getTicksUsed',
		    value: function getTicksUsed() {
		      return this.ticksUsed;
		    }
		
		    // Get the largest width of all the tickables
		
		  }, {
		    key: 'getLargestTickWidth',
		    value: function getLargestTickWidth() {
		      return this.largestTickWidth;
		    }
		
		    // Get the tick count for the shortest tickable
		
		  }, {
		    key: 'getSmallestTickCount',
		    value: function getSmallestTickCount() {
		      return this.smallestTickCount;
		    }
		
		    // Get the tickables in the voice
		
		  }, {
		    key: 'getTickables',
		    value: function getTickables() {
		      return this.tickables;
		    }
		
		    // Get/set the voice mode, use a value from `Voice.Mode`
		
		  }, {
		    key: 'getMode',
		    value: function getMode() {
		      return this.mode;
		    }
		  }, {
		    key: 'setMode',
		    value: function setMode(mode) {
		      this.mode = mode;return this;
		    }
		
		    // Get the resolution multiplier for the voice
		
		  }, {
		    key: 'getResolutionMultiplier',
		    value: function getResolutionMultiplier() {
		      return this.resolutionMultiplier;
		    }
		
		    // Get the actual tick resolution for the voice
		
		  }, {
		    key: 'getActualResolution',
		    value: function getActualResolution() {
		      return this.resolutionMultiplier * this.time.resolution;
		    }
		
		    // Set the voice's stave
		
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      this.stave = stave;
		      this.boundingBox = null; // Reset bounding box so we can reformat
		      return this;
		    }
		
		    // Get the bounding box for the voice
		
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      var stave = void 0;
		      var boundingBox = void 0;
		      var bb = void 0;
		      var i = void 0;
		
		      if (!this.boundingBox) {
		        if (!this.stave) throw new _vex.Vex.RERR('NoStave', "Can't get bounding box without stave.");
		        stave = this.stave;
		        boundingBox = null;
		
		        for (i = 0; i < this.tickables.length; ++i) {
		          this.tickables[i].setStave(stave);
		
		          bb = this.tickables[i].getBoundingBox();
		          if (!bb) continue;
		
		          boundingBox = boundingBox ? boundingBox.mergeWith(bb) : bb;
		        }
		
		        this.boundingBox = boundingBox;
		      }
		      return this.boundingBox;
		    }
		
		    // Every tickable must be associated with a voiceGroup. This allows formatters
		    // and preformatters to associate them with the right modifierContexts.
		
		  }, {
		    key: 'getVoiceGroup',
		    value: function getVoiceGroup() {
		      if (!this.voiceGroup) {
		        throw new _vex.Vex.RERR('NoVoiceGroup', 'No voice group for voice.');
		      }
		
		      return this.voiceGroup;
		    }
		
		    // Set the voice group
		
		  }, {
		    key: 'setVoiceGroup',
		    value: function setVoiceGroup(g) {
		      this.voiceGroup = g;return this;
		    }
		
		    // Set the voice mode to strict or soft
		
		  }, {
		    key: 'setStrict',
		    value: function setStrict(strict) {
		      this.mode = strict ? Voice.Mode.STRICT : Voice.Mode.SOFT;
		      return this;
		    }
		
		    // Determine if the voice is complete according to the voice mode
		
		  }, {
		    key: 'isComplete',
		    value: function isComplete() {
		      if (this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) {
		        return this.ticksUsed.equals(this.totalTicks);
		      } else {
		        return true;
		      }
		    }
		
		    // Add a tickable to the voice
		
		  }, {
		    key: 'addTickable',
		    value: function addTickable(tickable) {
		      if (!tickable.shouldIgnoreTicks()) {
		        var ticks = tickable.getTicks();
		
		        // Update the total ticks for this line.
		        this.ticksUsed.add(ticks);
		
		        if ((this.mode === Voice.Mode.STRICT || this.mode === Voice.Mode.FULL) && this.ticksUsed.greaterThan(this.totalTicks)) {
		          this.totalTicks.subtract(ticks);
		          throw new _vex.Vex.RERR('BadArgument', 'Too many ticks.');
		        }
		
		        // Track the smallest tickable for formatting.
		        if (ticks.lessThan(this.smallestTickCount)) {
		          this.smallestTickCount = ticks.clone();
		        }
		
		        this.resolutionMultiplier = this.ticksUsed.denominator;
		
		        // Expand total ticks using denominator from ticks used.
		        this.totalTicks.add(0, this.ticksUsed.denominator);
		      }
		
		      // Add the tickable to the line.
		      this.tickables.push(tickable);
		      tickable.setVoice(this);
		      return this;
		    }
		
		    // Add an array of tickables to the voice.
		
		  }, {
		    key: 'addTickables',
		    value: function addTickables(tickables) {
		      for (var i = 0; i < tickables.length; ++i) {
		        this.addTickable(tickables[i]);
		      }
		
		      return this;
		    }
		
		    // Preformats the voice by applying the voice's stave to each note.
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      var _this2 = this;
		
		      if (this.preFormatted) return this;
		
		      this.tickables.forEach(function (tickable) {
		        if (!tickable.getStave()) {
		          tickable.setStave(_this2.stave);
		        }
		      });
		
		      this.preFormatted = true;
		      return this;
		    }
		
		    // Render the voice onto the canvas `context` and an optional `stave`.
		    // If `stave` is omitted, it is expected that the notes have staves
		    // already set.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.context;
		      var stave = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.stave;
		
		      this.setRendered();
		      var boundingBox = null;
		      for (var i = 0; i < this.tickables.length; ++i) {
		        var tickable = this.tickables[i];
		
		        // Set the stave if provided
		        if (stave) tickable.setStave(stave);
		
		        if (!tickable.getStave()) {
		          throw new _vex.Vex.RuntimeError('MissingStave', 'The voice cannot draw tickables without staves.');
		        }
		
		        if (i === 0) boundingBox = tickable.getBoundingBox();
		
		        if (i > 0 && boundingBox) {
		          var tickable_bb = tickable.getBoundingBox();
		          if (tickable_bb) boundingBox.mergeWith(tickable_bb);
		        }
		
		        tickable.setContext(context);
		        tickable.draw();
		      }
		
		      this.boundingBox = boundingBox;
		    }
		  }]);
	
		  return Voice;
		}(_element.Element);
	
	/***/ },
	/* 19 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveConnector = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _tables = __webpack_require__(2);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		function drawBoldDoubleLine(ctx, type, topX, topY, botY) {
		  if (type !== StaveConnector.type.BOLD_DOUBLE_LEFT && type !== StaveConnector.type.BOLD_DOUBLE_RIGHT) {
		    throw new _vex.Vex.RERR('InvalidConnector', 'A REPEAT_BEGIN or REPEAT_END type must be provided.');
		  }
		
		  var x_shift = 3;
		  var variableWidth = 3.5; // Width for avoiding anti-aliasing width issues
		  var thickLineOffset = 2; // For aesthetics
		
		  if (type === StaveConnector.type.BOLD_DOUBLE_RIGHT) {
		    x_shift = -5; // Flips the side of the thin line
		    variableWidth = 3;
		  }
		
		  // Thin line
		  ctx.fillRect(topX + x_shift, topY, 1, botY - topY);
		  // Thick line
		  ctx.fillRect(topX - thickLineOffset, topY, variableWidth, botY - topY);
		}
		
		var StaveConnector = exports.StaveConnector = function (_Element) {
		  _inherits(StaveConnector, _Element);
		
		  _createClass(StaveConnector, null, [{
		    key: 'type',
		
		    // SINGLE_LEFT and SINGLE are the same value for compatibility
		    // with older versions of vexflow which didn't have right sided
		    // stave connectors
		    get: function get() {
		      return {
		        SINGLE_RIGHT: 0,
		        SINGLE_LEFT: 1,
		        SINGLE: 1,
		        DOUBLE: 2,
		        BRACE: 3,
		        BRACKET: 4,
		        BOLD_DOUBLE_LEFT: 5,
		        BOLD_DOUBLE_RIGHT: 6,
		        THIN_DOUBLE: 7,
		        NONE: 8
		      };
		    }
		  }, {
		    key: 'typeString',
		    get: function get() {
		      return {
		        singleRight: StaveConnector.type.SINGLE_RIGHT,
		        singleLeft: StaveConnector.type.SINGLE_LEFT,
		        single: StaveConnector.type.SINGLE,
		        double: StaveConnector.type.DOUBLE,
		        brace: StaveConnector.type.BRACE,
		        bracket: StaveConnector.type.BRACKET,
		        boldDoubleLeft: StaveConnector.type.BOLD_DOUBLE_LEFT,
		        boldDoubleRight: StaveConnector.type.BOLD_DOUBLE_RIGHT,
		        thinDouble: StaveConnector.type.THIN_DOUBLE,
		        none: StaveConnector.type.NONE
		      };
		    }
		  }]);
		
		  function StaveConnector(top_stave, bottom_stave) {
		    _classCallCheck(this, StaveConnector);
		
		    var _this = _possibleConstructorReturn(this, (StaveConnector.__proto__ || Object.getPrototypeOf(StaveConnector)).call(this));
		
		    _this.setAttribute('type', 'StaveConnector');
		
		    _this.thickness = _tables.Flow.STAVE_LINE_THICKNESS;
		    _this.width = 3;
		    _this.top_stave = top_stave;
		    _this.bottom_stave = bottom_stave;
		    _this.type = StaveConnector.type.DOUBLE;
		    _this.font = {
		      family: 'times',
		      size: 16,
		      weight: 'normal'
		    };
		    // 1. Offset Bold Double Left to align with offset Repeat Begin bars
		    // 2. Offset BRACE type not to overlap with another StaveConnector
		    _this.x_shift = 0;
		    _this.texts = [];
		    return _this;
		  }
		
		  _createClass(StaveConnector, [{
		    key: 'setType',
		    value: function setType(type) {
		      type = typeof type === 'string' ? StaveConnector.typeString[type] : type;
		
		      if (type >= StaveConnector.type.SINGLE_RIGHT && type <= StaveConnector.type.NONE) {
		        this.type = type;
		      }
		      return this;
		    }
		  }, {
		    key: 'setText',
		    value: function setText(text, options) {
		      this.texts.push({
		        content: text,
		        options: _vex.Vex.Merge({ shift_x: 0, shift_y: 0 }, options)
		      });
		      return this;
		    }
		  }, {
		    key: 'setFont',
		    value: function setFont(font) {
		      _vex.Vex.Merge(this.font, font);
		    }
		  }, {
		    key: 'setXShift',
		    value: function setXShift(x_shift) {
		      if (typeof x_shift !== 'number') {
		        throw _vex.Vex.RERR('InvalidType', 'x_shift must be a Number');
		      }
		
		      this.x_shift = x_shift;
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var ctx = this.checkContext();
		      this.setRendered();
		
		      var topY = this.top_stave.getYForLine(0);
		      var botY = this.bottom_stave.getYForLine(this.bottom_stave.getNumLines() - 1) + this.thickness;
		      var width = this.width;
		      var topX = this.top_stave.getX();
		
		      var isRightSidedConnector = this.type === StaveConnector.type.SINGLE_RIGHT || this.type === StaveConnector.type.BOLD_DOUBLE_RIGHT || this.type === StaveConnector.type.THIN_DOUBLE;
		
		      if (isRightSidedConnector) {
		        topX = this.top_stave.getX() + this.top_stave.width;
		      }
		
		      var attachment_height = botY - topY;
		      switch (this.type) {
		        case StaveConnector.type.SINGLE:
		          width = 1;
		          break;
		        case StaveConnector.type.SINGLE_LEFT:
		          width = 1;
		          break;
		        case StaveConnector.type.SINGLE_RIGHT:
		          width = 1;
		          break;
		        case StaveConnector.type.DOUBLE:
		          topX -= this.width + 2;
		          break;
		        case StaveConnector.type.BRACE:
		          {
		            width = 12;
		            // May need additional code to draw brace
		            var x1 = this.top_stave.getX() - 2 + this.x_shift;
		            var y1 = topY;
		            var x3 = x1;
		            var y3 = botY;
		            var x2 = x1 - width;
		            var y2 = y1 + attachment_height / 2.0;
		            var cpx1 = x2 - 0.90 * width;
		            var cpy1 = y1 + 0.2 * attachment_height;
		            var cpx2 = x1 + 1.10 * width;
		            var cpy2 = y2 - 0.135 * attachment_height;
		            var cpx3 = cpx2;
		            var cpy3 = y2 + 0.135 * attachment_height;
		            var cpx4 = cpx1;
		            var cpy4 = y3 - 0.2 * attachment_height;
		            var cpx5 = x2 - width;
		            var cpy5 = cpy4;
		            var cpx6 = x1 + 0.40 * width;
		            var cpy6 = y2 + 0.135 * attachment_height;
		            var cpx7 = cpx6;
		            var cpy7 = y2 - 0.135 * attachment_height;
		            var cpx8 = cpx5;
		            var cpy8 = cpy1;
		            ctx.beginPath();
		            ctx.moveTo(x1, y1);
		            ctx.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, x2, y2);
		            ctx.bezierCurveTo(cpx3, cpy3, cpx4, cpy4, x3, y3);
		            ctx.bezierCurveTo(cpx5, cpy5, cpx6, cpy6, x2, y2);
		            ctx.bezierCurveTo(cpx7, cpy7, cpx8, cpy8, x1, y1);
		            ctx.fill();
		            ctx.stroke();
		            break;
		          }case StaveConnector.type.BRACKET:
		          topY -= 4;
		          botY += 4;
		          attachment_height = botY - topY;
		          _glyph.Glyph.renderGlyph(ctx, topX - 5, topY - 3, 40, 'v1b', true);
		          _glyph.Glyph.renderGlyph(ctx, topX - 5, botY + 3, 40, 'v10', true);
		          topX -= this.width + 2;
		          break;
		        case StaveConnector.type.BOLD_DOUBLE_LEFT:
		          drawBoldDoubleLine(ctx, this.type, topX + this.x_shift, topY, botY);
		          break;
		        case StaveConnector.type.BOLD_DOUBLE_RIGHT:
		          drawBoldDoubleLine(ctx, this.type, topX, topY, botY);
		          break;
		        case StaveConnector.type.THIN_DOUBLE:
		          width = 1;
		          break;
		        case StaveConnector.type.NONE:
		          break;
		        default:
		          throw new _vex.Vex.RERR('InvalidType', 'The provided StaveConnector.type (' + this.type + ') is invalid');
		      }
		
		      if (this.type !== StaveConnector.type.BRACE && this.type !== StaveConnector.type.BOLD_DOUBLE_LEFT && this.type !== StaveConnector.type.BOLD_DOUBLE_RIGHT && this.type !== StaveConnector.type.NONE) {
		        ctx.fillRect(topX, topY, width, attachment_height);
		      }
		
		      // If the connector is a thin double barline, draw the paralell line
		      if (this.type === StaveConnector.type.THIN_DOUBLE) {
		        ctx.fillRect(topX - 3, topY, width, attachment_height);
		      }
		
		      ctx.save();
		      ctx.lineWidth = 2;
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      // Add stave connector text
		      for (var i = 0; i < this.texts.length; i++) {
		        var text = this.texts[i];
		        var text_width = ctx.measureText('' + text.content).width;
		        var x = this.top_stave.getX() - text_width - 24 + text.options.shift_x;
		        var y = (this.top_stave.getYForLine(0) + this.bottom_stave.getBottomLineY()) / 2 + text.options.shift_y;
		
		        ctx.fillText('' + text.content, x, y + 4);
		      }
		      ctx.restore();
		    }
		  }]);
	
		  return StaveConnector;
		}(_element.Element);
	
	/***/ },
	/* 20 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveNote = undefined;
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _boundingbox = __webpack_require__(8);
		
		var _stem = __webpack_require__(17);
		
		var _notehead = __webpack_require__(21);
		
		var _stemmablenote = __webpack_require__(24);
		
		var _modifier = __webpack_require__(25);
		
		var _dot = __webpack_require__(26);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This file implements notes for standard notation. This consists of one or
		// more `NoteHeads`, an optional stem, and an optional flag.
		//
		// *Throughout these comments, a "note" refers to the entire `StaveNote`,
		// and a "key" refers to a specific pitch/notehead within a note.*
		//
		// See `tests/stavenote_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.StaveNote.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (StaveNote.DEBUG) _vex.Vex.L('Vex.Flow.StaveNote', args);
		}
		
		var getStemAdjustment = function getStemAdjustment(note) {
		  return _stem.Stem.WIDTH / (2 * -note.getStemDirection());
		};
		
		var isInnerNoteIndex = function isInnerNoteIndex(note, index) {
		  return index === (note.getStemDirection() === _stem.Stem.UP ? note.keyProps.length - 1 : 0);
		};
		
		// Helper methods for rest positioning in ModifierContext.
		function shiftRestVertical(rest, note, dir) {
		  var delta = (note.isrest ? 0.0 : 1.0) * dir;
		
		  rest.line += delta;
		  rest.maxLine += delta;
		  rest.minLine += delta;
		  rest.note.setKeyLine(0, rest.note.getKeyLine(0) + delta);
		}
		
		// Called from formatNotes :: center a rest between two notes
		function centerRest(rest, noteU, noteL) {
		  var delta = rest.line - _vex.Vex.MidLine(noteU.minLine, noteL.maxLine);
		  rest.note.setKeyLine(0, rest.note.getKeyLine(0) - delta);
		  rest.line -= delta;
		  rest.maxLine -= delta;
		  rest.minLine -= delta;
		}
		
		var StaveNote = exports.StaveNote = function (_StemmableNote) {
		  _inherits(StaveNote, _StemmableNote);
		
		  _createClass(StaveNote, null, [{
		    key: 'format',
		
		
		    // ## Static Methods
		    //
		    // Format notes inside a ModifierContext.
		    value: function format(notes, state) {
		      if (!notes || notes.length < 2) return false;
		
		      // FIXME: VexFlow will soon require that a stave be set before formatting.
		      // Which, according to the below condition, means that following branch will
		      // always be taken and the rest of this function is dead code.
		      //
		      // Problematically, `Formatter#formatByY` was not designed to work for more
		      // than 2 voices (although, doesn't throw on this condition, just tries
		      // to power through).
		      //
		      // Based on the above:
		      //   * 2 voices can be formatted *with or without* a stave being set but
		      //     the output will be different
		      //   * 3 voices can only be formatted *without* a stave
		      if (notes[0].getStave()) {
		        return StaveNote.formatByY(notes, state);
		      }
		
		      var notesList = [];
		
		      for (var i = 0; i < notes.length; i++) {
		        var props = notes[i].getKeyProps();
		        var line = props[0].line;
		        var minL = props[props.length - 1].line;
		        var stemDirection = notes[i].getStemDirection();
		        var stemMax = notes[i].getStemLength() / 10;
		        var stemMin = notes[i].getStemMinumumLength() / 10;
		
		        var maxL = void 0;
		        if (notes[i].isRest()) {
		          maxL = line + notes[i].glyph.line_above;
		          minL = line - notes[i].glyph.line_below;
		        } else {
		          maxL = stemDirection === 1 ? props[props.length - 1].line + stemMax : props[props.length - 1].line;
		
		          minL = stemDirection === 1 ? props[0].line : props[0].line - stemMax;
		        }
		
		        notesList.push({
		          line: props[0].line, // note/rest base line
		          maxLine: maxL, // note/rest upper bounds line
		          minLine: minL, // note/rest lower bounds line
		          isrest: notes[i].isRest(),
		          stemDirection: stemDirection,
		          stemMax: stemMax, // Maximum (default) note stem length;
		          stemMin: stemMin, // minimum note stem length
		          voice_shift: notes[i].getVoiceShiftWidth(),
		          is_displaced: notes[i].isDisplaced(), // note manually displaced
		          note: notes[i]
		        });
		      }
		
		      var voices = notesList.length;
		
		      var noteU = notesList[0];
		      var noteM = voices > 2 ? notesList[1] : null;
		      var noteL = voices > 2 ? notesList[2] : notesList[1];
		
		      // for two voice backward compatibility, ensure upper voice is stems up
		      // for three voices, the voices must be in order (upper, middle, lower)
		      if (voices === 2 && noteU.stemDirection === -1 && noteL.stemDirection === 1) {
		        noteU = notesList[1];
		        noteL = notesList[0];
		      }
		
		      var voiceXShift = Math.max(noteU.voice_shift, noteL.voice_shift);
		      var xShift = 0;
		      var stemDelta = void 0;
		
		      // Test for two voice note intersection
		      if (voices === 2) {
		        var lineSpacing = noteU.stemDirection === noteL.stemDirection ? 0.0 : 0.5;
		        // if top voice is a middle voice, check stem intersection with lower voice
		        if (noteU.stemDirection === noteL.stemDirection && noteU.minLine <= noteL.maxLine) {
		          if (!noteU.isrest) {
		            stemDelta = Math.abs(noteU.line - (noteL.maxLine + 0.5));
		            stemDelta = Math.max(stemDelta, noteU.stemMin);
		            noteU.minLine = noteU.line - stemDelta;
		            noteU.note.setStemLength(stemDelta * 10);
		          }
		        }
		        if (noteU.minLine <= noteL.maxLine + lineSpacing) {
		          if (noteU.isrest) {
		            // shift rest up
		            shiftRestVertical(noteU, noteL, 1);
		          } else if (noteL.isrest) {
		            // shift rest down
		            shiftRestVertical(noteL, noteU, -1);
		          } else {
		            xShift = voiceXShift;
		            if (noteU.stemDirection === noteL.stemDirection) {
		              // upper voice is middle voice, so shift it right
		              noteU.note.setXShift(xShift + 3);
		            } else {
		              // shift lower voice right
		              noteL.note.setXShift(xShift);
		            }
		          }
		        }
		
		        // format complete
		        return true;
		      }
		
		      // Check middle voice stem intersection with lower voice
		      if (noteM !== null && noteM.minLine < noteL.maxLine + 0.5) {
		        if (!noteM.isrest) {
		          stemDelta = Math.abs(noteM.line - (noteL.maxLine + 0.5));
		          stemDelta = Math.max(stemDelta, noteM.stemMin);
		          noteM.minLine = noteM.line - stemDelta;
		          noteM.note.setStemLength(stemDelta * 10);
		        }
		      }
		
		      // For three voices, test if rests can be repositioned
		      //
		      // Special case 1 :: middle voice rest between two notes
		      //
		      if (noteM.isrest && !noteU.isrest && !noteL.isrest) {
		        if (noteU.minLine <= noteM.maxLine || noteM.minLine <= noteL.maxLine) {
		          var restHeight = noteM.maxLine - noteM.minLine;
		          var space = noteU.minLine - noteL.maxLine;
		          if (restHeight < space) {
		            // center middle voice rest between the upper and lower voices
		            centerRest(noteM, noteU, noteL);
		          } else {
		            xShift = voiceXShift + 3; // shift middle rest right
		            noteM.note.setXShift(xShift);
		          }
		          // format complete
		          return true;
		        }
		      }
		
		      // Special case 2 :: all voices are rests
		      if (noteU.isrest && noteM.isrest && noteL.isrest) {
		        // Shift upper voice rest up
		        shiftRestVertical(noteU, noteM, 1);
		        // Shift lower voice rest down
		        shiftRestVertical(noteL, noteM, -1);
		        // format complete
		        return true;
		      }
		
		      // Test if any other rests can be repositioned
		      if (noteM.isrest && noteU.isrest && noteM.minLine <= noteL.maxLine) {
		        // Shift middle voice rest up
		        shiftRestVertical(noteM, noteL, 1);
		      }
		      if (noteM.isrest && noteL.isrest && noteU.minLine <= noteM.maxLine) {
		        // Shift middle voice rest down
		        shiftRestVertical(noteM, noteU, -1);
		      }
		      if (noteU.isrest && noteU.minLine <= noteM.maxLine) {
		        // shift upper voice rest up;
		        shiftRestVertical(noteU, noteM, 1);
		      }
		      if (noteL.isrest && noteM.minLine <= noteL.maxLine) {
		        // shift lower voice rest down
		        shiftRestVertical(noteL, noteM, -1);
		      }
		
		      // If middle voice intersects upper or lower voice
		      if (!noteU.isrest && !noteM.isrest && noteU.minLine <= noteM.maxLine + 0.5 || !noteM.isrest && !noteL.isrest && noteM.minLine <= noteL.maxLine) {
		        xShift = voiceXShift + 3; // shift middle note right
		        noteM.note.setXShift(xShift);
		      }
		
		      return true;
		    }
		  }, {
		    key: 'formatByY',
		    value: function formatByY(notes, state) {
		      // NOTE: this function does not support more than two voices per stave
		      // use with care.
		      var hasStave = true;
		
		      for (var i = 0; i < notes.length; i++) {
		        hasStave = hasStave && notes[i].getStave() != null;
		      }
		
		      if (!hasStave) {
		        throw new _vex.Vex.RERR('Stave Missing', 'All notes must have a stave - Vex.Flow.ModifierContext.formatMultiVoice!');
		      }
		
		      var xShift = 0;
		
		      for (var _i = 0; _i < notes.length - 1; _i++) {
		        var topNote = notes[_i];
		        var bottomNote = notes[_i + 1];
		
		        if (topNote.getStemDirection() === _stem.Stem.DOWN) {
		          topNote = notes[_i + 1];
		          bottomNote = notes[_i];
		        }
		
		        var topKeys = topNote.getKeyProps();
		        var bottomKeys = bottomNote.getKeyProps();
		
		        var HALF_NOTEHEAD_HEIGHT = 0.5;
		
		        // `keyProps` and `stave.getYForLine` have different notions of a `line`
		        // so we have to convert the keyProps value by subtracting 5.
		        // See https://github.com/0xfe/vexflow/wiki/Development-Gotchas
		        //
		        // We also extend the y for each note by a half notehead because the
		        // notehead's origin is centered
		        var topNotBottomY = topNote.getStave().getYForLine(5 - topKeys[0].line + HALF_NOTEHEAD_HEIGHT);
		
		        var bottomNoteTopY = bottomNote.getStave().getYForLine(5 - bottomKeys[bottomKeys.length - 1].line - HALF_NOTEHEAD_HEIGHT);
		
		        var areNotesColliding = bottomNoteTopY - topNotBottomY < 0;
		
		        if (areNotesColliding) {
		          xShift = topNote.getVoiceShiftWidth() + 2;
		          bottomNote.setXShift(xShift);
		        }
		      }
		
		      state.right_shift += xShift;
		    }
		  }, {
		    key: 'postFormat',
		    value: function postFormat(notes) {
		      if (!notes) return false;
		
		      notes.forEach(function (note) {
		        return note.postFormat();
		      });
		
		      return true;
		    }
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'stavenotes';
		    }
		  }, {
		    key: 'STEM_UP',
		    get: function get() {
		      return _stem.Stem.UP;
		    }
		  }, {
		    key: 'STEM_DOWN',
		    get: function get() {
		      return _stem.Stem.DOWN;
		    }
		  }, {
		    key: 'DEFAULT_LEDGER_LINE_OFFSET',
		    get: function get() {
		      return 3;
		    }
		  }]);
		
		  function StaveNote(noteStruct) {
		    _classCallCheck(this, StaveNote);
		
		    var _this = _possibleConstructorReturn(this, (StaveNote.__proto__ || Object.getPrototypeOf(StaveNote)).call(this, noteStruct));
		
		    _this.setAttribute('type', 'StaveNote');
		
		    _this.keys = noteStruct.keys;
		    _this.clef = noteStruct.clef;
		    _this.octave_shift = noteStruct.octave_shift;
		    _this.beam = null;
		
		    // Pull note rendering properties
		    _this.glyph = _tables.Flow.durationToGlyph(_this.duration, _this.noteType);
		
		    if (!_this.glyph) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Invalid note initialization data (No glyph found): ' + JSON.stringify(noteStruct));
		    }
		
		    // if true, displace note to right
		    _this.displaced = false;
		    _this.dot_shiftY = 0;
		    // per-pitch properties
		    _this.keyProps = [];
		    // for displaced ledger lines
		    _this.use_default_head_x = false;
		
		    // Drawing
		    _this.note_heads = [];
		    _this.modifiers = [];
		
		    _vex.Vex.Merge(_this.render_options, {
		      // font size for note heads and rests
		      glyph_font_scale: noteStruct.glyph_font_scale || _tables.Flow.DEFAULT_NOTATION_FONT_SCALE,
		      // number of stroke px to the left and right of head
		      stroke_px: noteStruct.stroke_px || StaveNote.DEFAULT_LEDGER_LINE_OFFSET
		    });
		
		    _this.calculateKeyProps();
		    _this.buildStem();
		
		    // Set the stem direction
		    if (noteStruct.auto_stem) {
		      _this.autoStem();
		    } else {
		      _this.setStemDirection(noteStruct.stem_direction);
		    }
		    _this.reset();
		    _this.buildFlag();
		    return _this;
		  }
		
		  _createClass(StaveNote, [{
		    key: 'reset',
		    value: function reset() {
		      var _this2 = this;
		
		      _get(StaveNote.prototype.__proto__ || Object.getPrototypeOf(StaveNote.prototype), 'reset', this).call(this);
		      this.buildNoteHeads();
		      if (this.stave) {
		        this.note_heads.forEach(function (head) {
		          return head.setStave(_this2.stave);
		        });
		      }
		      this.calcExtraPx();
		    }
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return StaveNote.CATEGORY;
		    }
		
		    // Builds a `Stem` for the note
		
		  }, {
		    key: 'buildStem',
		    value: function buildStem() {
		      var glyph = this.getGlyph();
		      var yExtend = glyph.code_head === 'v95' || glyph.code_head === 'v3e' ? -4 : 0;
		
		      this.setStem(new _stem.Stem({
		        yExtend: yExtend,
		        hide: !!this.isRest()
		      }));
		    }
		
		    // Builds a `NoteHead` for each key in the note
		
		  }, {
		    key: 'buildNoteHeads',
		    value: function buildNoteHeads() {
		      this.note_heads = [];
		      var stemDirection = this.getStemDirection();
		      var keys = this.getKeys();
		
		      var lastLine = null;
		      var lineDiff = null;
		      var displaced = false;
		
		      // Draw notes from bottom to top.
		
		      // For down-stem notes, we draw from top to bottom.
		      var start = void 0;
		      var end = void 0;
		      var step = void 0;
		      if (stemDirection === _stem.Stem.UP) {
		        start = 0;
		        end = keys.length;
		        step = 1;
		      } else if (stemDirection === _stem.Stem.DOWN) {
		        start = keys.length - 1;
		        end = -1;
		        step = -1;
		      }
		
		      for (var i = start; i !== end; i += step) {
		        var noteProps = this.keyProps[i];
		        var line = noteProps.line;
		
		        // Keep track of last line with a note head, so that consecutive heads
		        // are correctly displaced.
		        if (lastLine === null) {
		          lastLine = line;
		        } else {
		          lineDiff = Math.abs(lastLine - line);
		          if (lineDiff === 0 || lineDiff === 0.5) {
		            displaced = !displaced;
		          } else {
		            displaced = false;
		            this.use_default_head_x = true;
		          }
		        }
		        lastLine = line;
		
		        var notehead = new _notehead.NoteHead({
		          duration: this.duration,
		          note_type: this.noteType,
		          displaced: displaced,
		          stem_direction: stemDirection,
		          custom_glyph_code: noteProps.code,
		          glyph_font_scale: this.render_options.glyph_font_scale,
		          x_shift: noteProps.shift_right,
		          line: noteProps.line
		        });
		
		        this.note_heads[i] = notehead;
		      }
		    }
		
		    // Automatically sets the stem direction based on the keys in the note
		
		  }, {
		    key: 'autoStem',
		    value: function autoStem() {
		      // Figure out optimal stem direction based on given notes
		      this.minLine = this.keyProps[0].line;
		      this.maxLine = this.keyProps[this.keyProps.length - 1].line;
		
		      var MIDDLE_LINE = 3;
		      var decider = (this.minLine + this.maxLine) / 2;
		      var stemDirection = decider < MIDDLE_LINE ? _stem.Stem.UP : _stem.Stem.DOWN;
		
		      this.setStemDirection(stemDirection);
		    }
		
		    // Calculates and stores the properties for each key in the note
		
		  }, {
		    key: 'calculateKeyProps',
		    value: function calculateKeyProps() {
		      var lastLine = null;
		      for (var i = 0; i < this.keys.length; ++i) {
		        var key = this.keys[i];
		
		        // All rests use the same position on the line.
		        // if (this.glyph.rest) key = this.glyph.position;
		        if (this.glyph.rest) this.glyph.position = key;
		
		        var options = { octave_shift: this.octave_shift || 0 };
		        var props = _tables.Flow.keyProperties(key, this.clef, options);
		
		        if (!props) {
		          throw new _vex.Vex.RuntimeError('BadArguments', 'Invalid key for note properties: ' + key);
		        }
		
		        // Override line placement for default rests
		        if (props.key === 'R') {
		          if (this.duration === '1' || this.duration === 'w') {
		            props.line = 4;
		          } else {
		            props.line = 3;
		          }
		        }
		
		        // Calculate displacement of this note
		        var line = props.line;
		        if (lastLine === null) {
		          lastLine = line;
		        } else {
		          if (Math.abs(lastLine - line) === 0.5) {
		            this.displaced = true;
		            props.displaced = true;
		
		            // Have to mark the previous note as
		            // displaced as well, for modifier placement
		            if (this.keyProps.length > 0) {
		              this.keyProps[i - 1].displaced = true;
		            }
		          }
		        }
		
		        lastLine = line;
		        this.keyProps.push(props);
		      }
		
		      // Sort the notes from lowest line to highest line
		      lastLine = -Infinity;
		      this.keyProps.forEach(function (key) {
		        if (key.line < lastLine) {
		          _vex.Vex.W('Unsorted keys in note will be sorted. ' + 'See https://github.com/0xfe/vexflow/issues/104 for details.');
		        }
		        lastLine = key.line;
		      });
		      this.keyProps.sort(function (a, b) {
		        return a.line - b.line;
		      });
		    }
		
		    // Get the `BoundingBox` for the entire note
		
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call getBoundingBox on an unformatted note.");
		      }
		
		      var _getMetrics = this.getMetrics(),
		          w = _getMetrics.width,
		          modLeftPx = _getMetrics.modLeftPx,
		          extraLeftPx = _getMetrics.extraLeftPx;
		
		      var x = this.getAbsoluteX() - modLeftPx - extraLeftPx;
		
		      var minY = 0;
		      var maxY = 0;
		      var halfLineSpacing = this.getStave().getSpacingBetweenLines() / 2;
		      var lineSpacing = halfLineSpacing * 2;
		
		      if (this.isRest()) {
		        var y = this.ys[0];
		        var frac = _tables.Flow.durationToFraction(this.duration);
		        if (frac.equals(1) || frac.equals(2)) {
		          minY = y - halfLineSpacing;
		          maxY = y + halfLineSpacing;
		        } else {
		          minY = y - this.glyph.line_above * lineSpacing;
		          maxY = y + this.glyph.line_below * lineSpacing;
		        }
		      } else if (this.glyph.stem) {
		        var ys = this.getStemExtents();
		        ys.baseY += halfLineSpacing * this.stem_direction;
		        minY = Math.min(ys.topY, ys.baseY);
		        maxY = Math.max(ys.topY, ys.baseY);
		      } else {
		        minY = null;
		        maxY = null;
		
		        for (var i = 0; i < this.ys.length; ++i) {
		          var yy = this.ys[i];
		          if (i === 0) {
		            minY = yy;
		            maxY = yy;
		          } else {
		            minY = Math.min(yy, minY);
		            maxY = Math.max(yy, maxY);
		          }
		        }
		        minY -= halfLineSpacing;
		        maxY += halfLineSpacing;
		      }
		
		      return new _boundingbox.BoundingBox(x, minY, w, maxY - minY);
		    }
		
		    // Gets the line number of the top or bottom note in the chord.
		    // If `isTopNote` is `true` then get the top note
		
		  }, {
		    key: 'getLineNumber',
		    value: function getLineNumber(isTopNote) {
		      if (!this.keyProps.length) {
		        throw new _vex.Vex.RERR('NoKeyProps', "Can't get bottom note line, because note is not initialized properly.");
		      }
		
		      var resultLine = this.keyProps[0].line;
		
		      // No precondition assumed for sortedness of keyProps array
		      for (var i = 0; i < this.keyProps.length; i++) {
		        var thisLine = this.keyProps[i].line;
		        if (isTopNote) {
		          if (thisLine > resultLine) resultLine = thisLine;
		        } else {
		          if (thisLine < resultLine) resultLine = thisLine;
		        }
		      }
		
		      return resultLine;
		    }
		
		    // Determine if current note is a rest
		
		  }, {
		    key: 'isRest',
		    value: function isRest() {
		      return this.glyph.rest;
		    }
		
		    // Determine if the current note is a chord
		
		  }, {
		    key: 'isChord',
		    value: function isChord() {
		      return !this.isRest() && this.keys.length > 1;
		    }
		
		    // Determine if the `StaveNote` has a stem
		
		  }, {
		    key: 'hasStem',
		    value: function hasStem() {
		      return this.glyph.stem;
		    }
		  }, {
		    key: 'hasFlag',
		    value: function hasFlag() {
		      return _get(StaveNote.prototype.__proto__ || Object.getPrototypeOf(StaveNote.prototype), 'hasFlag', this).call(this) && !this.isRest();
		    }
		  }, {
		    key: 'getStemX',
		    value: function getStemX() {
		      if (this.noteType === 'r') {
		        return this.getCenterGlyphX();
		      } else {
		        // We adjust the origin of the stem because we want the stem left-aligned
		        // with the notehead if stemmed-down, and right-aligned if stemmed-up
		        return _get(StaveNote.prototype.__proto__ || Object.getPrototypeOf(StaveNote.prototype), 'getStemX', this).call(this) + getStemAdjustment(this);
		      }
		    }
		
		    // Get the `y` coordinate for text placed on the top/bottom of a
		    // note at a desired `text_line`
		
		  }, {
		    key: 'getYForTopText',
		    value: function getYForTopText(textLine) {
		      var extents = this.getStemExtents();
		      return Math.min(this.stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));
		    }
		  }, {
		    key: 'getYForBottomText',
		    value: function getYForBottomText(textLine) {
		      var extents = this.getStemExtents();
		      return Math.max(this.stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);
		    }
		
		    // Sets the current note to the provided `stave`. This applies
		    // `y` values to the `NoteHeads`.
		
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      _get(StaveNote.prototype.__proto__ || Object.getPrototypeOf(StaveNote.prototype), 'setStave', this).call(this, stave);
		
		      var ys = this.note_heads.map(function (notehead) {
		        notehead.setStave(stave);
		        return notehead.getY();
		      });
		
		      this.setYs(ys);
		
		      if (this.stem) {
		        var _getNoteHeadBounds = this.getNoteHeadBounds(),
		            y_top = _getNoteHeadBounds.y_top,
		            y_bottom = _getNoteHeadBounds.y_bottom;
		
		        this.stem.setYBounds(y_top, y_bottom);
		      }
		
		      return this;
		    }
		
		    // Get the pitches in the note
		
		  }, {
		    key: 'getKeys',
		    value: function getKeys() {
		      return this.keys;
		    }
		
		    // Get the properties for all the keys in the note
		
		  }, {
		    key: 'getKeyProps',
		    value: function getKeyProps() {
		      return this.keyProps;
		    }
		
		    // Check if note is shifted to the right
		
		  }, {
		    key: 'isDisplaced',
		    value: function isDisplaced() {
		      return this.displaced;
		    }
		
		    // Sets whether shift note to the right. `displaced` is a `boolean`
		
		  }, {
		    key: 'setNoteDisplaced',
		    value: function setNoteDisplaced(displaced) {
		      this.displaced = displaced;
		      return this;
		    }
		
		    // Get the starting `x` coordinate for a `StaveTie`
		
		  }, {
		    key: 'getTieRightX',
		    value: function getTieRightX() {
		      var tieStartX = this.getAbsoluteX();
		      tieStartX += this.getGlyphWidth() + this.x_shift + this.extraRightPx;
		      if (this.modifierContext) tieStartX += this.modifierContext.getExtraRightPx();
		      return tieStartX;
		    }
		
		    // Get the ending `x` coordinate for a `StaveTie`
		
		  }, {
		    key: 'getTieLeftX',
		    value: function getTieLeftX() {
		      var tieEndX = this.getAbsoluteX();
		      tieEndX += this.x_shift - this.extraLeftPx;
		      return tieEndX;
		    }
		
		    // Get the stave line on which to place a rest
		
		  }, {
		    key: 'getLineForRest',
		    value: function getLineForRest() {
		      var restLine = this.keyProps[0].line;
		      if (this.keyProps.length > 1) {
		        var lastLine = this.keyProps[this.keyProps.length - 1].line;
		        var top = Math.max(restLine, lastLine);
		        var bot = Math.min(restLine, lastLine);
		        restLine = _vex.Vex.MidLine(top, bot);
		      }
		
		      return restLine;
		    }
		
		    // Get the default `x` and `y` coordinates for the provided `position`
		    // and key `index`
		
		  }, {
		    key: 'getModifierStartXY',
		    value: function getModifierStartXY(position, index) {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
		      }
		
		      if (this.ys.length === 0) {
		        throw new _vex.Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');
		      }
		
		      var _Modifier$Position = _modifier.Modifier.Position,
		          ABOVE = _Modifier$Position.ABOVE,
		          BELOW = _Modifier$Position.BELOW,
		          LEFT = _Modifier$Position.LEFT,
		          RIGHT = _Modifier$Position.RIGHT;
		
		      var x = 0;
		      if (position === LEFT) {
		        // extra_left_px
		        // FIXME: What are these magic numbers?
		        x = -1 * 2;
		      } else if (position === RIGHT) {
		        // extra_right_px
		        // FIXME: What is this magical +2?
		        x = this.getGlyphWidth() + this.x_shift + 2;
		
		        if (this.stem_direction === _stem.Stem.UP && this.hasFlag() && isInnerNoteIndex(this, index)) {
		          x += this.flag.getMetrics().width;
		        }
		      } else if (position === BELOW || position === ABOVE) {
		        x = this.getGlyphWidth() / 2;
		      }
		
		      return {
		        x: this.getAbsoluteX() + x,
		        y: this.ys[index]
		      };
		    }
		
		    // Sets the style of the complete StaveNote, including all keys
		    // and the stem.
		
		  }, {
		    key: 'setStyle',
		    value: function setStyle(style) {
		      this.note_heads.forEach(function (notehead) {
		        return notehead.setStyle(style);
		      });
		      this.stem.setStyle(style);
		    }
		
		    // Sets the notehead at `index` to the provided coloring `style`.
		    //
		    // `style` is an `object` with the following properties: `shadowColor`,
		    // `shadowBlur`, `fillStyle`, `strokeStyle`
		
		  }, {
		    key: 'setKeyStyle',
		    value: function setKeyStyle(index, style) {
		      this.note_heads[index].setStyle(style);
		      return this;
		    }
		  }, {
		    key: 'setKeyLine',
		    value: function setKeyLine(index, line) {
		      this.keyProps[index].line = line;
		      this.reset();
		      return this;
		    }
		  }, {
		    key: 'getKeyLine',
		    value: function getKeyLine(index) {
		      return this.keyProps[index].line;
		    }
		
		    // Add self to modifier context. `mContext` is the `ModifierContext`
		    // to be added to.
		
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext(mContext) {
		      this.setModifierContext(mContext);
		      for (var i = 0; i < this.modifiers.length; ++i) {
		        this.modifierContext.addModifier(this.modifiers[i]);
		      }
		      this.modifierContext.addModifier(this);
		      this.setPreFormatted(false);
		      return this;
		    }
		
		    // Generic function to add modifiers to a note
		    //
		    // Parameters:
		    // * `index`: The index of the key that we're modifying
		    // * `modifier`: The modifier to add
		
		  }, {
		    key: 'addModifier',
		    value: function addModifier(index, modifier) {
		      modifier.setNote(this);
		      modifier.setIndex(index);
		      this.modifiers.push(modifier);
		      this.setPreFormatted(false);
		      return this;
		    }
		
		    // Helper function to add an accidental to a key
		
		  }, {
		    key: 'addAccidental',
		    value: function addAccidental(index, accidental) {
		      return this.addModifier(index, accidental);
		    }
		
		    // Helper function to add an articulation to a key
		
		  }, {
		    key: 'addArticulation',
		    value: function addArticulation(index, articulation) {
		      return this.addModifier(index, articulation);
		    }
		
		    // Helper function to add an annotation to a key
		
		  }, {
		    key: 'addAnnotation',
		    value: function addAnnotation(index, annotation) {
		      return this.addModifier(index, annotation);
		    }
		
		    // Helper function to add a dot on a specific key
		
		  }, {
		    key: 'addDot',
		    value: function addDot(index) {
		      var dot = new _dot.Dot();
		      dot.setDotShiftY(this.glyph.dot_shiftY);
		      this.dots++;
		      return this.addModifier(index, dot);
		    }
		
		    // Convenience method to add dot to all keys in note
		
		  }, {
		    key: 'addDotToAll',
		    value: function addDotToAll() {
		      for (var i = 0; i < this.keys.length; ++i) {
		        this.addDot(i);
		      }
		      return this;
		    }
		
		    // Get all accidentals in the `ModifierContext`
		
		  }, {
		    key: 'getAccidentals',
		    value: function getAccidentals() {
		      return this.modifierContext.getModifiers('accidentals');
		    }
		
		    // Get all dots in the `ModifierContext`
		
		  }, {
		    key: 'getDots',
		    value: function getDots() {
		      return this.modifierContext.getModifiers('dots');
		    }
		
		    // Get the width of the note if it is displaced. Used for `Voice`
		    // formatting
		
		  }, {
		    key: 'getVoiceShiftWidth',
		    value: function getVoiceShiftWidth() {
		      // TODO: may need to accomodate for dot here.
		      return this.getGlyphWidth() * (this.displaced ? 2 : 1);
		    }
		
		    // Calculates and sets the extra pixels to the left or right
		    // if the note is displaced.
		
		  }, {
		    key: 'calcExtraPx',
		    value: function calcExtraPx() {
		      this.setExtraLeftPx(this.displaced && this.stem_direction === _stem.Stem.DOWN ? this.getGlyphWidth() : 0);
		
		      // For upstems with flags, the extra space is unnecessary, since it's taken
		      // up by the flag.
		      this.setExtraRightPx(!this.hasFlag() && this.displaced && this.stem_direction === _stem.Stem.UP ? this.getGlyphWidth() : 0);
		    }
		
		    // Pre-render formatting
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return;
		      if (this.modifierContext) this.modifierContext.preFormat();
		
		      var width = this.getGlyphWidth() + this.extraLeftPx + this.extraRightPx;
		
		      // For upward flagged notes, the width of the flag needs to be added
		      if (this.glyph.flag && this.beam === null && this.stem_direction === _stem.Stem.UP) {
		        width += this.getGlyphWidth();
		      }
		
		      this.setWidth(width);
		      this.setPreFormatted(true);
		    }
		
		    // Gets the staff line and y value for the highest and lowest noteheads
		
		  }, {
		    key: 'getNoteHeadBounds',
		    value: function getNoteHeadBounds() {
		      // Top and bottom Y values for stem.
		      var yTop = null;
		      var yBottom = null;
		
		      var highestLine = this.stave.getNumLines();
		      var lowestLine = 1;
		
		      this.note_heads.forEach(function (notehead) {
		        var line = notehead.getLine();
		        var y = notehead.getY();
		
		        if (yTop === null || y < yTop) {
		          yTop = y;
		        }
		
		        if (yBottom === null || y > yBottom) {
		          yBottom = y;
		        }
		
		        highestLine = line > highestLine ? line : highestLine;
		        lowestLine = line < lowestLine ? line : lowestLine;
		      }, this);
		
		      return {
		        y_top: yTop,
		        y_bottom: yBottom,
		        highest_line: highestLine,
		        lowest_line: lowestLine
		      };
		    }
		
		    // Get the starting `x` coordinate for the noteheads
		
		  }, {
		    key: 'getNoteHeadBeginX',
		    value: function getNoteHeadBeginX() {
		      return this.getAbsoluteX() + this.x_shift;
		    }
		
		    // Get the ending `x` coordinate for the noteheads
		
		  }, {
		    key: 'getNoteHeadEndX',
		    value: function getNoteHeadEndX() {
		      var xBegin = this.getNoteHeadBeginX();
		      return xBegin + this.getGlyphWidth();
		    }
		
		    // Draw the ledger lines between the stave and the highest/lowest keys
		
		  }, {
		    key: 'drawLedgerLines',
		    value: function drawLedgerLines() {
		      var _this3 = this;
		
		      var note_heads = this.note_heads,
		          stave = this.stave,
		          use_default_head_x = this.use_default_head_x,
		          x_shift = this.x_shift,
		          glyph = this.glyph,
		          stroke_px = this.render_options.stroke_px,
		          ctx = this.context;
		
		
		      if (this.isRest()) return;
		      if (!ctx) {
		        throw new _vex.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
		      }
		
		      var _getNoteHeadBounds2 = this.getNoteHeadBounds(),
		          highest_line = _getNoteHeadBounds2.highest_line,
		          lowest_line = _getNoteHeadBounds2.lowest_line;
		
		      var headX = note_heads[0].getAbsoluteX();
		
		      var drawLedgerLine = function drawLedgerLine(y) {
		        if (use_default_head_x === true) {
		          headX = _this3.getAbsoluteX() + x_shift;
		        }
		        var x = headX - stroke_px;
		        var length = headX + glyph.getWidth() - headX + stroke_px * 2;
		
		        ctx.fillRect(x, y, length, 1);
		      };
		
		      for (var line = 6; line <= highest_line; ++line) {
		        drawLedgerLine(stave.getYForNote(line));
		      }
		
		      for (var _line = 0; _line >= lowest_line; --_line) {
		        drawLedgerLine(stave.getYForNote(_line));
		      }
		    }
		
		    // Draw all key modifiers
		
		  }, {
		    key: 'drawModifiers',
		    value: function drawModifiers() {
		      if (!this.context) {
		        throw new _vex.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
		      }
		
		      var ctx = this.context;
		      ctx.openGroup('modifiers');
		      for (var i = 0; i < this.modifiers.length; i++) {
		        var modifier = this.modifiers[i];
		        var notehead = this.note_heads[modifier.getIndex()];
		        var noteheadStyle = notehead.getStyle();
		        if (noteheadStyle) {
		          ctx.save();
		          notehead.applyStyle(ctx);
		        }
		        modifier.setContext(ctx);
		        modifier.draw();
		        if (noteheadStyle) {
		          ctx.restore();
		        }
		      }
		      ctx.closeGroup();
		    }
		
		    // Draw the flag for the note
		
		  }, {
		    key: 'drawFlag',
		    value: function drawFlag() {
		      var stem = this.stem,
		          beam = this.beam,
		          ctx = this.context;
		
		
		      if (!ctx) {
		        throw new _vex.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
		      }
		
		      var shouldRenderFlag = beam === null;
		      var glyph = this.getGlyph();
		
		      if (glyph.flag && shouldRenderFlag) {
		        var _getNoteHeadBounds3 = this.getNoteHeadBounds(),
		            y_top = _getNoteHeadBounds3.y_top,
		            y_bottom = _getNoteHeadBounds3.y_bottom;
		
		        var noteStemHeight = stem.getHeight();
		        var flagX = this.getStemX();
		        // FIXME: What's with the magic +/- 2
		        var flagY = this.getStemDirection() === _stem.Stem.DOWN
		        // Down stems have flags on the left
		        ? y_top - noteStemHeight + 2
		        // Up stems have flags on the eft.
		        : y_bottom - noteStemHeight - 2;
		
		        // Draw the Flag
		        ctx.openGroup('flag', null, { pointerBBox: true });
		        this.flag.render(ctx, flagX, flagY);
		        ctx.closeGroup();
		      }
		    }
		
		    // Draw the NoteHeads
		
		  }, {
		    key: 'drawNoteHeads',
		    value: function drawNoteHeads() {
		      var _this4 = this;
		
		      this.note_heads.forEach(function (notehead) {
		        _this4.context.openGroup('notehead', null, { pointerBBox: true });
		        notehead.setContext(_this4.context).draw();
		        _this4.context.closeGroup();
		      });
		    }
		
		    // Render the stem onto the canvas
		
		  }, {
		    key: 'drawStem',
		    value: function drawStem(stemStruct) {
		      if (!this.context) {
		        throw new _vex.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
		      }
		
		      if (stemStruct) {
		        this.setStem(new _stem.Stem(stemStruct));
		      }
		
		      this.context.openGroup('stem', null, { pointerBBox: true });
		      this.stem.setContext(this.context).draw();
		      this.context.closeGroup();
		    }
		
		    // Draws all the `StaveNote` parts. This is the main drawing method.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      if (!this.context) {
		        throw new _vex.Vex.RERR('NoCanvasContext', "Can't draw without a canvas context.");
		      }
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('NoStave', "Can't draw without a stave.");
		      }
		      if (this.ys.length === 0) {
		        throw new _vex.Vex.RERR('NoYValues', "Can't draw note without Y values.");
		      }
		
		      var xBegin = this.getNoteHeadBeginX();
		      var shouldRenderStem = this.hasStem() && !this.beam;
		
		      // Format note head x positions
		      this.note_heads.forEach(function (notehead) {
		        return notehead.setX(xBegin);
		      });
		
		      // Format stem x positions
		      var stemX = this.getStemX();
		      this.stem.setNoteHeadXBounds(stemX, stemX);
		
		      L('Rendering ', this.isChord() ? 'chord :' : 'note :', this.keys);
		
		      // Draw each part of the note
		      this.drawLedgerLines();
		
		      this.setAttribute('el', this.context.openGroup('stavenote', this.getAttribute('id')));
		      this.context.openGroup('note', null, { pointerBBox: true });
		      if (shouldRenderStem) this.drawStem();
		      this.drawNoteHeads();
		      this.drawFlag();
		      this.context.closeGroup();
		      this.drawModifiers();
		      this.context.closeGroup();
		      this.setRendered();
		    }
		  }]);
	
		  return StaveNote;
		}(_stemmablenote.StemmableNote);
	
	/***/ },
	/* 21 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.NoteHead = undefined;
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _note = __webpack_require__(22);
		
		var _stem = __webpack_require__(17);
		
		var _stavenote = __webpack_require__(20);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements `NoteHeads`. `NoteHeads` are typically not manipulated
		// directly, but used internally in `StaveNote`.
		//
		// See `tests/notehead_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.NoteHead.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (NoteHead.DEBUG) _vex.Vex.L('Vex.Flow.NoteHead', args);
		}
		
		// Draw slashnote head manually. No glyph exists for this.
		//
		// Parameters:
		// * `ctx`: the Canvas context
		// * `duration`: the duration of the note. ex: "4"
		// * `x`: the x coordinate to draw at
		// * `y`: the y coordinate to draw at
		// * `stem_direction`: the direction of the stem
		function drawSlashNoteHead(ctx, duration, x, y, stem_direction, staveSpace) {
		  var width = _tables.Flow.SLASH_NOTEHEAD_WIDTH;
		  ctx.save();
		  ctx.setLineWidth(_tables.Flow.STEM_WIDTH);
		
		  var fill = false;
		
		  if (_tables.Flow.durationToNumber(duration) > 2) {
		    fill = true;
		  }
		
		  if (!fill) x -= _tables.Flow.STEM_WIDTH / 2 * stem_direction;
		
		  ctx.beginPath();
		  ctx.moveTo(x, y + staveSpace);
		  ctx.lineTo(x, y + 1);
		  ctx.lineTo(x + width, y - staveSpace);
		  ctx.lineTo(x + width, y);
		  ctx.lineTo(x, y + staveSpace);
		  ctx.closePath();
		
		  if (fill) {
		    ctx.fill();
		  } else {
		    ctx.stroke();
		  }
		
		  if (_tables.Flow.durationToFraction(duration).equals(0.5)) {
		    var breve_lines = [-3, -1, width + 1, width + 3];
		    for (var i = 0; i < breve_lines.length; i++) {
		      ctx.beginPath();
		      ctx.moveTo(x + breve_lines[i], y - 10);
		      ctx.lineTo(x + breve_lines[i], y + 11);
		      ctx.stroke();
		    }
		  }
		
		  ctx.restore();
		}
		
		var NoteHead = exports.NoteHead = function (_Note) {
		  _inherits(NoteHead, _Note);
		
		  _createClass(NoteHead, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'notehead';
		    }
		  }]);
		
		  function NoteHead(head_options) {
		    _classCallCheck(this, NoteHead);
		
		    var _this = _possibleConstructorReturn(this, (NoteHead.__proto__ || Object.getPrototypeOf(NoteHead)).call(this, head_options));
		
		    _this.setAttribute('type', 'NoteHead');
		
		    _this.index = head_options.index;
		    _this.x = head_options.x || 0;
		    _this.y = head_options.y || 0;
		    _this.note_type = head_options.note_type;
		    _this.duration = head_options.duration;
		    _this.displaced = head_options.displaced || false;
		    _this.stem_direction = head_options.stem_direction || _stavenote.StaveNote.STEM_UP;
		    _this.line = head_options.line;
		
		    // Get glyph code based on duration and note type. This could be
		    // regular notes, rests, or other custom codes.
		    _this.glyph = _tables.Flow.durationToGlyph(_this.duration, _this.note_type);
		    if (!_this.glyph) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'No glyph found for duration \'' + _this.duration + '\' and type \'' + _this.note_type + '\'');
		    }
		
		    _this.glyph_code = _this.glyph.code_head;
		    _this.x_shift = head_options.x_shift;
		    if (head_options.custom_glyph_code) {
		      _this.custom_glyph = true;
		      _this.glyph_code = head_options.custom_glyph_code;
		    }
		
		    _this.style = head_options.style;
		    _this.slashed = head_options.slashed;
		
		    _vex.Vex.Merge(_this.render_options, {
		      // font size for note heads
		      glyph_font_scale: head_options.glyph_font_scale || _tables.Flow.DEFAULT_NOTATION_FONT_SCALE,
		      // number of stroke px to the left and right of head
		      stroke_px: 3
		    });
		
		    _this.setWidth(_this.glyph.getWidth(_this.render_options.glyph_font_scale));
		    return _this;
		  }
		
		  _createClass(NoteHead, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return NoteHead.CATEGORY;
		    }
		
		    // Get the width of the notehead
		
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		
		    // Determine if the notehead is displaced
		
		  }, {
		    key: 'isDisplaced',
		    value: function isDisplaced() {
		      return this.displaced === true;
		    }
		
		    // Get/set the notehead's style
		    //
		    // `style` is an `object` with the following properties: `shadowColor`,
		    // `shadowBlur`, `fillStyle`, `strokeStyle`
		
		  }, {
		    key: 'getStyle',
		    value: function getStyle() {
		      return this.style;
		    }
		  }, {
		    key: 'setStyle',
		    value: function setStyle(style) {
		      this.style = style;return this;
		    }
		
		    // Get the glyph data
		
		  }, {
		    key: 'getGlyph',
		    value: function getGlyph() {
		      return this.glyph;
		    }
		
		    // Set the X coordinate
		
		  }, {
		    key: 'setX',
		    value: function setX(x) {
		      this.x = x;return this;
		    }
		
		    // get/set the Y coordinate
		
		  }, {
		    key: 'getY',
		    value: function getY() {
		      return this.y;
		    }
		  }, {
		    key: 'setY',
		    value: function setY(y) {
		      this.y = y;return this;
		    }
		
		    // Get/set the stave line the notehead is placed on
		
		  }, {
		    key: 'getLine',
		    value: function getLine() {
		      return this.line;
		    }
		  }, {
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;return this;
		    }
		
		    // Get the canvas `x` coordinate position of the notehead.
		
		  }, {
		    key: 'getAbsoluteX',
		    value: function getAbsoluteX() {
		      // If the note has not been preformatted, then get the static x value
		      // Otherwise, it's been formatted and we should use it's x value relative
		      // to its tick context
		      var x = !this.preFormatted ? this.x : _get(NoteHead.prototype.__proto__ || Object.getPrototypeOf(NoteHead.prototype), 'getAbsoluteX', this).call(this);
		
		      // For a more natural displaced notehead, we adjust the displacement amount
		      // by half the stem width in order to maintain a slight overlap with the stem
		      var displacementStemAdjustment = _stem.Stem.WIDTH / 2;
		
		      return x + (this.displaced ? (this.width - displacementStemAdjustment) * this.stem_direction : 0);
		    }
		
		    // Get the `BoundingBox` for the `NoteHead`
		
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call getBoundingBox on an unformatted note.");
		      }
		
		      var spacing = this.stave.getSpacingBetweenLines();
		      var half_spacing = spacing / 2;
		      var min_y = this.y - half_spacing;
		
		      return new _tables.Flow.BoundingBox(this.getAbsoluteX(), min_y, this.width, spacing);
		    }
		
		    // Apply current style to Canvas `context`
		
		  }, {
		    key: 'applyStyle',
		    value: function applyStyle(context) {
		      var style = this.getStyle();
		      if (style.shadowColor) context.setShadowColor(style.shadowColor);
		      if (style.shadowBlur) context.setShadowBlur(style.shadowBlur);
		      if (style.fillStyle) context.setFillStyle(style.fillStyle);
		      if (style.strokeStyle) context.setStrokeStyle(style.strokeStyle);
		      return this;
		    }
		
		    // Set notehead to a provided `stave`
		
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      var line = this.getLine();
		
		      this.stave = stave;
		      this.setY(stave.getYForNote(line));
		      this.context = this.stave.context;
		      return this;
		    }
		
		    // Pre-render formatting
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return this;
		
		      var width = this.getWidth() + this.extraLeftPx + this.extraRightPx;
		
		      this.setWidth(width);
		      this.setPreFormatted(true);
		      return this;
		    }
		
		    // Draw the notehead
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      var ctx = this.context;
		      var head_x = this.getAbsoluteX();
		      var y = this.y;
		
		      L("Drawing note head '", this.note_type, this.duration, "' at", head_x, y);
		
		      // Begin and end positions for head.
		      var stem_direction = this.stem_direction;
		      var glyph_font_scale = this.render_options.glyph_font_scale;
		      var line = this.line;
		
		      // If note above/below the staff, draw the small staff
		      if (line <= 0 || line >= 6) {
		        var line_y = y;
		        var floor = Math.floor(line);
		        if (line < 0 && floor - line === -0.5) {
		          line_y -= 5;
		        } else if (line > 6 && floor - line === -0.5) {
		          line_y += 5;
		        }
		
		        if (this.note_type !== 'r') {
		          ctx.fillRect(head_x - this.render_options.stroke_px, line_y, this.getWidth() + this.render_options.stroke_px * 2, 1);
		        }
		      }
		
		      if (this.note_type === 's') {
		        var staveSpace = this.stave.getSpacingBetweenLines();
		        drawSlashNoteHead(ctx, this.duration, head_x, y, stem_direction, staveSpace);
		      } else {
		        if (this.style) {
		          ctx.save();
		          this.applyStyle(ctx);
		          _glyph.Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code);
		          ctx.restore();
		        } else {
		          _glyph.Glyph.renderGlyph(ctx, head_x, y, glyph_font_scale, this.glyph_code);
		        }
		      }
		    }
		  }]);
	
		  return NoteHead;
		}(_note.Note);
	
	/***/ },
	/* 22 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Note = undefined;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _tickable = __webpack_require__(23);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements an abstract interface for notes and chords that
		// are rendered on a stave. Notes have some common properties: All of them
		// have a value (e.g., pitch, fret, etc.) and a duration (quarter, half, etc.)
		//
		// Some notes have stems, heads, dots, etc. Most notational elements that
		// surround a note are called *modifiers*, and every note has an associated
		// array of them. All notes also have a rendering context and belong to a stave.
		
		var Note = exports.Note = function (_Tickable) {
		  _inherits(Note, _Tickable);
		
		  _createClass(Note, null, [{
		    key: 'plotMetrics',
		
		
		    // Debug helper. Displays various note metrics for the given
		    // note.
		    value: function plotMetrics(ctx, note, yPos) {
		      var metrics = note.getMetrics();
		      var xStart = note.getAbsoluteX() - metrics.modLeftPx - metrics.extraLeftPx;
		      var xPre1 = note.getAbsoluteX() - metrics.extraLeftPx;
		      var xAbs = note.getAbsoluteX();
		      var xPost1 = note.getAbsoluteX() + metrics.noteWidth;
		      var xPost2 = note.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx;
		      var xEnd = note.getAbsoluteX() + metrics.noteWidth + metrics.extraRightPx + metrics.modRightPx;
		      var xFreedomRight = xEnd + note.getFormatterMetrics().freedom.right;
		
		      var xWidth = xEnd - xStart;
		      ctx.save();
		      ctx.setFont('Arial', 8, '');
		      ctx.fillText(Math.round(xWidth) + 'px', xStart + note.getXShift(), yPos);
		
		      var y = yPos + 7;
		      function stroke(x1, x2, color) {
		        var yy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : y;
		
		        ctx.beginPath();
		        ctx.setStrokeStyle(color);
		        ctx.setFillStyle(color);
		        ctx.setLineWidth(3);
		        ctx.moveTo(x1 + note.getXShift(), yy);
		        ctx.lineTo(x2 + note.getXShift(), yy);
		        ctx.stroke();
		      }
		
		      stroke(xStart, xPre1, 'red');
		      stroke(xPre1, xAbs, '#999');
		      stroke(xAbs, xPost1, 'green');
		      stroke(xPost1, xPost2, '#999');
		      stroke(xPost2, xEnd, 'red');
		      stroke(xEnd, xFreedomRight, '#DD0');
		      stroke(xStart - note.getXShift(), xStart, '#BBB'); // Shift
		      _vex.Vex.drawDot(ctx, xAbs + note.getXShift(), y, 'blue');
		
		      var formatterMetrics = note.getFormatterMetrics();
		      if (formatterMetrics.iterations > 0) {
		        var spaceDeviation = formatterMetrics.space.deviation;
		        var prefix = spaceDeviation >= 0 ? '+' : '';
		        ctx.setFillStyle('red');
		        ctx.fillText(prefix + Math.round(spaceDeviation), xAbs + note.getXShift(), yPos - 10);
		      }
		      ctx.restore();
		    }
		
		    // Every note is a tickable, i.e., it can be mutated by the `Formatter` class for
		    // positioning and layout.
		    // To create a new note you need to provide a `note_struct`, which consists
		    // of the following fields:
		    //
		    // `type`: The note type (e.g., `r` for rest, `s` for slash notes, etc.)
		    // `dots`: The number of dots, which affects the duration.
		    // `duration`: The time length (e.g., `q` for quarter, `h` for half, `8` for eighth etc.)
		    //
		    // The range of values for these parameters are available in `src/tables.js`.
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'note';
		    }
		  }, {
		    key: 'STAVEPADDING',
		    get: function get() {
		      return 12;
		    }
		  }]);
		
		  function Note(note_struct) {
		    _classCallCheck(this, Note);
		
		    var _this = _possibleConstructorReturn(this, (Note.__proto__ || Object.getPrototypeOf(Note)).call(this));
		
		    _this.setAttribute('type', 'Note');
		
		    if (!note_struct) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Note must have valid initialization data to identify duration and type.');
		    }
		
		    // Parse `note_struct` and get note properties.
		    var initData = _tables.Flow.parseNoteData(note_struct);
		    if (!initData) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Invalid note initialization object: ' + JSON.stringify(note_struct));
		    }
		
		    // Set note properties from parameters.
		    _this.duration = initData.duration;
		    _this.dots = initData.dots;
		    _this.noteType = initData.type;
		
		    if (note_struct.duration_override) {
		      // Custom duration
		      _this.setDuration(note_struct.duration_override);
		    } else {
		      // Default duration
		      _this.setIntrinsicTicks(initData.ticks);
		    }
		
		    _this.modifiers = [];
		
		    // Get the glyph code for this note from the font.
		    _this.glyph = _tables.Flow.durationToGlyph(_this.duration, _this.noteType);
		
		    if (_this.positions && (_typeof(_this.positions) !== 'object' || !_this.positions.length)) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Note keys must be array type.');
		    }
		
		    // Note to play for audio players.
		    _this.playNote = null;
		
		    // Positioning contexts used by the Formatter.
		    _this.tickContext = null; // The current tick context.
		    _this.modifierContext = null;
		    _this.ignore_ticks = false;
		
		    // Positioning variables
		    _this.width = 0; // Width in pixels calculated after preFormat
		    _this.extraLeftPx = 0; // Extra room on left for offset note head
		    _this.extraRightPx = 0; // Extra room on right for offset note head
		    _this.x_shift = 0; // X shift from tick context X
		    _this.left_modPx = 0; // Max width of left modifiers
		    _this.right_modPx = 0; // Max width of right modifiers
		    _this.voice = null; // The voice that this note is in
		    _this.preFormatted = false; // Is this note preFormatted?
		    _this.ys = []; // list of y coordinates for each note
		    // we need to hold on to these for ties and beams.
		
		    if (note_struct.align_center) {
		      _this.setCenterAlignment(note_struct.align_center);
		    }
		
		    // The render surface.
		    _this.stave = null;
		    _this.render_options = {
		      annotation_spacing: 5,
		      stave_padding: Note.STAVEPADDING
		    };
		    return _this;
		  }
		
		  // Get and set the play note, which is arbitrary data that can be used by an
		  // audio player.
		
		
		  _createClass(Note, [{
		    key: 'getPlayNote',
		    value: function getPlayNote() {
		      return this.playNote;
		    }
		  }, {
		    key: 'setPlayNote',
		    value: function setPlayNote(note) {
		      this.playNote = note;return this;
		    }
		
		    // Don't play notes by default, call them rests. This is also used by things like
		    // beams and dots for positioning.
		
		  }, {
		    key: 'isRest',
		    value: function isRest() {
		      return false;
		    }
		
		    // TODO(0xfe): Why is this method here?
		
		  }, {
		    key: 'addStroke',
		    value: function addStroke(index, stroke) {
		      stroke.setNote(this);
		      stroke.setIndex(index);
		      this.modifiers.push(stroke);
		      this.setPreFormatted(false);
		      return this;
		    }
		
		    // Get and set the target stave.
		
		  }, {
		    key: 'getStave',
		    value: function getStave() {
		      return this.stave;
		    }
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      this.stave = stave;
		      this.setYs([stave.getYForLine(0)]); // Update Y values if the stave is changed.
		      this.context = this.stave.context;
		      return this;
		    }
		
		    // `Note` is not really a modifier, but is used in
		    // a `ModifierContext`.
		
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return Note.CATEGORY;
		    }
		
		    // Set the rendering context for the note.
		
		  }, {
		    key: 'setContext',
		    value: function setContext(context) {
		      this.context = context;return this;
		    }
		
		    // Get and set spacing to the left and right of the notes.
		
		  }, {
		    key: 'getExtraLeftPx',
		    value: function getExtraLeftPx() {
		      return this.extraLeftPx;
		    }
		  }, {
		    key: 'getExtraRightPx',
		    value: function getExtraRightPx() {
		      return this.extraRightPx;
		    }
		  }, {
		    key: 'setExtraLeftPx',
		    value: function setExtraLeftPx(x) {
		      this.extraLeftPx = x;return this;
		    }
		  }, {
		    key: 'setExtraRightPx',
		    value: function setExtraRightPx(x) {
		      this.extraRightPx = x;return this;
		    }
		
		    // Returns true if this note has no duration (e.g., bar notes, spacers, etc.)
		
		  }, {
		    key: 'shouldIgnoreTicks',
		    value: function shouldIgnoreTicks() {
		      return this.ignore_ticks;
		    }
		
		    // Get the stave line number for the note.
		
		  }, {
		    key: 'getLineNumber',
		    value: function getLineNumber() {
		      return 0;
		    }
		
		    // Get the stave line number for rest.
		
		  }, {
		    key: 'getLineForRest',
		    value: function getLineForRest() {
		      return 0;
		    }
		
		    // Get the glyph associated with this note.
		
		  }, {
		    key: 'getGlyph',
		    value: function getGlyph() {
		      return this.glyph;
		    }
		  }, {
		    key: 'getGlyphWidth',
		    value: function getGlyphWidth() {
		      return this.glyph.getWidth(this.render_options.glyph_font_scale);
		    }
		
		    // Set and get Y positions for this note. Each Y value is associated with
		    // an individual pitch/key within the note/chord.
		
		  }, {
		    key: 'setYs',
		    value: function setYs(ys) {
		      this.ys = ys;return this;
		    }
		  }, {
		    key: 'getYs',
		    value: function getYs() {
		      if (this.ys.length === 0) {
		        throw new _vex.Vex.RERR('NoYValues', 'No Y-values calculated for this note.');
		      }
		
		      return this.ys;
		    }
		
		    // Get the Y position of the space above the stave onto which text can
		    // be rendered.
		
		  }, {
		    key: 'getYForTopText',
		    value: function getYForTopText(text_line) {
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('NoStave', 'No stave attached to this note.');
		      }
		
		      return this.stave.getYForTopText(text_line);
		    }
		
		    // Get a `BoundingBox` for this note.
		
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      return null;
		    }
		
		    // Returns the voice that this note belongs in.
		
		  }, {
		    key: 'getVoice',
		    value: function getVoice() {
		      if (!this.voice) throw new _vex.Vex.RERR('NoVoice', 'Note has no voice.');
		      return this.voice;
		    }
		
		    // Attach this note to `voice`.
		
		  }, {
		    key: 'setVoice',
		    value: function setVoice(voice) {
		      this.voice = voice;
		      this.preFormatted = false;
		      return this;
		    }
		
		    // Get and set the `TickContext` for this note.
		
		  }, {
		    key: 'getTickContext',
		    value: function getTickContext() {
		      return this.tickContext;
		    }
		  }, {
		    key: 'setTickContext',
		    value: function setTickContext(tc) {
		      this.tickContext = tc;
		      this.preFormatted = false;
		      return this;
		    }
		
		    // Accessors for the note type.
		
		  }, {
		    key: 'getDuration',
		    value: function getDuration() {
		      return this.duration;
		    }
		  }, {
		    key: 'isDotted',
		    value: function isDotted() {
		      return this.dots > 0;
		    }
		  }, {
		    key: 'hasStem',
		    value: function hasStem() {
		      return false;
		    }
		  }, {
		    key: 'getDots',
		    value: function getDots() {
		      return this.dots;
		    }
		  }, {
		    key: 'getNoteType',
		    value: function getNoteType() {
		      return this.noteType;
		    }
		  }, {
		    key: 'setBeam',
		    value: function setBeam() {
		      return this;
		    } // ignore parameters
		
		    // Attach this note to a modifier context.
		
		  }, {
		    key: 'setModifierContext',
		    value: function setModifierContext(mc) {
		      this.modifierContext = mc;return this;
		    }
		
		    // Attach a modifier to this note.
		
		  }, {
		    key: 'addModifier',
		    value: function addModifier(modifier) {
		      var index = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
		
		      modifier.setNote(this);
		      modifier.setIndex(index);
		      this.modifiers.push(modifier);
		      this.setPreFormatted(false);
		      return this;
		    }
		
		    // Get the coordinates for where modifiers begin.
		
		  }, {
		    key: 'getModifierStartXY',
		    value: function getModifierStartXY() {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
		      }
		
		      return {
		        x: this.getAbsoluteX(),
		        y: this.ys[0]
		      };
		    }
		
		    // Get bounds and metrics for this note.
		    //
		    // Returns a struct with fields:
		    // `width`: The total width of the note (including modifiers.)
		    // `noteWidth`: The width of the note head only.
		    // `left_shift`: The horizontal displacement of the note.
		    // `modLeftPx`: Start `X` for left modifiers.
		    // `modRightPx`: Start `X` for right modifiers.
		    // `extraLeftPx`: Extra space on left of note.
		    // `extraRightPx`: Extra space on right of note.
		
		  }, {
		    key: 'getMetrics',
		    value: function getMetrics() {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call getMetrics on an unformatted note.");
		      }
		
		      var modLeftPx = 0;
		      var modRightPx = 0;
		      if (this.modifierContext != null) {
		        modLeftPx = this.modifierContext.state.left_shift;
		        modRightPx = this.modifierContext.state.right_shift;
		      }
		
		      var width = this.getWidth();
		      return {
		        width: width,
		        noteWidth: width - modLeftPx - modRightPx - this.extraLeftPx - this.extraRightPx,
		        left_shift: this.x_shift, // TODO(0xfe): Make style consistent
		
		        // Modifiers, accidentals etc.
		        modLeftPx: modLeftPx,
		        modRightPx: modRightPx,
		
		        // Displaced note head on left or right.
		        extraLeftPx: this.extraLeftPx,
		        extraRightPx: this.extraRightPx
		      };
		    }
		
		    // Get and set width of note. Used by the formatter for positioning.
		
		  }, {
		    key: 'setWidth',
		    value: function setWidth(width) {
		      this.width = width;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call GetWidth on an unformatted note.");
		      }
		
		      return this.width + (this.modifierContext ? this.modifierContext.getWidth() : 0);
		    }
		
		    // Displace note by `x` pixels. Used by the formatter.
		
		  }, {
		    key: 'setXShift',
		    value: function setXShift(x) {
		      this.x_shift = x;return this;
		    }
		  }, {
		    key: 'getXShift',
		    value: function getXShift() {
		      return this.x_shift;
		    }
		
		    // Get `X` position of this tick context.
		
		  }, {
		    key: 'getX',
		    value: function getX() {
		      if (!this.tickContext) {
		        throw new _vex.Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');
		      }
		
		      return this.tickContext.getX() + this.x_shift;
		    }
		
		    // Get the absolute `X` position of this note's tick context. This
		    // excludes x_shift, so you'll need to factor it in if you're
		    // looking for the post-formatted x-position.
		
		  }, {
		    key: 'getAbsoluteX',
		    value: function getAbsoluteX() {
		      if (!this.tickContext) {
		        throw new _vex.Vex.RERR('NoTickContext', 'Note needs a TickContext assigned for an X-Value');
		      }
		
		      // Position note to left edge of tick context.
		      var x = this.tickContext.getX();
		      if (this.stave) {
		        x += this.stave.getNoteStartX() + this.render_options.stave_padding;
		      }
		
		      if (this.isCenterAligned()) {
		        x += this.getCenterXShift();
		      }
		
		      return x;
		    }
		  }, {
		    key: 'setPreFormatted',
		    value: function setPreFormatted(value) {
		      this.preFormatted = value;
		
		      // Maintain the width of left and right modifiers in pixels.
		      if (this.preFormatted) {
		        var extra = this.tickContext.getExtraPx();
		        this.left_modPx = Math.max(this.left_modPx, extra.left);
		        this.right_modPx = Math.max(this.right_modPx, extra.right);
		      }
		    }
		  }]);
	
		  return Note;
		}(_tickable.Tickable);
	
	/***/ },
	/* 23 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Tickable = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _tables = __webpack_require__(2);
		
		var _fraction = __webpack_require__(3);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// The tickable interface. Tickables are things that sit on a score and
		// have a duration, i.e., they occupy space in the musical rendering dimension.
		
		var Tickable = exports.Tickable = function (_Element) {
		  _inherits(Tickable, _Element);
		
		  function Tickable() {
		    _classCallCheck(this, Tickable);
		
		    var _this = _possibleConstructorReturn(this, (Tickable.__proto__ || Object.getPrototypeOf(Tickable)).call(this));
		
		    _this.setAttribute('type', 'Tickable');
		
		    // These properties represent the duration of
		    // this tickable element.
		    _this.ticks = new _fraction.Fraction(0, 1);
		    _this.intrinsicTicks = 0;
		    _this.tickMultiplier = new _fraction.Fraction(1, 1);
		
		    _this.width = 0;
		    _this.x_shift = 0; // Shift from tick context
		    _this.voice = null;
		    _this.tickContext = null;
		    _this.modifierContext = null;
		    _this.modifiers = [];
		    _this.preFormatted = false;
		    _this.postFormatted = false;
		    _this.tuplet = null;
		    _this.tupletStack = [];
		
		    _this.align_center = false;
		    _this.center_x_shift = 0; // Shift from tick context if center aligned
		
		    // This flag tells the formatter to ignore this tickable during
		    // formatting and justification. It is set by tickables such as BarNote.
		    _this.ignore_ticks = false;
		
		    // This is a space for an external formatting class or function to maintain
		    // metrics.
		    _this.formatterMetrics = {
		      // The freedom of a tickable is the distance it can move without colliding
		      // with neighboring elements. A formatter can set these values during its
		      // formatting pass, which a different formatter can then use to fine tune.
		      freedom: { left: 0, right: 0 },
		
		      // The simplified rational duration of this tick as a string. It can be
		      // used as an index to a map or hashtable.
		      duration: '',
		
		      // The number of formatting iterations undergone.
		      iterations: 0,
		
		      // The space in pixels allocated by this formatter, along with the mean space
		      // for tickables of this duration, and the deviation from the mean.
		      space: {
		        used: 0,
		        mean: 0,
		        deviation: 0
		      }
		    };
		    return _this;
		  }
		
		  _createClass(Tickable, [{
		    key: 'reset',
		    value: function reset() {
		      return this;
		    }
		  }, {
		    key: 'getTicks',
		    value: function getTicks() {
		      return this.ticks;
		    }
		  }, {
		    key: 'shouldIgnoreTicks',
		    value: function shouldIgnoreTicks() {
		      return this.ignore_ticks;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'getFormatterMetrics',
		    value: function getFormatterMetrics() {
		      return this.formatterMetrics;
		    }
		  }, {
		    key: 'setXShift',
		    value: function setXShift(x) {
		      this.x_shift = x;
		    }
		  }, {
		    key: 'getCenterXShift',
		    value: function getCenterXShift() {
		      if (this.isCenterAligned()) {
		        return this.center_x_shift;
		      }
		
		      return 0;
		    }
		  }, {
		    key: 'isCenterAligned',
		    value: function isCenterAligned() {
		      return this.align_center;
		    }
		  }, {
		    key: 'setCenterAlignment',
		    value: function setCenterAlignment(align_center) {
		      this.align_center = align_center;
		      return this;
		    }
		
		    // Every tickable must be associated with a voice. This allows formatters
		    // and preFormatter to associate them with the right modifierContexts.
		
		  }, {
		    key: 'getVoice',
		    value: function getVoice() {
		      if (!this.voice) throw new _vex.Vex.RERR('NoVoice', 'Tickable has no voice.');
		      return this.voice;
		    }
		  }, {
		    key: 'setVoice',
		    value: function setVoice(voice) {
		      this.voice = voice;
		    }
		  }, {
		    key: 'getTuplet',
		    value: function getTuplet() {
		      return this.tuplet;
		    }
		
		    /*
		     * resetTuplet
		     * @param tuplet -- the specific tuplet to reset
		     *   if this is not provided, all tuplets are reset.
		     * @returns this
		     *
		     * Removes any prior tuplets from the tick calculation and
		     * resets the intrinsic tick value to
		     */
		
		  }, {
		    key: 'resetTuplet',
		    value: function resetTuplet(tuplet) {
		      var noteCount = void 0;
		      var notesOccupied = void 0;
		      if (tuplet) {
		        var i = this.tupletStack.indexOf(tuplet);
		        if (i !== -1) {
		          this.tupletStack.splice(i, 1);
		          noteCount = tuplet.getNoteCount();
		          notesOccupied = tuplet.getNotesOccupied();
		
		          // Revert old multiplier by inverting numerator & denom.:
		          this.applyTickMultiplier(noteCount, notesOccupied);
		        }
		        return this;
		      }
		
		      while (this.tupletStack.length) {
		        tuplet = this.tupletStack.pop();
		        noteCount = tuplet.getNoteCount();
		        notesOccupied = tuplet.getNotesOccupied();
		
		        // Revert old multiplier by inverting numerator & denom.:
		        this.applyTickMultiplier(noteCount, notesOccupied);
		      }
		      return this;
		    }
		  }, {
		    key: 'setTuplet',
		    value: function setTuplet(tuplet) {
		      // Attach to new tuplet
		
		      if (tuplet) {
		        this.tupletStack.push(tuplet);
		
		        var noteCount = tuplet.getNoteCount();
		        var notesOccupied = tuplet.getNotesOccupied();
		
		        this.applyTickMultiplier(notesOccupied, noteCount);
		      }
		
		      this.tuplet = tuplet;
		
		      return this;
		    }
		
		    /** optional, if tickable has modifiers **/
		
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext(mc) {
		      this.modifierContext = mc;
		      // Add modifiers to modifier context (if any)
		      this.preFormatted = false;
		    }
		
		    /** optional, if tickable has modifiers **/
		
		  }, {
		    key: 'addModifier',
		    value: function addModifier(mod) {
		      this.modifiers.push(mod);
		      this.preFormatted = false;
		      return this;
		    }
		  }, {
		    key: 'getModifiers',
		    value: function getModifiers() {
		      return this.modifiers;
		    }
		  }, {
		    key: 'setTickContext',
		    value: function setTickContext(tc) {
		      this.tickContext = tc;
		      this.preFormatted = false;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return;
		
		      this.width = 0;
		      if (this.modifierContext) {
		        this.modifierContext.preFormat();
		        this.width += this.modifierContext.getWidth();
		      }
		    }
		  }, {
		    key: 'postFormat',
		    value: function postFormat() {
		      if (this.postFormatted) return this;
		      this.postFormatted = true;
		      return this;
		    }
		  }, {
		    key: 'getIntrinsicTicks',
		    value: function getIntrinsicTicks() {
		      return this.intrinsicTicks;
		    }
		  }, {
		    key: 'setIntrinsicTicks',
		    value: function setIntrinsicTicks(intrinsicTicks) {
		      this.intrinsicTicks = intrinsicTicks;
		      this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);
		    }
		  }, {
		    key: 'getTickMultiplier',
		    value: function getTickMultiplier() {
		      return this.tickMultiplier;
		    }
		  }, {
		    key: 'applyTickMultiplier',
		    value: function applyTickMultiplier(numerator, denominator) {
		      this.tickMultiplier.multiply(numerator, denominator);
		      this.ticks = this.tickMultiplier.clone().multiply(this.intrinsicTicks);
		    }
		  }, {
		    key: 'setDuration',
		    value: function setDuration(duration) {
		      var ticks = duration.numerator * (_tables.Flow.RESOLUTION / duration.denominator);
		      this.ticks = this.tickMultiplier.clone().multiply(ticks);
		      this.intrinsicTicks = this.ticks.value();
		    }
		  }]);
	
		  return Tickable;
		}(_element.Element);
	
	/***/ },
	/* 24 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StemmableNote = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _stem = __webpack_require__(17);
		
		var _glyph = __webpack_require__(4);
		
		var _note = __webpack_require__(22);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// `StemmableNote` is an abstract interface for notes with optional stems.
		// Examples of stemmable notes are `StaveNote` and `TabNote`
		
		var StemmableNote = exports.StemmableNote = function (_Note) {
		  _inherits(StemmableNote, _Note);
		
		  function StemmableNote(note_struct) {
		    _classCallCheck(this, StemmableNote);
		
		    var _this = _possibleConstructorReturn(this, (StemmableNote.__proto__ || Object.getPrototypeOf(StemmableNote)).call(this, note_struct));
		
		    _this.setAttribute('type', 'StemmableNote');
		
		    _this.stem = null;
		    _this.stemExtensionOverride = null;
		    _this.beam = null;
		    return _this;
		  }
		
		  // Get and set the note's `Stem`
		
		
		  _createClass(StemmableNote, [{
		    key: 'getStem',
		    value: function getStem() {
		      return this.stem;
		    }
		  }, {
		    key: 'setStem',
		    value: function setStem(stem) {
		      this.stem = stem;return this;
		    }
		
		    // Builds and sets a new stem
		
		  }, {
		    key: 'buildStem',
		    value: function buildStem() {
		      var stem = new _stem.Stem();
		      this.setStem(stem);
		      return this;
		    }
		  }, {
		    key: 'buildFlag',
		    value: function buildFlag() {
		      var glyph = this.glyph,
		          beam = this.beam;
		
		      var shouldRenderFlag = beam === null;
		
		      if (glyph && glyph.flag && shouldRenderFlag) {
		        var flagCode = this.getStemDirection() === _stem.Stem.DOWN ? glyph.code_flag_downstem : glyph.code_flag_upstem;
		
		        this.flag = new _glyph.Glyph(flagCode, this.render_options.glyph_font_scale);
		      }
		    }
		
		    // Get the full length of stem
		
		  }, {
		    key: 'getStemLength',
		    value: function getStemLength() {
		      return _stem.Stem.HEIGHT + this.getStemExtension();
		    }
		
		    // Get the number of beams for this duration
		
		  }, {
		    key: 'getBeamCount',
		    value: function getBeamCount() {
		      var glyph = this.getGlyph();
		
		      if (glyph) {
		        return glyph.beam_count;
		      } else {
		        return 0;
		      }
		    }
		
		    // Get the minimum length of stem
		
		  }, {
		    key: 'getStemMinumumLength',
		    value: function getStemMinumumLength() {
		      var frac = _tables.Flow.durationToFraction(this.duration);
		      var length = frac.value() <= 1 ? 0 : 20;
		      // if note is flagged, cannot shorten beam
		      switch (this.duration) {
		        case '8':
		          if (this.beam == null) length = 35;
		          break;
		        case '16':
		          length = this.beam == null ? 35 : 25;
		          break;
		        case '32':
		          length = this.beam == null ? 45 : 35;
		          break;
		        case '64':
		          length = this.beam == null ? 50 : 40;
		          break;
		        case '128':
		          length = this.beam == null ? 55 : 45;
		          break;
		        default:
		          break;
		      }
		      return length;
		    }
		
		    // Get/set the direction of the stem
		
		  }, {
		    key: 'getStemDirection',
		    value: function getStemDirection() {
		      return this.stem_direction;
		    }
		  }, {
		    key: 'setStemDirection',
		    value: function setStemDirection(direction) {
		      if (!direction) direction = _stem.Stem.UP;
		      if (direction !== _stem.Stem.UP && direction !== _stem.Stem.DOWN) {
		        throw new _vex.Vex.RERR('BadArgument', 'Invalid stem direction: ' + direction);
		      }
		
		      this.stem_direction = direction;
		      if (this.stem) {
		        this.stem.setDirection(direction);
		        this.stem.setExtension(this.getStemExtension());
		      }
		
		      this.reset();
		      if (this.flag) {
		        this.buildFlag();
		      }
		
		      this.beam = null;
		      if (this.preFormatted) {
		        this.preFormat();
		      }
		      return this;
		    }
		
		    // Get the `x` coordinate of the stem
		
		  }, {
		    key: 'getStemX',
		    value: function getStemX() {
		      var x_begin = this.getAbsoluteX() + this.x_shift;
		      var x_end = this.getAbsoluteX() + this.x_shift + this.getGlyphWidth();
		      var stem_x = this.stem_direction === _stem.Stem.DOWN ? x_begin : x_end;
		      return stem_x;
		    }
		
		    // Get the `x` coordinate for the center of the glyph.
		    // Used for `TabNote` stems and stemlets over rests
		
		  }, {
		    key: 'getCenterGlyphX',
		    value: function getCenterGlyphX() {
		      return this.getAbsoluteX() + this.x_shift + this.getGlyphWidth() / 2;
		    }
		
		    // Get the stem extension for the current duration
		
		  }, {
		    key: 'getStemExtension',
		    value: function getStemExtension() {
		      var glyph = this.getGlyph();
		
		      if (this.stemExtensionOverride != null) {
		        return this.stemExtensionOverride;
		      }
		
		      if (glyph) {
		        return this.getStemDirection() === 1 ? glyph.stem_up_extension : glyph.stem_down_extension;
		      }
		
		      return 0;
		    }
		
		    // Set the stem length to a specific. Will override the default length.
		
		  }, {
		    key: 'setStemLength',
		    value: function setStemLength(height) {
		      this.stemExtensionOverride = height - _stem.Stem.HEIGHT;
		      return this;
		    }
		
		    // Get the top and bottom `y` values of the stem.
		
		  }, {
		    key: 'getStemExtents',
		    value: function getStemExtents() {
		      return this.stem.getExtents();
		    }
		
		    // Sets the current note's beam
		
		  }, {
		    key: 'setBeam',
		    value: function setBeam(beam) {
		      this.beam = beam;return this;
		    }
		
		    // Get the `y` value for the top/bottom modifiers at a specific `textLine`
		
		  }, {
		    key: 'getYForTopText',
		    value: function getYForTopText(textLine) {
		      var extents = this.getStemExtents();
		      if (this.hasStem()) {
		        return Math.min(this.stave.getYForTopText(textLine), extents.topY - this.render_options.annotation_spacing * (textLine + 1));
		      } else {
		        return this.stave.getYForTopText(textLine);
		      }
		    }
		  }, {
		    key: 'getYForBottomText',
		    value: function getYForBottomText(textLine) {
		      var extents = this.getStemExtents();
		      if (this.hasStem()) {
		        return Math.max(this.stave.getYForTopText(textLine), extents.baseY + this.render_options.annotation_spacing * textLine);
		      } else {
		        return this.stave.getYForBottomText(textLine);
		      }
		    }
		  }, {
		    key: 'hasFlag',
		    value: function hasFlag() {
		      return _tables.Flow.durationToGlyph(this.duration).flag && !this.beam;
		    }
		
		    // Post format the note
		
		  }, {
		    key: 'postFormat',
		    value: function postFormat() {
		      if (this.beam) this.beam.postFormat();
		
		      this.postFormatted = true;
		
		      return this;
		    }
		
		    // Render the stem onto the canvas
		
		  }, {
		    key: 'drawStem',
		    value: function drawStem(stem_struct) {
		      this.checkContext();
		      this.setRendered();
		
		      this.setStem(new _stem.Stem(stem_struct));
		      this.stem.setContext(this.context).draw();
		    }
		  }]);
	
		  return StemmableNote;
		}(_note.Note);
	
	/***/ },
	/* 25 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Modifier = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// `Modifier` is an abstract interface for notational elements that modify
		// a `Note`. Examples of modifiers are `Accidental`, `Annotation`, `Stroke`, etc.
		//
		// For a `Modifier` instance to be positioned correctly, it must be part of
		// a `ModifierContext`. All modifiers in the same context are rendered relative to
		// one another.
		//
		// Typically, all modifiers to a note are part of the same `ModifierContext` instance. Also,
		// in multi-voice staves, all modifiers to notes on the same `tick` are part of the same
		// `ModifierContext`. This ensures that multiple voices don't trample all over each other.
		
		// To enable logging for this class. Set `Vex.Flow.Modifier.DEBUG` to `true`.
		// function L(...args) { if (Modifier.DEBUG) Vex.L('Vex.Flow.Modifier', args); }
		
		var Modifier = exports.Modifier = function (_Element) {
		  _inherits(Modifier, _Element);
		
		  _createClass(Modifier, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'none';
		    }
		
		    // Modifiers can be positioned almost anywhere, relative to a note.
		
		  }, {
		    key: 'Position',
		    get: function get() {
		      return {
		        LEFT: 1,
		        RIGHT: 2,
		        ABOVE: 3,
		        BELOW: 4
		      };
		    }
		  }, {
		    key: 'PositionString',
		    get: function get() {
		      return {
		        above: Modifier.Position.ABOVE,
		        below: Modifier.Position.BELOW,
		        left: Modifier.Position.LEFT,
		        right: Modifier.Position.RIGHT
		      };
		    }
		  }]);
		
		  function Modifier() {
		    _classCallCheck(this, Modifier);
		
		    var _this = _possibleConstructorReturn(this, (Modifier.__proto__ || Object.getPrototypeOf(Modifier)).call(this));
		
		    _this.setAttribute('type', 'Modifier');
		
		    _this.width = 0;
		
		    // Modifiers are attached to a note and an index. An index is a
		    // specific head in a chord.
		    _this.note = null;
		    _this.index = null;
		
		    // The `text_line` is reserved space above or below a stave.
		    _this.text_line = 0;
		    _this.position = Modifier.Position.LEFT;
		    _this.modifier_context = null;
		    _this.x_shift = 0;
		    _this.y_shift = 0;
		    _this.spacingFromNextModifier = 0;
		    return _this;
		  }
		
		  // Every modifier has a category. The `ModifierContext` uses this to determine
		  // the type and order of the modifiers.
		
		
		  _createClass(Modifier, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Modifier.CATEGORY;
		    }
		
		    // Get and set modifier widths.
		
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'setWidth',
		    value: function setWidth(width) {
		      this.width = width;return this;
		    }
		
		    // Get and set attached note (`StaveNote`, `TabNote`, etc.)
		
		  }, {
		    key: 'getNote',
		    value: function getNote() {
		      return this.note;
		    }
		  }, {
		    key: 'setNote',
		    value: function setNote(note) {
		      this.note = note;return this;
		    }
		
		    // Get and set note index, which is a specific note in a chord.
		
		  }, {
		    key: 'getIndex',
		    value: function getIndex() {
		      return this.index;
		    }
		  }, {
		    key: 'setIndex',
		    value: function setIndex(index) {
		      this.index = index;return this;
		    }
		
		    // Every modifier must be part of a `ModifierContext`.
		
		  }, {
		    key: 'getModifierContext',
		    value: function getModifierContext() {
		      return this.modifier_context;
		    }
		  }, {
		    key: 'setModifierContext',
		    value: function setModifierContext(c) {
		      this.modifier_context = c;return this;
		    }
		
		    // Get and set articulation position.
		
		  }, {
		    key: 'getPosition',
		    value: function getPosition() {
		      return this.position;
		    }
		  }, {
		    key: 'setPosition',
		    value: function setPosition(position) {
		      this.position = typeof position === 'string' ? Modifier.PositionString[position] : position;
		      return this;
		    }
		
		    // Set the `text_line` for the modifier.
		
		  }, {
		    key: 'setTextLine',
		    value: function setTextLine(line) {
		      this.text_line = line;return this;
		    }
		
		    // Shift modifier down `y` pixels. Negative values shift up.
		
		  }, {
		    key: 'setYShift',
		    value: function setYShift(y) {
		      this.y_shift = y;return this;
		    }
		  }, {
		    key: 'setSpacingFromNextModifier',
		    value: function setSpacingFromNextModifier(x) {
		      this.spacingFromNextModifier = x;
		    }
		  }, {
		    key: 'getSpacingFromNextModifier',
		    value: function getSpacingFromNextModifier() {
		      return this.spacingFromNextModifier;
		    }
		
		    // Shift modifier `x` pixels in the direction of the modifier. Negative values
		    // shift reverse.
		
		  }, {
		    key: 'setXShift',
		    value: function setXShift(x) {
		      this.x_shift = 0;
		      if (this.position === Modifier.Position.LEFT) {
		        this.x_shift -= x;
		      } else {
		        this.x_shift += x;
		      }
		    }
		  }, {
		    key: 'getXShift',
		    value: function getXShift() {
		      return this.x_shift;
		    }
		
		    // Render the modifier onto the canvas.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      throw new _vex.Vex.RERR('MethodNotImplemented', 'draw() not implemented for this modifier.');
		    }
		  }]);
	
		  return Modifier;
		}(_element.Element);
	
	/***/ },
	/* 26 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Dot = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _modifier = __webpack_require__(25);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // VexFlow - Music Engraving for HTML5
		// Copyright Mohit Muthanna 2010
		//
		// This class implements dot modifiers for notes.
		
		var Dot = exports.Dot = function (_Modifier) {
		  _inherits(Dot, _Modifier);
		
		  _createClass(Dot, null, [{
		    key: 'format',
		
		
		    // Arrange dots inside a ModifierContext.
		    value: function format(dots, state) {
		      var right_shift = state.right_shift;
		      var dot_spacing = 1;
		
		      if (!dots || dots.length === 0) return false;
		
		      var dot_list = [];
		      for (var i = 0; i < dots.length; ++i) {
		        var dot = dots[i];
		        var note = dot.getNote();
		
		        var props = void 0;
		        var shift = void 0;
		        // Only StaveNote has .getKeyProps()
		        if (typeof note.getKeyProps === 'function') {
		          props = note.getKeyProps()[dot.getIndex()];
		          shift = props.displaced ? note.getExtraRightPx() : 0;
		        } else {
		          // Else it's a TabNote
		          props = { line: 0.5 }; // Shim key props for dot placement
		          shift = 0;
		        }
		
		        dot_list.push({ line: props.line, shift: shift, note: note, dot: dot });
		      }
		
		      // Sort dots by line number.
		      dot_list.sort(function (a, b) {
		        return b.line - a.line;
		      });
		
		      var dot_shift = right_shift;
		      var x_width = 0;
		      var last_line = null;
		      var last_note = null;
		      var prev_dotted_space = null;
		      var half_shiftY = 0;
		
		      for (var _i = 0; _i < dot_list.length; ++_i) {
		        var _dot_list$_i = dot_list[_i],
		            _dot = _dot_list$_i.dot,
		            _note = _dot_list$_i.note,
		            _shift = _dot_list$_i.shift,
		            line = _dot_list$_i.line;
		
		        // Reset the position of the dot every line.
		
		        if (line !== last_line || _note !== last_note) {
		          dot_shift = _shift;
		        }
		
		        if (!_note.isRest() && line !== last_line) {
		          if (Math.abs(line % 1) === 0.5) {
		            // note is on a space, so no dot shift
		            half_shiftY = 0;
		          } else if (!_note.isRest()) {
		            // note is on a line, so shift dot to space above the line
		            half_shiftY = 0.5;
		            if (last_note != null && !last_note.isRest() && last_line - line === 0.5) {
		              // previous note on a space, so shift dot to space below the line
		              half_shiftY = -0.5;
		            } else if (line + half_shiftY === prev_dotted_space) {
		              // previous space is dotted, so shift dot to space below the line
		              half_shiftY = -0.5;
		            }
		          }
		        }
		
		        // convert half_shiftY to a multiplier for dots.draw()
		        _dot.dot_shiftY = -half_shiftY;
		        prev_dotted_space = line + half_shiftY;
		
		        _dot.setXShift(dot_shift);
		        dot_shift += _dot.getWidth() + dot_spacing; // spacing
		        x_width = dot_shift > x_width ? dot_shift : x_width;
		        last_line = line;
		        last_note = _note;
		      }
		
		      // Update state.
		      state.right_shift += x_width;
		      return true;
		    }
		
		    /**
		     * @constructor
		     */
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'dots';
		    }
		  }]);
		
		  function Dot() {
		    _classCallCheck(this, Dot);
		
		    var _this = _possibleConstructorReturn(this, (Dot.__proto__ || Object.getPrototypeOf(Dot)).call(this));
		
		    _this.setAttribute('type', 'Dot');
		
		    _this.note = null;
		    _this.index = null;
		    _this.position = _modifier.Modifier.Position.RIGHT;
		
		    _this.radius = 2;
		    _this.setWidth(5);
		    _this.dot_shiftY = 0;
		    return _this;
		  }
		
		  _createClass(Dot, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Dot.CATEGORY;
		    }
		  }, {
		    key: 'setNote',
		    value: function setNote(note) {
		      this.note = note;
		
		      if (this.note.getCategory() === 'gracenotes') {
		        this.radius *= 0.50;
		        this.setWidth(3);
		      }
		    }
		  }, {
		    key: 'setDotShiftY',
		    value: function setDotShiftY(y) {
		      this.dot_shiftY = y;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      if (!this.note || this.index === null) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw dot without a note and index.");
		      }
		
		      var lineSpace = this.note.stave.options.spacing_between_lines_px;
		
		      var start = this.note.getModifierStartXY(this.position, this.index);
		
		      // Set the starting y coordinate to the base of the stem for TabNotes
		      if (this.note.getCategory() === 'tabnotes') {
		        start.y = this.note.getStemExtents().baseY;
		      }
		
		      var x = start.x + this.x_shift + this.width - this.radius;
		      var y = start.y + this.y_shift + this.dot_shiftY * lineSpace;
		      var ctx = this.context;
		
		      ctx.beginPath();
		      ctx.arc(x, y, this.radius, 0, Math.PI * 2, false);
		      ctx.fill();
		    }
		  }]);
	
		  return Dot;
		}(_modifier.Modifier);
	
	/***/ },
	/* 27 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.ModifierContext = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This class implements various types of modifiers to notes (e.g. bends,
		// fingering positions etc.)
		
		var _vex = __webpack_require__(1);
		
		var _stavenote = __webpack_require__(20);
		
		var _dot = __webpack_require__(26);
		
		var _frethandfinger = __webpack_require__(28);
		
		var _accidental = __webpack_require__(29);
		
		var _notesubgroup = __webpack_require__(31);
		
		var _gracenotegroup = __webpack_require__(32);
		
		var _strokes = __webpack_require__(35);
		
		var _stringnumber = __webpack_require__(36);
		
		var _articulation = __webpack_require__(37);
		
		var _ornament = __webpack_require__(38);
		
		var _annotation = __webpack_require__(40);
		
		var _bend = __webpack_require__(41);
		
		var _vibrato = __webpack_require__(42);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// To enable logging for this class. Set `Vex.Flow.ModifierContext.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (ModifierContext.DEBUG) _vex.Vex.L('Vex.Flow.ModifierContext', args);
		}
		
		var ModifierContext = exports.ModifierContext = function () {
		  function ModifierContext() {
		    _classCallCheck(this, ModifierContext);
		
		    // Current modifiers
		    this.modifiers = {};
		
		    // Formatting data.
		    this.preFormatted = false;
		    this.postFormatted = false;
		    this.width = 0;
		    this.spacing = 0;
		    this.state = {
		      left_shift: 0,
		      right_shift: 0,
		      text_line: 0,
		      top_text_line: 0
		    };
		
		    // Add new modifiers to this array. The ordering is significant -- lower
		    // modifiers are formatted and rendered before higher ones.
		    this.PREFORMAT = [_stavenote.StaveNote, _dot.Dot, _frethandfinger.FretHandFinger, _accidental.Accidental, _gracenotegroup.GraceNoteGroup, _notesubgroup.NoteSubGroup, _strokes.Stroke, _stringnumber.StringNumber, _articulation.Articulation, _ornament.Ornament, _annotation.Annotation, _bend.Bend, _vibrato.Vibrato];
		
		    // If post-formatting is required for an element, add it to this array.
		    this.POSTFORMAT = [_stavenote.StaveNote];
		  }
		
		  _createClass(ModifierContext, [{
		    key: 'addModifier',
		    value: function addModifier(modifier) {
		      var type = modifier.getCategory();
		      if (!this.modifiers[type]) this.modifiers[type] = [];
		      this.modifiers[type].push(modifier);
		      modifier.setModifierContext(this);
		      this.preFormatted = false;
		      return this;
		    }
		  }, {
		    key: 'getModifiers',
		    value: function getModifiers(type) {
		      return this.modifiers[type];
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'getExtraLeftPx',
		    value: function getExtraLeftPx() {
		      return this.state.left_shift;
		    }
		  }, {
		    key: 'getExtraRightPx',
		    value: function getExtraRightPx() {
		      return this.state.right_shift;
		    }
		  }, {
		    key: 'getState',
		    value: function getState() {
		      return this.state;
		    }
		  }, {
		    key: 'getMetrics',
		    value: function getMetrics() {
		      if (!this.formatted) {
		        throw new _vex.Vex.RERR('UnformattedModifier', 'Unformatted modifier has no metrics.');
		      }
		
		      return {
		        width: this.state.left_shift + this.state.right_shift + this.spacing,
		        spacing: this.spacing,
		        extra_left_px: this.state.left_shift,
		        extra_right_px: this.state.right_shift
		      };
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      var _this = this;
		
		      if (this.preFormatted) return;
		      this.PREFORMAT.forEach(function (modifier) {
		        L('Preformatting ModifierContext: ', modifier.CATEGORY);
		        modifier.format(_this.getModifiers(modifier.CATEGORY), _this.state, _this);
		      });
		
		      // Update width of this modifier context
		      this.width = this.state.left_shift + this.state.right_shift;
		      this.preFormatted = true;
		    }
		  }, {
		    key: 'postFormat',
		    value: function postFormat() {
		      var _this2 = this;
		
		      if (this.postFormatted) return;
		      this.POSTFORMAT.forEach(function (modifier) {
		        L('Postformatting ModifierContext: ', modifier.CATEGORY);
		        modifier.postFormat(_this2.getModifiers(modifier.CATEGORY), _this2);
		      });
		    }
		  }]);
	
		  return ModifierContext;
		}();
	
	/***/ },
	/* 28 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.FretHandFinger = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _modifier = __webpack_require__(25);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // VexFlow - Music Engraving for HTML5
		// Copyright Mohit Muthanna 2010
		// Author Larry Kuhns 2013
		// Class to draws string numbers into the notation.
		
		/**
		 * @constructor
		 */
		var FretHandFinger = exports.FretHandFinger = function (_Modifier) {
		  _inherits(FretHandFinger, _Modifier);
		
		  _createClass(FretHandFinger, null, [{
		    key: 'format',
		
		
		    // Arrange fingerings inside a ModifierContext.
		    value: function format(nums, state) {
		      var left_shift = state.left_shift,
		          right_shift = state.right_shift;
		
		      var num_spacing = 1;
		
		      if (!nums || nums.length === 0) return false;
		
		      var nums_list = [];
		      var prev_note = null;
		      var shiftLeft = 0;
		      var shiftRight = 0;
		
		      for (var i = 0; i < nums.length; ++i) {
		        var num = nums[i];
		        var note = num.getNote();
		        var pos = num.getPosition();
		        var props = note.getKeyProps()[num.getIndex()];
		        if (note !== prev_note) {
		          for (var n = 0; n < note.keys.length; ++n) {
		            var props_tmp = note.getKeyProps()[n];
		            if (left_shift === 0) {
		              shiftLeft = props_tmp.displaced ? note.getExtraLeftPx() : shiftLeft;
		            }
		            if (right_shift === 0) {
		              shiftRight = props_tmp.displaced ? note.getExtraRightPx() : shiftRight;
		            }
		          }
		          prev_note = note;
		        }
		
		        nums_list.push({
		          note: note,
		          num: num,
		          pos: pos,
		          line: props.line,
		          shiftL: shiftLeft,
		          shiftR: shiftRight
		        });
		      }
		
		      // Sort fingernumbers by line number.
		      nums_list.sort(function (a, b) {
		        return b.line - a.line;
		      });
		
		      var numShiftL = 0;
		      var numShiftR = 0;
		      var xWidthL = 0;
		      var xWidthR = 0;
		      var lastLine = null;
		      var lastNote = null;
		
		      for (var _i = 0; _i < nums_list.length; ++_i) {
		        var num_shift = 0;
		        var _nums_list$_i = nums_list[_i],
		            _note = _nums_list$_i.note,
		            _pos = _nums_list$_i.pos,
		            _num = _nums_list$_i.num,
		            line = _nums_list$_i.line,
		            shiftL = _nums_list$_i.shiftL,
		            shiftR = _nums_list$_i.shiftR;
		
		        // Reset the position of the string number every line.
		
		        if (line !== lastLine || _note !== lastNote) {
		          numShiftL = left_shift + shiftL;
		          numShiftR = right_shift + shiftR;
		        }
		
		        var numWidth = _num.getWidth() + num_spacing;
		        if (_pos === _modifier.Modifier.Position.LEFT) {
		          _num.setXShift(left_shift + numShiftL);
		          num_shift = left_shift + numWidth; // spacing
		          xWidthL = num_shift > xWidthL ? num_shift : xWidthL;
		        } else if (_pos === _modifier.Modifier.Position.RIGHT) {
		          _num.setXShift(numShiftR);
		          num_shift = shiftRight + numWidth; // spacing
		          xWidthR = num_shift > xWidthR ? num_shift : xWidthR;
		        }
		        lastLine = line;
		        lastNote = _note;
		      }
		
		      state.left_shift += xWidthL;
		      state.right_shift += xWidthR;
		
		      return true;
		    }
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'frethandfinger';
		    }
		  }]);
		
		  function FretHandFinger(number) {
		    _classCallCheck(this, FretHandFinger);
		
		    var _this = _possibleConstructorReturn(this, (FretHandFinger.__proto__ || Object.getPrototypeOf(FretHandFinger)).call(this));
		
		    _this.setAttribute('type', 'FretHandFinger');
		
		    _this.note = null;
		    _this.index = null;
		    _this.finger = number;
		    _this.width = 7;
		    _this.position = _modifier.Modifier.Position.LEFT; // Default position above stem or note head
		    _this.x_shift = 0;
		    _this.y_shift = 0;
		    _this.x_offset = 0; // Horizontal offset from default
		    _this.y_offset = 0; // Vertical offset from default
		    _this.font = {
		      family: 'sans-serif',
		      size: 9,
		      weight: 'bold'
		    };
		    return _this;
		  }
		
		  _createClass(FretHandFinger, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return FretHandFinger.CATEGORY;
		    }
		  }, {
		    key: 'setFretHandFinger',
		    value: function setFretHandFinger(number) {
		      this.finger = number;return this;
		    }
		  }, {
		    key: 'setOffsetX',
		    value: function setOffsetX(x) {
		      this.x_offset = x;return this;
		    }
		  }, {
		    key: 'setOffsetY',
		    value: function setOffsetY(y) {
		      this.y_offset = y;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		
		      if (!this.note || this.index == null) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw string number without a note and index.");
		      }
		
		      this.setRendered();
		      var ctx = this.context;
		      var start = this.note.getModifierStartXY(this.position, this.index);
		      var dot_x = start.x + this.x_shift + this.x_offset;
		      var dot_y = start.y + this.y_shift + this.y_offset + 5;
		
		      switch (this.position) {
		        case _modifier.Modifier.Position.ABOVE:
		          dot_x -= 4;
		          dot_y -= 12;
		          break;
		        case _modifier.Modifier.Position.BELOW:
		          dot_x -= 2;
		          dot_y += 10;
		          break;
		        case _modifier.Modifier.Position.LEFT:
		          dot_x -= this.width;
		          break;
		        case _modifier.Modifier.Position.RIGHT:
		          dot_x += 1;
		          break;
		        default:
		          throw new _vex.Vex.RERR('InvalidPostion', 'The position ' + this.position + ' does not exist');
		      }
		
		      ctx.save();
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      ctx.fillText('' + this.finger, dot_x, dot_y);
		      ctx.restore();
		    }
		  }]);
	
		  return FretHandFinger;
		}(_modifier.Modifier);
	
	/***/ },
	/* 29 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Accidental = undefined;
		
		var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _fraction = __webpack_require__(3);
		
		var _tables = __webpack_require__(2);
		
		var _music = __webpack_require__(30);
		
		var _modifier = __webpack_require__(25);
		
		var _glyph = __webpack_require__(4);
		
		function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// @author Mohit Cheppudira
		// @author Greg Ristow (modifications)
		//
		// ## Description
		//
		// This file implements accidentals as modifiers that can be attached to
		// notes. Support is included for both western and microtonal accidentals.
		//
		// See `tests/accidental_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.Accidental.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Accidental.DEBUG) _vex.Vex.L('Vex.Flow.Accidental', args);
		}
		
		var getGlyphWidth = function getGlyphWidth(glyph) {
		  return glyph.getMetrics().width;
		};
		
		// An `Accidental` inherits from `Modifier`, and is formatted within a
		// `ModifierContext`.
		
		var Accidental = exports.Accidental = function (_Modifier) {
		  _inherits(Accidental, _Modifier);
		
		  _createClass(Accidental, null, [{
		    key: 'format',
		
		
		    // Arrange accidentals inside a ModifierContext.
		    value: function format(accidentals, state) {
		      var _this2 = this;
		
		      var noteheadAccidentalPadding = 1;
		      var leftShift = state.left_shift + noteheadAccidentalPadding;
		      var accidentalSpacing = 3;
		
		      // If there are no accidentals, we needn't format their positions
		      if (!accidentals || accidentals.length === 0) return;
		
		      var accList = [];
		      var prevNote = null;
		      var shiftL = 0;
		
		      // First determine the accidentals' Y positions from the note.keys
		      var propsTemp = void 0;
		      for (var i = 0; i < accidentals.length; ++i) {
		        var acc = accidentals[i];
		        var note = acc.getNote();
		        var stave = note.getStave();
		        var props = note.getKeyProps()[acc.getIndex()];
		        if (note !== prevNote) {
		          // Iterate through all notes to get the displaced pixels
		          for (var n = 0; n < note.keys.length; ++n) {
		            propsTemp = note.getKeyProps()[n];
		            shiftL = propsTemp.displaced ? note.getExtraLeftPx() : shiftL;
		          }
		          prevNote = note;
		        }
		        if (stave !== null) {
		          var lineSpace = stave.options.spacing_between_lines_px;
		          var y = stave.getYForLine(props.line);
		          var accLine = Math.round(y / lineSpace * 2) / 2;
		          accList.push({ y: y, line: accLine, shift: shiftL, acc: acc, lineSpace: lineSpace });
		        } else {
		          accList.push({ line: props.line, shift: shiftL, acc: acc });
		        }
		      }
		
		      // Sort accidentals by line number.
		      accList.sort(function (a, b) {
		        return b.line - a.line;
		      });
		
		      // FIXME: Confusing name. Each object in this array has a property called `line`.
		      // So if this is a list of lines, you end up with: `line.line` which is very awkward.
		      var lineList = [];
		
		      // amount by which all accidentals must be shifted right or left for
		      // stem flipping, notehead shifting concerns.
		      var accShift = 0;
		      var previousLine = null;
		
		      // Create an array of unique line numbers (lineList) from accList
		      for (var _i = 0; _i < accList.length; _i++) {
		        var _acc = accList[_i];
		
		        // if this is the first line, or a new line, add a lineList
		        if (previousLine === null || previousLine !== _acc.line) {
		          lineList.push({
		            line: _acc.line,
		            flatLine: true,
		            dblSharpLine: true,
		            numAcc: 0,
		            width: 0
		          });
		        }
		        // if this accidental is not a flat, the accidental needs 3.0 lines lower
		        // clearance instead of 2.5 lines for b or bb.
		        // FIXME: Naming could use work. acc.acc is very awkward
		        if (_acc.acc.type !== 'b' && _acc.acc.type !== 'bb') {
		          lineList[lineList.length - 1].flatLine = false;
		        }
		
		        // if this accidental is not a double sharp, the accidental needs 3.0 lines above
		        if (_acc.acc.type !== '##') {
		          lineList[lineList.length - 1].dblSharpLine = false;
		        }
		
		        // Track how many accidentals are on this line:
		        lineList[lineList.length - 1].numAcc++;
		
		        // Track the total x_offset needed for this line which will be needed
		        // for formatting lines w/ multiple accidentals:
		
		        // width = accidental width + universal spacing between accidentals
		        lineList[lineList.length - 1].width += _acc.acc.getWidth() + accidentalSpacing;
		
		        // if this accShift is larger, use it to keep first column accidentals in the same line
		        accShift = _acc.shift > accShift ? _acc.shift : accShift;
		
		        previousLine = _acc.line;
		      }
		
		      // ### Place Accidentals in Columns
		      //
		      // Default to a classic triangular layout (middle accidental farthest left),
		      // but follow exceptions as outlined in G. Read's _Music Notation_ and
		      // Elaine Gould's _Behind Bars_.
		      //
		      // Additionally, this implements different vertical collision rules for
		      // flats (only need 2.5 lines clearance below) and double sharps (only
		      // need 2.5 lines of clearance above or below).
		      //
		      // Classic layouts and exception patterns are found in the 'tables.js'
		      // in 'Vex.Flow.accidentalColumnsTable'
		      //
		      // Beyond 6 vertical accidentals, default to the parallel ascending lines approach,
		      // using as few columns as possible for the verticle structure.
		      //
		      // TODO (?): Allow column to be specified for an accidental at run-time?
		
		      var totalColumns = 0;
		
		      // establish the boundaries for a group of notes with clashing accidentals:
		
		      var _loop = function _loop(_i3) {
		        var noFurtherConflicts = false;
		        var groupStart = _i3;
		        var groupEnd = _i3;
		
		        while (groupEnd + 1 < lineList.length && !noFurtherConflicts) {
		          // if this note conflicts with the next:
		          if (_this2.checkCollision(lineList[groupEnd], lineList[groupEnd + 1])) {
		            // include the next note in the group:
		            groupEnd++;
		          } else {
		            noFurtherConflicts = true;
		          }
		        }
		
		        // Gets an a line from the `lineList`, relative to the current group
		        var getGroupLine = function getGroupLine(index) {
		          return lineList[groupStart + index];
		        };
		        var getGroupLines = function getGroupLines(indexes) {
		          return indexes.map(getGroupLine);
		        };
		        var lineDifference = function lineDifference(indexA, indexB) {
		          var _getGroupLines$map = getGroupLines([indexA, indexB]).map(function (item) {
		            return item.line;
		          }),
		              _getGroupLines$map2 = _slicedToArray(_getGroupLines$map, 2),
		              a = _getGroupLines$map2[0],
		              b = _getGroupLines$map2[1];
		
		          return a - b;
		        };
		
		        var notColliding = function notColliding() {
		          for (var _len2 = arguments.length, indexPairs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
		            indexPairs[_key2] = arguments[_key2];
		          }
		
		          return indexPairs.map(getGroupLines).every(function (lines) {
		            return !_this2.checkCollision.apply(_this2, _toConsumableArray(lines));
		          });
		        };
		
		        // Set columns for the lines in this group:
		        var groupLength = groupEnd - groupStart + 1;
		
		        // Set the accidental column for each line of the group
		        var endCase = _this2.checkCollision(lineList[groupStart], lineList[groupEnd]) ? 'a' : 'b';
		
		        switch (groupLength) {
		          case 3:
		            if (endCase === 'a' && lineDifference(1, 2) === 0.5 && lineDifference(0, 1) !== 0.5) {
		              endCase = 'second_on_bottom';
		            }
		            break;
		          case 4:
		            if (notColliding([0, 2], [1, 3])) {
		              endCase = 'spaced_out_tetrachord';
		            }
		            break;
		          case 5:
		            if (endCase === 'b' && notColliding([1, 3])) {
		              endCase = 'spaced_out_pentachord';
		              if (notColliding([0, 2], [2, 4])) {
		                endCase = 'very_spaced_out_pentachord';
		              }
		            }
		            break;
		          case 6:
		            if (notColliding([0, 3], [1, 4], [2, 5])) {
		              endCase = 'spaced_out_hexachord';
		            }
		            if (notColliding([0, 2], [2, 4], [1, 3], [3, 5])) {
		              endCase = 'very_spaced_out_hexachord';
		            }
		            break;
		          default:
		            break;
		        }
		
		        var groupMember = void 0;
		        var column = void 0;
		        // If the group contains more than seven members, use ascending parallel lines
		        // of accidentals, using as few columns as possible while avoiding collisions.
		        if (groupLength >= 7) {
		          // First, determine how many columns to use:
		          var patternLength = 2;
		          var collisionDetected = true;
		          while (collisionDetected === true) {
		            collisionDetected = false;
		            for (var line = 0; line + patternLength < lineList.length; line++) {
		              if (_this2.checkCollision(lineList[line], lineList[line + patternLength])) {
		                collisionDetected = true;
		                patternLength++;
		                break;
		              }
		            }
		          }
		          // Then, assign a column to each line of accidentals
		          for (groupMember = _i3; groupMember <= groupEnd; groupMember++) {
		            column = (groupMember - _i3) % patternLength + 1;
		            lineList[groupMember].column = column;
		            totalColumns = totalColumns > column ? totalColumns : column;
		          }
		
		          // Otherwise, if the group contains fewer than seven members, use the layouts from
		          // the accidentalsColumnsTable housed in tables.js.
		        } else {
		          for (groupMember = _i3; groupMember <= groupEnd; groupMember++) {
		            column = _tables.Flow.accidentalColumnsTable[groupLength][endCase][groupMember - _i3];
		            lineList[groupMember].column = column;
		            totalColumns = totalColumns > column ? totalColumns : column;
		          }
		        }
		
		        // Increment i to the last note that was set, so that if a lower set of notes
		        // does not conflict at all with this group, it can have its own classic shape.
		        _i3 = groupEnd;
		        _i2 = _i3;
		      };
		
		      for (var _i2 = 0; _i2 < lineList.length; _i2++) {
		        _loop(_i2);
		      }
		
		      // ### Convert Columns to x_offsets
		      //
		      // This keeps columns aligned, even if they have different accidentals within them
		      // which sometimes results in a larger x_offset than is an accidental might need
		      // to preserve the symmetry of the accidental shape.
		      //
		      // Neither A.C. Vinci nor G. Read address this, and it typically only happens in
		      // music with complex chord clusters.
		      //
		      // TODO (?): Optionally allow closer compression of accidentals, instead of forcing
		      // parallel columns.
		
		      // track each column's max width, which will be used as initial shift of later columns:
		      var columnWidths = [];
		      var columnXOffsets = [];
		      for (var _i4 = 0; _i4 <= totalColumns; _i4++) {
		        columnWidths[_i4] = 0;
		        columnXOffsets[_i4] = 0;
		      }
		
		      columnWidths[0] = accShift + leftShift;
		      columnXOffsets[0] = accShift + leftShift;
		
		      // Fill columnWidths with widest needed x-space;
		      // this is what keeps the columns parallel.
		      lineList.forEach(function (line) {
		        if (line.width > columnWidths[line.column]) columnWidths[line.column] = line.width;
		      });
		
		      for (var _i5 = 1; _i5 < columnWidths.length; _i5++) {
		        // this column's offset = this column's width + previous column's offset
		        columnXOffsets[_i5] = columnWidths[_i5] + columnXOffsets[_i5 - 1];
		      }
		
		      var totalShift = columnXOffsets[columnXOffsets.length - 1];
		      // Set the xShift for each accidental according to column offsets:
		      var accCount = 0;
		      lineList.forEach(function (line) {
		        var lineWidth = 0;
		        var lastAccOnLine = accCount + line.numAcc;
		        // handle all of the accidentals on a given line:
		        for (accCount; accCount < lastAccOnLine; accCount++) {
		          var xShift = columnXOffsets[line.column - 1] + lineWidth;
		          accList[accCount].acc.setXShift(xShift);
		          // keep track of the width of accidentals we've added so far, so that when
		          // we loop, we add space for them.
		          lineWidth += accList[accCount].acc.getWidth() + accidentalSpacing;
		          L('Line, accCount, shift: ', line.line, accCount, xShift);
		        }
		      });
		
		      // update the overall layout with the full width of the accidental shapes:
		      state.left_shift += totalShift;
		    }
		
		    // Helper function to determine whether two lines of accidentals collide vertically
		
		  }, {
		    key: 'checkCollision',
		    value: function checkCollision(line1, line2) {
		      var clearance = line2.line - line1.line;
		      var clearanceRequired = 3;
		      // But less clearance is required for certain accidentals: b, bb and ##.
		      if (clearance > 0) {
		        // then line 2 is on top
		        clearanceRequired = line2.flatLine || line2.dblSharpLine ? 2.5 : 3.0;
		        if (line1.dblSharpLine) clearance -= 0.5;
		      } else {
		        // line 1 is on top
		        clearanceRequired = line1.flatLine || line1.dblSharpLine ? 2.5 : 3.0;
		        if (line2.dblSharpLine) clearance -= 0.5;
		      }
		      var collision = Math.abs(clearance) < clearanceRequired;
		      L('Line_1, Line_2, Collision: ', line1.line, line2.line, collision);
		      return collision;
		    }
		
		    // Use this method to automatically apply accidentals to a set of `voices`.
		    // The accidentals will be remembered between all the voices provided.
		    // Optionally, you can also provide an initial `keySignature`.
		
		  }, {
		    key: 'applyAccidentals',
		    value: function applyAccidentals(voices, keySignature) {
		      var tickPositions = [];
		      var tickNoteMap = {};
		
		      // Sort the tickables in each voice by their tick position in the voice
		      voices.forEach(function (voice) {
		        var tickPosition = new _fraction.Fraction(0, 1);
		        var notes = voice.getTickables();
		        notes.forEach(function (note) {
		          if (note.shouldIgnoreTicks()) return;
		
		          var notesAtPosition = tickNoteMap[tickPosition.value()];
		
		          if (!notesAtPosition) {
		            tickPositions.push(tickPosition.value());
		            tickNoteMap[tickPosition.value()] = [note];
		          } else {
		            notesAtPosition.push(note);
		          }
		
		          tickPosition.add(note.getTicks());
		        });
		      });
		
		      var music = new _music.Music();
		
		      // Default key signature is C major
		      if (!keySignature) keySignature = 'C';
		
		      // Get the scale map, which represents the current state of each pitch
		      var scaleMap = music.createScaleMap(keySignature);
		
		      tickPositions.forEach(function (tick) {
		        var notes = tickNoteMap[tick];
		
		        // Array to store all pitches that modified accidental states
		        // at this tick position
		        var modifiedPitches = [];
		
		        var processNote = function processNote(note) {
		          if (note.isRest() || note.shouldIgnoreTicks()) return;
		
		          // Go through each key and determine if an accidental should be
		          // applied
		          note.keys.forEach(function (keyString, keyIndex) {
		            var key = music.getNoteParts(keyString.split('/')[0]);
		
		            // Force a natural for every key without an accidental
		            var accidentalString = key.accidental || 'n';
		            var pitch = key.root + accidentalString;
		
		            // Determine if the current pitch has the same accidental
		            // as the scale state
		            var sameAccidental = scaleMap[key.root] === pitch;
		
		            // Determine if an identical pitch in the chord already
		            // modified the accidental state
		            var previouslyModified = modifiedPitches.indexOf(pitch) > -1;
		
		            // Add the accidental to the StaveNote
		            if (!sameAccidental || sameAccidental && previouslyModified) {
		              // Modify the scale map so that the root pitch has an
		              // updated state
		              scaleMap[key.root] = pitch;
		
		              // Create the accidental
		              var accidental = new Accidental(accidentalString);
		
		              // Attach the accidental to the StaveNote
		              note.addAccidental(keyIndex, accidental);
		
		              // Add the pitch to list of pitches that modified accidentals
		              modifiedPitches.push(pitch);
		            }
		          });
		
		          // process grace notes
		          note.getModifiers().forEach(function (modifier) {
		            if (modifier.getCategory() === 'gracenotegroups') {
		              modifier.getGraceNotes().forEach(processNote);
		            }
		          });
		        };
		
		        notes.forEach(processNote);
		      });
		    }
		
		    // Create accidental. `type` can be a value from the
		    // `Vex.Flow.accidentalCodes.accidentals` table in `tables.js`. For
		    // example: `#`, `##`, `b`, `n`, etc.
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'accidentals';
		    }
		  }]);
		
		  function Accidental() {
		    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		
		    _classCallCheck(this, Accidental);
		
		    var _this = _possibleConstructorReturn(this, (Accidental.__proto__ || Object.getPrototypeOf(Accidental)).call(this));
		
		    _this.setAttribute('type', 'Accidental');
		
		    L('New accidental: ', type);
		
		    _this.note = null;
		    // The `index` points to a specific note in a chord.
		    _this.index = null;
		    _this.type = type;
		    _this.position = _modifier.Modifier.Position.LEFT;
		
		    _this.render_options = {
		      // Font size for glyphs
		      font_scale: 38,
		
		      // Length of stroke across heads above or below the stave.
		      stroke_px: 3,
		
		      // Padding between accidental and parentheses on each side
		      parenLeftPadding: 2,
		      parenRightPadding: 2
		    };
		
		    _this.accidental = _tables.Flow.accidentalCodes(_this.type);
		    if (!_this.accidental) {
		      throw new _vex.Vex.RERR('ArgumentError', 'Unknown accidental type: ' + type);
		    }
		
		    // Cautionary accidentals have parentheses around them
		    _this.cautionary = false;
		    _this.parenLeft = null;
		    _this.parenRight = null;
		
		    _this.reset();
		    return _this;
		  }
		
		  _createClass(Accidental, [{
		    key: 'reset',
		    value: function reset() {
		      var fontScale = this.render_options.font_scale;
		      this.glyph = new _glyph.Glyph(this.accidental.code, fontScale);
		      this.glyph.setOriginX(1.0);
		
		      if (this.cautionary) {
		        this.parenLeft = new _glyph.Glyph(_tables.Flow.accidentalCodes('{').code, fontScale);
		        this.parenRight = new _glyph.Glyph(_tables.Flow.accidentalCodes('}').code, fontScale);
		        this.parenLeft.setOriginX(1.0);
		        this.parenRight.setOriginX(1.0);
		      }
		    }
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return Accidental.CATEGORY;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      var parenWidth = this.cautionary ? getGlyphWidth(this.parenLeft) + getGlyphWidth(this.parenRight) + this.render_options.parenLeftPadding + this.render_options.parenRightPadding : 0;
		
		      return getGlyphWidth(this.glyph) + parenWidth;
		    }
		
		    // Attach this accidental to `note`, which must be a `StaveNote`.
		
		  }, {
		    key: 'setNote',
		    value: function setNote(note) {
		      if (!note) {
		        throw new _vex.Vex.RERR('ArgumentError', 'Bad note value: ' + note);
		      }
		
		      this.note = note;
		
		      // Accidentals attached to grace notes are rendered smaller.
		      if (this.note.getCategory() === 'gracenotes') {
		        this.render_options.font_scale = 25;
		        this.reset();
		      }
		    }
		
		    // If called, draws parenthesis around accidental.
		
		  }, {
		    key: 'setAsCautionary',
		    value: function setAsCautionary() {
		      this.cautionary = true;
		      this.render_options.font_scale = 28;
		      this.reset();
		      return this;
		    }
		
		    // Render accidental onto canvas.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var context = this.context,
		          type = this.type,
		          position = this.position,
		          note = this.note,
		          index = this.index,
		          cautionary = this.cautionary,
		          x_shift = this.x_shift,
		          y_shift = this.y_shift,
		          glyph = this.glyph,
		          parenLeft = this.parenLeft,
		          parenRight = this.parenRight,
		          _render_options = this.render_options,
		          parenLeftPadding = _render_options.parenLeftPadding,
		          parenRightPadding = _render_options.parenRightPadding;
		
		
		      this.checkContext();
		
		      if (!(note && index != null)) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw accidental without a note and index.");
		      }
		
		      // Figure out the start `x` and `y` coordinates for note and index.
		      var start = note.getModifierStartXY(position, index);
		      var accX = start.x + x_shift;
		      var accY = start.y + y_shift;
		      L('Rendering: ', type, accX, accY);
		
		      if (!cautionary) {
		        glyph.render(context, accX, accY);
		      } else {
		        // Render the accidental in parentheses.
		        parenRight.render(context, accX, accY);
		        accX -= getGlyphWidth(parenRight);
		        accX -= parenRightPadding;
		        accX -= this.accidental.parenRightPaddingAdjustment;
		        glyph.render(context, accX, accY);
		        accX -= getGlyphWidth(glyph);
		        accX -= parenLeftPadding;
		        parenLeft.render(context, accX, accY);
		      }
		
		      this.setRendered();
		    }
		  }]);
	
		  return Accidental;
		}(_modifier.Modifier);
	
	/***/ },
	/* 30 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Music = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class implements some standard music theory routines.
		
		var _vex = __webpack_require__(1);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Music = exports.Music = function () {
		  function Music() {
		    _classCallCheck(this, Music);
		  }
		
		  _createClass(Music, [{
		    key: 'isValidNoteValue',
		    value: function isValidNoteValue(note) {
		      if (note == null || note < 0 || note >= Music.NUM_TONES) {
		        return false;
		      }
		      return true;
		    }
		  }, {
		    key: 'isValidIntervalValue',
		    value: function isValidIntervalValue(interval) {
		      return this.isValidNoteValue(interval);
		    }
		  }, {
		    key: 'getNoteParts',
		    value: function getNoteParts(noteString) {
		      if (!noteString || noteString.length < 1) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);
		      }
		
		      if (noteString.length > 3) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);
		      }
		
		      var note = noteString.toLowerCase();
		
		      var regex = /^([cdefgab])(b|bb|n|#|##)?$/;
		      var match = regex.exec(note);
		
		      if (match != null) {
		        var root = match[1];
		        var accidental = match[2];
		
		        return {
		          root: root,
		          accidental: accidental
		        };
		      } else {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);
		      }
		    }
		  }, {
		    key: 'getKeyParts',
		    value: function getKeyParts(keyString) {
		      if (!keyString || keyString.length < 1) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid key: ' + keyString);
		      }
		
		      var key = keyString.toLowerCase();
		
		      // Support Major, Minor, Melodic Minor, and Harmonic Minor key types.
		      var regex = /^([cdefgab])(b|#)?(mel|harm|m|M)?$/;
		      var match = regex.exec(key);
		
		      if (match != null) {
		        var root = match[1];
		        var accidental = match[2];
		        var type = match[3];
		
		        // Unspecified type implies major
		        if (!type) type = 'M';
		
		        return {
		          root: root,
		          accidental: accidental,
		          type: type
		        };
		      } else {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid key: ' + keyString);
		      }
		    }
		  }, {
		    key: 'getNoteValue',
		    value: function getNoteValue(noteString) {
		      var value = Music.noteValues[noteString];
		      if (value == null) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid note name: ' + noteString);
		      }
		
		      return value.int_val;
		    }
		  }, {
		    key: 'getIntervalValue',
		    value: function getIntervalValue(intervalString) {
		      var value = Music.intervals[intervalString];
		      if (value == null) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid interval name: ${intervalString}');
		      }
		
		      return value;
		    }
		  }, {
		    key: 'getCanonicalNoteName',
		    value: function getCanonicalNoteName(noteValue) {
		      if (!this.isValidNoteValue(noteValue)) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid note value: ' + noteValue);
		      }
		
		      return Music.canonical_notes[noteValue];
		    }
		  }, {
		    key: 'getCanonicalIntervalName',
		    value: function getCanonicalIntervalName(intervalValue) {
		      if (!this.isValidIntervalValue(intervalValue)) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid interval value: ' + intervalValue);
		      }
		
		      return Music.diatonic_intervals[intervalValue];
		    }
		
		    /* Given a note, interval, and interval direction, product the
		     * relative note.
		     */
		
		  }, {
		    key: 'getRelativeNoteValue',
		    value: function getRelativeNoteValue(noteValue, intervalValue, direction) {
		      if (direction == null) direction = 1;
		
		      if (direction !== 1 && direction !== -1) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid direction: ' + direction);
		      }
		
		      var sum = (noteValue + direction * intervalValue) % Music.NUM_TONES;
		      if (sum < 0) sum += Music.NUM_TONES;
		
		      return sum;
		    }
		  }, {
		    key: 'getRelativeNoteName',
		    value: function getRelativeNoteName(root, noteValue) {
		      var parts = this.getNoteParts(root);
		      var rootValue = this.getNoteValue(parts.root);
		      var interval = noteValue - rootValue;
		
		      if (Math.abs(interval) > Music.NUM_TONES - 3) {
		        var multiplier = 1;
		        if (interval > 0) multiplier = -1;
		
		        // Possibly wrap around. (Add +1 for modulo operator)
		        var reverse_interval = (noteValue + 1 + (rootValue + 1)) % Music.NUM_TONES * multiplier;
		
		        if (Math.abs(reverse_interval) > 2) {
		          throw new _vex.Vex.RERR('BadArguments', 'Notes not related: ' + root + ', ' + noteValue + ')');
		        } else {
		          interval = reverse_interval;
		        }
		      }
		
		      if (Math.abs(interval) > 2) {
		        throw new _vex.Vex.RERR('BadArguments', 'Notes not related: ' + root + ', ' + noteValue + ')');
		      }
		
		      var relativeNoteName = parts.root;
		      if (interval > 0) {
		        for (var i = 1; i <= interval; ++i) {
		          relativeNoteName += '#';
		        }
		      } else if (interval < 0) {
		        for (var _i = -1; _i >= interval; --_i) {
		          relativeNoteName += 'b';
		        }
		      }
		
		      return relativeNoteName;
		    }
		
		    /* Return scale tones, given intervals. Each successive interval is
		     * relative to the previous one, e.g., Major Scale:
		     *
		     *   TTSTTTS = [2,2,1,2,2,2,1]
		     *
		     * When used with key = 0, returns C scale (which is isomorphic to
		     * interval list).
		     */
		
		  }, {
		    key: 'getScaleTones',
		    value: function getScaleTones(key, intervals) {
		      var tones = [key];
		
		      var nextNote = key;
		      for (var i = 0; i < intervals.length; i += 1) {
		        nextNote = this.getRelativeNoteValue(nextNote, intervals[i]);
		        if (nextNote !== key) tones.push(nextNote);
		      }
		
		      return tones;
		    }
		
		    /* Returns the interval of a note, given a diatonic scale.
		     *
		     * E.g., Given the scale C, and the note E, returns M3
		     */
		
		  }, {
		    key: 'getIntervalBetween',
		    value: function getIntervalBetween(note1, note2, direction) {
		      if (direction == null) direction = 1;
		
		      if (direction !== 1 && direction !== -1) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid direction: ' + direction);
		      }
		
		      if (!this.isValidNoteValue(note1) || !this.isValidNoteValue(note2)) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid notes: ' + note1 + ', ' + note2);
		      }
		
		      var difference = direction === 1 ? note2 - note1 : note1 - note2;
		
		      if (difference < 0) difference += Music.NUM_TONES;
		
		      return difference;
		    }
		
		    // Create a scale map that represents the pitch state for a
		    // `keySignature`. For example, passing a `G` to `keySignature` would
		    // return a scale map with every note naturalized except for `F` which
		    // has an `F#` state.
		
		  }, {
		    key: 'createScaleMap',
		    value: function createScaleMap(keySignature) {
		      var keySigParts = this.getKeyParts(keySignature);
		      var scaleName = Music.scaleTypes[keySigParts.type];
		
		      var keySigString = keySigParts.root;
		      if (keySigParts.accidental) keySigString += keySigParts.accidental;
		
		      if (!scaleName) throw new _vex.Vex.RERR('BadArguments', 'Unsupported key type: ' + keySignature);
		
		      var scale = this.getScaleTones(this.getNoteValue(keySigString), scaleName);
		      var noteLocation = Music.root_indices[keySigParts.root];
		
		      var scaleMap = {};
		      for (var i = 0; i < Music.roots.length; ++i) {
		        var index = (noteLocation + i) % Music.roots.length;
		        var rootName = Music.roots[index];
		        var noteName = this.getRelativeNoteName(rootName, scale[i]);
		
		        if (noteName.length === 1) {
		          noteName += 'n';
		        }
		
		        scaleMap[rootName] = noteName;
		      }
		
		      return scaleMap;
		    }
		  }], [{
		    key: 'NUM_TONES',
		    get: function get() {
		      return 12;
		    }
		  }, {
		    key: 'roots',
		    get: function get() {
		      return ['c', 'd', 'e', 'f', 'g', 'a', 'b'];
		    }
		  }, {
		    key: 'root_values',
		    get: function get() {
		      return [0, 2, 4, 5, 7, 9, 11];
		    }
		  }, {
		    key: 'root_indices',
		    get: function get() {
		      return {
		        'c': 0,
		        'd': 1,
		        'e': 2,
		        'f': 3,
		        'g': 4,
		        'a': 5,
		        'b': 6
		      };
		    }
		  }, {
		    key: 'canonical_notes',
		    get: function get() {
		      return ['c', 'c#', 'd', 'd#', 'e', 'f', 'f#', 'g', 'g#', 'a', 'a#', 'b'];
		    }
		  }, {
		    key: 'diatonic_intervals',
		    get: function get() {
		      return ['unison', 'm2', 'M2', 'm3', 'M3', 'p4', 'dim5', 'p5', 'm6', 'M6', 'b7', 'M7', 'octave'];
		    }
		  }, {
		    key: 'diatonic_accidentals',
		    get: function get() {
		      return {
		        'unison': { note: 0, accidental: 0 },
		        'm2': { note: 1, accidental: -1 },
		        'M2': { note: 1, accidental: 0 },
		        'm3': { note: 2, accidental: -1 },
		        'M3': { note: 2, accidental: 0 },
		        'p4': { note: 3, accidental: 0 },
		        'dim5': { note: 4, accidental: -1 },
		        'p5': { note: 4, accidental: 0 },
		        'm6': { note: 5, accidental: -1 },
		        'M6': { note: 5, accidental: 0 },
		        'b7': { note: 6, accidental: -1 },
		        'M7': { note: 6, accidental: 0 },
		        'octave': { note: 7, accidental: 0 }
		      };
		    }
		  }, {
		    key: 'intervals',
		    get: function get() {
		      return {
		        'u': 0, 'unison': 0,
		        'm2': 1, 'b2': 1, 'min2': 1, 'S': 1, 'H': 1,
		        '2': 2, 'M2': 2, 'maj2': 2, 'T': 2, 'W': 2,
		        'm3': 3, 'b3': 3, 'min3': 3,
		        'M3': 4, '3': 4, 'maj3': 4,
		        '4': 5, 'p4': 5,
		        '#4': 6, 'b5': 6, 'aug4': 6, 'dim5': 6,
		        '5': 7, 'p5': 7,
		        '#5': 8, 'b6': 8, 'aug5': 8,
		        '6': 9, 'M6': 9, 'maj6': 9,
		        'b7': 10, 'm7': 10, 'min7': 10, 'dom7': 10,
		        'M7': 11, 'maj7': 11,
		        '8': 12, 'octave': 12
		      };
		    }
		  }, {
		    key: 'scales',
		    get: function get() {
		      return {
		        major: [2, 2, 1, 2, 2, 2, 1],
		        dorian: [2, 1, 2, 2, 2, 1, 2],
		        mixolydian: [2, 2, 1, 2, 2, 1, 2],
		        minor: [2, 1, 2, 2, 1, 2, 2]
		      };
		    }
		  }, {
		    key: 'scaleTypes',
		    get: function get() {
		      return {
		        'M': Music.scales.major,
		        'm': Music.scales.minor
		      };
		    }
		  }, {
		    key: 'accidentals',
		    get: function get() {
		      return ['bb', 'b', 'n', '#', '##'];
		    }
		  }, {
		    key: 'noteValues',
		    get: function get() {
		      return {
		        'c': { root_index: 0, int_val: 0 },
		        'cn': { root_index: 0, int_val: 0 },
		        'c#': { root_index: 0, int_val: 1 },
		        'c##': { root_index: 0, int_val: 2 },
		        'cb': { root_index: 0, int_val: 11 },
		        'cbb': { root_index: 0, int_val: 10 },
		        'd': { root_index: 1, int_val: 2 },
		        'dn': { root_index: 1, int_val: 2 },
		        'd#': { root_index: 1, int_val: 3 },
		        'd##': { root_index: 1, int_val: 4 },
		        'db': { root_index: 1, int_val: 1 },
		        'dbb': { root_index: 1, int_val: 0 },
		        'e': { root_index: 2, int_val: 4 },
		        'en': { root_index: 2, int_val: 4 },
		        'e#': { root_index: 2, int_val: 5 },
		        'e##': { root_index: 2, int_val: 6 },
		        'eb': { root_index: 2, int_val: 3 },
		        'ebb': { root_index: 2, int_val: 2 },
		        'f': { root_index: 3, int_val: 5 },
		        'fn': { root_index: 3, int_val: 5 },
		        'f#': { root_index: 3, int_val: 6 },
		        'f##': { root_index: 3, int_val: 7 },
		        'fb': { root_index: 3, int_val: 4 },
		        'fbb': { root_index: 3, int_val: 3 },
		        'g': { root_index: 4, int_val: 7 },
		        'gn': { root_index: 4, int_val: 7 },
		        'g#': { root_index: 4, int_val: 8 },
		        'g##': { root_index: 4, int_val: 9 },
		        'gb': { root_index: 4, int_val: 6 },
		        'gbb': { root_index: 4, int_val: 5 },
		        'a': { root_index: 5, int_val: 9 },
		        'an': { root_index: 5, int_val: 9 },
		        'a#': { root_index: 5, int_val: 10 },
		        'a##': { root_index: 5, int_val: 11 },
		        'ab': { root_index: 5, int_val: 8 },
		        'abb': { root_index: 5, int_val: 7 },
		        'b': { root_index: 6, int_val: 11 },
		        'bn': { root_index: 6, int_val: 11 },
		        'b#': { root_index: 6, int_val: 0 },
		        'b##': { root_index: 6, int_val: 1 },
		        'bb': { root_index: 6, int_val: 10 },
		        'bbb': { root_index: 6, int_val: 9 }
		      };
		    }
		  }]);
	
		  return Music;
		}();
	
	/***/ },
	/* 31 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.NoteSubGroup = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		var _formatter = __webpack_require__(14);
		
		var _voice = __webpack_require__(18);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Taehoon Moon 2016
		//
		// ## Description
		//
		// This file implements `NoteSubGroup` which is used to format and
		// render notes as a `Modifier`
		// ex) ClefNote, TimeSigNote and BarNote.
		
		var NoteSubGroup = exports.NoteSubGroup = function (_Modifier) {
		  _inherits(NoteSubGroup, _Modifier);
		
		  _createClass(NoteSubGroup, null, [{
		    key: 'format',
		
		
		    // Arrange groups inside a `ModifierContext`
		    value: function format(groups, state) {
		      if (!groups || groups.length === 0) return false;
		
		      var width = 0;
		      for (var i = 0; i < groups.length; ++i) {
		        var group = groups[i];
		        group.preFormat();
		        width += group.getWidth();
		      }
		
		      state.left_shift += width;
		      return true;
		    }
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'notesubgroup';
		    }
		  }]);
		
		  function NoteSubGroup(subNotes) {
		    var _ret;
		
		    _classCallCheck(this, NoteSubGroup);
		
		    var _this = _possibleConstructorReturn(this, (NoteSubGroup.__proto__ || Object.getPrototypeOf(NoteSubGroup)).call(this));
		
		    _this.setAttribute('type', 'NoteSubGroup');
		
		    _this.note = null;
		    _this.index = null;
		    _this.position = _modifier.Modifier.Position.LEFT;
		    _this.subNotes = subNotes;
		    _this.subNotes.forEach(function (subNote) {
		      subNote.ignore_ticks = false;
		    });
		    _this.width = 0;
		    _this.preFormatted = false;
		
		    _this.formatter = new _formatter.Formatter();
		    _this.voice = new _voice.Voice({
		      num_beats: 4,
		      beat_value: 4,
		      resolution: _tables.Flow.RESOLUTION
		    }).setStrict(false);
		
		    _this.voice.addTickables(_this.subNotes);
		
		    return _ret = _this, _possibleConstructorReturn(_this, _ret);
		  }
		
		  _createClass(NoteSubGroup, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return NoteSubGroup.CATEGORY;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return;
		
		      this.formatter.joinVoices([this.voice]).format([this.voice], 0);
		      this.setWidth(this.formatter.getMinTotalWidth());
		      this.preFormatted = true;
		    }
		  }, {
		    key: 'setNote',
		    value: function setNote(note) {
		      this.note = note;
		    }
		  }, {
		    key: 'setWidth',
		    value: function setWidth(width) {
		      this.width = width;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _this2 = this;
		
		      this.checkContext();
		
		      var note = this.getNote();
		
		      if (!(note && this.index !== null)) {
		        throw new _vex.Vex.RuntimeError('NoAttachedNote', "Can't draw notes without a parent note and parent note index.");
		      }
		
		      this.setRendered();
		      var alignSubNotesWithNote = function alignSubNotesWithNote(subNotes, note) {
		        // Shift over the tick contexts of each note
		        var tickContext = note.getTickContext();
		        var extraPx = tickContext.getExtraPx();
		        var x = tickContext.getX() - extraPx.left - extraPx.extraLeft + _this2.getSpacingFromNextModifier();
		
		        subNotes.forEach(function (subNote) {
		          var tick_context = subNote.getTickContext();
		          var x_offset = tick_context.getX();
		          subNote.setStave(note.stave);
		          tick_context.setX(x + x_offset);
		        });
		      };
		
		      alignSubNotesWithNote(this.subNotes, note, this.width);
		
		      // Draw notes
		      this.subNotes.forEach(function (subNote) {
		        return subNote.setContext(_this2.context).draw();
		      });
		    }
		  }]);
	
		  return NoteSubGroup;
		}(_modifier.Modifier);
	
	/***/ },
	/* 32 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.GraceNoteGroup = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		var _formatter = __webpack_require__(14);
		
		var _voice = __webpack_require__(18);
		
		var _beam = __webpack_require__(15);
		
		var _stavetie = __webpack_require__(33);
		
		var _tabtie = __webpack_require__(34);
		
		var _stavenote = __webpack_require__(20);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements `GraceNoteGroup` which is used to format and
		// render grace notes.
		
		// To enable logging for this class. Set `Vex.Flow.GraceNoteGroup.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (GraceNoteGroup.DEBUG) _vex.Vex.L('Vex.Flow.GraceNoteGroup', args);
		}
		
		var GraceNoteGroup = exports.GraceNoteGroup = function (_Modifier) {
		  _inherits(GraceNoteGroup, _Modifier);
		
		  _createClass(GraceNoteGroup, null, [{
		    key: 'format',
		
		
		    // Arrange groups inside a `ModifierContext`
		    value: function format(gracenote_groups, state) {
		      var group_spacing_stave = 4;
		      var group_spacing_tab = 0;
		
		      if (!gracenote_groups || gracenote_groups.length === 0) return false;
		
		      var group_list = [];
		      var prev_note = null;
		      var shiftL = 0;
		
		      for (var i = 0; i < gracenote_groups.length; ++i) {
		        var gracenote_group = gracenote_groups[i];
		        var note = gracenote_group.getNote();
		        var is_stavenote = note.getCategory() === _stavenote.StaveNote.CATEGORY;
		        var spacing = is_stavenote ? group_spacing_stave : group_spacing_tab;
		
		        if (is_stavenote && note !== prev_note) {
		          // Iterate through all notes to get the displaced pixels
		          for (var n = 0; n < note.keys.length; ++n) {
		            var props_tmp = note.getKeyProps()[n];
		            shiftL = props_tmp.displaced ? note.getExtraLeftPx() : shiftL;
		          }
		          prev_note = note;
		        }
		
		        group_list.push({ shift: shiftL, gracenote_group: gracenote_group, spacing: spacing });
		      }
		
		      // If first note left shift in case it is displaced
		      var group_shift = group_list[0].shift;
		      var formatWidth = void 0;
		      for (var _i = 0; _i < group_list.length; ++_i) {
		        var _gracenote_group = group_list[_i].gracenote_group;
		        _gracenote_group.preFormat();
		        formatWidth = _gracenote_group.getWidth() + group_list[_i].spacing;
		        group_shift = Math.max(formatWidth, group_shift);
		      }
		
		      for (var _i2 = 0; _i2 < group_list.length; ++_i2) {
		        var _gracenote_group2 = group_list[_i2].gracenote_group;
		        formatWidth = _gracenote_group2.getWidth() + group_list[_i2].spacing;
		        _gracenote_group2.setSpacingFromNextModifier(group_shift - Math.min(formatWidth, group_shift));
		      }
		
		      state.left_shift += group_shift;
		      return true;
		    }
		
		    // ## Prototype Methods
		    //
		    // `GraceNoteGroup` inherits from `Modifier` and is placed inside a
		    // `ModifierContext`.
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'gracenotegroups';
		    }
		  }]);
		
		  function GraceNoteGroup(grace_notes, show_slur) {
		    var _ret;
		
		    _classCallCheck(this, GraceNoteGroup);
		
		    var _this = _possibleConstructorReturn(this, (GraceNoteGroup.__proto__ || Object.getPrototypeOf(GraceNoteGroup)).call(this));
		
		    _this.setAttribute('type', 'GraceNoteGroup');
		
		    _this.note = null;
		    _this.index = null;
		    _this.position = _modifier.Modifier.Position.LEFT;
		    _this.grace_notes = grace_notes;
		    _this.width = 0;
		
		    _this.preFormatted = false;
		
		    _this.show_slur = show_slur;
		    _this.slur = null;
		
		    _this.formatter = new _formatter.Formatter();
		    _this.voice = new _voice.Voice({
		      num_beats: 4,
		      beat_value: 4,
		      resolution: _tables.Flow.RESOLUTION
		    }).setStrict(false);
		
		    _this.render_options = {
		      slur_y_shift: 0
		    };
		
		    _this.voice.addTickables(_this.grace_notes);
		
		    return _ret = _this, _possibleConstructorReturn(_this, _ret);
		  }
		
		  _createClass(GraceNoteGroup, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return GraceNoteGroup.CATEGORY;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return;
		
		      this.formatter.joinVoices([this.voice]).format([this.voice], 0);
		      this.setWidth(this.formatter.getMinTotalWidth());
		      this.preFormatted = true;
		    }
		  }, {
		    key: 'beamNotes',
		    value: function beamNotes() {
		      if (this.grace_notes.length > 1) {
		        var beam = new _beam.Beam(this.grace_notes);
		
		        beam.render_options.beam_width = 3;
		        beam.render_options.partial_beam_length = 4;
		
		        this.beam = beam;
		      }
		
		      return this;
		    }
		  }, {
		    key: 'setNote',
		    value: function setNote(note) {
		      this.note = note;
		    }
		  }, {
		    key: 'setWidth',
		    value: function setWidth(width) {
		      this.width = width;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'getGraceNotes',
		    value: function getGraceNotes() {
		      return this.grace_notes;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _this2 = this;
		
		      this.checkContext();
		
		      var note = this.getNote();
		
		      L('Drawing grace note group for:', note);
		
		      if (!(note && this.index !== null)) {
		        throw new _vex.Vex.RuntimeError('NoAttachedNote', "Can't draw grace note without a parent note and parent note index.");
		      }
		
		      this.setRendered();
		      var that = this;
		      function alignGraceNotesWithNote(grace_notes, note) {
		        // Shift over the tick contexts of each note
		        // So that th aligned with the note
		        var tickContext = note.getTickContext();
		        var extraPx = tickContext.getExtraPx();
		        var x = tickContext.getX() - extraPx.left - extraPx.extraLeft + that.getSpacingFromNextModifier();
		
		        grace_notes.forEach(function (graceNote) {
		          var tick_context = graceNote.getTickContext();
		          var x_offset = tick_context.getX();
		          graceNote.setStave(note.stave);
		          tick_context.setX(x + x_offset);
		        });
		      }
		
		      alignGraceNotesWithNote(this.grace_notes, note, this.width);
		
		      // Draw notes
		      this.grace_notes.forEach(function (graceNote) {
		        graceNote.setContext(_this2.context).draw();
		      });
		
		      // Draw beam
		      if (this.beam) {
		        this.beam.setContext(this.context).draw();
		      }
		
		      if (this.show_slur) {
		        // Create and draw slur
		        var is_stavenote = this.getNote().getCategory() === _stavenote.StaveNote.CATEGORY;
		        var TieClass = is_stavenote ? _stavetie.StaveTie : _tabtie.TabTie;
		
		        this.slur = new TieClass({
		          last_note: this.grace_notes[0],
		          first_note: note,
		          first_indices: [0],
		          last_indices: [0]
		        });
		
		        this.slur.render_options.cp2 = 12;
		        this.slur.render_options.y_shift = (is_stavenote ? 7 : 5) + this.render_options.slur_y_shift;
		        this.slur.setContext(this.context).draw();
		      }
		    }
		  }]);
	
		  return GraceNoteGroup;
		}(_modifier.Modifier);
	
	/***/ },
	/* 33 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveTie = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class implements varies types of ties between contiguous notes. The
		// ties include: regular ties, hammer ons, pull offs, and slides.
		
		var StaveTie = exports.StaveTie = function (_Element) {
		  _inherits(StaveTie, _Element);
		
		  function StaveTie(notes, text) {
		    _classCallCheck(this, StaveTie);
		
		    var _this = _possibleConstructorReturn(this, (StaveTie.__proto__ || Object.getPrototypeOf(StaveTie)).call(this));
		    /**
		     * Notes is a struct that has:
		     *
		     *  {
		     *    first_note: Note,
		     *    last_note: Note,
		     *    first_indices: [n1, n2, n3],
		     *    last_indices: [n1, n2, n3]
		     *  }
		     *
		     **/
		
		
		    _this.setAttribute('type', 'StaveTie');
		    _this.notes = notes;
		    _this.context = null;
		    _this.text = text;
		    _this.direction = null;
		
		    _this.render_options = {
		      cp1: 8, // Curve control point 1
		      cp2: 12, // Curve control point 2
		      text_shift_x: 0,
		      first_x_shift: 0,
		      last_x_shift: 0,
		      y_shift: 7,
		      tie_spacing: 0,
		      font: { family: 'Arial', size: 10, style: '' }
		    };
		
		    _this.font = _this.render_options.font;
		    _this.setNotes(notes);
		    return _this;
		  }
		
		  _createClass(StaveTie, [{
		    key: 'setFont',
		    value: function setFont(font) {
		      this.font = font;return this;
		    }
		  }, {
		    key: 'setDirection',
		    value: function setDirection(direction) {
		      this.direction = direction;return this;
		    }
		
		    /**
		     * Set the notes to attach this tie to.
		     *
		     * @param {!Object} notes The notes to tie up.
		     */
		
		  }, {
		    key: 'setNotes',
		    value: function setNotes(notes) {
		      if (!notes.first_note && !notes.last_note) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'Tie needs to have either first_note or last_note set.');
		      }
		
		      if (!notes.first_indices) notes.first_indices = [0];
		      if (!notes.last_indices) notes.last_indices = [0];
		
		      if (notes.first_indices.length !== notes.last_indices.length) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'Tied notes must have similar index sizes');
		      }
		
		      // Success. Lets grab 'em notes.
		      this.first_note = notes.first_note;
		      this.first_indices = notes.first_indices;
		      this.last_note = notes.last_note;
		      this.last_indices = notes.last_indices;
		      return this;
		    }
		
		    /**
		     * @return {boolean} Returns true if this is a partial bar.
		     */
		
		  }, {
		    key: 'isPartial',
		    value: function isPartial() {
		      return !this.first_note || !this.last_note;
		    }
		  }, {
		    key: 'renderTie',
		    value: function renderTie(params) {
		      if (params.first_ys.length === 0 || params.last_ys.length === 0) {
		        throw new _vex.Vex.RERR('BadArguments', 'No Y-values to render');
		      }
		
		      var ctx = this.context;
		      var cp1 = this.render_options.cp1;
		      var cp2 = this.render_options.cp2;
		
		      if (Math.abs(params.last_x_px - params.first_x_px) < 10) {
		        cp1 = 2;cp2 = 8;
		      }
		
		      var first_x_shift = this.render_options.first_x_shift;
		      var last_x_shift = this.render_options.last_x_shift;
		      var y_shift = this.render_options.y_shift * params.direction;
		
		      for (var i = 0; i < this.first_indices.length; ++i) {
		        var cp_x = (params.last_x_px + last_x_shift + (params.first_x_px + first_x_shift)) / 2;
		        var first_y_px = params.first_ys[this.first_indices[i]] + y_shift;
		        var last_y_px = params.last_ys[this.last_indices[i]] + y_shift;
		
		        if (isNaN(first_y_px) || isNaN(last_y_px)) {
		          throw new _vex.Vex.RERR('BadArguments', 'Bad indices for tie rendering.');
		        }
		
		        var top_cp_y = (first_y_px + last_y_px) / 2 + cp1 * params.direction;
		        var bottom_cp_y = (first_y_px + last_y_px) / 2 + cp2 * params.direction;
		
		        ctx.beginPath();
		        ctx.moveTo(params.first_x_px + first_x_shift, first_y_px);
		        ctx.quadraticCurveTo(cp_x, top_cp_y, params.last_x_px + last_x_shift, last_y_px);
		        ctx.quadraticCurveTo(cp_x, bottom_cp_y, params.first_x_px + first_x_shift, first_y_px);
		        ctx.closePath();
		        ctx.fill();
		      }
		    }
		  }, {
		    key: 'renderText',
		    value: function renderText(first_x_px, last_x_px) {
		      if (!this.text) return;
		      var center_x = (first_x_px + last_x_px) / 2;
		      center_x -= this.context.measureText(this.text).width / 2;
		
		      this.context.save();
		      this.context.setFont(this.font.family, this.font.size, this.font.style);
		      this.context.fillText(this.text, center_x + this.render_options.text_shift_x, (this.first_note || this.last_note).getStave().getYForTopText() - 1);
		      this.context.restore();
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      var first_note = this.first_note;
		      var last_note = this.last_note;
		
		      var first_x_px = void 0;
		      var last_x_px = void 0;
		      var first_ys = void 0;
		      var last_ys = void 0;
		      var stem_direction = void 0;
		      if (first_note) {
		        first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;
		        stem_direction = first_note.getStemDirection();
		        first_ys = first_note.getYs();
		      } else {
		        first_x_px = last_note.getStave().getTieStartX();
		        first_ys = last_note.getYs();
		        this.first_indices = this.last_indices;
		      }
		
		      if (last_note) {
		        last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;
		        stem_direction = last_note.getStemDirection();
		        last_ys = last_note.getYs();
		      } else {
		        last_x_px = first_note.getStave().getTieEndX();
		        last_ys = first_note.getYs();
		        this.last_indices = this.first_indices;
		      }
		
		      if (this.direction) {
		        stem_direction = this.direction;
		      }
		
		      this.renderTie({
		        first_x_px: first_x_px,
		        last_x_px: last_x_px,
		        first_ys: first_ys,
		        last_ys: last_ys,
		        direction: stem_direction
		      });
		
		      this.renderText(first_x_px, last_x_px);
		      return true;
		    }
		  }]);
	
		  return StaveTie;
		}(_element.Element);
	
	/***/ },
	/* 34 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TabTie = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _stavetie = __webpack_require__(33);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // / [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class implements varies types of ties between contiguous notes. The
		// ties include: regular ties, hammer ons, pull offs, and slides.
		
		var TabTie = exports.TabTie = function (_StaveTie) {
		  _inherits(TabTie, _StaveTie);
		
		  _createClass(TabTie, null, [{
		    key: 'createHammeron',
		    value: function createHammeron(notes) {
		      return new TabTie(notes, 'H');
		    }
		  }, {
		    key: 'createPulloff',
		    value: function createPulloff(notes) {
		      return new TabTie(notes, 'P');
		    }
		  }]);
		
		  function TabTie(notes, text) {
		    _classCallCheck(this, TabTie);
		
		    var _this = _possibleConstructorReturn(this, (TabTie.__proto__ || Object.getPrototypeOf(TabTie)).call(this, notes, text));
		    /**
		     * Notes is a struct that has:
		     *
		     *  {
		     *    first_note: Note,
		     *    last_note: Note,
		     *    first_indices: [n1, n2, n3],
		     *    last_indices: [n1, n2, n3]
		     *  }
		     *
		     **/
		
		
		    _this.setAttribute('type', 'TabTie');
		
		    _this.render_options.cp1 = 9;
		    _this.render_options.cp2 = 11;
		    _this.render_options.y_shift = 3;
		
		    _this.setNotes(notes);
		    return _this;
		  }
		
		  _createClass(TabTie, [{
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      var first_note = this.first_note;
		      var last_note = this.last_note;
		      var first_x_px = void 0;
		      var last_x_px = void 0;
		      var first_ys = void 0;
		      var last_ys = void 0;
		
		      if (first_note) {
		        first_x_px = first_note.getTieRightX() + this.render_options.tie_spacing;
		        first_ys = first_note.getYs();
		      } else {
		        first_x_px = last_note.getStave().getTieStartX();
		        first_ys = last_note.getYs();
		        this.first_indices = this.last_indices;
		      }
		
		      if (last_note) {
		        last_x_px = last_note.getTieLeftX() + this.render_options.tie_spacing;
		        last_ys = last_note.getYs();
		      } else {
		        last_x_px = first_note.getStave().getTieEndX();
		        last_ys = first_note.getYs();
		        this.last_indices = this.first_indices;
		      }
		
		      this.renderTie({
		        first_x_px: first_x_px,
		        last_x_px: last_x_px,
		        first_ys: first_ys,
		        last_ys: last_ys,
		        direction: -1 });
		
		      this.renderText(first_x_px, last_x_px);
		      return true;
		    }
		  }]);
	
		  return TabTie;
		}(_stavetie.StaveTie);
	
	/***/ },
	/* 35 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Stroke = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _modifier = __webpack_require__(25);
		
		var _stavenote = __webpack_require__(20);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Larry Kuhns
		//
		// ## Description
		// This file implements the `Stroke` class which renders chord strokes
		// that can be arpeggiated, brushed, rasquedo, etc.
		
		var Stroke = exports.Stroke = function (_Modifier) {
		  _inherits(Stroke, _Modifier);
		
		  _createClass(Stroke, null, [{
		    key: 'format',
		
		
		    // Arrange strokes inside `ModifierContext`
		    value: function format(strokes, state) {
		      var left_shift = state.left_shift;
		      var stroke_spacing = 0;
		
		      if (!strokes || strokes.length === 0) return this;
		
		      var strokeList = strokes.map(function (stroke) {
		        var note = stroke.getNote();
		        if (note instanceof _stavenote.StaveNote) {
		          var _note$getKeyProps$str = note.getKeyProps()[stroke.getIndex()],
		              line = _note$getKeyProps$str.line,
		              displaced = _note$getKeyProps$str.displaced;
		
		          var shift = displaced ? note.getExtraLeftPx() : 0;
		          return { line: line, shift: shift, stroke: stroke };
		        } else {
		          var string = note.getPositions()[stroke.getIndex()].str;
		
		          return { line: string, shift: 0, stroke: stroke };
		        }
		      });
		
		      var strokeShift = left_shift;
		
		      // There can only be one stroke .. if more than one, they overlay each other
		      var xShift = strokeList.reduce(function (xShift, _ref) {
		        var stroke = _ref.stroke,
		            shift = _ref.shift;
		
		        stroke.setXShift(strokeShift + shift);
		        return Math.max(stroke.getWidth() + stroke_spacing, xShift);
		      }, 0);
		
		      state.left_shift += xShift;
		      return true;
		    }
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'strokes';
		    }
		  }, {
		    key: 'Type',
		    get: function get() {
		      return {
		        BRUSH_DOWN: 1,
		        BRUSH_UP: 2,
		        ROLL_DOWN: 3, // Arpegiated chord
		        ROLL_UP: 4, // Arpegiated chord
		        RASQUEDO_DOWN: 5,
		        RASQUEDO_UP: 6
		      };
		    }
		  }]);
		
		  function Stroke(type, options) {
		    _classCallCheck(this, Stroke);
		
		    var _this = _possibleConstructorReturn(this, (Stroke.__proto__ || Object.getPrototypeOf(Stroke)).call(this));
		
		    _this.setAttribute('type', 'Stroke');
		
		    _this.note = null;
		    _this.options = _vex.Vex.Merge({}, options);
		
		    // multi voice - span stroke across all voices if true
		    _this.all_voices = 'all_voices' in _this.options ? _this.options.all_voices : true;
		
		    // multi voice - end note of stroke, set in draw()
		    _this.note_end = null;
		    _this.index = null;
		    _this.type = type;
		    _this.position = _modifier.Modifier.Position.LEFT;
		
		    _this.render_options = {
		      font_scale: 38,
		      stroke_px: 3,
		      stroke_spacing: 10
		    };
		
		    _this.font = {
		      family: 'serif',
		      size: 10,
		      weight: 'bold italic'
		    };
		
		    _this.setXShift(0);
		    _this.setWidth(10);
		    return _this;
		  }
		
		  _createClass(Stroke, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Stroke.CATEGORY;
		    }
		  }, {
		    key: 'getPosition',
		    value: function getPosition() {
		      return this.position;
		    }
		  }, {
		    key: 'addEndNote',
		    value: function addEndNote(note) {
		      this.note_end = note;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      if (!(this.note && this.index != null)) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw stroke without a note and index.");
		      }
		
		      var start = this.note.getModifierStartXY(this.position, this.index);
		      var ys = this.note.getYs();
		      var topY = start.y;
		      var botY = start.y;
		      var x = start.x - 5;
		      var line_space = this.note.stave.options.spacing_between_lines_px;
		
		      var notes = this.getModifierContext().getModifiers(this.note.getCategory());
		      for (var i = 0; i < notes.length; i++) {
		        ys = notes[i].getYs();
		        for (var n = 0; n < ys.length; n++) {
		          if (this.note === notes[i] || this.all_voices) {
		            topY = _vex.Vex.Min(topY, ys[n]);
		            botY = _vex.Vex.Max(botY, ys[n]);
		          }
		        }
		      }
		
		      var arrow = void 0;
		      var arrow_shift_x = void 0;
		      var arrow_y = void 0;
		      var text_shift_x = void 0;
		      var text_y = void 0;
		      switch (this.type) {
		        case Stroke.Type.BRUSH_DOWN:
		          arrow = 'vc3';
		          arrow_shift_x = -3;
		          arrow_y = topY - line_space / 2 + 10;
		          botY += line_space / 2;
		          break;
		        case Stroke.Type.BRUSH_UP:
		          arrow = 'v11';
		          arrow_shift_x = 0.5;
		          arrow_y = botY + line_space / 2;
		          topY -= line_space / 2;
		          break;
		        case Stroke.Type.ROLL_DOWN:
		        case Stroke.Type.RASQUEDO_DOWN:
		          arrow = 'vc3';
		          arrow_shift_x = -3;
		          text_shift_x = this.x_shift + arrow_shift_x - 2;
		          if (this.note instanceof _stavenote.StaveNote) {
		            topY += 1.5 * line_space;
		            if ((botY - topY) % 2 !== 0) {
		              botY += 0.5 * line_space;
		            } else {
		              botY += line_space;
		            }
		            arrow_y = topY - line_space;
		            text_y = botY + line_space + 2;
		          } else {
		            topY += 1.5 * line_space;
		            botY += line_space;
		            arrow_y = topY - 0.75 * line_space;
		            text_y = botY + 0.25 * line_space;
		          }
		          break;
		        case Stroke.Type.ROLL_UP:
		        case Stroke.Type.RASQUEDO_UP:
		          arrow = 'v52';
		          arrow_shift_x = -4;
		          text_shift_x = this.x_shift + arrow_shift_x - 1;
		          if (this.note instanceof _stavenote.StaveNote) {
		            arrow_y = line_space / 2;
		            topY += 0.5 * line_space;
		            if ((botY - topY) % 2 === 0) {
		              botY += line_space / 2;
		            }
		            arrow_y = botY + 0.5 * line_space;
		            text_y = topY - 1.25 * line_space;
		          } else {
		            topY += 0.25 * line_space;
		            botY += 0.5 * line_space;
		            arrow_y = botY + 0.25 * line_space;
		            text_y = topY - line_space;
		          }
		          break;
		        default:
		          throw new _vex.Vex.RERR('InvalidType', 'The stroke type ' + this.type + ' does not exist');
		      }
		
		      // Draw the stroke
		      if (this.type === Stroke.Type.BRUSH_DOWN || this.type === Stroke.Type.BRUSH_UP) {
		        this.context.fillRect(x + this.x_shift, topY, 1, botY - topY);
		      } else {
		        if (this.note instanceof _stavenote.StaveNote) {
		          for (var _i = topY; _i <= botY; _i += line_space) {
		            _glyph.Glyph.renderGlyph(this.context, x + this.x_shift - 4, _i, this.render_options.font_scale, 'va3');
		          }
		        } else {
		          var _i2 = void 0;
		          for (_i2 = topY; _i2 <= botY; _i2 += 10) {
		            _glyph.Glyph.renderGlyph(this.context, x + this.x_shift - 4, _i2, this.render_options.font_scale, 'va3');
		          }
		          if (this.type === Stroke.Type.RASQUEDO_DOWN) {
		            text_y = _i2 + 0.25 * line_space;
		          }
		        }
		      }
		
		      // Draw the arrow head
		      _glyph.Glyph.renderGlyph(this.context, x + this.x_shift + arrow_shift_x, arrow_y, this.render_options.font_scale, arrow);
		
		      // Draw the rasquedo "R"
		      if (this.type === Stroke.Type.RASQUEDO_DOWN || this.type === Stroke.Type.RASQUEDO_UP) {
		        this.context.save();
		        this.context.setFont(this.font.family, this.font.size, this.font.weight);
		        this.context.fillText('R', x + text_shift_x, text_y);
		        this.context.restore();
		      }
		    }
		  }]);
	
		  return Stroke;
		}(_modifier.Modifier);
	
	/***/ },
	/* 36 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StringNumber = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _modifier = __webpack_require__(25);
		
		var _renderer = __webpack_require__(10);
		
		var _stavenote = __webpack_require__(20);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Larry Kuhns
		//
		// ## Description
		// This file implements the `StringNumber` class which renders string
		// number annotations beside notes.
		
		var StringNumber = exports.StringNumber = function (_Modifier) {
		  _inherits(StringNumber, _Modifier);
		
		  _createClass(StringNumber, null, [{
		    key: 'format',
		
		
		    // ## Static Methods
		    // Arrange string numbers inside a `ModifierContext`
		    value: function format(nums, state) {
		      var left_shift = state.left_shift;
		      var right_shift = state.right_shift;
		      var num_spacing = 1;
		
		      if (!nums || nums.length === 0) return this;
		
		      var nums_list = [];
		      var prev_note = null;
		      var shift_left = 0;
		      var shift_right = 0;
		
		      var i = void 0;
		      var num = void 0;
		      var note = void 0;
		      var pos = void 0;
		      var props_tmp = void 0;
		      for (i = 0; i < nums.length; ++i) {
		        num = nums[i];
		        note = num.getNote();
		
		        for (i = 0; i < nums.length; ++i) {
		          num = nums[i];
		          note = num.getNote();
		          pos = num.getPosition();
		          var props = note.getKeyProps()[num.getIndex()];
		
		          if (note !== prev_note) {
		            for (var n = 0; n < note.keys.length; ++n) {
		              props_tmp = note.getKeyProps()[n];
		              if (left_shift === 0) {
		                shift_left = props_tmp.displaced ? note.getExtraLeftPx() : shift_left;
		              }
		              if (right_shift === 0) {
		                shift_right = props_tmp.displaced ? note.getExtraRightPx() : shift_right;
		              }
		            }
		            prev_note = note;
		          }
		
		          nums_list.push({
		            pos: pos,
		            note: note,
		            num: num,
		            line: props.line,
		            shiftL: shift_left,
		            shiftR: shift_right
		          });
		        }
		      }
		
		      // Sort string numbers by line number.
		      nums_list.sort(function (a, b) {
		        return b.line - a.line;
		      });
		
		      // TODO: This variable never gets assigned to anything. Is that a bug or can this be removed?
		      var num_shiftL = 0; // eslint-disable-line
		      var num_shiftR = 0;
		      var x_widthL = 0;
		      var x_widthR = 0;
		      var last_line = null;
		      var last_note = null;
		      for (i = 0; i < nums_list.length; ++i) {
		        var num_shift = 0;
		        note = nums_list[i].note;
		        pos = nums_list[i].pos;
		        num = nums_list[i].num;
		        var line = nums_list[i].line;
		        var shiftL = nums_list[i].shiftL;
		        var shiftR = nums_list[i].shiftR;
		
		        // Reset the position of the string number every line.
		        if (line !== last_line || note !== last_note) {
		          num_shiftL = left_shift + shiftL;
		          num_shiftR = right_shift + shiftR;
		        }
		
		        var num_width = num.getWidth() + num_spacing;
		        if (pos === _modifier.Modifier.Position.LEFT) {
		          num.setXShift(left_shift);
		          num_shift = shift_left + num_width; // spacing
		          x_widthL = num_shift > x_widthL ? num_shift : x_widthL;
		        } else if (pos === _modifier.Modifier.Position.RIGHT) {
		          num.setXShift(num_shiftR);
		          num_shift += num_width; // spacing
		          x_widthR = num_shift > x_widthR ? num_shift : x_widthR;
		        }
		        last_line = line;
		        last_note = note;
		      }
		
		      state.left_shift += x_widthL;
		      state.right_shift += x_widthR;
		      return true;
		    }
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'stringnumber';
		    }
		  }]);
		
		  function StringNumber(number) {
		    _classCallCheck(this, StringNumber);
		
		    var _this = _possibleConstructorReturn(this, (StringNumber.__proto__ || Object.getPrototypeOf(StringNumber)).call(this));
		
		    _this.setAttribute('type', 'StringNumber');
		
		    _this.note = null;
		    _this.last_note = null;
		    _this.index = null;
		    _this.string_number = number;
		    _this.setWidth(20); // ???
		    _this.position = _modifier.Modifier.Position.ABOVE; // Default position above stem or note head
		    _this.x_shift = 0;
		    _this.y_shift = 0;
		    _this.x_offset = 0; // Horizontal offset from default
		    _this.y_offset = 0; // Vertical offset from default
		    _this.dashed = true; // true - draw dashed extension  false - no extension
		    _this.leg = _renderer.Renderer.LineEndType.NONE; // draw upward/downward leg at the of extension line
		    _this.radius = 8;
		    _this.font = {
		      family: 'sans-serif',
		      size: 10,
		      weight: 'bold'
		    };
		    return _this;
		  }
		
		  _createClass(StringNumber, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return StringNumber.CATEGORY;
		    }
		  }, {
		    key: 'getNote',
		    value: function getNote() {
		      return this.note;
		    }
		  }, {
		    key: 'setNote',
		    value: function setNote(note) {
		      this.note = note;return this;
		    }
		  }, {
		    key: 'getIndex',
		    value: function getIndex() {
		      return this.index;
		    }
		  }, {
		    key: 'setIndex',
		    value: function setIndex(index) {
		      this.index = index;return this;
		    }
		  }, {
		    key: 'setLineEndType',
		    value: function setLineEndType(leg) {
		      if (leg >= _renderer.Renderer.LineEndType.NONE && leg <= _renderer.Renderer.LineEndType.DOWN) {
		        this.leg = leg;
		      }
		      return this;
		    }
		  }, {
		    key: 'setStringNumber',
		    value: function setStringNumber(number) {
		      this.string_number = number;return this;
		    }
		  }, {
		    key: 'setOffsetX',
		    value: function setOffsetX(x) {
		      this.x_offset = x;return this;
		    }
		  }, {
		    key: 'setOffsetY',
		    value: function setOffsetY(y) {
		      this.y_offset = y;return this;
		    }
		  }, {
		    key: 'setLastNote',
		    value: function setLastNote(note) {
		      this.last_note = note;return this;
		    }
		  }, {
		    key: 'setDashed',
		    value: function setDashed(dashed) {
		      this.dashed = dashed;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var ctx = this.checkContext();
		      if (!(this.note && this.index != null)) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw string number without a note and index.");
		      }
		      this.setRendered();
		
		      var line_space = this.note.stave.options.spacing_between_lines_px;
		
		      var start = this.note.getModifierStartXY(this.position, this.index);
		      var dot_x = start.x + this.x_shift + this.x_offset;
		      var dot_y = start.y + this.y_shift + this.y_offset;
		
		      switch (this.position) {
		        case _modifier.Modifier.Position.ABOVE:
		        case _modifier.Modifier.Position.BELOW:
		          {
		            var stem_ext = this.note.getStemExtents();
		            var top = stem_ext.topY;
		            var bottom = stem_ext.baseY + 2;
		
		            if (this.note.stem_direction === _stavenote.StaveNote.STEM_DOWN) {
		              top = stem_ext.baseY;
		              bottom = stem_ext.topY - 2;
		            }
		
		            if (this.position === _modifier.Modifier.Position.ABOVE) {
		              dot_y = this.note.hasStem() ? top - line_space * 1.75 : start.y - line_space * 1.75;
		            } else {
		              dot_y = this.note.hasStem() ? bottom + line_space * 1.5 : start.y + line_space * 1.75;
		            }
		
		            dot_y += this.y_shift + this.y_offset;
		
		            break;
		          }case _modifier.Modifier.Position.LEFT:
		          dot_x -= this.radius / 2 + 5;
		          break;
		        case _modifier.Modifier.Position.RIGHT:
		          dot_x += this.radius / 2 + 6;
		          break;
		        default:
		          throw new _vex.Vex.RERR('InvalidPosition', 'The position ' + this.position + ' is invalid');
		      }
		
		      ctx.save();
		      ctx.beginPath();
		      ctx.arc(dot_x, dot_y, this.radius, 0, Math.PI * 2, false);
		      ctx.lineWidth = 1.5;
		      ctx.stroke();
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      var x = dot_x - ctx.measureText(this.string_number).width / 2;
		      ctx.fillText('' + this.string_number, x, dot_y + 4.5);
		
		      if (this.last_note != null) {
		        var end = this.last_note.getStemX() - this.note.getX() + 5;
		        ctx.strokeStyle = '#000000';
		        ctx.lineCap = 'round';
		        ctx.lineWidth = 0.6;
		        if (this.dashed) {
		          _renderer.Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 3]);
		        } else {
		          _renderer.Renderer.drawDashedLine(ctx, dot_x + 10, dot_y, dot_x + end, dot_y, [3, 0]);
		        }
		
		        var len = void 0;
		        var pattern = void 0;
		        switch (this.leg) {
		          case _renderer.Renderer.LineEndType.UP:
		            len = -10;
		            pattern = this.dashed ? [3, 3] : [3, 0];
		            _renderer.Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);
		            break;
		          case _renderer.Renderer.LineEndType.DOWN:
		            len = 10;
		            pattern = this.dashed ? [3, 3] : [3, 0];
		            _renderer.Renderer.drawDashedLine(ctx, dot_x + end, dot_y, dot_x + end, dot_y + len, pattern);
		            break;
		          default:
		            break;
		        }
		      }
		
		      ctx.restore();
		    }
		  }]);
	
		  return StringNumber;
		}(_modifier.Modifier);
	
	/***/ },
	/* 37 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Articulation = undefined;
		
		var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		var _glyph = __webpack_require__(4);
		
		var _stem = __webpack_require__(17);
		
		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
		
		function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Larry Kuhns.
		//
		// ## Description
		//
		// This file implements articulations and accents as modifiers that can be
		// attached to notes. The complete list of articulations is available in
		// `tables.js` under `Vex.Flow.articulationCodes`.
		//
		// See `tests/articulation_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.Articulation.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Articulation.DEBUG) _vex.Vex.L('Vex.Flow.Articulation', args);
		}
		
		var _Modifier$Position = _modifier.Modifier.Position,
		    ABOVE = _Modifier$Position.ABOVE,
		    BELOW = _Modifier$Position.BELOW;
		
		
		var roundToNearestHalf = function roundToNearestHalf(mathFn, value) {
		  return mathFn(value / 0.5) * 0.5;
		};
		
		// This includes both staff and ledger lines
		var isWithinLines = function isWithinLines(line, position) {
		  return position === ABOVE ? line <= 5 : line >= 1;
		};
		
		var getRoundingFunction = function getRoundingFunction(line, position) {
		  if (isWithinLines(line, position)) {
		    if (position === ABOVE) {
		      return Math.ceil;
		    } else {
		      return Math.floor;
		    }
		  } else {
		    return Math.round;
		  }
		};
		
		var snapLineToStaff = function snapLineToStaff(canSitBetweenLines, line, position, offsetDirection) {
		  // Initially, snap to nearest staff line or space
		  var snappedLine = roundToNearestHalf(getRoundingFunction(line, position), line);
		  var canSnapToStaffSpace = canSitBetweenLines && isWithinLines(snappedLine, position);
		  var onStaffLine = snappedLine % 1 === 0;
		
		  if (canSnapToStaffSpace && onStaffLine) {
		    var HALF_STAFF_SPACE = 0.5;
		    return snappedLine + HALF_STAFF_SPACE * -offsetDirection;
		  } else {
		    return snappedLine;
		  }
		};
		
		var getTopY = function getTopY(note, textLine) {
		  var stave = note.getStave();
		  var stemDirection = note.getStemDirection();
		
		  var _note$getStemExtents = note.getStemExtents(),
		      stemTipY = _note$getStemExtents.topY,
		      stemBaseY = _note$getStemExtents.baseY;
		
		  if (note.getCategory() === 'stavenotes') {
		    if (note.hasStem()) {
		      if (stemDirection === _stem.Stem.UP) {
		        return stemTipY;
		      } else {
		        return stemBaseY;
		      }
		    } else {
		      return Math.min.apply(Math, _toConsumableArray(note.getYs()));
		    }
		  } else if (note.getCategory() === 'tabnotes') {
		    if (note.hasStem()) {
		      if (stemDirection === _stem.Stem.UP) {
		        return stemTipY;
		      } else {
		        return stave.getYForTopText(textLine);
		      }
		    } else {
		      return stave.getYForTopText(textLine);
		    }
		  } else {
		    throw new _vex.Vex.RERR('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');
		  }
		};
		
		var getBottomY = function getBottomY(note, textLine) {
		  var stave = note.getStave();
		  var stemDirection = note.getStemDirection();
		
		  var _note$getStemExtents2 = note.getStemExtents(),
		      stemTipY = _note$getStemExtents2.topY,
		      stemBaseY = _note$getStemExtents2.baseY;
		
		  if (note.getCategory() === 'stavenotes') {
		    if (note.hasStem()) {
		      if (stemDirection === _stem.Stem.UP) {
		        return stemBaseY;
		      } else {
		        return stemTipY;
		      }
		    } else {
		      return Math.max.apply(Math, _toConsumableArray(note.getYs()));
		    }
		  } else if (note.getCategory() === 'tabnotes') {
		    if (note.hasStem()) {
		      if (stemDirection === _stem.Stem.UP) {
		        return stave.getYForBottomText(textLine);
		      } else {
		        return stemTipY;
		      }
		    } else {
		      return stave.getYForBottomText(textLine);
		    }
		  } else {
		    throw new _vex.Vex.RERR('UnknownCategory', 'Only can get the top and bottom ys of stavenotes and tabnotes');
		  }
		};
		
		// Gets the initial offset of the articulation from the y value of the starting position.
		// This is required because the top/bottom text positions already have spacing applied to
		// provide a "visually pleasent" default position. However the y values provided from
		// the stavenote's top/bottom do *not* have any pre-applied spacing. This function
		// normalizes this asymmetry.
		var getInitialOffset = function getInitialOffset(note, position) {
		  var isOnStemTip = position === ABOVE && note.getStemDirection() === _stem.Stem.UP || position === BELOW && note.getStemDirection() === _stem.Stem.DOWN;
		
		  if (note.getCategory() === 'stavenotes') {
		    if (note.hasStem() && isOnStemTip) {
		      return 0.5;
		    } else {
		      // this amount is larger than the stem-tip offset because we start from
		      // the center of the notehead
		      return 1;
		    }
		  } else {
		    if (note.hasStem() && isOnStemTip) {
		      return 1;
		    } else {
		      return 0;
		    }
		  }
		};
		
		var Articulation = exports.Articulation = function (_Modifier) {
		  _inherits(Articulation, _Modifier);
		
		  _createClass(Articulation, null, [{
		    key: 'format',
		
		
		    // FIXME:
		    // Most of the complex formatting logic (ie: snapping to space) is
		    // actually done in .render(). But that logic belongs in this method.
		    //
		    // Unfortunately, this isn't possible because, by this point, stem lengths
		    // have not yet been finalized. Finalized stem lengths are required to determine the
		    // initial position of any stem-side articulation.
		    //
		    // This indicates that all objects should have their stave set before being
		    // formatted. It can't be an optional if you want accurate vertical positioning.
		    // Consistently positioned articulations that play nice with other modifiers
		    // won't be possible until we stop relying on render-time formatting.
		    //
		    // Ideally, when this function has completed, the vertical articulation positions
		    // should be ready to render without further adjustment. But the current state
		    // is far from this ideal.
		    value: function format(articulations, state) {
		      if (!articulations || articulations.length === 0) return false;
		
		      var isAbove = function isAbove(artic) {
		        return artic.getPosition() === ABOVE;
		      };
		      var isBelow = function isBelow(artic) {
		        return artic.getPosition() === BELOW;
		      };
		      var margin = 0.5;
		      var getIncrement = function getIncrement(articulation, line, position) {
		        return roundToNearestHalf(getRoundingFunction(line, position), articulation.glyph.getMetrics().height / 10 + margin);
		      };
		
		      articulations.filter(isAbove).forEach(function (articulation) {
		        articulation.setTextLine(state.top_text_line);
		        state.top_text_line += getIncrement(articulation, state.top_text_line, ABOVE);
		      });
		
		      articulations.filter(isBelow).forEach(function (articulation) {
		        articulation.setTextLine(state.text_line);
		        state.text_line += getIncrement(articulation, state.text_line, BELOW);
		      });
		
		      var width = articulations.map(function (articulation) {
		        return articulation.getWidth();
		      }).reduce(function (maxWidth, articWidth) {
		        return Math.max(articWidth, maxWidth);
		      });
		
		      state.left_shift += width / 2;
		      state.right_shift += width / 2;
		      return true;
		    }
		  }, {
		    key: 'easyScoreHook',
		    value: function easyScoreHook(_ref, note, builder) {
		      var articulations = _ref.articulations;
		
		      if (!articulations) return;
		
		      var articNameToCode = {
		        staccato: 'a.',
		        tenuto: 'a-'
		      };
		
		      articulations.split(',').map(function (articString) {
		        return articString.trim().split('.');
		      }).map(function (_ref2) {
		        var _ref3 = _slicedToArray(_ref2, 2),
		            name = _ref3[0],
		            position = _ref3[1];
		
		        var artic = { type: articNameToCode[name] };
		        if (position) artic.position = _modifier.Modifier.PositionString[position];
		        return builder.getFactory().Articulation(artic);
		      }).map(function (artic) {
		        return note.addModifier(0, artic);
		      });
		    }
		
		    // Create a new articulation of type `type`, which is an entry in
		    // `Vex.Flow.articulationCodes` in `tables.js`.
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'articulations';
		    }
		  }, {
		    key: 'INITIAL_OFFSET',
		    get: function get() {
		      return -0.5;
		    }
		  }]);
		
		  function Articulation(type) {
		    _classCallCheck(this, Articulation);
		
		    var _this = _possibleConstructorReturn(this, (Articulation.__proto__ || Object.getPrototypeOf(Articulation)).call(this));
		
		    _this.setAttribute('type', 'Articulation');
		
		    _this.note = null;
		    _this.index = null;
		    _this.type = type;
		    _this.position = BELOW;
		    _this.render_options = {
		      font_scale: 38
		    };
		
		    _this.articulation = _tables.Flow.articulationCodes(_this.type);
		    if (!_this.articulation) {
		      throw new _vex.Vex.RERR('ArgumentError', 'Articulation not found: ' + _this.type);
		    }
		
		    _this.glyph = new _glyph.Glyph(_this.articulation.code, _this.render_options.font_scale);
		
		    _this.setWidth(_this.glyph.getMetrics().width);
		    return _this;
		  }
		
		  _createClass(Articulation, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Articulation.CATEGORY;
		    }
		
		    // Render articulation in position next to note.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _ABOVE$BELOW$position;
		
		      var note = this.note,
		          index = this.index,
		          position = this.position,
		          glyph = this.glyph,
		          canSitBetweenLines = this.articulation.between_lines,
		          textLine = this.text_line,
		          ctx = this.context;
		
		
		      this.checkContext();
		
		      if (!note || index == null) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw Articulation without a note and index.");
		      }
		
		      this.setRendered();
		
		      var stave = note.getStave();
		      var staffSpace = stave.getSpacingBetweenLines();
		      var isTab = note.getCategory() === 'tabnotes';
		
		      // Articulations are centered over/under the note head.
		
		      var _note$getModifierStar = note.getModifierStartXY(position, index),
		          x = _note$getModifierStar.x;
		
		      var shouldSitOutsideStaff = !canSitBetweenLines || isTab;
		
		      var initialOffset = getInitialOffset(note, position);
		
		      var y = (_ABOVE$BELOW$position = {}, _defineProperty(_ABOVE$BELOW$position, ABOVE, function () {
		        glyph.setOrigin(0.5, 1);
		        var y = getTopY(note, textLine) - (textLine + initialOffset) * staffSpace;
		        return shouldSitOutsideStaff ? Math.min(stave.getYForTopText(Articulation.INITIAL_OFFSET), y) : y;
		      }), _defineProperty(_ABOVE$BELOW$position, BELOW, function () {
		        glyph.setOrigin(0.5, 0);
		        var y = getBottomY(note, textLine) + (textLine + initialOffset) * staffSpace;
		        return shouldSitOutsideStaff ? Math.max(stave.getYForBottomText(Articulation.INITIAL_OFFSET), y) : y;
		      }), _ABOVE$BELOW$position)[position]();
		
		      if (!isTab) {
		        var offsetDirection = position === ABOVE ? -1 : +1;
		        var noteLine = isTab ? note.positions[index].str : note.getKeyProps()[index].line;
		        var distanceFromNote = (note.getYs()[index] - y) / staffSpace;
		        var articLine = distanceFromNote + noteLine;
		        var snappedLine = snapLineToStaff(canSitBetweenLines, articLine, position, offsetDirection);
		
		        if (isWithinLines(snappedLine, position)) glyph.setOrigin(0.5, 0.5);
		
		        y += Math.abs(snappedLine - articLine) * staffSpace * offsetDirection;
		      }
		
		      L('Rendering articulation at (x: ' + x + ', y: ' + y + ')');
		
		      glyph.render(ctx, x, y);
		    }
		  }]);
	
		  return Articulation;
		}(_modifier.Modifier);
	
	/***/ },
	/* 38 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Ornament = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		var _tickcontext = __webpack_require__(39);
		
		var _stavenote = __webpack_require__(20);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Cyril Silverman
		//
		// ## Description
		//
		// This file implements ornaments as modifiers that can be
		// attached to notes. The complete list of ornaments is available in
		// `tables.js` under `Vex.Flow.ornamentCodes`.
		//
		// See `tests/ornament_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.Ornament.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Ornament.DEBUG) _vex.Vex.L('Vex.Flow.Ornament', args);
		}
		
		var Ornament = exports.Ornament = function (_Modifier) {
		  _inherits(Ornament, _Modifier);
		
		  _createClass(Ornament, null, [{
		    key: 'format',
		
		
		    // ## Static Methods
		    // Arrange ornaments inside `ModifierContext`
		    value: function format(ornaments, state) {
		      if (!ornaments || ornaments.length === 0) return false;
		
		      var width = 0;
		      for (var i = 0; i < ornaments.length; ++i) {
		        var ornament = ornaments[i];
		        var increment = 2;
		
		        width = Math.max(ornament.getWidth(), width);
		
		        if (ornament.getPosition() === _modifier.Modifier.Position.ABOVE) {
		          ornament.setTextLine(state.top_text_line);
		          state.top_text_line += increment;
		        } else {
		          ornament.setTextLine(state.text_line);
		          state.text_line += increment;
		        }
		      }
		
		      state.left_shift += width / 2;
		      state.right_shift += width / 2;
		      return true;
		    }
		
		    // Create a new ornament of type `type`, which is an entry in
		    // `Vex.Flow.ornamentCodes` in `tables.js`.
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'ornaments';
		    }
		  }]);
		
		  function Ornament(type) {
		    _classCallCheck(this, Ornament);
		
		    var _this = _possibleConstructorReturn(this, (Ornament.__proto__ || Object.getPrototypeOf(Ornament)).call(this));
		
		    _this.setAttribute('type', 'Ornament');
		
		    _this.note = null;
		    _this.index = null;
		    _this.type = type;
		    _this.position = _modifier.Modifier.Position.ABOVE;
		    _this.delayed = false;
		
		    _this.accidentalUpper = null;
		    _this.accidentalLower = null;
		
		    _this.render_options = {
		      font_scale: 38,
		      accidentalLowerPadding: 3,
		      accidentalUpperPadding: 3
		    };
		
		    _this.ornament = _tables.Flow.ornamentCodes(_this.type);
		    if (!_this.ornament) {
		      throw new _vex.Vex.RERR('ArgumentError', 'Ornament not found: \'' + _this.type + '\'');
		    }
		
		    _this.glyph = new _glyph.Glyph(_this.ornament.code, _this.render_options.font_scale);
		    _this.glyph.setOrigin(0.5, 1.0); // FIXME: SMuFL won't require a vertical origin shift
		    return _this;
		  }
		
		  _createClass(Ornament, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Ornament.CATEGORY;
		    }
		
		    // Set whether the ornament is to be delayed
		
		  }, {
		    key: 'setDelayed',
		    value: function setDelayed(delayed) {
		      this.delayed = delayed;return this;
		    }
		
		    // Set the upper accidental for the ornament
		
		  }, {
		    key: 'setUpperAccidental',
		    value: function setUpperAccidental(accid) {
		      var scale = this.render_options.font_scale / 1.3;
		      this.accidentalUpper = new _glyph.Glyph(_tables.Flow.accidentalCodes(accid).code, scale);
		      this.accidentalUpper.setOrigin(0.5, 1.0);
		      return this;
		    }
		
		    // Set the lower accidental for the ornament
		
		  }, {
		    key: 'setLowerAccidental',
		    value: function setLowerAccidental(accid) {
		      var scale = this.render_options.font_scale / 1.3;
		      this.accidentalLower = new _glyph.Glyph(_tables.Flow.accidentalCodes(accid).code, scale);
		      this.accidentalLower.setOrigin(0.5, 1.0);
		      return this;
		    }
		
		    // Render ornament in position next to note.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		
		      if (!this.note || this.index == null) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw Ornament without a note and index.");
		      }
		
		      this.setRendered();
		
		      var ctx = this.context;
		      var stemDir = this.note.getStemDirection();
		      var stave = this.note.getStave();
		
		      // Get stem extents
		      var stemExtents = this.note.getStem().getExtents();
		      var y = stemDir === _stavenote.StaveNote.STEM_DOWN ? stemExtents.baseY : stemExtents.topY;
		
		      // TabNotes don't have stems attached to them. Tab stems are rendered
		      // outside the stave.
		      if (this.note.getCategory() === 'tabnotes') {
		        if (this.note.hasStem()) {
		          if (stemDir === _stavenote.StaveNote.STEM_DOWN) {
		            y = stave.getYForTopText(this.text_line);
		          }
		        } else {
		          // Without a stem
		          y = stave.getYForTopText(this.text_line);
		        }
		      }
		
		      var isPlacedOnNoteheadSide = stemDir === _stavenote.StaveNote.STEM_DOWN;
		      var spacing = stave.getSpacingBetweenLines();
		      var lineSpacing = 1;
		
		      // Beamed stems are longer than quarter note stems, adjust accordingly
		      if (!isPlacedOnNoteheadSide && this.note.beam) {
		        lineSpacing += 0.5;
		      }
		
		      var totalSpacing = spacing * (this.text_line + lineSpacing);
		      var glyphYBetweenLines = y - totalSpacing;
		
		      // Get initial coordinates for the modifier position
		      var start = this.note.getModifierStartXY(this.position, this.index);
		      var glyphX = start.x;
		      var glyphY = Math.min(stave.getYForTopText(this.text_line), glyphYBetweenLines);
		      glyphY += this.y_shift;
		
		      // Ajdust x position if ornament is delayed
		      if (this.delayed) {
		        glyphX += this.glyph.getMetrics().width;
		        var nextContext = _tickcontext.TickContext.getNextContext(this.note.getTickContext());
		        if (nextContext) {
		          glyphX += (nextContext.getX() - glyphX) * 0.5;
		        } else {
		          glyphX += (stave.x + stave.width - glyphX) * 0.5;
		        }
		      }
		
		      L('Rendering ornament: ', this.ornament, glyphX, glyphY);
		
		      if (this.accidentalLower) {
		        this.accidentalLower.render(ctx, glyphX, glyphY);
		        glyphY -= this.accidentalLower.getMetrics().height;
		        glyphY -= this.render_options.accidentalLowerPadding;
		      }
		
		      this.glyph.render(ctx, glyphX, glyphY);
		      glyphY -= this.glyph.getMetrics().height;
		
		      if (this.accidentalUpper) {
		        glyphY -= this.render_options.accidentalUpperPadding;
		        this.accidentalUpper.render(ctx, glyphX, glyphY);
		      }
		    }
		  }]);
	
		  return Ornament;
		}(_modifier.Modifier);
	
	/***/ },
	/* 39 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TickContext = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tickable = __webpack_require__(23);
		
		var _fraction = __webpack_require__(3);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// A formatter for abstract tickable objects, such as notes, chords,
		// tabs, etc.
		
		var TickContext = exports.TickContext = function (_Tickable) {
		  _inherits(TickContext, _Tickable);
		
		  _createClass(TickContext, null, [{
		    key: 'getNextContext',
		    value: function getNextContext(tContext) {
		      var contexts = tContext.tContexts;
		      var index = contexts.indexOf(tContext);
		
		      return contexts[index + 1];
		    }
		  }]);
		
		  function TickContext() {
		    _classCallCheck(this, TickContext);
		
		    var _this = _possibleConstructorReturn(this, (TickContext.__proto__ || Object.getPrototypeOf(TickContext)).call(this));
		
		    _this.setAttribute('type', 'TickContext');
		    _this.currentTick = new _fraction.Fraction(0, 1);
		    _this.maxTicks = new _fraction.Fraction(0, 1);
		    _this.minTicks = null;
		    _this.padding = 3; // padding on each side (width += padding * 2)
		    _this.x = 0;
		    _this.tickables = []; // Notes, tabs, chords, lyrics.
		    _this.notePx = 0; // width of widest note in this context
		    _this.extraLeftPx = 0; // Extra left pixels for modifers & displace notes
		    _this.extraRightPx = 0; // Extra right pixels for modifers & displace notes
		    _this.tContexts = []; // Parent array of tick contexts
		    return _this;
		  }
		
		  _createClass(TickContext, [{
		    key: 'getX',
		    value: function getX() {
		      return this.x;
		    }
		  }, {
		    key: 'setX',
		    value: function setX(x) {
		      this.x = x;return this;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width + this.padding * 2;
		    }
		  }, {
		    key: 'setPadding',
		    value: function setPadding(padding) {
		      this.padding = padding;return this;
		    }
		  }, {
		    key: 'getMaxTicks',
		    value: function getMaxTicks() {
		      return this.maxTicks;
		    }
		  }, {
		    key: 'getMinTicks',
		    value: function getMinTicks() {
		      return this.minTicks;
		    }
		  }, {
		    key: 'getTickables',
		    value: function getTickables() {
		      return this.tickables;
		    }
		  }, {
		    key: 'getCenterAlignedTickables',
		    value: function getCenterAlignedTickables() {
		      return this.tickables.filter(function (tickable) {
		        return tickable.isCenterAligned();
		      });
		    }
		
		    // Get widths context, note and left/right modifiers for formatting
		
		  }, {
		    key: 'getMetrics',
		    value: function getMetrics() {
		      var width = this.width,
		          notePx = this.notePx,
		          extraLeftPx = this.extraLeftPx,
		          extraRightPx = this.extraRightPx;
		
		      return { width: width, notePx: notePx, extraLeftPx: extraLeftPx, extraRightPx: extraRightPx };
		    }
		  }, {
		    key: 'getCurrentTick',
		    value: function getCurrentTick() {
		      return this.currentTick;
		    }
		  }, {
		    key: 'setCurrentTick',
		    value: function setCurrentTick(tick) {
		      this.currentTick = tick;
		      this.preFormatted = false;
		    }
		
		    // ### DEPRECATED ###
		    // Get left & right pixels used for modifiers. THIS METHOD IS DEPRECATED. Use
		    // the getMetrics() method instead!
		
		  }, {
		    key: 'getExtraPx',
		    value: function getExtraPx() {
		      var left_shift = 0;
		      var right_shift = 0;
		      var extraLeftPx = 0;
		      var extraRightPx = 0;
		      for (var i = 0; i < this.tickables.length; i++) {
		        extraLeftPx = Math.max(this.tickables[i].extraLeftPx || 0, extraLeftPx);
		        extraRightPx = Math.max(this.tickables[i].extraRightPx || 0, extraRightPx);
		        var mContext = this.tickables[i].modifierContext;
		        if (mContext && mContext != null) {
		          left_shift = Math.max(left_shift, mContext.state.left_shift);
		          right_shift = Math.max(right_shift, mContext.state.right_shift);
		        }
		      }
		      return {
		        left: left_shift,
		        right: right_shift,
		        extraLeft: extraLeftPx,
		        extraRight: extraRightPx
		      };
		    }
		  }, {
		    key: 'addTickable',
		    value: function addTickable(tickable) {
		      if (!tickable) {
		        throw new _vex.Vex.RERR('BadArgument', 'Invalid tickable added.');
		      }
		
		      if (!tickable.shouldIgnoreTicks()) {
		        this.ignore_ticks = false;
		
		        var ticks = tickable.getTicks();
		
		        if (ticks.greaterThan(this.maxTicks)) {
		          this.maxTicks = ticks.clone();
		        }
		
		        if (this.minTicks == null) {
		          this.minTicks = ticks.clone();
		        } else if (ticks.lessThan(this.minTicks)) {
		          this.minTicks = ticks.clone();
		        }
		      }
		
		      tickable.setTickContext(this);
		      this.tickables.push(tickable);
		      this.preFormatted = false;
		      return this;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return this;
		
		      for (var i = 0; i < this.tickables.length; ++i) {
		        var tickable = this.tickables[i];
		        tickable.preFormat();
		        var metrics = tickable.getMetrics();
		
		        // Maintain max extra pixels from all tickables in the context
		        this.extraLeftPx = Math.max(this.extraLeftPx, metrics.extraLeftPx + metrics.modLeftPx);
		        this.extraRightPx = Math.max(this.extraRightPx, metrics.extraRightPx + metrics.modRightPx);
		
		        // Maintain the widest note for all tickables in the context
		        this.notePx = Math.max(this.notePx, metrics.noteWidth);
		
		        // Recalculate the tick context total width
		        this.width = this.notePx + this.extraLeftPx + this.extraRightPx;
		      }
		
		      return this;
		    }
		  }, {
		    key: 'postFormat',
		    value: function postFormat() {
		      if (this.postFormatted) return this;
		      this.postFormatted = true;
		      return this;
		    }
		  }]);
	
		  return TickContext;
		}(_tickable.Tickable);
	
	/***/ },
	/* 40 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Annotation = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements text annotations as modifiers that can be attached to
		// notes.
		//
		// See `tests/annotation_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.Annotation.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Annotation.DEBUG) _vex.Vex.L('Vex.Flow.Annotation', args);
		}
		
		var Annotation = exports.Annotation = function (_Modifier) {
		  _inherits(Annotation, _Modifier);
		
		  _createClass(Annotation, null, [{
		    key: 'format',
		
		
		    // Arrange annotations within a `ModifierContext`
		    value: function format(annotations, state) {
		      if (!annotations || annotations.length === 0) return false;
		
		      var width = 0;
		      for (var i = 0; i < annotations.length; ++i) {
		        var annotation = annotations[i];
		        width = Math.max(annotation.getWidth(), width);
		        if (annotation.getPosition() === _modifier.Modifier.Position.ABOVE) {
		          annotation.setTextLine(state.top_text_line);
		          state.top_text_line++;
		        } else {
		          annotation.setTextLine(state.text_line);
		          state.text_line++;
		        }
		      }
		
		      state.left_shift += width / 2;
		      state.right_shift += width / 2;
		      return true;
		    }
		
		    // ## Prototype Methods
		    //
		    // Annotations inherit from `Modifier` and is positioned correctly when
		    // in a `ModifierContext`.
		    // Create a new `Annotation` with the string `text`.
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'annotations';
		    }
		
		    // Text annotations can be positioned and justified relative to the note.
		
		  }, {
		    key: 'Justify',
		    get: function get() {
		      return {
		        LEFT: 1,
		        CENTER: 2,
		        RIGHT: 3,
		        CENTER_STEM: 4
		      };
		    }
		  }, {
		    key: 'JustifyString',
		    get: function get() {
		      return {
		        left: Annotation.Justify.LEFT,
		        right: Annotation.Justify.RIGHT,
		        center: Annotation.Justify.CENTER,
		        centerStem: Annotation.Justify.CENTER_STEM
		      };
		    }
		  }, {
		    key: 'VerticalJustify',
		    get: function get() {
		      return {
		        TOP: 1,
		        CENTER: 2,
		        BOTTOM: 3,
		        CENTER_STEM: 4
		      };
		    }
		  }, {
		    key: 'VerticalJustifyString',
		    get: function get() {
		      return {
		        above: Annotation.VerticalJustify.TOP,
		        top: Annotation.VerticalJustify.TOP,
		        below: Annotation.VerticalJustify.BOTTOM,
		        bottom: Annotation.VerticalJustify.BOTTOM,
		        center: Annotation.VerticalJustify.CENTER,
		        centerStem: Annotation.VerticalJustify.CENTER_STEM
		      };
		    }
		  }]);
		
		  function Annotation(text) {
		    _classCallCheck(this, Annotation);
		
		    var _this = _possibleConstructorReturn(this, (Annotation.__proto__ || Object.getPrototypeOf(Annotation)).call(this));
		
		    _this.setAttribute('type', 'Annotation');
		
		    _this.note = null;
		    _this.index = null;
		    _this.text = text;
		    _this.justification = Annotation.Justify.CENTER;
		    _this.vert_justification = Annotation.VerticalJustify.TOP;
		    _this.font = {
		      family: 'Arial',
		      size: 10,
		      weight: ''
		    };
		
		    // The default width is calculated from the text.
		    _this.setWidth(_tables.Flow.textWidth(text));
		    return _this;
		  }
		
		  _createClass(Annotation, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Annotation.CATEGORY;
		    }
		
		    // Set font family, size, and weight. E.g., `Arial`, `10pt`, `Bold`.
		
		  }, {
		    key: 'setFont',
		    value: function setFont(family, size, weight) {
		      this.font = { family: family, size: size, weight: weight };
		      return this;
		    }
		
		    // Set vertical position of text (above or below stave). `just` must be
		    // a value in `Annotation.VerticalJustify`.
		
		  }, {
		    key: 'setVerticalJustification',
		    value: function setVerticalJustification(just) {
		      this.vert_justification = typeof just === 'string' ? Annotation.VerticalJustifyString[just] : just;
		      return this;
		    }
		
		    // Get and set horizontal justification. `justification` is a value in
		    // `Annotation.Justify`.
		
		  }, {
		    key: 'getJustification',
		    value: function getJustification() {
		      return this.justification;
		    }
		  }, {
		    key: 'setJustification',
		    value: function setJustification(just) {
		      this.justification = typeof just === 'string' ? Annotation.JustifyString[just] : just;
		      return this;
		    }
		
		    // Render text beside the note.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		
		      if (!this.note) {
		        throw new _vex.Vex.RERR('NoNoteForAnnotation', "Can't draw text annotation without an attached note.");
		      }
		
		      this.setRendered();
		      var start = this.note.getModifierStartXY(_modifier.Modifier.Position.ABOVE, this.index);
		
		      // We're changing context parameters. Save current state.
		      this.context.save();
		      this.context.setFont(this.font.family, this.font.size, this.font.weight);
		      var text_width = this.context.measureText(this.text).width;
		
		      // Estimate text height to be the same as the width of an 'm'.
		      //
		      // This is a hack to work around the inability to measure text height
		      // in HTML5 Canvas (and SVG).
		      var text_height = this.context.measureText('m').width;
		      var x = void 0;
		      var y = void 0;
		
		      if (this.justification === Annotation.Justify.LEFT) {
		        x = start.x;
		      } else if (this.justification === Annotation.Justify.RIGHT) {
		        x = start.x - text_width;
		      } else if (this.justification === Annotation.Justify.CENTER) {
		        x = start.x - text_width / 2;
		      } else /* CENTER_STEM */{
		          x = this.note.getStemX() - text_width / 2;
		        }
		
		      var stem_ext = void 0;
		      var spacing = void 0;
		      var has_stem = this.note.hasStem();
		      var stave = this.note.getStave();
		
		      // The position of the text varies based on whether or not the note
		      // has a stem.
		      if (has_stem) {
		        stem_ext = this.note.getStem().getExtents();
		        spacing = stave.getSpacingBetweenLines();
		      }
		
		      if (this.vert_justification === Annotation.VerticalJustify.BOTTOM) {
		        // HACK: We need to compensate for the text's height since its origin
		        // is bottom-right.
		        y = stave.getYForBottomText(this.text_line + _tables.Flow.TEXT_HEIGHT_OFFSET_HACK);
		        if (has_stem) {
		          var stem_base = this.note.getStemDirection() === 1 ? stem_ext.baseY : stem_ext.topY;
		          y = Math.max(y, stem_base + spacing * (this.text_line + 2));
		        }
		      } else if (this.vert_justification === Annotation.VerticalJustify.CENTER) {
		        var yt = this.note.getYForTopText(this.text_line) - 1;
		        var yb = stave.getYForBottomText(this.text_line);
		        y = yt + (yb - yt) / 2 + text_height / 2;
		      } else if (this.vert_justification === Annotation.VerticalJustify.TOP) {
		        y = Math.min(stave.getYForTopText(this.text_line), this.note.getYs()[0] - 10);
		        if (has_stem) {
		          y = Math.min(y, stem_ext.topY - 5 - spacing * this.text_line);
		        }
		      } else /* CENTER_STEM */{
		          var extents = this.note.getStemExtents();
		          y = extents.topY + (extents.baseY - extents.topY) / 2 + text_height / 2;
		        }
		
		      L('Rendering annotation: ', this.text, x, y);
		      this.context.fillText(this.text, x, y);
		      this.context.restore();
		    }
		  }]);
	
		  return Annotation;
		}(_modifier.Modifier);
	
	/***/ },
	/* 41 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Bend = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements tablature bends.
		
		/**
		   @param text Text for bend ("Full", "Half", etc.) (DEPRECATED)
		   @param release If true, render a release. (DEPRECATED)
		   @param phrase If set, ignore "text" and "release", and use the more
		                 sophisticated phrase specified.
		
		   Example of a phrase:
		
		     [{
		       type: UP,
		       text: "whole"
		       width: 8;
		     },
		     {
		       type: DOWN,
		       text: "whole"
		       width: 8;
		     },
		     {
		       type: UP,
		       text: "half"
		       width: 8;
		     },
		     {
		       type: UP,
		       text: "whole"
		       width: 8;
		     },
		     {
		       type: DOWN,
		       text: "1 1/2"
		       width: 8;
		     }]
		 */
		var Bend = exports.Bend = function (_Modifier) {
		  _inherits(Bend, _Modifier);
		
		  _createClass(Bend, null, [{
		    key: 'format',
		
		
		    // ## Static Methods
		    // Arrange bends in `ModifierContext`
		    value: function format(bends, state) {
		      if (!bends || bends.length === 0) return false;
		
		      var last_width = 0;
		      // Bends are always on top.
		      var text_line = state.top_text_line;
		
		      // Format Bends
		      for (var i = 0; i < bends.length; ++i) {
		        var bend = bends[i];
		        bend.setXShift(last_width);
		        last_width = bend.getWidth();
		        bend.setTextLine(text_line);
		      }
		
		      state.right_shift += last_width;
		      state.top_text_line += 1;
		      return true;
		    }
		
		    // ## Prototype Methods
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'bends';
		    }
		  }, {
		    key: 'UP',
		    get: function get() {
		      return 0;
		    }
		  }, {
		    key: 'DOWN',
		    get: function get() {
		      return 1;
		    }
		  }]);
		
		  function Bend(text, release, phrase) {
		    _classCallCheck(this, Bend);
		
		    var _this = _possibleConstructorReturn(this, (Bend.__proto__ || Object.getPrototypeOf(Bend)).call(this));
		
		    _this.setAttribute('type', 'Bend');
		
		    _this.text = text;
		    _this.x_shift = 0;
		    _this.release = release || false;
		    _this.font = '10pt Arial';
		    _this.render_options = {
		      line_width: 1.5,
		      line_style: '#777777',
		      bend_width: 8,
		      release_width: 8
		    };
		
		    if (phrase) {
		      _this.phrase = phrase;
		    } else {
		      // Backward compatibility
		      _this.phrase = [{ type: Bend.UP, text: _this.text }];
		      if (_this.release) _this.phrase.push({ type: Bend.DOWN, text: '' });
		    }
		
		    _this.updateWidth();
		    return _this;
		  }
		
		  _createClass(Bend, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Bend.CATEGORY;
		    }
		  }, {
		    key: 'setXShift',
		    value: function setXShift(value) {
		      this.x_shift = value;
		      this.updateWidth();
		    }
		  }, {
		    key: 'setFont',
		    value: function setFont(font) {
		      this.font = font;return this;
		    }
		  }, {
		    key: 'getText',
		    value: function getText() {
		      return this.text;
		    }
		  }, {
		    key: 'updateWidth',
		    value: function updateWidth() {
		      var that = this;
		
		      function measure_text(text) {
		        var text_width = void 0;
		        if (that.context) {
		          text_width = that.context.measureText(text).width;
		        } else {
		          text_width = _tables.Flow.textWidth(text);
		        }
		
		        return text_width;
		      }
		
		      var total_width = 0;
		      for (var i = 0; i < this.phrase.length; ++i) {
		        var bend = this.phrase[i];
		        if ('width' in bend) {
		          total_width += bend.width;
		        } else {
		          var additional_width = bend.type === Bend.UP ? this.render_options.bend_width : this.render_options.release_width;
		
		          bend.width = _vex.Vex.Max(additional_width, measure_text(bend.text)) + 3;
		          bend.draw_width = bend.width / 2;
		          total_width += bend.width;
		        }
		      }
		
		      this.setWidth(total_width + this.x_shift);
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      if (!(this.note && this.index != null)) {
		        throw new _vex.Vex.RERR('NoNoteForBend', "Can't draw bend without a note or index.");
		      }
		
		      this.setRendered();
		
		      var start = this.note.getModifierStartXY(_modifier.Modifier.Position.RIGHT, this.index);
		      start.x += 3;
		      start.y += 0.5;
		      var x_shift = this.x_shift;
		
		      var ctx = this.context;
		      var bend_height = this.note.getStave().getYForTopText(this.text_line) + 3;
		      var annotation_y = this.note.getStave().getYForTopText(this.text_line) - 1;
		      var that = this;
		
		      function renderBend(x, y, width, height) {
		        var cp_x = x + width;
		        var cp_y = y;
		
		        ctx.save();
		        ctx.beginPath();
		        ctx.setLineWidth(that.render_options.line_width);
		        ctx.setStrokeStyle(that.render_options.line_style);
		        ctx.setFillStyle(that.render_options.line_style);
		        ctx.moveTo(x, y);
		        ctx.quadraticCurveTo(cp_x, cp_y, x + width, height);
		        ctx.stroke();
		        ctx.restore();
		      }
		
		      function renderRelease(x, y, width, height) {
		        ctx.save();
		        ctx.beginPath();
		        ctx.setLineWidth(that.render_options.line_width);
		        ctx.setStrokeStyle(that.render_options.line_style);
		        ctx.setFillStyle(that.render_options.line_style);
		        ctx.moveTo(x, height);
		        ctx.quadraticCurveTo(x + width, height, x + width, y);
		        ctx.stroke();
		        ctx.restore();
		      }
		
		      function renderArrowHead(x, y, direction) {
		        var width = 4;
		        var dir = direction || 1;
		
		        ctx.beginPath();
		        ctx.moveTo(x, y);
		        ctx.lineTo(x - width, y + width * dir);
		        ctx.lineTo(x + width, y + width * dir);
		        ctx.closePath();
		        ctx.fill();
		      }
		
		      function renderText(x, text) {
		        ctx.save();
		        ctx.setRawFont(that.font);
		        var render_x = x - ctx.measureText(text).width / 2;
		        ctx.fillText(text, render_x, annotation_y);
		        ctx.restore();
		      }
		
		      var last_bend = null;
		      var last_drawn_width = 0;
		      for (var i = 0; i < this.phrase.length; ++i) {
		        var bend = this.phrase[i];
		        if (i === 0) bend.draw_width += x_shift;
		
		        last_drawn_width = bend.draw_width + (last_bend ? last_bend.draw_width : 0) - (i === 1 ? x_shift : 0);
		        if (bend.type === Bend.UP) {
		          if (last_bend && last_bend.type === Bend.UP) {
		            renderArrowHead(start.x, bend_height);
		          }
		
		          renderBend(start.x, start.y, last_drawn_width, bend_height);
		        }
		
		        if (bend.type === Bend.DOWN) {
		          if (last_bend && last_bend.type === Bend.UP) {
		            renderRelease(start.x, start.y, last_drawn_width, bend_height);
		          }
		
		          if (last_bend && last_bend.type === Bend.DOWN) {
		            renderArrowHead(start.x, start.y, -1);
		            renderRelease(start.x, start.y, last_drawn_width, bend_height);
		          }
		
		          if (last_bend === null) {
		            last_drawn_width = bend.draw_width;
		            renderRelease(start.x, start.y, last_drawn_width, bend_height);
		          }
		        }
		
		        renderText(start.x + last_drawn_width, bend.text);
		        last_bend = bend;
		        last_bend.x = start.x;
		
		        start.x += last_drawn_width;
		      }
		
		      // Final arrowhead and text
		      if (last_bend.type === Bend.UP) {
		        renderArrowHead(last_bend.x + last_drawn_width, bend_height);
		      } else if (last_bend.type === Bend.DOWN) {
		        renderArrowHead(last_bend.x + last_drawn_width, start.y, -1);
		      }
		    }
		  }]);
	
		  return Bend;
		}(_modifier.Modifier);
	
	/***/ },
	/* 42 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Vibrato = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _modifier = __webpack_require__(25);
		
		var _bend = __webpack_require__(41);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class implements vibratos.
		
		var Vibrato = exports.Vibrato = function (_Modifier) {
		  _inherits(Vibrato, _Modifier);
		
		  _createClass(Vibrato, null, [{
		    key: 'format',
		
		
		    // ## Static Methods
		    // Arrange vibratos inside a `ModifierContext`.
		    value: function format(vibratos, state, context) {
		      if (!vibratos || vibratos.length === 0) return false;
		
		      // Vibratos are always on top.
		      var text_line = state.top_text_line;
		      var width = 0;
		      var shift = state.right_shift - 7;
		
		      // If there's a bend, drop the text line
		      var bends = context.getModifiers(_bend.Bend.CATEGORY);
		      if (bends && bends.length > 0) {
		        text_line--;
		      }
		
		      // Format Vibratos
		      for (var i = 0; i < vibratos.length; ++i) {
		        var vibrato = vibratos[i];
		        vibrato.setXShift(shift);
		        vibrato.setTextLine(text_line);
		        width += vibrato.getWidth();
		        shift += width;
		      }
		
		      state.right_shift += width;
		      state.top_text_line += 1;
		      return true;
		    }
		
		    // ## Prototype Methods
		
		  }, {
		    key: 'CATEGORY',
		    get: function get() {
		      return 'vibratos';
		    }
		  }]);
		
		  function Vibrato() {
		    _classCallCheck(this, Vibrato);
		
		    var _this = _possibleConstructorReturn(this, (Vibrato.__proto__ || Object.getPrototypeOf(Vibrato)).call(this));
		
		    _this.setAttribute('type', 'Vibrato');
		
		    _this.position = _modifier.Modifier.Position.RIGHT;
		    _this.render_options = {
		      harsh: false,
		      vibrato_width: 20,
		      wave_height: 6,
		      wave_width: 4,
		      wave_girth: 2
		    };
		
		    _this.setVibratoWidth(_this.render_options.vibrato_width);
		    return _this;
		  }
		
		  _createClass(Vibrato, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Vibrato.CATEGORY;
		    }
		  }, {
		    key: 'setHarsh',
		    value: function setHarsh(harsh) {
		      this.render_options.harsh = harsh;return this;
		    }
		  }, {
		    key: 'setVibratoWidth',
		    value: function setVibratoWidth(width) {
		      this.render_options.vibrato_width = width;
		      this.setWidth(width);
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var ctx = this.checkContext();
		
		      if (!this.note) {
		        throw new _vex.Vex.RERR('NoNoteForVibrato', "Can't draw vibrato without an attached note.");
		      }
		
		      this.setRendered();
		      var start = this.note.getModifierStartXY(_modifier.Modifier.Position.RIGHT, this.index);
		
		      var vx = start.x + this.x_shift;
		      var vy = this.note.getYForTopText(this.text_line) + 2;
		
		      Vibrato.renderVibrato(ctx, vx, vy, this.render_options);
		    }
		
		    // Static rendering method that can be called from
		    // other classes (e.g. VibratoBracket)
		
		  }], [{
		    key: 'renderVibrato',
		    value: function renderVibrato(ctx, x, y, opts) {
		      var harsh = opts.harsh,
		          vibrato_width = opts.vibrato_width,
		          wave_width = opts.wave_width,
		          wave_girth = opts.wave_girth,
		          wave_height = opts.wave_height;
		
		      var num_waves = vibrato_width / wave_width;
		
		      ctx.beginPath();
		
		      var i = void 0;
		      if (harsh) {
		        ctx.moveTo(x, y + wave_girth + 1);
		        for (i = 0; i < num_waves / 2; ++i) {
		          ctx.lineTo(x + wave_width, y - wave_height / 2);
		          x += wave_width;
		          ctx.lineTo(x + wave_width, y + wave_height / 2);
		          x += wave_width;
		        }
		        for (i = 0; i < num_waves / 2; ++i) {
		          ctx.lineTo(x - wave_width, y - wave_height / 2 + wave_girth + 1);
		          x -= wave_width;
		          ctx.lineTo(x - wave_width, y + wave_height / 2 + wave_girth + 1);
		          x -= wave_width;
		        }
		        ctx.fill();
		      } else {
		        ctx.moveTo(x, y + wave_girth);
		        for (i = 0; i < num_waves / 2; ++i) {
		          ctx.quadraticCurveTo(x + wave_width / 2, y - wave_height / 2, x + wave_width, y);
		          x += wave_width;
		          ctx.quadraticCurveTo(x + wave_width / 2, y + wave_height / 2, x + wave_width, y);
		          x += wave_width;
		        }
		
		        for (i = 0; i < num_waves / 2; ++i) {
		          ctx.quadraticCurveTo(x - wave_width / 2, y + wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);
		          x -= wave_width;
		          ctx.quadraticCurveTo(x - wave_width / 2, y - wave_height / 2 + wave_girth, x - wave_width, y + wave_girth);
		          x -= wave_width;
		        }
		        ctx.fill();
		      }
		    }
		  }]);
	
		  return Vibrato;
		}(_modifier.Modifier);
	
	/***/ },
	/* 43 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Stave = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _tables = __webpack_require__(2);
		
		var _stavebarline = __webpack_require__(44);
		
		var _stavemodifier = __webpack_require__(45);
		
		var _staverepetition = __webpack_require__(46);
		
		var _stavesection = __webpack_require__(47);
		
		var _stavetempo = __webpack_require__(48);
		
		var _stavetext = __webpack_require__(49);
		
		var _boundingbox = __webpack_require__(8);
		
		var _clef = __webpack_require__(51);
		
		var _keysignature = __webpack_require__(52);
		
		var _timesignature = __webpack_require__(53);
		
		var _stavevolta = __webpack_require__(54);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		var Stave = exports.Stave = function (_Element) {
		  _inherits(Stave, _Element);
		
		  function Stave(x, y, width, options) {
		    _classCallCheck(this, Stave);
		
		    var _this = _possibleConstructorReturn(this, (Stave.__proto__ || Object.getPrototypeOf(Stave)).call(this));
		
		    _this.setAttribute('type', 'Stave');
		
		    _this.x = x;
		    _this.y = y;
		    _this.width = width;
		    _this.formatted = false;
		    _this.start_x = x + 5;
		    _this.end_x = x + width;
		    _this.modifiers = []; // stave modifiers (clef, key, time, barlines, coda, segno, etc.)
		    _this.measure = 0;
		    _this.clef = 'treble';
		    _this.font = {
		      family: 'sans-serif',
		      size: 8,
		      weight: ''
		    };
		    _this.options = {
		      vertical_bar_width: 10, // Width around vertical bar end-marker
		      glyph_spacing_px: 10,
		      num_lines: 5,
		      fill_style: '#999999',
		      left_bar: true, // draw vertical bar on left
		      right_bar: true, // draw vertical bar on right
		      spacing_between_lines_px: 10, // in pixels
		      space_above_staff_ln: 4, // in staff lines
		      space_below_staff_ln: 4, // in staff lines
		      top_text_position: 1 };
		    _this.bounds = { x: _this.x, y: _this.y, w: _this.width, h: 0 };
		    _vex.Vex.Merge(_this.options, options);
		
		    _this.resetLines();
		
		    var BARTYPE = _stavebarline.Barline.type;
		    // beg bar
		    _this.addModifier(new _stavebarline.Barline(_this.options.left_bar ? BARTYPE.SINGLE : BARTYPE.NONE));
		    // end bar
		    _this.addEndModifier(new _stavebarline.Barline(_this.options.right_bar ? BARTYPE.SINGLE : BARTYPE.NONE));
		    return _this;
		  }
		
		  _createClass(Stave, [{
		    key: 'space',
		    value: function space(spacing) {
		      return this.options.spacing_between_lines_px * spacing;
		    }
		  }, {
		    key: 'resetLines',
		    value: function resetLines() {
		      this.options.line_config = [];
		      for (var i = 0; i < this.options.num_lines; i++) {
		        this.options.line_config.push({ visible: true });
		      }
		      this.height = (this.options.num_lines + this.options.space_above_staff_ln) * this.options.spacing_between_lines_px;
		      this.options.bottom_text_position = this.options.num_lines;
		    }
		  }, {
		    key: 'getOptions',
		    value: function getOptions() {
		      return this.options;
		    }
		  }, {
		    key: 'setNoteStartX',
		    value: function setNoteStartX(x) {
		      if (!this.formatted) this.format();
		
		      this.start_x = x;
		      return this;
		    }
		  }, {
		    key: 'getNoteStartX',
		    value: function getNoteStartX() {
		      if (!this.formatted) this.format();
		
		      return this.start_x;
		    }
		  }, {
		    key: 'getNoteEndX',
		    value: function getNoteEndX() {
		      if (!this.formatted) this.format();
		
		      return this.end_x;
		    }
		  }, {
		    key: 'getTieStartX',
		    value: function getTieStartX() {
		      return this.start_x;
		    }
		  }, {
		    key: 'getTieEndX',
		    value: function getTieEndX() {
		      return this.x + this.width;
		    }
		  }, {
		    key: 'getX',
		    value: function getX() {
		      return this.x;
		    }
		  }, {
		    key: 'getNumLines',
		    value: function getNumLines() {
		      return this.options.num_lines;
		    }
		  }, {
		    key: 'setNumLines',
		    value: function setNumLines(lines) {
		      this.options.num_lines = parseInt(lines, 10);
		      this.resetLines();
		      return this;
		    }
		  }, {
		    key: 'setY',
		    value: function setY(y) {
		      this.y = y;return this;
		    }
		  }, {
		    key: 'getTopLineTopY',
		    value: function getTopLineTopY() {
		      return this.getYForLine(0) - _tables.Flow.STAVE_LINE_THICKNESS / 2;
		    }
		  }, {
		    key: 'getBottomLineBottomY',
		    value: function getBottomLineBottomY() {
		      return this.getYForLine(this.getNumLines() - 1) + _tables.Flow.STAVE_LINE_THICKNESS / 2;
		    }
		  }, {
		    key: 'setX',
		    value: function setX(x) {
		      var shift = x - this.x;
		      this.formatted = false;
		      this.x = x;
		      this.start_x += shift;
		      this.end_x += shift;
		      for (var i = 0; i < this.modifiers.length; i++) {
		        var mod = this.modifiers[i];
		        if (mod.x !== undefined) {
		          mod.x += shift;
		        }
		      }
		      return this;
		    }
		  }, {
		    key: 'setWidth',
		    value: function setWidth(width) {
		      this.formatted = false;
		      this.width = width;
		      this.end_x = this.x + width;
		
		      // reset the x position of the end barline (TODO(0xfe): This makes no sense)
		      // this.modifiers[1].setX(this.end_x);
		      return this;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'setMeasure',
		    value: function setMeasure(measure) {
		      this.measure = measure;return this;
		    }
		
		    /**
		     * Gets the pixels to shift from the beginning of the stave
		     * following the modifier at the provided index
		     * @param  {Number} index The index from which to determine the shift
		     * @return {Number}       The amount of pixels shifted
		     */
		
		  }, {
		    key: 'getModifierXShift',
		    value: function getModifierXShift() {
		      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
		
		      if (typeof index !== 'number') {
		        throw new _vex.Vex.RERR('InvalidIndex', 'Must be of number type');
		      }
		
		      if (!this.formatted) this.format();
		
		      if (this.getModifiers(_stavemodifier.StaveModifier.Position.BEGIN).length === 1) {
		        return 0;
		      }
		
		      var start_x = this.start_x - this.x;
		      var begBarline = this.modifiers[0];
		      if (begBarline.getType() === _stavebarline.Barline.type.REPEAT_BEGIN && start_x > begBarline.getWidth()) {
		        start_x -= begBarline.getWidth();
		      }
		
		      return start_x;
		    }
		
		    // Coda & Segno Symbol functions
		
		  }, {
		    key: 'setRepetitionTypeLeft',
		    value: function setRepetitionTypeLeft(type, y) {
		      this.modifiers.push(new _staverepetition.Repetition(type, this.x, y));
		      return this;
		    }
		  }, {
		    key: 'setRepetitionTypeRight',
		    value: function setRepetitionTypeRight(type, y) {
		      this.modifiers.push(new _staverepetition.Repetition(type, this.x, y));
		      return this;
		    }
		
		    // Volta functions
		
		  }, {
		    key: 'setVoltaType',
		    value: function setVoltaType(type, number_t, y) {
		      this.modifiers.push(new _stavevolta.Volta(type, number_t, this.x, y));
		      return this;
		    }
		
		    // Section functions
		
		  }, {
		    key: 'setSection',
		    value: function setSection(section, y) {
		      this.modifiers.push(new _stavesection.StaveSection(section, this.x, y));
		      return this;
		    }
		
		    // Tempo functions
		
		  }, {
		    key: 'setTempo',
		    value: function setTempo(tempo, y) {
		      this.modifiers.push(new _stavetempo.StaveTempo(tempo, this.x, y));
		      return this;
		    }
		
		    // Text functions
		
		  }, {
		    key: 'setText',
		    value: function setText(text, position, options) {
		      this.modifiers.push(new _stavetext.StaveText(text, position, options));
		      return this;
		    }
		  }, {
		    key: 'getHeight',
		    value: function getHeight() {
		      return this.height;
		    }
		  }, {
		    key: 'getSpacingBetweenLines',
		    value: function getSpacingBetweenLines() {
		      return this.options.spacing_between_lines_px;
		    }
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      return new _boundingbox.BoundingBox(this.x, this.y, this.width, this.getBottomY() - this.y);
		    }
		  }, {
		    key: 'getBottomY',
		    value: function getBottomY() {
		      var options = this.options;
		      var spacing = options.spacing_between_lines_px;
		      var score_bottom = this.getYForLine(options.num_lines) + options.space_below_staff_ln * spacing;
		
		      return score_bottom;
		    }
		  }, {
		    key: 'getBottomLineY',
		    value: function getBottomLineY() {
		      return this.getYForLine(this.options.num_lines);
		    }
		
		    // This returns the y for the *center* of a staff line
		
		  }, {
		    key: 'getYForLine',
		    value: function getYForLine(line) {
		      var options = this.options;
		      var spacing = options.spacing_between_lines_px;
		      var headroom = options.space_above_staff_ln;
		
		      var y = this.y + line * spacing + headroom * spacing;
		
		      return y;
		    }
		  }, {
		    key: 'getLineForY',
		    value: function getLineForY(y) {
		      // Does the reverse of getYForLine - somewhat dumb and just calls
		      // getYForLine until the right value is reaches
		
		      var options = this.options;
		      var spacing = options.spacing_between_lines_px;
		      var headroom = options.space_above_staff_ln;
		      return (y - this.y) / spacing - headroom;
		    }
		  }, {
		    key: 'getYForTopText',
		    value: function getYForTopText(line) {
		      var l = line || 0;
		      return this.getYForLine(-l - this.options.top_text_position);
		    }
		  }, {
		    key: 'getYForBottomText',
		    value: function getYForBottomText(line) {
		      var l = line || 0;
		      return this.getYForLine(this.options.bottom_text_position + l);
		    }
		  }, {
		    key: 'getYForNote',
		    value: function getYForNote(line) {
		      var options = this.options;
		      var spacing = options.spacing_between_lines_px;
		      var headroom = options.space_above_staff_ln;
		      var y = this.y + headroom * spacing + 5 * spacing - line * spacing;
		
		      return y;
		    }
		  }, {
		    key: 'getYForGlyphs',
		    value: function getYForGlyphs() {
		      return this.getYForLine(3);
		    }
		  }, {
		    key: 'addModifier',
		    value: function addModifier(modifier, position) {
		      if (position !== undefined) {
		        modifier.setPosition(position);
		      }
		
		      modifier.setStave(this);
		      this.formatted = false;
		      this.modifiers.push(modifier);
		      return this;
		    }
		  }, {
		    key: 'addEndModifier',
		    value: function addEndModifier(modifier) {
		      this.addModifier(modifier, _stavemodifier.StaveModifier.Position.END);
		      return this;
		    }
		
		    // Bar Line functions
		
		  }, {
		    key: 'setBegBarType',
		    value: function setBegBarType(type) {
		      // Only valid bar types at beginning of stave is none, single or begin repeat
		      var _Barline$type = _stavebarline.Barline.type,
		          SINGLE = _Barline$type.SINGLE,
		          REPEAT_BEGIN = _Barline$type.REPEAT_BEGIN,
		          NONE = _Barline$type.NONE;
		
		      if (type === SINGLE || type === REPEAT_BEGIN || type === NONE) {
		        this.modifiers[0].setType(type);
		        this.formatted = false;
		      }
		      return this;
		    }
		  }, {
		    key: 'setEndBarType',
		    value: function setEndBarType(type) {
		      // Repeat end not valid at end of stave
		      if (type !== _stavebarline.Barline.type.REPEAT_BEGIN) {
		        this.modifiers[1].setType(type);
		        this.formatted = false;
		      }
		      return this;
		    }
		  }, {
		    key: 'setClef',
		    value: function setClef(clefSpec, size, annotation, position) {
		      if (position === undefined) {
		        position = _stavemodifier.StaveModifier.Position.BEGIN;
		      }
		
		      this.clef = clefSpec;
		      var clefs = this.getModifiers(position, _clef.Clef.CATEGORY);
		      if (clefs.length === 0) {
		        this.addClef(clefSpec, size, annotation, position);
		      } else {
		        clefs[0].setType(clefSpec, size, annotation);
		      }
		
		      return this;
		    }
		  }, {
		    key: 'setEndClef',
		    value: function setEndClef(clefSpec, size, annotation) {
		      this.setClef(clefSpec, size, annotation, _stavemodifier.StaveModifier.Position.END);
		      return this;
		    }
		  }, {
		    key: 'setKeySignature',
		    value: function setKeySignature(keySpec, cancelKeySpec, alterKeySpec, position) {
		      if (position === undefined) {
		        position = _stavemodifier.StaveModifier.Position.BEGIN;
		      }
		
		      var keySignatures = this.getModifiers(position, _keysignature.KeySignature.CATEGORY);
		      if (keySignatures.length === 0) {
		        this.addKeySignature(keySpec, cancelKeySpec, alterKeySpec, position);
		      } else {
		        keySignatures[0].setKeySig(keySpec, cancelKeySpec, alterKeySpec);
		      }
		
		      return this;
		    }
		  }, {
		    key: 'setEndKeySignature',
		    value: function setEndKeySignature(keySpec, cancelKeySpec, alterKeySpec) {
		      this.setKeySignature(keySpec, cancelKeySpec, alterKeySpec, _stavemodifier.StaveModifier.Position.END);
		      return this;
		    }
		  }, {
		    key: 'setTimeSignature',
		    value: function setTimeSignature(timeSpec, customPadding, position) {
		      if (position === undefined) {
		        position = _stavemodifier.StaveModifier.Position.BEGIN;
		      }
		
		      var timeSignatures = this.getModifiers(position, _timesignature.TimeSignature.CATEGORY);
		      if (timeSignatures.length === 0) {
		        this.addTimeSignature(timeSpec, customPadding, position);
		      } else {
		        timeSignatures[0].setTimeSig(timeSpec);
		      }
		
		      return this;
		    }
		  }, {
		    key: 'setEndTimeSignature',
		    value: function setEndTimeSignature(timeSpec, customPadding) {
		      this.setTimeSignature(timeSpec, customPadding, _stavemodifier.StaveModifier.Position.END);
		      return this;
		    }
		  }, {
		    key: 'addKeySignature',
		    value: function addKeySignature(keySpec, cancelKeySpec, alterKeySpec, position) {
		      this.addModifier(new _keysignature.KeySignature(keySpec, cancelKeySpec, alterKeySpec), position);
		      return this;
		    }
		  }, {
		    key: 'addClef',
		    value: function addClef(clef, size, annotation, position) {
		      if (position === undefined || position === _stavemodifier.StaveModifier.Position.BEGIN) {
		        this.clef = clef;
		      }
		
		      this.addModifier(new _clef.Clef(clef, size, annotation), position);
		      return this;
		    }
		  }, {
		    key: 'addEndClef',
		    value: function addEndClef(clef, size, annotation) {
		      this.addClef(clef, size, annotation, _stavemodifier.StaveModifier.Position.END);
		      return this;
		    }
		  }, {
		    key: 'addTimeSignature',
		    value: function addTimeSignature(timeSpec, customPadding, position) {
		      this.addModifier(new _timesignature.TimeSignature(timeSpec, customPadding), position);
		      return this;
		    }
		  }, {
		    key: 'addEndTimeSignature',
		    value: function addEndTimeSignature(timeSpec, customPadding) {
		      this.addTimeSignature(timeSpec, customPadding, _stavemodifier.StaveModifier.Position.END);
		      return this;
		    }
		
		    // Deprecated
		
		  }, {
		    key: 'addTrebleGlyph',
		    value: function addTrebleGlyph() {
		      this.addClef('treble');
		      return this;
		    }
		  }, {
		    key: 'getModifiers',
		    value: function getModifiers(position, category) {
		      if (position === undefined) return this.modifiers;
		
		      return this.modifiers.filter(function (modifier) {
		        return position === modifier.getPosition() && (category === undefined || category === modifier.getCategory());
		      });
		    }
		  }, {
		    key: 'sortByCategory',
		    value: function sortByCategory(items, order) {
		      for (var i = items.length - 1; i >= 0; i--) {
		        for (var j = 0; j < i; j++) {
		          if (order[items[j].getCategory()] > order[items[j + 1].getCategory()]) {
		            var temp = items[j];
		            items[j] = items[j + 1];
		            items[j + 1] = temp;
		          }
		        }
		      }
		    }
		  }, {
		    key: 'format',
		    value: function format() {
		      var begBarline = this.modifiers[0];
		      var endBarline = this.modifiers[1];
		
		      var begModifiers = this.getModifiers(_stavemodifier.StaveModifier.Position.BEGIN);
		      var endModifiers = this.getModifiers(_stavemodifier.StaveModifier.Position.END);
		
		      this.sortByCategory(begModifiers, {
		        barlines: 0, clefs: 1, keysignatures: 2, timesignatures: 3
		      });
		
		      this.sortByCategory(endModifiers, {
		        timesignatures: 0, keysignatures: 1, barlines: 2, clefs: 3
		      });
		
		      if (begModifiers.length > 1 && begBarline.getType() === _stavebarline.Barline.type.REPEAT_BEGIN) {
		        begModifiers.push(begModifiers.splice(0, 1)[0]);
		        begModifiers.splice(0, 0, new _stavebarline.Barline(_stavebarline.Barline.type.SINGLE));
		      }
		
		      if (endModifiers.indexOf(endBarline) > 0) {
		        endModifiers.splice(0, 0, new _stavebarline.Barline(_stavebarline.Barline.type.NONE));
		      }
		
		      var width = void 0;
		      var padding = void 0;
		      var modifier = void 0;
		      var offset = 0;
		      var x = this.x;
		      for (var i = 0; i < begModifiers.length; i++) {
		        modifier = begModifiers[i];
		        padding = modifier.getPadding(i + offset);
		        width = modifier.getWidth();
		
		        x += padding;
		        modifier.setX(x);
		        x += width;
		
		        if (padding + width === 0) offset--;
		      }
		
		      this.start_x = x;
		      x = this.x + this.width;
		
		      for (var _i = 0; _i < endModifiers.length; _i++) {
		        modifier = endModifiers[_i];
		        x -= modifier.getPadding(_i);
		        if (_i !== 0) {
		          x -= modifier.getWidth();
		        }
		
		        modifier.setX(x);
		
		        if (_i === 0) {
		          x -= modifier.getWidth();
		        }
		      }
		
		      this.end_x = endModifiers.length === 1 ? this.x + this.width : x;
		      this.formatted = true;
		    }
		
		    /**
		     * All drawing functions below need the context to be set.
		     */
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      if (!this.formatted) this.format();
		
		      var num_lines = this.options.num_lines;
		      var width = this.width;
		      var x = this.x;
		      var y = void 0;
		
		      // Render lines
		      for (var line = 0; line < num_lines; line++) {
		        y = this.getYForLine(line);
		
		        this.context.save();
		        this.context.setFillStyle(this.options.fill_style);
		        this.context.setStrokeStyle(this.options.fill_style);
		        this.context.setLineWidth(_tables.Flow.STAVE_LINE_THICKNESS);
		        if (this.options.line_config[line].visible) {
		          this.context.beginPath();
		          this.context.moveTo(x, y);
		          this.context.lineTo(x + width, y);
		          this.context.stroke();
		        }
		        this.context.restore();
		      }
		
		      // Draw the modifiers (bar lines, coda, segno, repeat brackets, etc.)
		      for (var i = 0; i < this.modifiers.length; i++) {
		        // Only draw modifier if it has a draw function
		        if (typeof this.modifiers[i].draw === 'function') {
		          this.modifiers[i].draw(this, this.getModifierXShift(i));
		        }
		      }
		
		      // Render measure numbers
		      if (this.measure > 0) {
		        this.context.save();
		        this.context.setFont(this.font.family, this.font.size, this.font.weight);
		        var text_width = this.context.measureText('' + this.measure).width;
		        y = this.getYForTopText(0) + 3;
		        this.context.fillText('' + this.measure, this.x - text_width / 2, y);
		        this.context.restore();
		      }
		
		      return this;
		    }
		
		    // Draw Simple barlines for backward compatability
		    // Do not delete - draws the beginning bar of the stave
		
		  }, {
		    key: 'drawVertical',
		    value: function drawVertical(x, isDouble) {
		      this.drawVerticalFixed(this.x + x, isDouble);
		    }
		  }, {
		    key: 'drawVerticalFixed',
		    value: function drawVerticalFixed(x, isDouble) {
		      this.checkContext();
		
		      var top_line = this.getYForLine(0);
		      var bottom_line = this.getYForLine(this.options.num_lines - 1);
		      if (isDouble) {
		        this.context.fillRect(x - 3, top_line, 1, bottom_line - top_line + 1);
		      }
		      this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);
		    }
		  }, {
		    key: 'drawVerticalBar',
		    value: function drawVerticalBar(x) {
		      this.drawVerticalBarFixed(this.x + x, false);
		    }
		  }, {
		    key: 'drawVerticalBarFixed',
		    value: function drawVerticalBarFixed(x) {
		      this.checkContext();
		
		      var top_line = this.getYForLine(0);
		      var bottom_line = this.getYForLine(this.options.num_lines - 1);
		      this.context.fillRect(x, top_line, 1, bottom_line - top_line + 1);
		    }
		
		    /**
		     * Get the current configuration for the Stave.
		     * @return {Array} An array of configuration objects.
		     */
		
		  }, {
		    key: 'getConfigForLines',
		    value: function getConfigForLines() {
		      return this.options.line_config;
		    }
		
		    /**
		     * Configure properties of the lines in the Stave
		     * @param line_number The index of the line to configure.
		     * @param line_config An configuration object for the specified line.
		     * @throws Vex.RERR "StaveConfigError" When the specified line number is out of
		     *   range of the number of lines specified in the constructor.
		     */
		
		  }, {
		    key: 'setConfigForLine',
		    value: function setConfigForLine(line_number, line_config) {
		      if (line_number >= this.options.num_lines || line_number < 0) {
		        throw new _vex.Vex.RERR('StaveConfigError', 'The line number must be within the range of the number of lines in the Stave.');
		      }
		
		      if (line_config.visible === undefined) {
		        throw new _vex.Vex.RERR('StaveConfigError', "The line configuration object is missing the 'visible' property.");
		      }
		
		      if (typeof line_config.visible !== 'boolean') {
		        throw new _vex.Vex.RERR('StaveConfigError', "The line configuration objects 'visible' property must be true or false.");
		      }
		
		      this.options.line_config[line_number] = line_config;
		
		      return this;
		    }
		
		    /**
		     * Set the staff line configuration array for all of the lines at once.
		     * @param lines_configuration An array of line configuration objects.  These objects
		     *   are of the same format as the single one passed in to setLineConfiguration().
		     *   The caller can set null for any line config entry if it is desired that the default be used
		     * @throws Vex.RERR "StaveConfigError" When the lines_configuration array does not have
		     *   exactly the same number of elements as the num_lines configuration object set in
		     *   the constructor.
		     */
		
		  }, {
		    key: 'setConfigForLines',
		    value: function setConfigForLines(lines_configuration) {
		      if (lines_configuration.length !== this.options.num_lines) {
		        throw new _vex.Vex.RERR('StaveConfigError', 'The length of the lines configuration array must match the number of lines in the Stave');
		      }
		
		      // Make sure the defaults are present in case an incomplete set of
		      //  configuration options were supplied.
		      for (var line_config in lines_configuration) {
		        // Allow 'null' to be used if the caller just wants the default for a particular node.
		        if (!lines_configuration[line_config]) {
		          lines_configuration[line_config] = this.options.line_config[line_config];
		        }
		        _vex.Vex.Merge(this.options.line_config[line_config], lines_configuration[line_config]);
		      }
		
		      this.options.line_config = lines_configuration;
		
		      return this;
		    }
		  }]);
	
		  return Stave;
		}(_element.Element);
	
	/***/ },
	/* 44 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Barline = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _tables = __webpack_require__(2);
		
		var _stavemodifier = __webpack_require__(45);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// Author Larry Kuhns 2011
		
		var Barline = exports.Barline = function (_StaveModifier) {
		  _inherits(Barline, _StaveModifier);
		
		  _createClass(Barline, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'barlines';
		    }
		  }, {
		    key: 'type',
		    get: function get() {
		      return {
		        SINGLE: 1,
		        DOUBLE: 2,
		        END: 3,
		        REPEAT_BEGIN: 4,
		        REPEAT_END: 5,
		        REPEAT_BOTH: 6,
		        NONE: 7
		      };
		    }
		  }, {
		    key: 'typeString',
		    get: function get() {
		      return {
		        single: Barline.type.SINGLE,
		        double: Barline.type.DOUBLE,
		        end: Barline.type.END,
		        repeatBegin: Barline.type.REPEAT_BEGIN,
		        repeatEnd: Barline.type.REPEAT_END,
		        repeatBoth: Barline.type.REPEAT_BOTH,
		        none: Barline.type.NONE
		      };
		    }
		
		    /**
		     * @constructor
		     */
		
		  }]);
		
		  function Barline(type) {
		    _classCallCheck(this, Barline);
		
		    var _this = _possibleConstructorReturn(this, (Barline.__proto__ || Object.getPrototypeOf(Barline)).call(this));
		
		    _this.setAttribute('type', 'Barline');
		    _this.thickness = _tables.Flow.STAVE_LINE_THICKNESS;
		
		    var TYPE = Barline.type;
		    _this.widths = {};
		    _this.widths[TYPE.SINGLE] = 5;
		    _this.widths[TYPE.DOUBLE] = 5;
		    _this.widths[TYPE.END] = 5;
		    _this.widths[TYPE.REPEAT_BEGIN] = 5;
		    _this.widths[TYPE.REPEAT_END] = 5;
		    _this.widths[TYPE.REPEAT_BOTH] = 5;
		    _this.widths[TYPE.NONE] = 5;
		
		    _this.paddings = {};
		    _this.paddings[TYPE.SINGLE] = 0;
		    _this.paddings[TYPE.DOUBLE] = 0;
		    _this.paddings[TYPE.END] = 0;
		    _this.paddings[TYPE.REPEAT_BEGIN] = 15;
		    _this.paddings[TYPE.REPEAT_END] = 15;
		    _this.paddings[TYPE.REPEAT_BOTH] = 15;
		    _this.paddings[TYPE.NONE] = 0;
		
		    _this.setPosition(_stavemodifier.StaveModifier.Position.BEGIN);
		    _this.setType(type);
		    return _this;
		  }
		
		  _createClass(Barline, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Barline.CATEGORY;
		    }
		  }, {
		    key: 'getType',
		    value: function getType() {
		      return this.type;
		    }
		  }, {
		    key: 'setType',
		    value: function setType(type) {
		      this.type = typeof type === 'string' ? Barline.typeString[type] : type;
		
		      this.setWidth(this.widths[this.type]);
		      this.setPadding(this.paddings[this.type]);
		      return this;
		    }
		
		    // Draw barlines
		
		  }, {
		    key: 'draw',
		    value: function draw(stave) {
		      stave.checkContext();
		      this.setRendered();
		
		      switch (this.type) {
		        case Barline.type.SINGLE:
		          this.drawVerticalBar(stave, this.x, false);
		          break;
		        case Barline.type.DOUBLE:
		          this.drawVerticalBar(stave, this.x, true);
		          break;
		        case Barline.type.END:
		          this.drawVerticalEndBar(stave, this.x);
		          break;
		        case Barline.type.REPEAT_BEGIN:
		          // If the barline is shifted over (in front of clef/time/key)
		          // Draw vertical bar at the beginning.
		          this.drawRepeatBar(stave, this.x, true);
		          if (stave.getX() !== this.x) {
		            this.drawVerticalBar(stave, stave.getX());
		          }
		
		          break;
		        case Barline.type.REPEAT_END:
		          this.drawRepeatBar(stave, this.x, false);
		          break;
		        case Barline.type.REPEAT_BOTH:
		          this.drawRepeatBar(stave, this.x, false);
		          this.drawRepeatBar(stave, this.x, true);
		          break;
		        default:
		          // Default is NONE, so nothing to draw
		          break;
		      }
		    }
		  }, {
		    key: 'drawVerticalBar',
		    value: function drawVerticalBar(stave, x, double_bar) {
		      stave.checkContext();
		      var topY = stave.getTopLineTopY();
		      var botY = stave.getBottomLineBottomY();
		      if (double_bar) {
		        stave.context.fillRect(x - 3, topY, 1, botY - topY);
		      }
		      stave.context.fillRect(x, topY, 1, botY - topY);
		    }
		  }, {
		    key: 'drawVerticalEndBar',
		    value: function drawVerticalEndBar(stave, x) {
		      stave.checkContext();
		      var topY = stave.getTopLineTopY();
		      var botY = stave.getBottomLineBottomY();
		      stave.context.fillRect(x - 5, topY, 1, botY - topY);
		      stave.context.fillRect(x - 2, topY, 3, botY - topY);
		    }
		  }, {
		    key: 'drawRepeatBar',
		    value: function drawRepeatBar(stave, x, begin) {
		      stave.checkContext();
		
		      var topY = stave.getTopLineTopY();
		      var botY = stave.getBottomLineBottomY();
		      var x_shift = 3;
		
		      if (!begin) {
		        x_shift = -5;
		      }
		
		      stave.context.fillRect(x + x_shift, topY, 1, botY - topY);
		      stave.context.fillRect(x - 2, topY, 3, botY - topY);
		
		      var dot_radius = 2;
		
		      // Shift dots left or right
		      if (begin) {
		        x_shift += 4;
		      } else {
		        x_shift -= 4;
		      }
		
		      var dot_x = x + x_shift + dot_radius / 2;
		
		      // calculate the y offset based on number of stave lines
		      var y_offset = (stave.getNumLines() - 1) * stave.getSpacingBetweenLines();
		      y_offset = y_offset / 2 - stave.getSpacingBetweenLines() / 2;
		      var dot_y = topY + y_offset + dot_radius / 2;
		
		      // draw the top repeat dot
		      stave.context.beginPath();
		      stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);
		      stave.context.fill();
		
		      // draw the bottom repeat dot
		      dot_y += stave.getSpacingBetweenLines();
		      stave.context.beginPath();
		      stave.context.arc(dot_x, dot_y, dot_radius, 0, Math.PI * 2, false);
		      stave.context.fill();
		    }
		  }]);
	
		  return Barline;
		}(_stavemodifier.StaveModifier);
	
	/***/ },
	/* 45 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveModifier = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _element = __webpack_require__(5);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// A base class for stave modifiers (e.g. clefs, key signatures)
		
		var StaveModifier = exports.StaveModifier = function (_Element) {
		  _inherits(StaveModifier, _Element);
		
		  _createClass(StaveModifier, null, [{
		    key: 'Position',
		    get: function get() {
		      return {
		        LEFT: 1,
		        RIGHT: 2,
		        ABOVE: 3,
		        BELOW: 4,
		        BEGIN: 5,
		        END: 6
		      };
		    }
		  }]);
		
		  function StaveModifier() {
		    _classCallCheck(this, StaveModifier);
		
		    var _this = _possibleConstructorReturn(this, (StaveModifier.__proto__ || Object.getPrototypeOf(StaveModifier)).call(this));
		
		    _this.setAttribute('type', 'StaveModifier');
		
		    _this.padding = 10;
		    _this.position = StaveModifier.Position.ABOVE;
		    return _this;
		  }
		
		  _createClass(StaveModifier, [{
		    key: 'getPosition',
		    value: function getPosition() {
		      return this.position;
		    }
		  }, {
		    key: 'setPosition',
		    value: function setPosition(position) {
		      this.position = position;return this;
		    }
		  }, {
		    key: 'getStave',
		    value: function getStave() {
		      return this.stave;
		    }
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      this.stave = stave;return this;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      return this.width;
		    }
		  }, {
		    key: 'setWidth',
		    value: function setWidth(width) {
		      this.width = width;return this;
		    }
		  }, {
		    key: 'getX',
		    value: function getX() {
		      return this.x;
		    }
		  }, {
		    key: 'setX',
		    value: function setX(x) {
		      this.x = x;return this;
		    }
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return '';
		    }
		  }, {
		    key: 'makeSpacer',
		    value: function makeSpacer(padding) {
		      // TODO(0xfe): Return an instance of type `Spacer` based on `GhostNote`
		      // instead of this hack.
		
		      return {
		        getContext: function getContext() {
		          return true;
		        },
		        setStave: function setStave() {},
		        renderToStave: function renderToStave() {},
		        getMetrics: function getMetrics() {
		          return { width: padding };
		        }
		      };
		    }
		  }, {
		    key: 'placeGlyphOnLine',
		    value: function placeGlyphOnLine(glyph, stave, line) {
		      glyph.setYShift(stave.getYForLine(line) - stave.getYForGlyphs());
		    }
		  }, {
		    key: 'getPadding',
		    value: function getPadding(index) {
		      return index !== undefined && index < 2 ? 0 : this.padding;
		    }
		  }, {
		    key: 'setPadding',
		    value: function setPadding(padding) {
		      this.padding = padding;return this;
		    }
		  }]);
	
		  return StaveModifier;
		}(_element.Element);
	
	/***/ },
	/* 46 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Repetition = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _stavemodifier = __webpack_require__(45);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Larry Kuhns 2011
		
		var Repetition = exports.Repetition = function (_StaveModifier) {
		  _inherits(Repetition, _StaveModifier);
		
		  _createClass(Repetition, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'repetitions';
		    }
		  }, {
		    key: 'type',
		    get: function get() {
		      return {
		        NONE: 1, // no coda or segno
		        CODA_LEFT: 2, // coda at beginning of stave
		        CODA_RIGHT: 3, // coda at end of stave
		        SEGNO_LEFT: 4, // segno at beginning of stave
		        SEGNO_RIGHT: 5, // segno at end of stave
		        DC: 6, // D.C. at end of stave
		        DC_AL_CODA: 7, // D.C. al coda at end of stave
		        DC_AL_FINE: 8, // D.C. al Fine end of stave
		        DS: 9, // D.S. at end of stave
		        DS_AL_CODA: 10, // D.S. al coda at end of stave
		        DS_AL_FINE: 11, // D.S. al Fine at end of stave
		        FINE: 12 };
		    }
		  }]);
		
		  function Repetition(type, x, y_shift) {
		    _classCallCheck(this, Repetition);
		
		    var _this = _possibleConstructorReturn(this, (Repetition.__proto__ || Object.getPrototypeOf(Repetition)).call(this));
		
		    _this.setAttribute('type', 'Repetition');
		
		    _this.symbol_type = type;
		    _this.x = x;
		    _this.x_shift = 0;
		    _this.y_shift = y_shift;
		    _this.font = {
		      family: 'times',
		      size: 12,
		      weight: 'bold italic'
		    };
		    return _this;
		  }
		
		  _createClass(Repetition, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Repetition.CATEGORY;
		    }
		  }, {
		    key: 'setShiftX',
		    value: function setShiftX(x) {
		      this.x_shift = x;return this;
		    }
		  }, {
		    key: 'setShiftY',
		    value: function setShiftY(y) {
		      this.y_shift = y;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw(stave, x) {
		      this.setRendered();
		
		      switch (this.symbol_type) {
		        case Repetition.type.CODA_RIGHT:
		          this.drawCodaFixed(stave, x + stave.width);
		          break;
		        case Repetition.type.CODA_LEFT:
		          this.drawSymbolText(stave, x, 'Coda', true);
		          break;
		        case Repetition.type.SEGNO_LEFT:
		          this.drawSignoFixed(stave, x);
		          break;
		        case Repetition.type.SEGNO_RIGHT:
		          this.drawSignoFixed(stave, x + stave.width);
		          break;
		        case Repetition.type.DC:
		          this.drawSymbolText(stave, x, 'D.C.', false);
		          break;
		        case Repetition.type.DC_AL_CODA:
		          this.drawSymbolText(stave, x, 'D.C. al', true);
		          break;
		        case Repetition.type.DC_AL_FINE:
		          this.drawSymbolText(stave, x, 'D.C. al Fine', false);
		          break;
		        case Repetition.type.DS:
		          this.drawSymbolText(stave, x, 'D.S.', false);
		          break;
		        case Repetition.type.DS_AL_CODA:
		          this.drawSymbolText(stave, x, 'D.S. al', true);
		          break;
		        case Repetition.type.DS_AL_FINE:
		          this.drawSymbolText(stave, x, 'D.S. al Fine', false);
		          break;
		        case Repetition.type.FINE:
		          this.drawSymbolText(stave, x, 'Fine', false);
		          break;
		        default:
		          break;
		      }
		
		      return this;
		    }
		  }, {
		    key: 'drawCodaFixed',
		    value: function drawCodaFixed(stave, x) {
		      var y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;
		      _glyph.Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 40, 'v4d', true);
		      return this;
		    }
		  }, {
		    key: 'drawSignoFixed',
		    value: function drawSignoFixed(stave, x) {
		      var y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;
		      _glyph.Glyph.renderGlyph(stave.context, this.x + x + this.x_shift, y + 25, 30, 'v8c', true);
		      return this;
		    }
		  }, {
		    key: 'drawSymbolText',
		    value: function drawSymbolText(stave, x, text, draw_coda) {
		      var ctx = stave.checkContext();
		
		      ctx.save();
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      // Default to right symbol
		      var text_x = 0 + this.x_shift;
		      var symbol_x = x + this.x_shift;
		      if (this.symbol_type === Repetition.type.CODA_LEFT) {
		        // Offset Coda text to right of stave beginning
		        text_x = this.x + stave.options.vertical_bar_width;
		        symbol_x = text_x + ctx.measureText(text).width + 12;
		      } else {
		        // Offset Signo text to left stave end
		        symbol_x = this.x + x + stave.width - 5 + this.x_shift;
		        text_x = symbol_x - +ctx.measureText(text).width - 12;
		      }
		
		      var y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;
		      if (draw_coda) {
		        _glyph.Glyph.renderGlyph(ctx, symbol_x, y, 40, 'v4d', true);
		      }
		
		      ctx.fillText(text, text_x, y + 5);
		      ctx.restore();
		
		      return this;
		    }
		  }]);
	
		  return Repetition;
		}(_stavemodifier.StaveModifier);
	
	/***/ },
	/* 47 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveSection = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _stavemodifier = __webpack_require__(45);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Larry Kuhns 2011
		
		var StaveSection = exports.StaveSection = function (_StaveModifier) {
		  _inherits(StaveSection, _StaveModifier);
		
		  _createClass(StaveSection, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'stavesection';
		    }
		  }]);
		
		  function StaveSection(section, x, shift_y) {
		    _classCallCheck(this, StaveSection);
		
		    var _this = _possibleConstructorReturn(this, (StaveSection.__proto__ || Object.getPrototypeOf(StaveSection)).call(this));
		
		    _this.setAttribute('type', 'StaveSection');
		
		    _this.setWidth(16);
		    _this.section = section;
		    _this.x = x;
		    _this.shift_x = 0;
		    _this.shift_y = shift_y;
		    _this.font = {
		      family: 'sans-serif',
		      size: 12,
		      weight: 'bold'
		    };
		    return _this;
		  }
		
		  _createClass(StaveSection, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return StaveSection.CATEGORY;
		    }
		  }, {
		    key: 'setStaveSection',
		    value: function setStaveSection(section) {
		      this.section = section;return this;
		    }
		  }, {
		    key: 'setShiftX',
		    value: function setShiftX(x) {
		      this.shift_x = x;return this;
		    }
		  }, {
		    key: 'setShiftY',
		    value: function setShiftY(y) {
		      this.shift_y = y;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw(stave, shift_x) {
		      var ctx = stave.checkContext();
		      this.setRendered();
		
		      ctx.save();
		      ctx.lineWidth = 2;
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      var text_width = ctx.measureText('' + this.section).width;
		      var width = text_width + 6; // add left & right padding
		      if (width < 18) width = 18;
		      var height = 20;
		      //  Seems to be a good default y
		      var y = stave.getYForTopText(3) + this.shift_y;
		      var x = this.x + shift_x;
		      ctx.beginPath();
		      ctx.lineWidth = 2;
		      ctx.rect(x, y, width, height);
		      ctx.stroke();
		      x += (width - text_width) / 2;
		      ctx.fillText('' + this.section, x, y + 16);
		      ctx.restore();
		      return this;
		    }
		  }]);
	
		  return StaveSection;
		}(_stavemodifier.StaveModifier);
	
	/***/ },
	/* 48 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveTempo = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		var _stavemodifier = __webpack_require__(45);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Radosaw Eichler 2012
		
		var StaveTempo = exports.StaveTempo = function (_StaveModifier) {
		  _inherits(StaveTempo, _StaveModifier);
		
		  _createClass(StaveTempo, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'stavetempo';
		    }
		  }]);
		
		  function StaveTempo(tempo, x, shift_y) {
		    _classCallCheck(this, StaveTempo);
		
		    var _this = _possibleConstructorReturn(this, (StaveTempo.__proto__ || Object.getPrototypeOf(StaveTempo)).call(this));
		
		    _this.setAttribute('type', 'StaveTempo');
		
		    _this.tempo = tempo;
		    _this.position = _modifier.Modifier.Position.ABOVE;
		    _this.x = x;
		    _this.shift_x = 10;
		    _this.shift_y = shift_y;
		    _this.font = {
		      family: 'times',
		      size: 14,
		      weight: 'bold'
		    };
		    _this.render_options = {
		      glyph_font_scale: 30 };
		    return _this;
		  }
		
		  _createClass(StaveTempo, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return StaveTempo.CATEGORY;
		    }
		  }, {
		    key: 'setTempo',
		    value: function setTempo(tempo) {
		      this.tempo = tempo;return this;
		    }
		  }, {
		    key: 'setShiftX',
		    value: function setShiftX(x) {
		      this.shift_x = x;return this;
		    }
		  }, {
		    key: 'setShiftY',
		    value: function setShiftY(y) {
		      this.shift_y = y;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw(stave, shift_x) {
		      var ctx = stave.checkContext();
		      this.setRendered();
		
		      var options = this.render_options;
		      // FIXME: What does the '38' mean? Why 38? Is that supposed to
		      // be the default font size for standard notation?
		      var scale = options.glyph_font_scale / 38;
		      var name = this.tempo.name;
		      var duration = this.tempo.duration;
		      var dots = this.tempo.dots;
		      var bpm = this.tempo.bpm;
		      var font = this.font;
		      var x = this.x + this.shift_x + shift_x;
		      var y = stave.getYForTopText(1) + this.shift_y;
		
		      ctx.save();
		
		      if (name) {
		        ctx.setFont(font.family, font.size, font.weight);
		        ctx.fillText(name, x, y);
		        x += ctx.measureText(name).width;
		      }
		
		      if (duration && bpm) {
		        ctx.setFont(font.family, font.size, 'normal');
		
		        if (name) {
		          x += ctx.measureText(' ').width;
		          ctx.fillText('(', x, y);
		          x += ctx.measureText('(').width;
		        }
		
		        var code = _tables.Flow.durationToGlyph(duration);
		
		        x += 3 * scale;
		        _glyph.Glyph.renderGlyph(ctx, x, y, options.glyph_font_scale, code.code_head);
		        x += code.getWidth() * scale;
		
		        // Draw stem and flags
		        if (code.stem) {
		          var stem_height = 30;
		
		          if (code.beam_count) stem_height += 3 * (code.beam_count - 1);
		
		          stem_height *= scale;
		
		          var y_top = y - stem_height;
		          ctx.fillRect(x - scale, y_top, scale, stem_height);
		
		          if (code.flag) {
		            _glyph.Glyph.renderGlyph(ctx, x, y_top, options.glyph_font_scale, code.code_flag_upstem);
		
		            if (!dots) x += 6 * scale;
		          }
		        }
		
		        // Draw dot
		        for (var i = 0; i < dots; i++) {
		          x += 6 * scale;
		          ctx.beginPath();
		          ctx.arc(x, y + 2 * scale, 2 * scale, 0, Math.PI * 2, false);
		          ctx.fill();
		        }
		
		        ctx.fillText(' = ' + bpm + (name ? ')' : ''), x + 3 * scale, y);
		      }
		
		      ctx.restore();
		      return this;
		    }
		  }]);
	
		  return StaveTempo;
		}(_stavemodifier.StaveModifier);
	
	/***/ },
	/* 49 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveText = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _stavemodifier = __webpack_require__(45);
		
		var _textnote = __webpack_require__(50);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Taehoon Moon 2014
		
		var StaveText = exports.StaveText = function (_StaveModifier) {
		  _inherits(StaveText, _StaveModifier);
		
		  _createClass(StaveText, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'stavetext';
		    }
		  }]);
		
		  function StaveText(text, position, options) {
		    _classCallCheck(this, StaveText);
		
		    var _this = _possibleConstructorReturn(this, (StaveText.__proto__ || Object.getPrototypeOf(StaveText)).call(this));
		
		    _this.setAttribute('type', 'StaveText');
		
		    _this.setWidth(16);
		    _this.text = text;
		    _this.position = position;
		    _this.options = {
		      shift_x: 0,
		      shift_y: 0,
		      justification: _textnote.TextNote.Justification.CENTER
		    };
		    _vex.Vex.Merge(_this.options, options);
		
		    _this.font = {
		      family: 'times',
		      size: 16,
		      weight: 'normal'
		    };
		    return _this;
		  }
		
		  _createClass(StaveText, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return StaveText.CATEGORY;
		    }
		  }, {
		    key: 'setStaveText',
		    value: function setStaveText(text) {
		      this.text = text;return this;
		    }
		  }, {
		    key: 'setShiftX',
		    value: function setShiftX(x) {
		      this.shift_x = x;return this;
		    }
		  }, {
		    key: 'setShiftY',
		    value: function setShiftY(y) {
		      this.shift_y = y;return this;
		    }
		  }, {
		    key: 'setFont',
		    value: function setFont(font) {
		      _vex.Vex.Merge(this.font, font);
		    }
		  }, {
		    key: 'setText',
		    value: function setText(text) {
		      this.text = text;
		    }
		  }, {
		    key: 'draw',
		    value: function draw(stave) {
		      var ctx = stave.checkContext();
		      this.setRendered();
		
		      ctx.save();
		      ctx.lineWidth = 2;
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      var text_width = ctx.measureText('' + this.text).width;
		
		      var x = void 0;
		      var y = void 0;
		      var Position = _stavemodifier.StaveModifier.Position;
		      var Justification = _textnote.TextNote.Justification;
		      switch (this.position) {
		        case Position.LEFT:
		        case Position.RIGHT:
		          y = (stave.getYForLine(0) + stave.getBottomLineY()) / 2 + this.options.shift_y;
		          if (this.position === Position.LEFT) {
		            x = stave.getX() - text_width - 24 + this.options.shift_x;
		          } else {
		            x = stave.getX() + stave.getWidth() + 24 + this.options.shift_x;
		          }
		          break;
		        case Position.ABOVE:
		        case Position.BELOW:
		          x = stave.getX() + this.options.shift_x;
		          if (this.options.justification === Justification.CENTER) {
		            x += stave.getWidth() / 2 - text_width / 2;
		          } else if (this.options.justification === Justification.RIGHT) {
		            x += stave.getWidth() - text_width;
		          }
		
		          if (this.position === Position.ABOVE) {
		            y = stave.getYForTopText(2) + this.options.shift_y;
		          } else {
		            y = stave.getYForBottomText(2) + this.options.shift_y;
		          }
		          break;
		        default:
		          throw new _vex.Vex.RERR('InvalidPosition', 'Value Must be in Modifier.Position.');
		      }
		
		      ctx.fillText('' + this.text, x, y + 4);
		      ctx.restore();
		      return this;
		    }
		  }]);
	
		  return StaveText;
		}(_stavemodifier.StaveModifier);
	
	/***/ },
	/* 50 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TextNote = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _note = __webpack_require__(22);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// `TextNote` is a notation element that is positioned in time. Generally
		// meant for objects that sit above/below the staff and inline with each other.
		// Examples of this would be such as dynamics, lyrics, chord changes, etc.
		
		var TextNote = exports.TextNote = function (_Note) {
		  _inherits(TextNote, _Note);
		
		  _createClass(TextNote, null, [{
		    key: 'Justification',
		    get: function get() {
		      return {
		        LEFT: 1,
		        CENTER: 2,
		        RIGHT: 3
		      };
		    }
		
		    // Glyph data
		
		  }, {
		    key: 'GLYPHS',
		    get: function get() {
		      return {
		        'segno': {
		          code: 'v8c',
		          point: 40,
		          x_shift: 0,
		          y_shift: -10
		        },
		        'tr': {
		          code: 'v1f',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'mordent_upper': {
		          code: 'v1e',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'mordent_lower': {
		          code: 'v45',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'f': {
		          code: 'vba',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'p': {
		          code: 'vbf',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'm': {
		          code: 'v62',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        's': {
		          code: 'v4a',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'z': {
		          code: 'v80',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'coda': {
		          code: 'v4d',
		          point: 40,
		          x_shift: 0,
		          y_shift: -8
		        },
		        'pedal_open': {
		          code: 'v36',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'pedal_close': {
		          code: 'v5d',
		          point: 40,
		          x_shift: 0,
		          y_shift: 3
		        },
		        'caesura_straight': {
		          code: 'v34',
		          point: 40,
		          x_shift: 0,
		          y_shift: 2
		        },
		        'caesura_curved': {
		          code: 'v4b',
		          point: 40,
		          x_shift: 0,
		          y_shift: 2
		        },
		        'breath': {
		          code: 'v6c',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'tick': {
		          code: 'v6f',
		          point: 50,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'turn': {
		          code: 'v72',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		        'turn_inverted': {
		          code: 'v33',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        },
		
		        // DEPRECATED - please use "mordent_upper" or "mordent_lower"
		        'mordent': {
		          code: 'v1e',
		          point: 40,
		          x_shift: 0,
		          y_shift: 0
		        }
		      };
		    }
		  }]);
		
		  function TextNote(text_struct) {
		    _classCallCheck(this, TextNote);
		
		    var _this = _possibleConstructorReturn(this, (TextNote.__proto__ || Object.getPrototypeOf(TextNote)).call(this, text_struct));
		
		    _this.setAttribute('type', 'TextNote');
		
		    // Note properties
		    _this.text = text_struct.text;
		    _this.superscript = text_struct.superscript;
		    _this.subscript = text_struct.subscript;
		    _this.glyph_type = text_struct.glyph;
		    _this.glyph = null;
		    _this.font = {
		      family: 'Arial',
		      size: 12,
		      weight: ''
		    };
		
		    // Set font
		    if (text_struct.font) _this.font = text_struct.font;
		
		    // Determine and set initial note width. Note that the text width is
		    // an approximation and isn't very accurate. The only way to accurately
		    // measure the length of text is with `canvasmeasureText()`
		    if (_this.glyph_type) {
		      var struct = TextNote.GLYPHS[_this.glyph_type];
		      if (!struct) throw new _vex.Vex.RERR('Invalid glyph type: ' + _this.glyph_type);
		
		      _this.glyph = new _glyph.Glyph(struct.code, struct.point, { cache: false });
		
		      if (struct.width) {
		        _this.setWidth(struct.width);
		      } else {
		        _this.setWidth(_this.glyph.getMetrics().width);
		      }
		
		      _this.glyph_struct = struct;
		    } else {
		      _this.setWidth(_tables.Flow.textWidth(_this.text));
		    }
		    _this.line = text_struct.line || 0;
		    _this.smooth = text_struct.smooth || false;
		    _this.ignore_ticks = text_struct.ignore_ticks || false;
		    _this.justification = TextNote.Justification.LEFT;
		    return _this;
		  }
		
		  // Set the horizontal justification of the TextNote
		
		
		  _createClass(TextNote, [{
		    key: 'setJustification',
		    value: function setJustification(just) {
		      this.justification = just;
		      return this;
		    }
		
		    // Set the Stave line on which the note should be placed
		
		  }, {
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;
		      return this;
		    }
		
		    // Pre-render formatting
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      this.checkContext();
		
		      if (this.preFormatted) return;
		
		      if (this.smooth) {
		        this.setWidth(0);
		      } else {
		        if (this.glyph) {
		          // Width already set.
		        } else {
		          this.setWidth(this.context.measureText(this.text).width);
		        }
		      }
		
		      if (this.justification === TextNote.Justification.CENTER) {
		        this.extraLeftPx = this.width / 2;
		      } else if (this.justification === TextNote.Justification.RIGHT) {
		        this.extraLeftPx = this.width;
		      }
		
		      this.setPreFormatted(true);
		    }
		
		    // Renders the TextNote
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('NoStave', "Can't draw without a stave.");
		      }
		
		      this.setRendered();
		      var ctx = this.context;
		      var x = this.getAbsoluteX();
		      if (this.justification === TextNote.Justification.CENTER) {
		        x -= this.getWidth() / 2;
		      } else if (this.justification === TextNote.Justification.RIGHT) {
		        x -= this.getWidth();
		      }
		
		      var y = void 0;
		      if (this.glyph) {
		        y = this.stave.getYForLine(this.line + -3);
		        this.glyph.render(this.context, x + this.glyph_struct.x_shift, y + this.glyph_struct.y_shift);
		      } else {
		        y = this.stave.getYForLine(this.line + -3);
		        ctx.save();
		        ctx.setFont(this.font.family, this.font.size, this.font.weight);
		        ctx.fillText(this.text, x, y);
		
		        // Width of the letter M gives us the approximate height of the text
		        var height = ctx.measureText('M').width;
		        // Get accurate width of text
		        var width = ctx.measureText(this.text).width;
		
		        // Write superscript
		        if (this.superscript) {
		          ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);
		          ctx.fillText(this.superscript, x + width + 2, y - height / 2.2);
		        }
		
		        // Write subscript
		        if (this.subscript) {
		          ctx.setFont(this.font.family, this.font.size / 1.3, this.font.weight);
		          ctx.fillText(this.subscript, x + width + 2, y + height / 2.2 - 1);
		        }
		
		        ctx.restore();
		      }
		    }
		  }]);
	
		  return TextNote;
		}(_note.Note);
	
	/***/ },
	/* 51 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Clef = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _stavemodifier = __webpack_require__(45);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna Cheppudira 2013.
		// Co-author: Benjamin W. Bohl
		//
		// ## Description
		//
		// This file implements various types of clefs that can be rendered on a stave.
		//
		// See `tests/clef_tests.js` for usage examples.
		
		// To enable logging for this class, set `Vex.Flow.Clef.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Clef.DEBUG) _vex.Vex.L('Vex.Flow.Clef', args);
		}
		
		var Clef = exports.Clef = function (_StaveModifier) {
		  _inherits(Clef, _StaveModifier);
		
		  _createClass(Clef, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'clefs';
		    }
		
		    // Every clef name is associated with a glyph code from the font file
		    // and a default stave line number.
		
		  }, {
		    key: 'types',
		    get: function get() {
		      return {
		        'treble': {
		          code: 'v83',
		          line: 3
		        },
		        'bass': {
		          code: 'v79',
		          line: 1
		        },
		        'alto': {
		          code: 'vad',
		          line: 2
		        },
		        'tenor': {
		          code: 'vad',
		          line: 1
		        },
		        'percussion': {
		          code: 'v59',
		          line: 2
		        },
		        'soprano': {
		          code: 'vad',
		          line: 4
		        },
		        'mezzo-soprano': {
		          code: 'vad',
		          line: 3
		        },
		        'baritone-c': {
		          code: 'vad',
		          line: 0
		        },
		        'baritone-f': {
		          code: 'v79',
		          line: 2
		        },
		        'subbass': {
		          code: 'v79',
		          line: 0
		        },
		        'french': {
		          code: 'v83',
		          line: 4
		        },
		        'tab': {
		          code: 'v2f'
		        }
		      };
		    }
		
		    // Sizes affect the point-size of the clef.
		
		  }, {
		    key: 'sizes',
		    get: function get() {
		      return {
		        'default': 40,
		        'small': 32
		      };
		    }
		
		    // Annotations attach to clefs -- such as "8" for octave up or down.
		
		  }, {
		    key: 'annotations',
		    get: function get() {
		      return {
		        '8va': {
		          code: 'v8',
		          sizes: {
		            'default': {
		              point: 20,
		              attachments: {
		                'treble': {
		                  line: -1.2,
		                  x_shift: 11
		                }
		              }
		            },
		            'small': {
		              point: 18,
		              attachments: {
		                'treble': {
		                  line: -0.4,
		                  x_shift: 8
		                }
		              }
		            }
		          }
		        },
		        '8vb': {
		          code: 'v8',
		          sizes: {
		            'default': {
		              point: 20,
		              attachments: {
		                'treble': {
		                  line: 6.3,
		                  x_shift: 10
		                },
		                'bass': {
		                  line: 4,
		                  x_shift: 1
		                }
		              }
		            },
		            'small': {
		              point: 18,
		              attachments: {
		                'treble': {
		                  line: 5.8,
		                  x_shift: 6
		                },
		                'bass': {
		                  line: 3.5,
		                  x_shift: 0.5
		                }
		              }
		            }
		          }
		        }
		      };
		    }
		
		    // Create a new clef. The parameter `clef` must be a key from
		    // `Clef.types`.
		
		  }]);
		
		  function Clef(type, size, annotation) {
		    _classCallCheck(this, Clef);
		
		    var _this = _possibleConstructorReturn(this, (Clef.__proto__ || Object.getPrototypeOf(Clef)).call(this));
		
		    _this.setAttribute('type', 'Clef');
		
		    _this.setPosition(_stavemodifier.StaveModifier.Position.BEGIN);
		    _this.setType(type, size, annotation);
		    _this.setWidth(_this.glyph.getMetrics().width);
		    L('Creating clef:', type);
		    return _this;
		  }
		
		  _createClass(Clef, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Clef.CATEGORY;
		    }
		  }, {
		    key: 'setType',
		    value: function setType(type, size, annotation) {
		      this.type = type;
		      this.clef = Clef.types[type];
		      if (size === undefined) {
		        this.size = 'default';
		      } else {
		        this.size = size;
		      }
		      this.clef.point = Clef.sizes[this.size];
		      this.glyph = new _glyph.Glyph(this.clef.code, this.clef.point);
		
		      // If an annotation, such as 8va, is specified, add it to the Clef object.
		      if (annotation !== undefined) {
		        var anno_dict = Clef.annotations[annotation];
		        this.annotation = {
		          code: anno_dict.code,
		          point: anno_dict.sizes[this.size].point,
		          line: anno_dict.sizes[this.size].attachments[this.type].line,
		          x_shift: anno_dict.sizes[this.size].attachments[this.type].x_shift
		        };
		
		        this.attachment = new _glyph.Glyph(this.annotation.code, this.annotation.point);
		        this.attachment.metrics.x_max = 0;
		        this.attachment.setXShift(this.annotation.x_shift);
		      } else {
		        this.annotation = undefined;
		      }
		
		      return this;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      if (this.type === 'tab' && !this.stave) {
		        throw new _vex.Vex.RERR('ClefError', "Can't get width without stave.");
		      }
		
		      return this.width;
		    }
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      this.stave = stave;
		
		      if (this.type !== 'tab') return this;
		
		      var glyphScale = void 0;
		      var glyphOffset = void 0;
		      var numLines = this.stave.getOptions().num_lines;
		      switch (numLines) {
		        case 8:
		          glyphScale = 55;
		          glyphOffset = 14;
		          break;
		        case 7:
		          glyphScale = 47;
		          glyphOffset = 8;
		          break;
		        case 6:
		          glyphScale = 40;
		          glyphOffset = 1;
		          break;
		        case 5:
		          glyphScale = 30;
		          glyphOffset = -6;
		          break;
		        case 4:
		          glyphScale = 23;
		          glyphOffset = -12;
		          break;
		        default:
		          throw new _vex.Vex.RERR('ClefError', 'Invalid number of lines: ' + numLines);
		      }
		
		      this.glyph.setPoint(glyphScale);
		      this.glyph.setYShift(glyphOffset);
		
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      if (!this.x) throw new _vex.Vex.RERR('ClefError', "Can't draw clef without x.");
		      if (!this.stave) throw new _vex.Vex.RERR('ClefError', "Can't draw clef without stave.");
		      this.setRendered();
		
		      this.glyph.setStave(this.stave);
		      this.glyph.setContext(this.stave.context);
		      if (this.clef.line !== undefined) {
		        this.placeGlyphOnLine(this.glyph, this.stave, this.clef.line);
		      }
		
		      this.glyph.renderToStave(this.x);
		
		      if (this.annotation !== undefined) {
		        this.placeGlyphOnLine(this.attachment, this.stave, this.annotation.line);
		        this.attachment.setStave(this.stave);
		        this.attachment.setContext(this.stave.context);
		        this.attachment.renderToStave(this.x);
		      }
		    }
		  }]);
	
		  return Clef;
		}(_stavemodifier.StaveModifier);
	
	/***/ },
	/* 52 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.KeySignature = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _stavemodifier = __webpack_require__(45);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Cyril Silverman
		//
		// ## Description
		//
		// This file implements key signatures. A key signature sits on a stave
		// and indicates the notes with implicit accidentals.
		
		var KeySignature = exports.KeySignature = function (_StaveModifier) {
		  _inherits(KeySignature, _StaveModifier);
		
		  _createClass(KeySignature, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'keysignatures';
		    }
		
		    // Space between natural and following accidental depending
		    // on vertical position
		
		  }, {
		    key: 'accidentalSpacing',
		    get: function get() {
		      return {
		        '#': {
		          above: 6,
		          below: 4
		        },
		        'b': {
		          above: 4,
		          below: 7
		        },
		        'n': {
		          above: 4,
		          below: 1
		        },
		        '##': {
		          above: 6,
		          below: 4
		        },
		        'bb': {
		          above: 4,
		          below: 7
		        },
		        'db': {
		          above: 4,
		          below: 7
		        },
		        'd': {
		          above: 4,
		          below: 7
		        },
		        'bbs': {
		          above: 4,
		          below: 7
		        },
		        '++': {
		          above: 6,
		          below: 4
		        },
		        '+': {
		          above: 6,
		          below: 4
		        },
		        '+-': {
		          above: 6,
		          below: 4
		        },
		        '++-': {
		          above: 6,
		          below: 4
		        },
		        'bs': {
		          above: 4,
		          below: 10
		        },
		        'bss': {
		          above: 4,
		          below: 10
		        }
		      };
		    }
		
		    // Create a new Key Signature based on a `key_spec`
		
		  }]);
		
		  function KeySignature(keySpec, cancelKeySpec, alterKeySpec) {
		    _classCallCheck(this, KeySignature);
		
		    var _this = _possibleConstructorReturn(this, (KeySignature.__proto__ || Object.getPrototypeOf(KeySignature)).call(this));
		
		    _this.setAttribute('type', 'KeySignature');
		
		    _this.setKeySig(keySpec, cancelKeySpec, alterKeySpec);
		    _this.setPosition(_stavemodifier.StaveModifier.Position.BEGIN);
		    _this.glyphFontScale = 38; // TODO(0xFE): Should this match StaveNote?
		    _this.glyphs = [];
		    _this.xPositions = []; // relative to this.x
		    _this.paddingForced = false;
		    return _this;
		  }
		
		  _createClass(KeySignature, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return KeySignature.CATEGORY;
		    }
		
		    // Add an accidental glyph to the `KeySignature` instance which represents
		    // the provided `acc`. If `nextAcc` is also provided, the appropriate
		    // spacing will be included in the glyph's position
		
		  }, {
		    key: 'convertToGlyph',
		    value: function convertToGlyph(acc, nextAcc) {
		      var accGlyphData = _tables.Flow.accidentalCodes(acc.type);
		      var glyph = new _glyph.Glyph(accGlyphData.code, this.glyphFontScale);
		
		      // Determine spacing between current accidental and the next accidental
		      var extraWidth = 1;
		      if (acc.type === 'n' && nextAcc) {
		        var spacing = KeySignature.accidentalSpacing[nextAcc.type];
		        if (spacing) {
		          var isAbove = nextAcc.line >= acc.line;
		          extraWidth = isAbove ? spacing.above : spacing.below;
		        }
		      }
		
		      // Place the glyph on the stave
		      this.placeGlyphOnLine(glyph, this.stave, acc.line);
		      this.glyphs.push(glyph);
		
		      var xPosition = this.xPositions[this.xPositions.length - 1];
		      var glyphWidth = glyph.getMetrics().width + extraWidth;
		      // Store the next accidental's x position
		      this.xPositions.push(xPosition + glyphWidth);
		      // Expand size of key signature
		      this.width += glyphWidth;
		    }
		
		    // Cancel out a key signature provided in the `spec` parameter. This will
		    // place appropriate natural accidentals before the key signature.
		
		  }, {
		    key: 'cancelKey',
		    value: function cancelKey(spec) {
		      this.formatted = false;
		      this.cancelKeySpec = spec;
		
		      return this;
		    }
		  }, {
		    key: 'convertToCancelAccList',
		    value: function convertToCancelAccList(spec) {
		      // Get the accidental list for the cancelled key signature
		      var cancel_accList = _tables.Flow.keySignature(spec);
		
		      // If the cancelled key has a different accidental type, ie: # vs b
		      var different_types = this.accList.length > 0 && cancel_accList.length > 0 && cancel_accList[0].type !== this.accList[0].type;
		
		      // Determine how many naturals needed to add
		      var naturals = different_types ? cancel_accList.length : cancel_accList.length - this.accList.length;
		
		      // Return if no naturals needed
		      if (naturals < 1) return;
		
		      // Get the line position for each natural
		      var cancelled = [];
		      for (var i = 0; i < naturals; i++) {
		        var index = i;
		        if (!different_types) {
		          index = cancel_accList.length - naturals + i;
		        }
		
		        var acc = cancel_accList[index];
		        cancelled.push({ type: 'n', line: acc.line });
		      }
		
		      // Combine naturals with main accidental list for the key signature
		      this.accList = cancelled.concat(this.accList);
		    }
		
		    // Deprecated
		
		  }, {
		    key: 'addToStave',
		    value: function addToStave(stave) {
		      this.paddingForced = true;
		      stave.addModifier(this);
		
		      return this;
		    }
		
		    // Apply the accidental staff line placement based on the `clef` and
		    // the  accidental `type` for the key signature ('# or 'b').
		
		  }, {
		    key: 'convertAccLines',
		    value: function convertAccLines(clef, type) {
		      var offset = 0.0; // if clef === "treble"
		      var customLines = void 0; // when clef doesn't follow treble key sig shape
		
		      switch (clef) {
		        // Treble & Subbass both have offsets of 0, so are not included.
		        case 'soprano':
		          if (type === '#') customLines = [2.5, 0.5, 2, 0, 1.5, -0.5, 1];else offset = -1;
		          break;
		        case 'mezzo-soprano':
		          if (type === 'b') customLines = [0, 2, 0.5, 2.5, 1, 3, 1.5];else offset = 1.5;
		          break;
		        case 'alto':
		          offset = 0.5;
		          break;
		        case 'tenor':
		          if (type === '#') customLines = [3, 1, 2.5, 0.5, 2, 0, 1.5];else offset = -0.5;
		          break;
		        case 'baritone-f':
		        case 'baritone-c':
		          if (type === 'b') customLines = [0.5, 2.5, 1, 3, 1.5, 3.5, 2];else offset = 2;
		          break;
		        case 'bass':
		        case 'french':
		          offset = 1;
		          break;
		        default:
		          break;
		      }
		
		      // If there's a special case, assign those lines/spaces:
		      var i = void 0;
		      if (typeof customLines !== 'undefined') {
		        for (i = 0; i < this.accList.length; ++i) {
		          this.accList[i].line = customLines[i];
		        }
		      } else if (offset !== 0) {
		        for (i = 0; i < this.accList.length; ++i) {
		          this.accList[i].line += offset;
		        }
		      }
		    }
		  }, {
		    key: 'getPadding',
		    value: function getPadding(index) {
		      if (!this.formatted) this.format();
		
		      return this.glyphs.length === 0 || !this.paddingForced && index < 2 ? 0 : this.padding;
		    }
		  }, {
		    key: 'getWidth',
		    value: function getWidth() {
		      if (!this.formatted) this.format();
		
		      return this.width;
		    }
		  }, {
		    key: 'setKeySig',
		    value: function setKeySig(keySpec, cancelKeySpec, alterKeySpec) {
		      this.formatted = false;
		      this.keySpec = keySpec;
		      this.cancelKeySpec = cancelKeySpec;
		      this.alterKeySpec = alterKeySpec;
		
		      return this;
		    }
		
		    // Alter the accidentals of a key spec one by one.
		    // Each alteration is a new accidental that replaces the
		    // original accidental (or the canceled one).
		
		  }, {
		    key: 'alterKey',
		    value: function alterKey(alterKeySpec) {
		      this.formatted = false;
		      this.alterKeySpec = alterKeySpec;
		
		      return this;
		    }
		  }, {
		    key: 'convertToAlterAccList',
		    value: function convertToAlterAccList(alterKeySpec) {
		      var max = Math.min(alterKeySpec.length, this.accList.length);
		      for (var i = 0; i < max; ++i) {
		        if (alterKeySpec[i]) {
		          this.accList[i].type = alterKeySpec[i];
		        }
		      }
		    }
		  }, {
		    key: 'format',
		    value: function format() {
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('KeySignatureError', "Can't draw key signature without stave.");
		      }
		
		      this.width = 0;
		      this.glyphs = [];
		      this.xPositions = [0]; // initialize with initial x position
		      this.accList = _tables.Flow.keySignature(this.keySpec);
		      if (this.cancelKeySpec) {
		        this.convertToCancelAccList(this.cancelKeySpec);
		      }
		      var firstAccidentalType = this.accList.length > 0 ? this.accList[0].type : null;
		      if (this.alterKeySpec) {
		        this.convertToAlterAccList(this.alterKeySpec);
		      }
		
		      if (this.accList.length > 0) {
		        this.convertAccLines(this.stave.clef, firstAccidentalType);
		        for (var i = 0; i < this.accList.length; ++i) {
		          this.convertToGlyph(this.accList[i], this.accList[i + 1]);
		        }
		      }
		
		      this.formatted = true;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      if (!this.x) {
		        throw new _vex.Vex.RERR('KeySignatureError', "Can't draw key signature without x.");
		      }
		
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('KeySignatureError', "Can't draw key signature without stave.");
		      }
		
		      if (!this.formatted) this.format();
		      this.setRendered();
		
		      for (var i = 0; i < this.glyphs.length; i++) {
		        var glyph = this.glyphs[i];
		        var x = this.x + this.xPositions[i];
		        glyph.setStave(this.stave);
		        glyph.setContext(this.stave.context);
		        glyph.renderToStave(x);
		      }
		    }
		  }]);
	
		  return KeySignature;
		}(_stavemodifier.StaveModifier);
	
	/***/ },
	/* 53 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TimeSignature = undefined;
		
		var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _glyph3 = __webpack_require__(4);
		
		var _stavemodifier = __webpack_require__(45);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// Implements time signatures glyphs for staffs
		// See tables.js for the internal time signatures
		// representation
		
		var assertIsValidFraction = function assertIsValidFraction(timeSpec) {
		  var numbers = timeSpec.split('/').filter(function (number) {
		    return number !== '';
		  });
		
		  if (numbers.length !== 2) {
		    throw new _vex.Vex.RERR('BadTimeSignature', 'Invalid time spec: ' + timeSpec + '. Must be in the form "<numerator>/<denominator>"');
		  }
		
		  numbers.forEach(function (number) {
		    if (isNaN(Number(number))) {
		      throw new _vex.Vex.RERR('BadTimeSignature', 'Invalid time spec: ' + timeSpec + '. Must contain two valid numbers.');
		    }
		  });
		};
		
		var TimeSignature = exports.TimeSignature = function (_StaveModifier) {
		  _inherits(TimeSignature, _StaveModifier);
		
		  _createClass(TimeSignature, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'timesignatures';
		    }
		  }, {
		    key: 'glyphs',
		    get: function get() {
		      return {
		        'C': {
		          code: 'v41',
		          point: 40,
		          line: 2
		        },
		        'C|': {
		          code: 'vb6',
		          point: 40,
		          line: 2
		        }
		      };
		    }
		  }]);
		
		  function TimeSignature() {
		    var timeSpec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
		    var customPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 15;
		
		    _classCallCheck(this, TimeSignature);
		
		    var _this = _possibleConstructorReturn(this, (TimeSignature.__proto__ || Object.getPrototypeOf(TimeSignature)).call(this));
		
		    _this.setAttribute('type', 'TimeSignature');
		
		    if (timeSpec === null) return _possibleConstructorReturn(_this);
		
		    var padding = customPadding;
		
		    _this.point = 40;
		    _this.topLine = 2;
		    _this.bottomLine = 4;
		    _this.setPosition(_stavemodifier.StaveModifier.Position.BEGIN);
		    _this.setTimeSig(timeSpec);
		    _this.setWidth(_this.timeSig.glyph.getMetrics().width);
		    _this.setPadding(padding);
		    return _this;
		  }
		
		  _createClass(TimeSignature, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return TimeSignature.CATEGORY;
		    }
		  }, {
		    key: 'parseTimeSpec',
		    value: function parseTimeSpec(timeSpec) {
		      if (timeSpec === 'C' || timeSpec === 'C|') {
		        var _TimeSignature$glyphs = TimeSignature.glyphs[timeSpec],
		            line = _TimeSignature$glyphs.line,
		            code = _TimeSignature$glyphs.code,
		            point = _TimeSignature$glyphs.point;
		
		        return {
		          line: line,
		          num: false,
		          glyph: new _glyph3.Glyph(code, point)
		        };
		      }
		
		      assertIsValidFraction(timeSpec);
		
		      var _timeSpec$split$map = timeSpec.split('/').map(function (number) {
		        return number.split('');
		      }),
		          _timeSpec$split$map2 = _slicedToArray(_timeSpec$split$map, 2),
		          topDigits = _timeSpec$split$map2[0],
		          botDigits = _timeSpec$split$map2[1];
		
		      return {
		        num: true,
		        glyph: this.makeTimeSignatureGlyph(topDigits, botDigits)
		      };
		    }
		  }, {
		    key: 'makeTimeSignatureGlyph',
		    value: function makeTimeSignatureGlyph(topDigits, botDigits) {
		      var glyph = new _glyph3.Glyph('v0', this.point);
		      glyph.topGlyphs = [];
		      glyph.botGlyphs = [];
		
		      var topWidth = 0;
		      for (var i = 0; i < topDigits.length; ++i) {
		        var num = topDigits[i];
		        var topGlyph = new _glyph3.Glyph('v' + num, this.point);
		
		        glyph.topGlyphs.push(topGlyph);
		        topWidth += topGlyph.getMetrics().width;
		      }
		
		      var botWidth = 0;
		      for (var _i = 0; _i < botDigits.length; ++_i) {
		        var _num = botDigits[_i];
		        var botGlyph = new _glyph3.Glyph('v' + _num, this.point);
		
		        glyph.botGlyphs.push(botGlyph);
		        botWidth += botGlyph.getMetrics().width;
		      }
		
		      var width = topWidth > botWidth ? topWidth : botWidth;
		      var xMin = glyph.getMetrics().x_min;
		
		      glyph.getMetrics = function () {
		        return {
		          x_min: xMin,
		          x_max: xMin + width,
		          width: width
		        };
		      };
		
		      var topStartX = (width - topWidth) / 2.0;
		      var botStartX = (width - botWidth) / 2.0;
		
		      var that = this;
		      glyph.renderToStave = function renderToStave(x) {
		        var start_x = x + topStartX;
		        for (var _i2 = 0; _i2 < this.topGlyphs.length; ++_i2) {
		          var _glyph = this.topGlyphs[_i2];
		          _glyph3.Glyph.renderOutline(this.context, _glyph.metrics.outline, _glyph.scale, start_x + _glyph.x_shift, this.stave.getYForLine(that.topLine) + 1);
		          start_x += _glyph.getMetrics().width;
		        }
		
		        start_x = x + botStartX;
		        for (var _i3 = 0; _i3 < this.botGlyphs.length; ++_i3) {
		          var _glyph2 = this.botGlyphs[_i3];
		          that.placeGlyphOnLine(_glyph2, this.stave, _glyph2.line);
		          _glyph3.Glyph.renderOutline(this.context, _glyph2.metrics.outline, _glyph2.scale, start_x + _glyph2.x_shift, this.stave.getYForLine(that.bottomLine) + 1);
		          start_x += _glyph2.getMetrics().width;
		        }
		      };
		
		      return glyph;
		    }
		  }, {
		    key: 'getTimeSig',
		    value: function getTimeSig() {
		      return this.timeSig;
		    }
		  }, {
		    key: 'setTimeSig',
		    value: function setTimeSig(timeSpec) {
		      this.timeSig = this.parseTimeSpec(timeSpec);
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      if (!this.x) {
		        throw new _vex.Vex.RERR('TimeSignatureError', "Can't draw time signature without x.");
		      }
		
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('TimeSignatureError', "Can't draw time signature without stave.");
		      }
		
		      this.setRendered();
		      this.timeSig.glyph.setStave(this.stave);
		      this.timeSig.glyph.setContext(this.stave.context);
		      this.placeGlyphOnLine(this.timeSig.glyph, this.stave, this.timeSig.line);
		      this.timeSig.glyph.renderToStave(this.x);
		    }
		  }]);
	
		  return TimeSignature;
		}(_stavemodifier.StaveModifier);
	
	/***/ },
	/* 54 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Volta = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _stavemodifier = __webpack_require__(45);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Larry Kuhns 2011
		
		var Volta = exports.Volta = function (_StaveModifier) {
		  _inherits(Volta, _StaveModifier);
		
		  _createClass(Volta, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'voltas';
		    }
		  }, {
		    key: 'type',
		    get: function get() {
		      return {
		        NONE: 1,
		        BEGIN: 2,
		        MID: 3,
		        END: 4,
		        BEGIN_END: 5
		      };
		    }
		  }]);
		
		  function Volta(type, number, x, y_shift) {
		    _classCallCheck(this, Volta);
		
		    var _this = _possibleConstructorReturn(this, (Volta.__proto__ || Object.getPrototypeOf(Volta)).call(this));
		
		    _this.setAttribute('type', 'Volta');
		    _this.volta = type;
		    _this.x = x;
		    _this.y_shift = y_shift;
		    _this.number = number;
		    _this.font = {
		      family: 'sans-serif',
		      size: 9,
		      weight: 'bold'
		    };
		    return _this;
		  }
		
		  _createClass(Volta, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Volta.CATEGORY;
		    }
		  }, {
		    key: 'setShiftY',
		    value: function setShiftY(y) {
		      this.y_shift = y;return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw(stave, x) {
		      var ctx = stave.checkContext();
		      this.setRendered();
		
		      var width = stave.width;
		      var top_y = stave.getYForTopText(stave.options.num_lines) + this.y_shift;
		      var vert_height = 1.5 * stave.options.spacing_between_lines_px;
		      switch (this.volta) {
		        case Volta.type.BEGIN:
		          ctx.fillRect(this.x + x, top_y, 1, vert_height);
		          break;
		        case Volta.type.END:
		          width -= 5;
		          ctx.fillRect(this.x + x + width, top_y, 1, vert_height);
		          break;
		        case Volta.type.BEGIN_END:
		          width -= 3;
		          ctx.fillRect(this.x + x, top_y, 1, vert_height);
		          ctx.fillRect(this.x + x + width, top_y, 1, vert_height);
		          break;
		        default:
		          break;
		      }
		      // If the beginning of a volta, draw measure number
		      if (this.volta === Volta.type.BEGIN || this.volta === Volta.type.BEGIN_END) {
		        ctx.save();
		        ctx.setFont(this.font.family, this.font.size, this.font.weight);
		        ctx.fillText(this.number, this.x + x + 5, top_y + 15);
		        ctx.restore();
		      }
		
		      ctx.fillRect(this.x + x, top_y, width, 1);
		      return this;
		    }
		  }]);
	
		  return Volta;
		}(_stavemodifier.StaveModifier);
	
	/***/ },
	/* 55 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TabStave = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _stave = __webpack_require__(43);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		var TabStave = exports.TabStave = function (_Stave) {
		  _inherits(TabStave, _Stave);
		
		  function TabStave(x, y, width, options) {
		    _classCallCheck(this, TabStave);
		
		    var tab_options = {
		      spacing_between_lines_px: 13,
		      num_lines: 6,
		      top_text_position: 1
		    };
		
		    _vex.Vex.Merge(tab_options, options);
		
		    var _this = _possibleConstructorReturn(this, (TabStave.__proto__ || Object.getPrototypeOf(TabStave)).call(this, x, y, width, tab_options));
		
		    _this.setAttribute('type', 'TabStave');
		    return _this;
		  }
		
		  _createClass(TabStave, [{
		    key: 'getYForGlyphs',
		    value: function getYForGlyphs() {
		      return this.getYForLine(2.5);
		    }
		
		    // Deprecated
		
		  }, {
		    key: 'addTabGlyph',
		    value: function addTabGlyph() {
		      this.addClef('tab');
		      return this;
		    }
		  }]);
	
		  return TabStave;
		}(_stave.Stave);
	
	/***/ },
	/* 56 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TabNote = undefined;
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _modifier = __webpack_require__(25);
		
		var _stem = __webpack_require__(17);
		
		var _stemmablenote = __webpack_require__(24);
		
		var _dot = __webpack_require__(26);
		
		var _glyph2 = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// The file implements notes for Tablature notation. This consists of one or
		// more fret positions, and can either be drawn with or without stems.
		//
		// See `tests/tabnote_tests.js` for usage examples
		
		// Gets the unused strings grouped together if consecutive.
		//
		// Parameters:
		// * num_lines - The number of lines
		// * strings_used - An array of numbers representing which strings have fret positions
		function getUnusedStringGroups(num_lines, strings_used) {
		  var stem_through = [];
		  var group = [];
		  for (var string = 1; string <= num_lines; string++) {
		    var is_used = strings_used.indexOf(string) > -1;
		
		    if (!is_used) {
		      group.push(string);
		    } else {
		      stem_through.push(group);
		      group = [];
		    }
		  }
		  if (group.length > 0) stem_through.push(group);
		
		  return stem_through;
		}
		
		// Gets groups of points that outline the partial stem lines
		// between fret positions
		//
		// Parameters:
		// * stem_Y - The `y` coordinate the stem is located on
		// * unused_strings - An array of groups of unused strings
		// * stave - The stave to use for reference
		// * stem_direction - The direction of the stem
		function getPartialStemLines(stem_y, unused_strings, stave, stem_direction) {
		  var up_stem = stem_direction !== 1;
		  var down_stem = stem_direction !== -1;
		
		  var line_spacing = stave.getSpacingBetweenLines();
		  var total_lines = stave.getNumLines();
		
		  var stem_lines = [];
		
		  unused_strings.forEach(function (strings) {
		    var containsLastString = strings.indexOf(total_lines) > -1;
		    var containsFirstString = strings.indexOf(1) > -1;
		
		    if (up_stem && containsFirstString || down_stem && containsLastString) {
		      return;
		    }
		
		    // If there's only one string in the group, push a duplicate value.
		    // We do this because we need 2 strings to convert into upper/lower y
		    // values.
		    if (strings.length === 1) {
		      strings.push(strings[0]);
		    }
		
		    var line_ys = [];
		    // Iterate through each group string and store it's y position
		    strings.forEach(function (string, index, strings) {
		      var isTopBound = string === 1;
		      var isBottomBound = string === total_lines;
		
		      // Get the y value for the appropriate staff line,
		      // we adjust for a 0 index array, since string numbers are index 1
		      var y = stave.getYForLine(string - 1);
		
		      // Unless the string is the first or last, add padding to each side
		      // of the line
		      if (index === 0 && !isTopBound) {
		        y -= line_spacing / 2 - 1;
		      } else if (index === strings.length - 1 && !isBottomBound) {
		        y += line_spacing / 2 - 1;
		      }
		
		      // Store the y value
		      line_ys.push(y);
		
		      // Store a subsequent y value connecting this group to the main
		      // stem above/below the stave if it's the top/bottom string
		      if (stem_direction === 1 && isTopBound) {
		        line_ys.push(stem_y - 2);
		      } else if (stem_direction === -1 && isBottomBound) {
		        line_ys.push(stem_y + 2);
		      }
		    });
		
		    // Add the sorted y values to the
		    stem_lines.push(line_ys.sort(function (a, b) {
		      return a - b;
		    }));
		  });
		
		  return stem_lines;
		}
		
		var TabNote = exports.TabNote = function (_StemmableNote) {
		  _inherits(TabNote, _StemmableNote);
		
		  _createClass(TabNote, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'tabnotes';
		    }
		
		    // Initialize the TabNote with a `tab_struct` full of properties
		    // and whether to `draw_stem` when rendering the note
		
		  }]);
		
		  function TabNote(tab_struct, draw_stem) {
		    _classCallCheck(this, TabNote);
		
		    var _this = _possibleConstructorReturn(this, (TabNote.__proto__ || Object.getPrototypeOf(TabNote)).call(this, tab_struct));
		
		    _this.setAttribute('type', 'TabNote');
		
		    _this.ghost = false; // Renders parenthesis around notes
		    // Note properties
		    //
		    // The fret positions in the note. An array of `{ str: X, fret: X }`
		    _this.positions = tab_struct.positions;
		
		    // Render Options
		    _vex.Vex.Merge(_this.render_options, {
		      // font size for note heads and rests
		      glyph_font_scale: _tables.Flow.DEFAULT_TABLATURE_FONT_SCALE,
		      // Flag to draw a stem
		      draw_stem: draw_stem,
		      // Flag to draw dot modifiers
		      draw_dots: draw_stem,
		      // Flag to extend the main stem through the stave and fret positions
		      draw_stem_through_stave: false,
		      // vertical shift from stave line
		      y_shift: 0,
		      // normal glyph scale
		      scale: 1.0,
		      // default tablature font
		      font: '10pt Arial'
		    });
		
		    _this.glyph = _tables.Flow.durationToGlyph(_this.duration, _this.noteType);
		
		    if (!_this.glyph) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Invalid note initialization data (No glyph found): ' + JSON.stringify(tab_struct));
		    }
		
		    _this.buildStem();
		
		    if (tab_struct.stem_direction) {
		      _this.setStemDirection(tab_struct.stem_direction);
		    } else {
		      _this.setStemDirection(_stem.Stem.UP);
		    }
		
		    // Renders parenthesis around notes
		    _this.ghost = false;
		    _this.updateWidth();
		    return _this;
		  }
		
		  _createClass(TabNote, [{
		    key: 'reset',
		    value: function reset() {
		      if (this.stave) this.setStave(this.stave);
		    }
		
		    // The ModifierContext category
		
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return TabNote.CATEGORY;
		    }
		
		    // Set as ghost `TabNote`, surrounds the fret positions with parenthesis.
		    // Often used for indicating frets that are being bent to
		
		  }, {
		    key: 'setGhost',
		    value: function setGhost(ghost) {
		      this.ghost = ghost;
		      this.updateWidth();
		      return this;
		    }
		
		    // Determine if the note has a stem
		
		  }, {
		    key: 'hasStem',
		    value: function hasStem() {
		      return this.render_options.draw_stem;
		    }
		
		    // Get the default stem extension for the note
		
		  }, {
		    key: 'getStemExtension',
		    value: function getStemExtension() {
		      var glyph = this.getGlyph();
		
		      if (this.stem_extension_override != null) {
		        return this.stem_extension_override;
		      }
		
		      if (glyph) {
		        return this.getStemDirection() === 1 ? glyph.tabnote_stem_up_extension : glyph.tabnote_stem_down_extension;
		      }
		
		      return 0;
		    }
		
		    // Add a dot to the note
		
		  }, {
		    key: 'addDot',
		    value: function addDot() {
		      var dot = new _dot.Dot();
		      this.dots += 1;
		      return this.addModifier(dot, 0);
		    }
		
		    // Calculate and store the width of the note
		
		  }, {
		    key: 'updateWidth',
		    value: function updateWidth() {
		      var _this2 = this;
		
		      this.glyphs = [];
		      this.width = 0;
		      for (var i = 0; i < this.positions.length; ++i) {
		        var fret = this.positions[i].fret;
		        if (this.ghost) fret = '(' + fret + ')';
		        var glyph = _tables.Flow.tabToGlyph(fret, this.render_options.scale);
		        this.glyphs.push(glyph);
		        this.width = Math.max(glyph.getWidth(), this.width);
		      }
		      // For some reason we associate a notehead glyph with a TabNote, and this
		      // glyph is used for certain width calculations. Of course, this is totally
		      // incorrect since a notehead is a poor approximation for the dimensions of
		      // a fret number which can have multiple digits. As a result, we must
		      // overwrite getWidth() to return the correct width
		      this.glyph.getWidth = function () {
		        return _this2.width;
		      };
		    }
		
		    // Set the `stave` to the note
		
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      var _this3 = this;
		
		      _get(TabNote.prototype.__proto__ || Object.getPrototypeOf(TabNote.prototype), 'setStave', this).call(this, stave);
		      this.context = stave.context;
		
		      // Calculate the fret number width based on font used
		      var i = void 0;
		      if (this.context) {
		        var ctx = this.context;
		        this.width = 0;
		
		        var _loop = function _loop() {
		          var glyph = _this3.glyphs[i];
		          var text = '' + glyph.text;
		          if (text.toUpperCase() !== 'X') {
		            ctx.save();
		            ctx.setRawFont(_this3.render_options.font);
		            glyph.width = ctx.measureText(text).width;
		            ctx.restore();
		            glyph.getWidth = function () {
		              return glyph.width;
		            };
		          }
		          _this3.width = Math.max(glyph.getWidth(), _this3.width);
		        };
		
		        for (i = 0; i < this.glyphs.length; ++i) {
		          _loop();
		        }
		        this.glyph.getWidth = function () {
		          return _this3.width;
		        };
		      }
		
		      // we subtract 1 from `line` because getYForLine expects a 0-based index,
		      // while the position.str is a 1-based index
		      var ys = this.positions.map(function (_ref) {
		        var line = _ref.str;
		        return stave.getYForLine(line - 1);
		      });
		
		      this.setYs(ys);
		
		      if (this.stem) {
		        this.stem.setYBounds(this.getStemY(), this.getStemY());
		      }
		
		      return this;
		    }
		
		    // Get the fret positions for the note
		
		  }, {
		    key: 'getPositions',
		    value: function getPositions() {
		      return this.positions;
		    }
		
		    // Add self to the provided modifier context `mc`
		
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext(mc) {
		      this.setModifierContext(mc);
		      for (var i = 0; i < this.modifiers.length; ++i) {
		        this.modifierContext.addModifier(this.modifiers[i]);
		      }
		      this.modifierContext.addModifier(this);
		      this.preFormatted = false;
		      return this;
		    }
		
		    // Get the `x` coordinate to the right of the note
		
		  }, {
		    key: 'getTieRightX',
		    value: function getTieRightX() {
		      var tieStartX = this.getAbsoluteX();
		      var note_glyph_width = this.glyph.getWidth();
		      tieStartX += note_glyph_width / 2;
		      tieStartX += -this.width / 2 + this.width + 2;
		
		      return tieStartX;
		    }
		
		    // Get the `x` coordinate to the left of the note
		
		  }, {
		    key: 'getTieLeftX',
		    value: function getTieLeftX() {
		      var tieEndX = this.getAbsoluteX();
		      var note_glyph_width = this.glyph.getWidth();
		      tieEndX += note_glyph_width / 2;
		      tieEndX -= this.width / 2 + 2;
		
		      return tieEndX;
		    }
		
		    // Get the default `x` and `y` coordinates for a modifier at a specific
		    // `position` at a fret position `index`
		
		  }, {
		    key: 'getModifierStartXY',
		    value: function getModifierStartXY(position, index) {
		      if (!this.preFormatted) {
		        throw new _vex.Vex.RERR('UnformattedNote', "Can't call GetModifierStartXY on an unformatted note");
		      }
		
		      if (this.ys.length === 0) {
		        throw new _vex.Vex.RERR('NoYValues', 'No Y-Values calculated for this note.');
		      }
		
		      var x = 0;
		      if (position === _modifier.Modifier.Position.LEFT) {
		        x = -1 * 2; // extra_left_px
		      } else if (position === _modifier.Modifier.Position.RIGHT) {
		        x = this.width + 2; // extra_right_px
		      } else if (position === _modifier.Modifier.Position.BELOW || position === _modifier.Modifier.Position.ABOVE) {
		        var note_glyph_width = this.glyph.getWidth();
		        x = note_glyph_width / 2;
		      }
		
		      return {
		        x: this.getAbsoluteX() + x,
		        y: this.ys[index]
		      };
		    }
		
		    // Get the default line for rest
		
		  }, {
		    key: 'getLineForRest',
		    value: function getLineForRest() {
		      return this.positions[0].str;
		    }
		
		    // Pre-render formatting
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      if (this.preFormatted) return;
		      if (this.modifierContext) this.modifierContext.preFormat();
		      // width is already set during init()
		      this.setPreFormatted(true);
		    }
		
		    // Get the x position for the stem
		
		  }, {
		    key: 'getStemX',
		    value: function getStemX() {
		      return this.getCenterGlyphX();
		    }
		
		    // Get the y position for the stem
		
		  }, {
		    key: 'getStemY',
		    value: function getStemY() {
		      var num_lines = this.stave.getNumLines();
		
		      // The decimal staff line amounts provide optimal spacing between the
		      // fret number and the stem
		      var stemUpLine = -0.5;
		      var stemDownLine = num_lines - 0.5;
		      var stemStartLine = _stem.Stem.UP === this.stem_direction ? stemUpLine : stemDownLine;
		
		      return this.stave.getYForLine(stemStartLine);
		    }
		
		    // Get the stem extents for the tabnote
		
		  }, {
		    key: 'getStemExtents',
		    value: function getStemExtents() {
		      return this.stem.getExtents();
		    }
		
		    // Draw the fal onto the context
		
		  }, {
		    key: 'drawFlag',
		    value: function drawFlag() {
		      var beam = this.beam,
		          glyph = this.glyph,
		          context = this.context,
		          stem = this.stem,
		          stem_direction = this.stem_direction,
		          _render_options = this.render_options,
		          draw_stem = _render_options.draw_stem,
		          glyph_font_scale = _render_options.glyph_font_scale;
		
		
		      var shouldDrawFlag = beam == null && draw_stem;
		
		      // Now it's the flag's turn.
		      if (glyph.flag && shouldDrawFlag) {
		        var flag_x = this.getStemX() + 1;
		        var flag_y = this.getStemY() - stem.getHeight();
		
		        var flag_code = stem_direction === _stem.Stem.DOWN ? glyph.code_flag_downstem // Down stems have flags on the left.
		        : glyph.code_flag_upstem;
		
		        // Draw the Flag
		        _glyph2.Glyph.renderGlyph(context, flag_x, flag_y, glyph_font_scale, flag_code);
		      }
		    }
		
		    // Render the modifiers onto the context
		
		  }, {
		    key: 'drawModifiers',
		    value: function drawModifiers() {
		      var _this4 = this;
		
		      // Draw the modifiers
		      this.modifiers.forEach(function (modifier) {
		        // Only draw the dots if enabled
		        if (modifier.getCategory() === 'dots' && !_this4.render_options.draw_dots) return;
		
		        modifier.setContext(_this4.context);
		        modifier.draw();
		      });
		    }
		
		    // Render the stem extension through the fret positions
		
		  }, {
		    key: 'drawStemThrough',
		    value: function drawStemThrough() {
		      var stem_x = this.getStemX();
		      var stem_y = this.getStemY();
		      var ctx = this.context;
		
		      var stem_through = this.render_options.draw_stem_through_stave;
		      var draw_stem = this.render_options.draw_stem;
		      if (draw_stem && stem_through) {
		        var total_lines = this.stave.getNumLines();
		        var strings_used = this.positions.map(function (position) {
		          return position.str;
		        });
		
		        var unused_strings = getUnusedStringGroups(total_lines, strings_used);
		        var stem_lines = getPartialStemLines(stem_y, unused_strings, this.getStave(), this.getStemDirection());
		
		        ctx.save();
		        ctx.setLineWidth(_stem.Stem.WIDTH);
		        stem_lines.forEach(function (bounds) {
		          if (bounds.length === 0) return;
		
		          ctx.beginPath();
		          ctx.moveTo(stem_x, bounds[0]);
		          ctx.lineTo(stem_x, bounds[bounds.length - 1]);
		          ctx.stroke();
		          ctx.closePath();
		        });
		        ctx.restore();
		      }
		    }
		
		    // Render the fret positions onto the context
		
		  }, {
		    key: 'drawPositions',
		    value: function drawPositions() {
		      var ctx = this.context;
		      var x = this.getAbsoluteX();
		      var ys = this.ys;
		      for (var i = 0; i < this.positions.length; ++i) {
		        var y = ys[i] + this.render_options.y_shift;
		        var _glyph = this.glyphs[i];
		
		        // Center the fret text beneath the notation note head
		        var note_glyph_width = this.glyph.getWidth();
		        var tab_x = x + note_glyph_width / 2 - _glyph.getWidth() / 2;
		
		        // FIXME: Magic numbers.
		        ctx.clearRect(tab_x - 2, y - 3, _glyph.getWidth() + 4, 6);
		
		        if (_glyph.code) {
		          _glyph2.Glyph.renderGlyph(ctx, tab_x, y, this.render_options.glyph_font_scale * this.render_options.scale, _glyph.code);
		        } else {
		          ctx.save();
		          ctx.setRawFont(this.render_options.font);
		          var _text = _glyph.text.toString();
		          ctx.fillText(_text, tab_x, y + 5 * this.render_options.scale);
		          ctx.restore();
		        }
		      }
		    }
		
		    // The main rendering function for the entire note
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		
		      if (!this.stave) {
		        throw new _vex.Vex.RERR('NoStave', "Can't draw without a stave.");
		      }
		
		      if (this.ys.length === 0) {
		        throw new _vex.Vex.RERR('NoYValues', "Can't draw note without Y values.");
		      }
		
		      this.setRendered();
		      var render_stem = this.beam == null && this.render_options.draw_stem;
		
		      this.drawPositions();
		      this.drawStemThrough();
		
		      var stem_x = this.getStemX();
		
		      this.stem.setNoteHeadXBounds(stem_x, stem_x);
		
		      if (render_stem) {
		        this.context.openGroup('stem', null, { pointerBBox: true });
		        this.stem.setContext(this.context).draw();
		        this.context.closeGroup();
		      }
		
		      this.drawFlag();
		      this.drawModifiers();
		    }
		  }]);
	
		  return TabNote;
		}(_stemmablenote.StemmableNote);
	
	/***/ },
	/* 57 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.VibratoBracket = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _vibrato = __webpack_require__(42);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Balazs Forian-Szabo
		//
		// ## Description
		//
		// This file implements `VibratoBrackets`
		// that renders vibrato effect between two notes.
		
		// To enable logging for this class. Set `Vex.Flow.VibratoBracket.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (VibratoBracket.DEBUG) _vex.Vex.L('Vex.Flow.VibratoBracket', args);
		}
		
		var VibratoBracket = exports.VibratoBracket = function (_Element) {
		  _inherits(VibratoBracket, _Element);
		
		  // bracket_data = {
		  //   start: Vex.Flow.Note (optional)
		  //   stop: Vex.Flow.Note (optional)
		  // };
		  // Either the stop or start note must be set, or both of them.
		  // A null value for the start or stop note indicates that the vibrato
		  // is drawn from the beginning or until the end of the stave accordingly.
		  function VibratoBracket(bracket_data) {
		    _classCallCheck(this, VibratoBracket);
		
		    var _this = _possibleConstructorReturn(this, (VibratoBracket.__proto__ || Object.getPrototypeOf(VibratoBracket)).call(this));
		
		    _this.setAttribute('type', 'VibratoBracket');
		
		    _this.start = bracket_data.start;
		    _this.stop = bracket_data.stop;
		
		    _this.line = 1;
		
		    _this.render_options = {
		      harsh: false,
		      wave_height: 6,
		      wave_width: 4,
		      wave_girth: 2
		    };
		    return _this;
		  }
		
		  // Set line position of the vibrato bracket
		
		
		  _createClass(VibratoBracket, [{
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;return this;
		    }
		  }, {
		    key: 'setHarsh',
		    value: function setHarsh(harsh) {
		      this.render_options.harsh = harsh;return this;
		    }
		
		    // Draw the vibrato bracket on the rendering context
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var ctx = this.context;
		      this.setRendered();
		
		      var y = this.start ? this.start.getStave().getYForTopText(this.line) : this.stop.getStave().getYForTopText(this.line);
		
		      // If start note is not set then vibrato will be drawn
		      // from the beginning of the stave
		      var start_x = this.start ? this.start.getAbsoluteX() : this.stop.getStave().getTieStartX();
		
		      // If stop note is not set then vibrato will be drawn
		      // until the end of the stave
		      var stop_x = this.stop ? this.stop.getAbsoluteX() - this.stop.getWidth() - 5 : this.start.getStave().getTieEndX() - 10;
		
		      this.render_options.vibrato_width = stop_x - start_x;
		
		      L('Rendering VibratoBracket: start_x:', start_x, 'stop_x:', stop_x, 'y:', y);
		
		      _vibrato.Vibrato.renderVibrato(ctx, start_x, y, this.render_options);
		    }
		  }]);
	
		  return VibratoBracket;
		}(_element.Element);
	
	/***/ },
	/* 58 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.ClefNote = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _boundingbox = __webpack_require__(8);
		
		var _note = __webpack_require__(22);
		
		var _clef = __webpack_require__(51);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Copyright Mohit Muthanna 2010
		//
		// Author Taehoon Moon 2014
		
		/** @constructor */
		var ClefNote = exports.ClefNote = function (_Note) {
		  _inherits(ClefNote, _Note);
		
		  _createClass(ClefNote, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'clefnote';
		    }
		  }]);
		
		  function ClefNote(type, size, annotation) {
		    _classCallCheck(this, ClefNote);
		
		    var _this = _possibleConstructorReturn(this, (ClefNote.__proto__ || Object.getPrototypeOf(ClefNote)).call(this, { duration: 'b' }));
		
		    _this.setAttribute('type', 'ClefNote');
		
		    _this.setType(type, size, annotation);
		
		    // Note properties
		    _this.ignore_ticks = true;
		    return _this;
		  }
		
		  _createClass(ClefNote, [{
		    key: 'setType',
		    value: function setType(type, size, annotation) {
		      this.type = type;
		      this.clef_obj = new _clef.Clef(type, size, annotation);
		      this.clef = this.clef_obj.clef;
		      this.glyph = new _glyph.Glyph(this.clef.code, this.clef.point);
		      this.setWidth(this.glyph.getMetrics().width);
		      return this;
		    }
		  }, {
		    key: 'getClef',
		    value: function getClef() {
		      return this.clef;
		    }
		  }, {
		    key: 'setContext',
		    value: function setContext(context) {
		      this.context = context;
		      this.glyph.setContext(this.context);
		      return this;
		    }
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      return new _boundingbox.BoundingBox(0, 0, 0, 0);
		    }
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext() {
		      /* overridden to ignore */
		      return this;
		    }
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return ClefNote.CATEGORY;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      this.setPreFormatted(true);
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      if (!this.stave) throw new _vex.Vex.RERR('NoStave', "Can't draw without a stave.");
		
		      if (!this.glyph.getContext()) {
		        this.glyph.setContext(this.context);
		      }
		
		      this.setRendered();
		      var abs_x = this.getAbsoluteX();
		
		      this.glyph.setStave(this.stave);
		      this.glyph.setYShift(this.stave.getYForLine(this.clef.line) - this.stave.getYForGlyphs());
		      this.glyph.renderToStave(abs_x);
		
		      // If the Vex.Flow.Clef has an annotation, such as 8va, draw it.
		      if (this.clef_obj.annotation !== undefined) {
		        var attachment = new _glyph.Glyph(this.clef_obj.annotation.code, this.clef_obj.annotation.point);
		        if (!attachment.getContext()) {
		          attachment.setContext(this.context);
		        }
		        attachment.setStave(this.stave);
		        attachment.setYShift(this.stave.getYForLine(this.clef_obj.annotation.line) - this.stave.getYForGlyphs());
		        attachment.setXShift(this.clef_obj.annotation.x_shift);
		        attachment.renderToStave(abs_x);
		      }
		    }
		  }]);
	
		  return ClefNote;
		}(_note.Note);
	
	/***/ },
	/* 59 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TimeSigNote = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _boundingbox = __webpack_require__(8);
		
		var _note = __webpack_require__(22);
		
		var _timesignature = __webpack_require__(53);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author Taehoon Moon 2014
		
		var TimeSigNote = exports.TimeSigNote = function (_Note) {
		  _inherits(TimeSigNote, _Note);
		
		  function TimeSigNote(timeSpec, customPadding) {
		    _classCallCheck(this, TimeSigNote);
		
		    var _this = _possibleConstructorReturn(this, (TimeSigNote.__proto__ || Object.getPrototypeOf(TimeSigNote)).call(this, { duration: 'b' }));
		
		    _this.setAttribute('type', 'TimeSigNote');
		
		    var timeSignature = new _timesignature.TimeSignature(timeSpec, customPadding);
		    _this.timeSig = timeSignature.getTimeSig();
		    _this.setWidth(_this.timeSig.glyph.getMetrics().width);
		
		    // Note properties
		    _this.ignore_ticks = true;
		    return _this;
		  }
		
		  _createClass(TimeSigNote, [{
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      return new _boundingbox.BoundingBox(0, 0, 0, 0);
		    }
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext() {
		      /* overridden to ignore */
		      return this;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      this.setPreFormatted(true);
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.stave.checkContext();
		      this.setRendered();
		
		      if (!this.timeSig.glyph.getContext()) {
		        this.timeSig.glyph.setContext(this.context);
		      }
		
		      this.timeSig.glyph.setStave(this.stave);
		      this.timeSig.glyph.setYShift(this.stave.getYForLine(this.timeSig.line) - this.stave.getYForGlyphs());
		      this.timeSig.glyph.renderToStave(this.getAbsoluteX());
		    }
		  }]);
	
		  return TimeSigNote;
		}(_note.Note);
	
	/***/ },
	/* 60 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TabSlide = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tabtie = __webpack_require__(34);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class implements varies types of ties between contiguous notes. The
		// ties include: regular ties, hammer ons, pull offs, and slides.
		
		var TabSlide = exports.TabSlide = function (_TabTie) {
		  _inherits(TabSlide, _TabTie);
		
		  _createClass(TabSlide, null, [{
		    key: 'createSlideUp',
		    value: function createSlideUp(notes) {
		      return new TabSlide(notes, TabSlide.SLIDE_UP);
		    }
		  }, {
		    key: 'createSlideDown',
		    value: function createSlideDown(notes) {
		      return new TabSlide(notes, TabSlide.SLIDE_DOWN);
		    }
		  }, {
		    key: 'SLIDE_UP',
		    get: function get() {
		      return 1;
		    }
		  }, {
		    key: 'SLIDE_DOWN',
		    get: function get() {
		      return -1;
		    }
		  }]);
		
		  function TabSlide(notes, direction) {
		    _classCallCheck(this, TabSlide);
		
		    var _this = _possibleConstructorReturn(this, (TabSlide.__proto__ || Object.getPrototypeOf(TabSlide)).call(this, notes, 'sl.'));
		    /**
		     * Notes is a struct that has:
		     *
		     *  {
		     *    first_note: Note,
		     *    last_note: Note,
		     *    first_indices: [n1, n2, n3],
		     *    last_indices: [n1, n2, n3]
		     *  }
		     *
		     **/
		
		
		    _this.setAttribute('type', 'TabSlide');
		
		    if (!direction) {
		      var first_fret = notes.first_note.getPositions()[0].fret;
		      var last_fret = notes.last_note.getPositions()[0].fret;
		
		      direction = parseInt(first_fret, 10) > parseInt(last_fret, 10) ? TabSlide.SLIDE_DOWN : TabSlide.SLIDE_UP;
		    }
		
		    _this.slide_direction = direction;
		    _this.render_options.cp1 = 11;
		    _this.render_options.cp2 = 14;
		    _this.render_options.y_shift = 0.5;
		
		    _this.setFont({ font: 'Times', size: 10, style: 'bold italic' });
		    _this.setNotes(notes);
		    return _this;
		  }
		
		  _createClass(TabSlide, [{
		    key: 'renderTie',
		    value: function renderTie(params) {
		      if (params.first_ys.length === 0 || params.last_ys.length === 0) {
		        throw new _vex.Vex.RERR('BadArguments', 'No Y-values to render');
		      }
		
		      var ctx = this.context;
		      var first_x_px = params.first_x_px;
		      var first_ys = params.first_ys;
		      var last_x_px = params.last_x_px;
		
		      var direction = this.slide_direction;
		      if (direction !== TabSlide.SLIDE_UP && direction !== TabSlide.SLIDE_DOWN) {
		        throw new _vex.Vex.RERR('BadSlide', 'Invalid slide direction');
		      }
		
		      for (var i = 0; i < this.first_indices.length; ++i) {
		        var slide_y = first_ys[this.first_indices[i]] + this.render_options.y_shift;
		
		        if (isNaN(slide_y)) {
		          throw new _vex.Vex.RERR('BadArguments', 'Bad indices for slide rendering.');
		        }
		
		        ctx.beginPath();
		        ctx.moveTo(first_x_px, slide_y + 3 * direction);
		        ctx.lineTo(last_x_px, slide_y - 3 * direction);
		        ctx.closePath();
		        ctx.stroke();
		      }
		
		      this.setRendered();
		    }
		  }]);
	
		  return TabSlide;
		}(_tabtie.TabTie);
	
	/***/ },
	/* 61 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.GraceNote = undefined;
		
		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _stavenote = __webpack_require__(20);
		
		var _tables = __webpack_require__(2);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		
		var GraceNote = exports.GraceNote = function (_StaveNote) {
		  _inherits(GraceNote, _StaveNote);
		
		  _createClass(GraceNote, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'gracenotes';
		    }
		  }, {
		    key: 'LEDGER_LINE_OFFSET',
		    get: function get() {
		      return 2;
		    }
		  }, {
		    key: 'SCALE',
		    get: function get() {
		      return 0.66;
		    }
		  }]);
		
		  function GraceNote(note_struct) {
		    _classCallCheck(this, GraceNote);
		
		    var _this = _possibleConstructorReturn(this, (GraceNote.__proto__ || Object.getPrototypeOf(GraceNote)).call(this, _extends(note_struct, {
		      glyph_font_scale: _tables.Flow.DEFAULT_NOTATION_FONT_SCALE * GraceNote.SCALE,
		      stroke_px: GraceNote.LEDGER_LINE_OFFSET
		    })));
		
		    _this.setAttribute('type', 'GraceNote');
		
		    _this.slash = note_struct.slash;
		    _this.slur = true;
		
		    _this.buildNoteHeads();
		
		    _this.width = 3;
		    return _this;
		  }
		
		  _createClass(GraceNote, [{
		    key: 'getStemExtension',
		    value: function getStemExtension() {
		      var glyph = this.getGlyph();
		
		      if (this.stem_extension_override != null) {
		        return this.stem_extension_override;
		      }
		
		      if (glyph) {
		        return this.getStemDirection() === 1 ? glyph.gracenote_stem_up_extension : glyph.gracenote_stem_down_extension;
		      }
		
		      return 0;
		    }
		  }, {
		    key: 'getCategory',
		    value: function getCategory() {
		      return GraceNote.CATEGORY;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      _get(GraceNote.prototype.__proto__ || Object.getPrototypeOf(GraceNote.prototype), 'draw', this).call(this);
		      this.setRendered();
		      var ctx = this.context;
		      var stem_direction = this.getStemDirection();
		
		      if (this.slash) {
		        ctx.beginPath();
		
		        var x = this.getAbsoluteX();
		        var y = this.getYs()[0] - this.stem.getHeight() / 2.8;
		        if (stem_direction === 1) {
		          x += 1;
		          ctx.moveTo(x, y);
		          ctx.lineTo(x + 13, y - 9);
		        } else if (stem_direction === -1) {
		          x -= 4;
		          y += 1;
		          ctx.moveTo(x, y);
		          ctx.lineTo(x + 13, y + 9);
		        }
		
		        ctx.closePath();
		        ctx.stroke();
		      }
		    }
		  }]);
	
		  return GraceNote;
		}(_stavenote.StaveNote);
	
	/***/ },
	/* 62 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.GraceTabNote = undefined;
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tabnote = __webpack_require__(56);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// @author Balazs Forian-Szabo
		//
		// ## Description
		//
		// A basic implementation of grace notes
		// to be rendered on a tab stave.
		//
		// See `tests/gracetabnote_tests.js` for usage examples.
		
		var GraceTabNote = exports.GraceTabNote = function (_TabNote) {
		  _inherits(GraceTabNote, _TabNote);
		
		  _createClass(GraceTabNote, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'gracetabnotes';
		    }
		  }]);
		
		  function GraceTabNote(note_struct) {
		    _classCallCheck(this, GraceTabNote);
		
		    var _this = _possibleConstructorReturn(this, (GraceTabNote.__proto__ || Object.getPrototypeOf(GraceTabNote)).call(this, note_struct, false));
		
		    _this.setAttribute('type', 'GraceTabNote');
		
		    _vex.Vex.Merge(_this.render_options, {
		      // vertical shift from stave line
		      y_shift: 0.3,
		      // grace glyph scale
		      scale: 0.6,
		      // grace tablature font
		      font: '7.5pt Arial'
		    });
		
		    _this.updateWidth();
		    return _this;
		  }
		
		  _createClass(GraceTabNote, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return GraceTabNote.CATEGORY;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      _get(GraceTabNote.prototype.__proto__ || Object.getPrototypeOf(GraceTabNote.prototype), 'draw', this).call(this);
		      this.setRendered();
		    }
		  }]);
	
		  return GraceTabNote;
		}(_tabnote.TabNote);
	
	/***/ },
	/* 63 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Tuning = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class implements varies types of tunings for tablature.
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var Tuning = exports.Tuning = function () {
		  _createClass(Tuning, null, [{
		    key: 'names',
		    get: function get() {
		      return {
		        'standard': 'E/5,B/4,G/4,D/4,A/3,E/3',
		        'dagdad': 'D/5,A/4,G/4,D/4,A/3,D/3',
		        'dropd': 'E/5,B/4,G/4,D/4,A/3,D/3',
		        'eb': 'Eb/5,Bb/4,Gb/4,Db/4,Ab/3,Db/3',
		        'standardBanjo': 'D/5,B/4,G/4,D/4,G/5'
		      };
		    }
		  }]);
		
		  function Tuning() {
		    var tuningString = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'E/5,B/4,G/4,D/4,A/3,E/3,B/2,E/2';
		
		    _classCallCheck(this, Tuning);
		
		    // Default to standard tuning.
		    this.setTuning(tuningString);
		  }
		
		  _createClass(Tuning, [{
		    key: 'noteToInteger',
		    value: function noteToInteger(noteString) {
		      return _tables.Flow.keyProperties(noteString).int_value;
		    }
		  }, {
		    key: 'setTuning',
		    value: function setTuning(noteString) {
		      if (Tuning.names[noteString]) {
		        noteString = Tuning.names[noteString];
		      }
		
		      this.tuningString = noteString;
		      this.tuningValues = [];
		      this.numStrings = 0;
		
		      var keys = noteString.split(/\s*,\s*/);
		      if (keys.length === 0) {
		        throw new _vex.Vex.RERR('BadArguments', 'Invalid tuning string: ' + noteString);
		      }
		
		      this.numStrings = keys.length;
		      for (var i = 0; i < this.numStrings; ++i) {
		        this.tuningValues[i] = this.noteToInteger(keys[i]);
		      }
		    }
		  }, {
		    key: 'getValueForString',
		    value: function getValueForString(stringNum) {
		      var s = parseInt(stringNum, 10);
		      if (s < 1 || s > this.numStrings) {
		        throw new _vex.Vex.RERR('BadArguments', 'String number must be between 1 and ' + this.numStrings + ':' + stringNum);
		      }
		
		      return this.tuningValues[s - 1];
		    }
		  }, {
		    key: 'getValueForFret',
		    value: function getValueForFret(fretNum, stringNum) {
		      var stringValue = this.getValueForString(stringNum);
		      var f = parseInt(fretNum, 10);
		
		      if (f < 0) {
		        throw new _vex.Vex.RERR('BadArguments', 'Fret number must be 0 or higher: ' + fretNum);
		      }
		
		      return stringValue + f;
		    }
		  }, {
		    key: 'getNoteForFret',
		    value: function getNoteForFret(fretNum, stringNum) {
		      var noteValue = this.getValueForFret(fretNum, stringNum);
		
		      var octave = Math.floor(noteValue / 12);
		      var value = noteValue % 12;
		
		      return _tables.Flow.integerToNote(value) + '/' + octave;
		    }
		  }]);
	
		  return Tuning;
		}();
	
	/***/ },
	/* 64 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.KeyManager = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This class implements diatonic key management.
		
		var _vex = __webpack_require__(1);
		
		var _music = __webpack_require__(30);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		var KeyManager = exports.KeyManager = function () {
		  function KeyManager(key) {
		    _classCallCheck(this, KeyManager);
		
		    this.music = new _music.Music();
		    this.setKey(key);
		  }
		
		  _createClass(KeyManager, [{
		    key: 'setKey',
		    value: function setKey(key) {
		      this.key = key;
		      this.reset();
		      return this;
		    }
		  }, {
		    key: 'getKey',
		    value: function getKey() {
		      return this.key;
		    }
		  }, {
		    key: 'reset',
		    value: function reset() {
		      this.keyParts = this.music.getKeyParts(this.key);
		
		      this.keyString = this.keyParts.root;
		      if (this.keyParts.accidental) this.keyString += this.keyParts.accidental;
		
		      var is_supported_type = _music.Music.scaleTypes[this.keyParts.type];
		      if (!is_supported_type) {
		        throw new _vex.Vex.RERR('BadArguments', 'Unsupported key type: ' + this.key);
		      }
		
		      this.scale = this.music.getScaleTones(this.music.getNoteValue(this.keyString), _music.Music.scaleTypes[this.keyParts.type]);
		
		      this.scaleMap = {};
		      this.scaleMapByValue = {};
		      this.originalScaleMapByValue = {};
		
		      var noteLocation = _music.Music.root_indices[this.keyParts.root];
		
		      for (var i = 0; i < _music.Music.roots.length; ++i) {
		        var index = (noteLocation + i) % _music.Music.roots.length;
		        var rootName = _music.Music.roots[index];
		
		        var noteName = this.music.getRelativeNoteName(rootName, this.scale[i]);
		        this.scaleMap[rootName] = noteName;
		        this.scaleMapByValue[this.scale[i]] = noteName;
		        this.originalScaleMapByValue[this.scale[i]] = noteName;
		      }
		
		      return this;
		    }
		  }, {
		    key: 'getAccidental',
		    value: function getAccidental(key) {
		      var root = this.music.getKeyParts(key).root;
		      var parts = this.music.getNoteParts(this.scaleMap[root]);
		
		      return {
		        note: this.scaleMap[root],
		        accidental: parts.accidental
		      };
		    }
		  }, {
		    key: 'selectNote',
		    value: function selectNote(note) {
		      note = note.toLowerCase();
		      var parts = this.music.getNoteParts(note);
		
		      // First look for matching note in our altered scale
		      var scaleNote = this.scaleMap[parts.root];
		      var modparts = this.music.getNoteParts(scaleNote);
		
		      if (scaleNote === note) {
		        return {
		          'note': scaleNote,
		          'accidental': parts.accidental,
		          'change': false
		        };
		      }
		
		      // Then search for a note of equivalent value in our altered scale
		      var valueNote = this.scaleMapByValue[this.music.getNoteValue(note)];
		      if (valueNote != null) {
		        return {
		          'note': valueNote,
		          'accidental': this.music.getNoteParts(valueNote).accidental,
		          'change': false
		        };
		      }
		
		      // Then search for a note of equivalent value in the original scale
		      var originalValueNote = this.originalScaleMapByValue[this.music.getNoteValue(note)];
		      if (originalValueNote != null) {
		        this.scaleMap[modparts.root] = originalValueNote;
		        delete this.scaleMapByValue[this.music.getNoteValue(scaleNote)];
		        this.scaleMapByValue[this.music.getNoteValue(note)] = originalValueNote;
		        return {
		          'note': originalValueNote,
		          'accidental': this.music.getNoteParts(originalValueNote).accidental,
		          'change': true
		        };
		      }
		
		      // Then try to unmodify a currently modified note.
		      if (modparts.root === note) {
		        delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];
		        this.scaleMapByValue[this.music.getNoteValue(modparts.root)] = modparts.root;
		        this.scaleMap[modparts.root] = modparts.root;
		        return {
		          'note': modparts.root,
		          'accidental': null,
		          'change': true
		        };
		      }
		
		      // Last resort -- shitshoot
		      delete this.scaleMapByValue[this.music.getNoteValue(this.scaleMap[parts.root])];
		      this.scaleMapByValue[this.music.getNoteValue(note)] = note;
		
		      delete this.scaleMap[modparts.root];
		      this.scaleMap[modparts.root] = note;
		
		      return {
		        note: note,
		        'accidental': parts.accidental,
		        'change': true
		      };
		    }
		  }]);
	
		  return KeyManager;
		}();
	
	/***/ },
	/* 65 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveHairpin = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _modifier = __webpack_require__(25);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This class by Raffaele Viglianti, 2012 http://itisnotsound.wordpress.com/
		//
		// This class implements hairpins between notes.
		// Hairpins can be either Crescendo or Descrescendo.
		
		var StaveHairpin = exports.StaveHairpin = function (_Element) {
		  _inherits(StaveHairpin, _Element);
		
		  _createClass(StaveHairpin, null, [{
		    key: 'FormatByTicksAndDraw',
		
		
		    /* Helper function to convert ticks into pixels.
		     * Requires a Formatter with voices joined and formatted (to
		     * get pixels per tick)
		     *
		     * options is struct that has:
		     *
		     *  {
		     *   height: px,
		     *   y_shift: px, //vertical offset
		     *   left_shift_ticks: 0, //left horizontal offset expressed in ticks
		     *   right_shift_ticks: 0 // right horizontal offset expressed in ticks
		     *  }
		     *
		     **/
		    value: function FormatByTicksAndDraw(ctx, formatter, notes, type, position, options) {
		      var ppt = formatter.pixelsPerTick;
		
		      if (ppt == null) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'A valid Formatter must be provide to draw offsets by ticks.');
		      }
		
		      var l_shift_px = ppt * options.left_shift_ticks;
		      var r_shift_px = ppt * options.right_shift_ticks;
		
		      var hairpin_options = {
		        height: options.height,
		        y_shift: options.y_shift,
		        left_shift_px: l_shift_px,
		        right_shift_px: r_shift_px };
		
		      new StaveHairpin({
		        first_note: notes.first_note,
		        last_note: notes.last_note
		      }, type).setContext(ctx).setRenderOptions(hairpin_options).setPosition(position).draw();
		    }
		
		    /**
		     * Create a new hairpin from the specified notes.
		     *
		     * @constructor
		     * @param {!Object} notes The notes to tie up.
		     * @param {!Object} type The type of hairpin
		     */
		
		  }, {
		    key: 'type',
		    get: function get() {
		      return {
		        CRESC: 1,
		        DECRESC: 2
		      };
		    }
		  }]);
		
		  function StaveHairpin(notes, type) {
		    _classCallCheck(this, StaveHairpin);
		
		    var _this = _possibleConstructorReturn(this, (StaveHairpin.__proto__ || Object.getPrototypeOf(StaveHairpin)).call(this));
		    /**
		     * Notes is a struct that has:
		     *
		     *  {
		     *    first_note: Note,
		     *    last_note: Note,
		     *  }
		     *
		     **/
		
		
		    _this.setAttribute('type', 'StaveHairpin');
		    _this.notes = notes;
		    _this.hairpin = type;
		    _this.position = _modifier.Modifier.Position.BELOW;
		
		    _this.render_options = {
		      height: 10,
		      y_shift: 0, // vertical offset
		      left_shift_px: 0, // left horizontal offset
		      right_shift_px: 0 };
		
		    _this.setNotes(notes);
		    return _this;
		  }
		
		  _createClass(StaveHairpin, [{
		    key: 'setPosition',
		    value: function setPosition(position) {
		      if (position === _modifier.Modifier.Position.ABOVE || position === _modifier.Modifier.Position.BELOW) {
		        this.position = position;
		      }
		      return this;
		    }
		  }, {
		    key: 'setRenderOptions',
		    value: function setRenderOptions(options) {
		      if (options.height != null && options.y_shift != null && options.left_shift_px != null && options.right_shift_px != null) {
		        this.render_options = options;
		      }
		      return this;
		    }
		
		    /**
		     * Set the notes to attach this hairpin to.
		     *
		     * @param {!Object} notes The start and end notes.
		     */
		
		  }, {
		    key: 'setNotes',
		    value: function setNotes(notes) {
		      if (!notes.first_note && !notes.last_note) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'Hairpin needs to have either first_note or last_note set.');
		      }
		
		      // Success. Lets grab 'em notes.
		      this.first_note = notes.first_note;
		      this.last_note = notes.last_note;
		      return this;
		    }
		  }, {
		    key: 'renderHairpin',
		    value: function renderHairpin(params) {
		      var ctx = this.checkContext();
		      var dis = this.render_options.y_shift + 20;
		      var y_shift = params.first_y;
		
		      if (this.position === _modifier.Modifier.Position.ABOVE) {
		        dis = -dis + 30;
		        y_shift = params.first_y - params.staff_height;
		      }
		
		      var l_shift = this.render_options.left_shift_px;
		      var r_shift = this.render_options.right_shift_px;
		
		      ctx.beginPath();
		
		      switch (this.hairpin) {
		        case StaveHairpin.type.CRESC:
		          ctx.moveTo(params.last_x + r_shift, y_shift + dis);
		          ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height / 2 + dis);
		          ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height + dis);
		          break;
		        case StaveHairpin.type.DECRESC:
		          ctx.moveTo(params.first_x + l_shift, y_shift + dis);
		          ctx.lineTo(params.last_x + r_shift, y_shift + this.render_options.height / 2 + dis);
		          ctx.lineTo(params.first_x + l_shift, y_shift + this.render_options.height + dis);
		          break;
		        default:
		          // Default is NONE, so nothing to draw
		          break;
		      }
		
		      ctx.stroke();
		      ctx.closePath();
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      var firstNote = this.first_note;
		      var lastNote = this.last_note;
		
		      var start = firstNote.getModifierStartXY(this.position, 0);
		      var end = lastNote.getModifierStartXY(this.position, 0);
		
		      this.renderHairpin({
		        first_x: start.x,
		        last_x: end.x,
		        first_y: firstNote.getStave().y + firstNote.getStave().height,
		        last_y: lastNote.getStave().y + lastNote.getStave().height,
		        staff_height: firstNote.getStave().height
		      });
		      return true;
		    }
		  }]);
	
		  return StaveHairpin;
		}(_element.Element);
	
	/***/ },
	/* 66 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Curve = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // VexFlow - Music Engraving for HTML5
		// Copyright Mohit Muthanna 2010
		//
		// This class implements curves (for slurs)
		
		var Curve = exports.Curve = function (_Element) {
		  _inherits(Curve, _Element);
		
		  _createClass(Curve, null, [{
		    key: 'Position',
		    get: function get() {
		      return {
		        NEAR_HEAD: 1,
		        NEAR_TOP: 2
		      };
		    }
		  }, {
		    key: 'PositionString',
		    get: function get() {
		      return {
		        nearHead: Curve.Position.NEAR_HEAD,
		        nearTop: Curve.Position.NEAR_TOP
		      };
		    }
		
		    // from: Start note
		    // to: End note
		    // options:
		    //    cps: List of control points
		    //    x_shift: pixels to shift
		    //    y_shift: pixels to shift
		
		  }]);
		
		  function Curve(from, to, options) {
		    _classCallCheck(this, Curve);
		
		    var _this = _possibleConstructorReturn(this, (Curve.__proto__ || Object.getPrototypeOf(Curve)).call(this));
		
		    _this.setAttribute('type', 'Curve');
		
		    _this.render_options = {
		      spacing: 2,
		      thickness: 2,
		      x_shift: 0,
		      y_shift: 10,
		      position: Curve.Position.NEAR_HEAD,
		      position_end: Curve.Position.NEAR_HEAD,
		      invert: false,
		      cps: [{ x: 0, y: 10 }, { x: 0, y: 10 }]
		    };
		
		    _vex.Vex.Merge(_this.render_options, options);
		    _this.setNotes(from, to);
		    return _this;
		  }
		
		  _createClass(Curve, [{
		    key: 'setNotes',
		    value: function setNotes(from, to) {
		      if (!from && !to) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'Curve needs to have either first_note or last_note set.');
		      }
		
		      this.from = from;
		      this.to = to;
		      return this;
		    }
		
		    /**
		     * @return {boolean} Returns true if this is a partial bar.
		     */
		
		  }, {
		    key: 'isPartial',
		    value: function isPartial() {
		      return !this.from || !this.to;
		    }
		  }, {
		    key: 'renderCurve',
		    value: function renderCurve(params) {
		      var ctx = this.context;
		      var cps = this.render_options.cps;
		
		      var x_shift = this.render_options.x_shift;
		      var y_shift = this.render_options.y_shift * params.direction;
		
		      var first_x = params.first_x + x_shift;
		      var first_y = params.first_y + y_shift;
		      var last_x = params.last_x - x_shift;
		      var last_y = params.last_y + y_shift;
		      var thickness = this.render_options.thickness;
		
		      var cp_spacing = (last_x - first_x) / (cps.length + 2);
		
		      ctx.beginPath();
		      ctx.moveTo(first_x, first_y);
		      ctx.bezierCurveTo(first_x + cp_spacing + cps[0].x, first_y + cps[0].y * params.direction, last_x - cp_spacing + cps[1].x, last_y + cps[1].y * params.direction, last_x, last_y);
		      ctx.bezierCurveTo(last_x - cp_spacing + cps[1].x, last_y + (cps[1].y + thickness) * params.direction, first_x + cp_spacing + cps[0].x, first_y + (cps[0].y + thickness) * params.direction, first_x, first_y);
		      ctx.stroke();
		      ctx.closePath();
		      ctx.fill();
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      var first_note = this.from;
		      var last_note = this.to;
		      var first_x = void 0;
		      var last_x = void 0;
		      var first_y = void 0;
		      var last_y = void 0;
		      var stem_direction = void 0;
		
		      var metric = 'baseY';
		      var end_metric = 'baseY';
		
		      function getPosition(position) {
		        return typeof position === 'string' ? Curve.PositionString[position] : position;
		      }
		      var position = getPosition(this.render_options.position);
		      var position_end = getPosition(this.render_options.position_end);
		
		      if (position === Curve.Position.NEAR_TOP) {
		        metric = 'topY';
		        end_metric = 'topY';
		      }
		
		      if (position_end === Curve.Position.NEAR_HEAD) {
		        end_metric = 'baseY';
		      } else if (position_end === Curve.Position.NEAR_TOP) {
		        end_metric = 'topY';
		      }
		
		      if (first_note) {
		        first_x = first_note.getTieRightX();
		        stem_direction = first_note.getStemDirection();
		        first_y = first_note.getStemExtents()[metric];
		      } else {
		        first_x = last_note.getStave().getTieStartX();
		        first_y = last_note.getStemExtents()[metric];
		      }
		
		      if (last_note) {
		        last_x = last_note.getTieLeftX();
		        stem_direction = last_note.getStemDirection();
		        last_y = last_note.getStemExtents()[end_metric];
		      } else {
		        last_x = first_note.getStave().getTieEndX();
		        last_y = first_note.getStemExtents()[end_metric];
		      }
		
		      this.renderCurve({
		        first_x: first_x,
		        last_x: last_x,
		        first_y: first_y,
		        last_y: last_y,
		        direction: stem_direction * (this.render_options.invert === true ? -1 : 1)
		      });
		      return true;
		    }
		  }]);
	
		  return Curve;
		}(_element.Element);
	
	/***/ },
	/* 67 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TextDynamics = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _note = __webpack_require__(22);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		// This file implements the `TextDynamics` which renders traditional
		// text dynamics markings, **ie: p, f, sfz, rfz, ppp**
		//
		// You can render any dynamics string that contains a combination of
		// the following letters:  P, M, F, Z, R, S
		
		// To enable logging for this class. Set `Vex.Flow.TextDynamics.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (TextDynamics.DEBUG) _vex.Vex.L('Vex.Flow.TextDynamics', args);
		}
		
		var TextDynamics = exports.TextDynamics = function (_Note) {
		  _inherits(TextDynamics, _Note);
		
		  _createClass(TextDynamics, null, [{
		    key: 'GLYPHS',
		
		    // The glyph data for each dynamics letter
		    get: function get() {
		      return {
		        'f': {
		          code: 'vba',
		          width: 12
		        },
		        'p': {
		          code: 'vbf',
		          width: 14
		        },
		        'm': {
		          code: 'v62',
		          width: 17
		        },
		        's': {
		          code: 'v4a',
		          width: 10
		        },
		        'z': {
		          code: 'v80',
		          width: 12
		        },
		        'r': {
		          code: 'vb1',
		          width: 12
		        }
		      };
		    }
		
		    // A `TextDynamics` object inherits from `Note` so that it can be formatted
		    // within a `Voice`.
		    // Create the dynamics marking. `text_struct` is an object
		    // that contains a `duration` property and a `sequence` of
		    // letters that represents the letters to render
		
		  }]);
		
		  function TextDynamics(text_struct) {
		    _classCallCheck(this, TextDynamics);
		
		    var _this = _possibleConstructorReturn(this, (TextDynamics.__proto__ || Object.getPrototypeOf(TextDynamics)).call(this, text_struct));
		
		    _this.setAttribute('type', 'TextDynamics');
		
		    _this.sequence = text_struct.text.toLowerCase();
		    _this.line = text_struct.line || 0;
		    _this.glyphs = [];
		
		    _vex.Vex.Merge(_this.render_options, {
		      glyph_font_size: 40
		    });
		
		    L('New Dynamics Text: ', _this.sequence);
		    return _this;
		  }
		
		  // Set the Stave line on which the note should be placed
		
		
		  _createClass(TextDynamics, [{
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;
		      return this;
		    }
		
		    // Preformat the dynamics text
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      var _this2 = this;
		
		      var total_width = 0;
		      // Iterate through each letter
		      this.sequence.split('').forEach(function (letter) {
		        // Get the glyph data for the letter
		        var glyph_data = TextDynamics.GLYPHS[letter];
		        if (!glyph_data) throw new _vex.Vex.RERR('Invalid dynamics character: ' + letter);
		
		        var size = _this2.render_options.glyph_font_size;
		        var glyph = new _glyph.Glyph(glyph_data.code, size);
		
		        // Add the glyph
		        _this2.glyphs.push(glyph);
		
		        total_width += glyph_data.width;
		      });
		
		      // Store the width of the text
		      this.setWidth(total_width);
		      this.preFormatted = true;
		      return this;
		    }
		
		    // Draw the dynamics text on the rendering context
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _this3 = this;
		
		      this.setRendered();
		      var x = this.getAbsoluteX();
		      var y = this.stave.getYForLine(this.line + -3);
		
		      L('Rendering Dynamics: ', this.sequence);
		
		      var letter_x = x;
		      this.glyphs.forEach(function (glyph, index) {
		        var current_letter = _this3.sequence[index];
		        glyph.render(_this3.context, letter_x, y);
		        letter_x += TextDynamics.GLYPHS[current_letter].width;
		      });
		    }
		  }]);
	
		  return TextDynamics;
		}(_note.Note);
	
	/***/ },
	/* 68 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.StaveLine = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _tables = __webpack_require__(2);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements `StaveLine` which are simply lines that connect
		// two notes. This object is highly configurable, see the `render_options`.
		// A simple line is often used for notating glissando articulations, but you
		// can format a `StaveLine` with arrows or colors for more pedagogical
		// purposes, such as diagrams.
		
		
		// Attribution: Arrow rendering implementations based off of
		// Patrick Horgan's article, "Drawing lines and arcs with
		// arrow heads on  HTML5 Canvas"
		//
		// Draw an arrow head that connects between 3 coordinates
		function drawArrowHead(ctx, x0, y0, x1, y1, x2, y2) {
		  // all cases do this.
		  ctx.beginPath();
		  ctx.moveTo(x0, y0);
		  ctx.lineTo(x1, y1);
		  ctx.lineTo(x2, y2);
		  ctx.lineTo(x0, y0);
		  ctx.closePath();
		
		  ctx.fill();
		}
		
		// Helper function to draw a line with arrow heads
		function drawArrowLine(ctx, point1, point2, config) {
		  var both_arrows = config.draw_start_arrow && config.draw_end_arrow;
		
		  var x1 = point1.x;
		  var y1 = point1.y;
		  var x2 = point2.x;
		  var y2 = point2.y;
		
		  // For ends with arrow we actually want to stop before we get to the arrow
		  // so that wide lines won't put a flat end on the arrow.
		  var distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
		  var ratio = (distance - config.arrowhead_length / 3) / distance;
		  var end_x = void 0;
		  var end_y = void 0;
		  var start_x = void 0;
		  var start_y = void 0;
		  if (config.draw_end_arrow || both_arrows) {
		    end_x = Math.round(x1 + (x2 - x1) * ratio);
		    end_y = Math.round(y1 + (y2 - y1) * ratio);
		  } else {
		    end_x = x2;
		    end_y = y2;
		  }
		
		  if (config.draw_start_arrow || both_arrows) {
		    start_x = x1 + (x2 - x1) * (1 - ratio);
		    start_y = y1 + (y2 - y1) * (1 - ratio);
		  } else {
		    start_x = x1;
		    start_y = y1;
		  }
		
		  if (config.color) {
		    ctx.setStrokeStyle(config.color);
		    ctx.setFillStyle(config.color);
		  }
		
		  // Draw the shaft of the arrow
		  ctx.beginPath();
		  ctx.moveTo(start_x, start_y);
		  ctx.lineTo(end_x, end_y);
		  ctx.stroke();
		  ctx.closePath();
		
		  // calculate the angle of the line
		  var line_angle = Math.atan2(y2 - y1, x2 - x1);
		  // h is the line length of a side of the arrow head
		  var h = Math.abs(config.arrowhead_length / Math.cos(config.arrowhead_angle));
		
		  var angle1 = void 0;
		  var angle2 = void 0;
		  var top_x = void 0;
		  var top_y = void 0;
		  var bottom_x = void 0;
		  var bottom_y = void 0;
		
		  if (config.draw_end_arrow || both_arrows) {
		    angle1 = line_angle + Math.PI + config.arrowhead_angle;
		    top_x = x2 + Math.cos(angle1) * h;
		    top_y = y2 + Math.sin(angle1) * h;
		
		    angle2 = line_angle + Math.PI - config.arrowhead_angle;
		    bottom_x = x2 + Math.cos(angle2) * h;
		    bottom_y = y2 + Math.sin(angle2) * h;
		
		    drawArrowHead(ctx, top_x, top_y, x2, y2, bottom_x, bottom_y);
		  }
		
		  if (config.draw_start_arrow || both_arrows) {
		    angle1 = line_angle + config.arrowhead_angle;
		    top_x = x1 + Math.cos(angle1) * h;
		    top_y = y1 + Math.sin(angle1) * h;
		
		    angle2 = line_angle - config.arrowhead_angle;
		    bottom_x = x1 + Math.cos(angle2) * h;
		    bottom_y = y1 + Math.sin(angle2) * h;
		
		    drawArrowHead(ctx, top_x, top_y, x1, y1, bottom_x, bottom_y);
		  }
		}
		
		var StaveLine = exports.StaveLine = function (_Element) {
		  _inherits(StaveLine, _Element);
		
		  _createClass(StaveLine, null, [{
		    key: 'TextVerticalPosition',
		
		    // Text Positioning
		    get: function get() {
		      return {
		        TOP: 1,
		        BOTTOM: 2
		      };
		    }
		  }, {
		    key: 'TextJustification',
		    get: function get() {
		      return {
		        LEFT: 1,
		        CENTER: 2,
		        RIGHT: 3
		      };
		    }
		
		    // Initialize the StaveLine with the given `notes`.
		    //
		    // `notes` is a struct that has:
		    //
		    //  ```
		    //  {
		    //    first_note: Note,
		    //    last_note: Note,
		    //    first_indices: [n1, n2, n3],
		    //    last_indices: [n1, n2, n3]
		    //  }
		    //  ```
		
		  }]);
		
		  function StaveLine(notes) {
		    _classCallCheck(this, StaveLine);
		
		    var _this = _possibleConstructorReturn(this, (StaveLine.__proto__ || Object.getPrototypeOf(StaveLine)).call(this));
		
		    _this.setAttribute('type', 'StaveLine');
		
		    _this.notes = notes;
		
		    _this.text = '';
		
		    _this.font = {
		      family: 'Arial',
		      size: 10,
		      weight: ''
		    };
		
		    _this.render_options = {
		      // Space to add to the left or the right
		      padding_left: 4,
		      padding_right: 3,
		
		      // The width of the line in pixels
		      line_width: 1,
		      // An array of line/space lengths. Unsupported with Raphael (SVG)
		      line_dash: null,
		      // Can draw rounded line end, instead of a square. Unsupported with Raphael (SVG)
		      rounded_end: true,
		      // The color of the line and arrowheads
		      color: null,
		
		      // Flags to draw arrows on each end of the line
		      draw_start_arrow: false,
		      draw_end_arrow: false,
		
		      // The length of the arrowhead sides
		      arrowhead_length: 10,
		      // The angle of the arrowhead
		      arrowhead_angle: Math.PI / 8,
		
		      // The position of the text
		      text_position_vertical: StaveLine.TextVerticalPosition.TOP,
		      text_justification: StaveLine.TextJustification.CENTER
		    };
		
		    _this.setNotes(notes);
		    return _this;
		  }
		
		  // Set the font for the `StaveLine` text
		
		
		  _createClass(StaveLine, [{
		    key: 'setFont',
		    value: function setFont(font) {
		      this.font = font;return this;
		    }
		    // The the annotation for the `StaveLine`
		
		  }, {
		    key: 'setText',
		    value: function setText(text) {
		      this.text = text;return this;
		    }
		
		    // Set the notes for the `StaveLine`
		
		  }, {
		    key: 'setNotes',
		    value: function setNotes(notes) {
		      if (!notes.first_note && !notes.last_note) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'Notes needs to have either first_note or last_note set.');
		      }
		
		      if (!notes.first_indices) notes.first_indices = [0];
		      if (!notes.last_indices) notes.last_indices = [0];
		
		      if (notes.first_indices.length !== notes.last_indices.length) {
		        throw new _vex.Vex.RuntimeError('BadArguments', 'Connected notes must have similar index sizes');
		      }
		
		      // Success. Lets grab 'em notes.
		      this.first_note = notes.first_note;
		      this.first_indices = notes.first_indices;
		      this.last_note = notes.last_note;
		      this.last_indices = notes.last_indices;
		      return this;
		    }
		
		    // Apply the style of the `StaveLine` to the context
		
		  }, {
		    key: 'applyLineStyle',
		    value: function applyLineStyle() {
		      var ctx = this.checkContext();
		      var render_options = this.render_options;
		
		      if (render_options.line_dash) {
		        ctx.setLineDash(render_options.line_dash);
		      }
		
		      if (render_options.line_width) {
		        ctx.setLineWidth(render_options.line_width);
		      }
		
		      if (render_options.rounded_end) {
		        ctx.setLineCap('round');
		      } else {
		        ctx.setLineCap('square');
		      }
		    }
		
		    // Apply the text styling to the context
		
		  }, {
		    key: 'applyFontStyle',
		    value: function applyFontStyle() {
		      var ctx = this.checkContext();
		
		      if (this.font) {
		        ctx.setFont(this.font.family, this.font.size, this.font.weight);
		      }
		
		      if (this.render_options.color) {
		        ctx.setStrokeStyle(this.render_options.color);
		        ctx.setFillStyle(this.render_options.color);
		      }
		    }
		
		    // Renders the `StaveLine` on the context
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _this2 = this;
		
		      var ctx = this.checkContext();
		      this.setRendered();
		
		      var first_note = this.first_note;
		      var last_note = this.last_note;
		      var render_options = this.render_options;
		
		      ctx.save();
		      this.applyLineStyle();
		
		      // Cycle through each set of indices and draw lines
		      var start_position = void 0;
		      var end_position = void 0;
		      this.first_indices.forEach(function (first_index, i) {
		        var last_index = _this2.last_indices[i];
		
		        // Get initial coordinates for the start/end of the line
		        start_position = first_note.getModifierStartXY(2, first_index);
		        end_position = last_note.getModifierStartXY(1, last_index);
		        var upwards_slope = start_position.y > end_position.y;
		
		        // Adjust `x` coordinates for modifiers
		        start_position.x += first_note.getMetrics().modRightPx + render_options.padding_left;
		        end_position.x -= last_note.getMetrics().modLeftPx + render_options.padding_right;
		
		        // Adjust first `x` coordinates for displacements
		        var notehead_width = first_note.getGlyph().getWidth();
		        var first_displaced = first_note.getKeyProps()[first_index].displaced;
		        if (first_displaced && first_note.getStemDirection() === 1) {
		          start_position.x += notehead_width + render_options.padding_left;
		        }
		
		        // Adjust last `x` coordinates for displacements
		        var last_displaced = last_note.getKeyProps()[last_index].displaced;
		        if (last_displaced && last_note.getStemDirection() === -1) {
		          end_position.x -= notehead_width + render_options.padding_right;
		        }
		
		        // Adjust y position better if it's not coming from the center of the note
		        start_position.y += upwards_slope ? -3 : 1;
		        end_position.y += upwards_slope ? 2 : 0;
		
		        drawArrowLine(ctx, start_position, end_position, _this2.render_options);
		      });
		
		      ctx.restore();
		
		      // Determine the x coordinate where to start the text
		      var text_width = ctx.measureText(this.text).width;
		      var justification = render_options.text_justification;
		      var x = 0;
		      if (justification === StaveLine.TextJustification.LEFT) {
		        x = start_position.x;
		      } else if (justification === StaveLine.TextJustification.CENTER) {
		        var delta_x = end_position.x - start_position.x;
		        var center_x = delta_x / 2 + start_position.x;
		        x = center_x - text_width / 2;
		      } else if (justification === StaveLine.TextJustification.RIGHT) {
		        x = end_position.x - text_width;
		      }
		
		      // Determine the y value to start the text
		      var y = void 0;
		      var vertical_position = render_options.text_position_vertical;
		      if (vertical_position === StaveLine.TextVerticalPosition.TOP) {
		        y = first_note.getStave().getYForTopText();
		      } else if (vertical_position === StaveLine.TextVerticalPosition.BOTTOM) {
		        y = first_note.getStave().getYForBottomText(_tables.Flow.TEXT_HEIGHT_OFFSET_HACK);
		      }
		
		      // Draw the text
		      ctx.save();
		      this.applyFontStyle();
		      ctx.fillText(this.text, x, y);
		      ctx.restore();
		
		      return this;
		    }
		  }]);
	
		  return StaveLine;
		}(_element.Element);
	
	/***/ },
	/* 69 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.PedalMarking = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _element = __webpack_require__(5);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements different types of pedal markings. These notation
		// elements indicate to the performer when to depress and release the a pedal.
		//
		// In order to create "Sostenuto", and "una corda" markings, you must set
		// custom text for the release/depress pedal markings.
		
		// To enable logging for this class. Set `Vex.Flow.PedalMarking.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (PedalMarking.DEBUG) _vex.Vex.L('Vex.Flow.PedalMarking', args);
		}
		
		// Draws a pedal glyph with the provided `name` on a rendering `context`
		// at the coordinates `x` and `y. Takes into account the glyph data
		// coordinate shifts.
		function drawPedalGlyph(name, context, x, y, point) {
		  var glyph_data = PedalMarking.GLYPHS[name];
		  var glyph = new _glyph.Glyph(glyph_data.code, point);
		  glyph.render(context, x + glyph_data.x_shift, y + glyph_data.y_shift);
		}
		
		var PedalMarking = exports.PedalMarking = function (_Element) {
		  _inherits(PedalMarking, _Element);
		
		  _createClass(PedalMarking, null, [{
		    key: 'createSustain',
		
		
		    // Create a sustain pedal marking. Returns the defaults PedalMarking.
		    // Which uses the traditional "Ped" and "*"" markings.
		    value: function createSustain(notes) {
		      var pedal = new PedalMarking(notes);
		      return pedal;
		    }
		
		    // Create a sostenuto pedal marking
		
		  }, {
		    key: 'createSostenuto',
		    value: function createSostenuto(notes) {
		      var pedal = new PedalMarking(notes);
		      pedal.setStyle(PedalMarking.Styles.MIXED);
		      pedal.setCustomText('Sost. Ped.');
		      return pedal;
		    }
		
		    // Create an una corda pedal marking
		
		  }, {
		    key: 'createUnaCorda',
		    value: function createUnaCorda(notes) {
		      var pedal = new PedalMarking(notes);
		      pedal.setStyle(PedalMarking.Styles.TEXT);
		      pedal.setCustomText('una corda', 'tre corda');
		      return pedal;
		    }
		
		    // ## Prototype Methods
		
		  }, {
		    key: 'GLYPHS',
		
		    // Glyph data
		    get: function get() {
		      return {
		        'pedal_depress': {
		          code: 'v36',
		          x_shift: -10,
		          y_shift: 0
		        },
		        'pedal_release': {
		          code: 'v5d',
		          x_shift: -2,
		          y_shift: 3
		        }
		      };
		    }
		  }, {
		    key: 'Styles',
		    get: function get() {
		      return {
		        TEXT: 1,
		        BRACKET: 2,
		        MIXED: 3
		      };
		    }
		  }, {
		    key: 'StylesString',
		    get: function get() {
		      return {
		        text: PedalMarking.Styles.TEXT,
		        bracket: PedalMarking.Styles.BRACKET,
		        mixed: PedalMarking.Styles.MIXED
		      };
		    }
		  }]);
		
		  function PedalMarking(notes) {
		    _classCallCheck(this, PedalMarking);
		
		    var _this = _possibleConstructorReturn(this, (PedalMarking.__proto__ || Object.getPrototypeOf(PedalMarking)).call(this));
		
		    _this.setAttribute('type', 'PedalMarking');
		
		    _this.notes = notes;
		    _this.style = PedalMarking.TEXT;
		    _this.line = 0;
		
		    // Custom text for the release/depress markings
		    _this.custom_depress_text = '';
		    _this.custom_release_text = '';
		
		    _this.font = {
		      family: 'Times New Roman',
		      size: 12,
		      weight: 'italic bold'
		    };
		
		    _this.render_options = {
		      bracket_height: 10,
		      text_margin_right: 6,
		      bracket_line_width: 1,
		      glyph_point_size: 40,
		      color: 'black'
		    };
		    return _this;
		  }
		
		  // Set custom text for the `depress`/`release` pedal markings. No text is
		  // set if the parameter is falsy.
		
		
		  _createClass(PedalMarking, [{
		    key: 'setCustomText',
		    value: function setCustomText(depress, release) {
		      this.custom_depress_text = depress || '';
		      this.custom_release_text = release || '';
		      return this;
		    }
		
		    // Set the pedal marking style
		
		  }, {
		    key: 'setStyle',
		    value: function setStyle(style) {
		      if (style < 1 && style > 3) {
		        throw new _vex.Vex.RERR('InvalidParameter', 'The style must be one found in PedalMarking.Styles');
		      }
		
		      this.style = style;
		      return this;
		    }
		
		    // Set the staff line to render the markings on
		
		  }, {
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;return this;
		    }
		
		    // Draw the bracket based pedal markings
		
		  }, {
		    key: 'drawBracketed',
		    value: function drawBracketed() {
		      var ctx = this.context;
		      var is_pedal_depressed = false;
		      var prev_x = void 0;
		      var prev_y = void 0;
		      var pedal = this;
		
		      // Iterate through each note
		      this.notes.forEach(function (note, index, notes) {
		        // Each note triggers the opposite pedal action
		        is_pedal_depressed = !is_pedal_depressed;
		
		        // Get the initial coordinates for the note
		        var x = note.getAbsoluteX();
		        var y = note.getStave().getYForBottomText(pedal.line + 3);
		
		        // Throw if current note is positioned before the previous note
		        if (x < prev_x) {
		          throw new _vex.Vex.RERR('InvalidConfiguration', 'The notes provided must be in order of ascending x positions');
		        }
		
		        // Determine if the previous or next note are the same
		        // as the current note. We need to keep track of this for
		        // when adjustments are made for the release+depress action
		        var next_is_same = notes[index + 1] === note;
		        var prev_is_same = notes[index - 1] === note;
		
		        var x_shift = 0;
		        if (is_pedal_depressed) {
		          // Adjustment for release+depress
		          x_shift = prev_is_same ? 5 : 0;
		
		          if (pedal.style === PedalMarking.Styles.MIXED && !prev_is_same) {
		            // For MIXED style, start with text instead of bracket
		            if (pedal.custom_depress_text) {
		              // If we have custom text, use instead of the default "Ped" glyph
		              var text_width = ctx.measureText(pedal.custom_depress_text).width;
		              ctx.fillText(pedal.custom_depress_text, x - text_width / 2, y);
		              x_shift = text_width / 2 + pedal.render_options.text_margin_right;
		            } else {
		              // Render the Ped glyph in position
		              drawPedalGlyph('pedal_depress', ctx, x, y, pedal.render_options.glyph_point_size);
		              x_shift = 20 + pedal.render_options.text_margin_right;
		            }
		          } else {
		            // Draw start bracket
		            ctx.beginPath();
		            ctx.moveTo(x, y - pedal.render_options.bracket_height);
		            ctx.lineTo(x + x_shift, y);
		            ctx.stroke();
		            ctx.closePath();
		          }
		        } else {
		          // Adjustment for release+depress
		          x_shift = next_is_same ? -5 : 0;
		
		          // Draw end bracket
		          ctx.beginPath();
		          ctx.moveTo(prev_x, prev_y);
		          ctx.lineTo(x + x_shift, y);
		          ctx.lineTo(x, y - pedal.render_options.bracket_height);
		          ctx.stroke();
		          ctx.closePath();
		        }
		
		        // Store previous coordinates
		        prev_x = x + x_shift;
		        prev_y = y;
		      });
		    }
		
		    // Draw the text based pedal markings. This defaults to the traditional
		    // "Ped" and "*"" symbols if no custom text has been provided.
		
		  }, {
		    key: 'drawText',
		    value: function drawText() {
		      var ctx = this.context;
		      var is_pedal_depressed = false;
		      var pedal = this;
		
		      // The glyph point size
		      var point = pedal.render_options.glyph_point_size;
		
		      // Iterate through each note, placing glyphs or custom text accordingly
		      this.notes.forEach(function (note) {
		        is_pedal_depressed = !is_pedal_depressed;
		        var stave = note.getStave();
		        var x = note.getAbsoluteX();
		        var y = stave.getYForBottomText(pedal.line + 3);
		
		        var text_width = 0;
		        if (is_pedal_depressed) {
		          if (pedal.custom_depress_text) {
		            text_width = ctx.measureText(pedal.custom_depress_text).width;
		            ctx.fillText(pedal.custom_depress_text, x - text_width / 2, y);
		          } else {
		            drawPedalGlyph('pedal_depress', ctx, x, y, point);
		          }
		        } else {
		          if (pedal.custom_release_text) {
		            text_width = ctx.measureText(pedal.custom_release_text).width;
		            ctx.fillText(pedal.custom_release_text, x - text_width / 2, y);
		          } else {
		            drawPedalGlyph('pedal_release', ctx, x, y, point);
		          }
		        }
		      });
		    }
		
		    // Render the pedal marking in position on the rendering context
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var ctx = this.checkContext();
		      this.setRendered();
		
		      ctx.save();
		      ctx.setStrokeStyle(this.render_options.color);
		      ctx.setFillStyle(this.render_options.color);
		      ctx.setFont(this.font.family, this.font.size, this.font.weight);
		
		      L('Rendering Pedal Marking');
		
		      if (this.style === PedalMarking.Styles.BRACKET || this.style === PedalMarking.Styles.MIXED) {
		        ctx.setLineWidth(this.render_options.bracket_line_width);
		        this.drawBracketed();
		      } else if (this.style === PedalMarking.Styles.TEXT) {
		        this.drawText();
		      }
		
		      ctx.restore();
		    }
		  }]);
	
		  return PedalMarking;
		}(_element.Element);
	
	/***/ },
	/* 70 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.TextBracket = undefined;
		
		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _tables = __webpack_require__(2);
		
		var _element = __webpack_require__(5);
		
		var _renderer = __webpack_require__(10);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Cyril Silverman
		//
		// ## Description
		//
		// This file implement `TextBrackets` which extend between two notes.
		// The octave transposition markings (8va, 8vb, 15va, 15vb) can be created
		// using this class.
		
		// To enable logging for this class. Set `Vex.Flow.TextBracket.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (TextBracket.DEBUG) _vex.Vex.L('Vex.Flow.TextBracket', args);
		}
		
		var TextBracket = exports.TextBracket = function (_Element) {
		  _inherits(TextBracket, _Element);
		
		  _createClass(TextBracket, null, [{
		    key: 'Positions',
		
		    // FIXME: Modifier.Position is singular while this is plural, make consistent
		    get: function get() {
		      return {
		        TOP: 1,
		        BOTTOM: -1
		      };
		    }
		  }, {
		    key: 'PositionString',
		    get: function get() {
		      return {
		        top: TextBracket.Positions.TOP,
		        bottom: TextBracket.Positions.BOTTOM
		      };
		    }
		  }]);
		
		  function TextBracket(_ref) {
		    var start = _ref.start,
		        stop = _ref.stop,
		        _ref$text = _ref.text,
		        text = _ref$text === undefined ? '' : _ref$text,
		        _ref$superscript = _ref.superscript,
		        superscript = _ref$superscript === undefined ? '' : _ref$superscript,
		        _ref$position = _ref.position,
		        position = _ref$position === undefined ? TextBracket.Positions.TOP : _ref$position;
		
		    _classCallCheck(this, TextBracket);
		
		    var _this = _possibleConstructorReturn(this, (TextBracket.__proto__ || Object.getPrototypeOf(TextBracket)).call(this));
		
		    _this.setAttribute('type', 'TextBracket');
		
		    _this.start = start;
		    _this.stop = stop;
		
		    _this.text = text;
		    _this.superscript = superscript;
		
		    _this.position = typeof position === 'string' ? TextBracket.PositionString[position] : position;
		
		    _this.line = 1;
		
		    _this.font = {
		      family: 'Serif',
		      size: 15,
		      weight: 'italic'
		    };
		
		    _this.render_options = {
		      dashed: true,
		      dash: [5],
		      color: 'black',
		      line_width: 1,
		      show_bracket: true,
		      bracket_height: 8,
		
		      // In the BOTTOM position, the bracket line can extend
		      // under the superscript.
		      underline_superscript: true
		    };
		    return _this;
		  }
		
		  // Apply the text backet styling to the provided `context`
		
		
		  _createClass(TextBracket, [{
		    key: 'applyStyle',
		    value: function applyStyle(context) {
		      // Apply style for the octave bracket
		      context.setFont(this.font.family, this.font.size, this.font.weight);
		      context.setStrokeStyle(this.render_options.color);
		      context.setFillStyle(this.render_options.color);
		      context.setLineWidth(this.render_options.line_width);
		
		      return this;
		    }
		
		    // Set whether the bracket line should be `dashed`. You can also
		    // optionally set the `dash` pattern by passing in an array of numbers
		
		  }, {
		    key: 'setDashed',
		    value: function setDashed(dashed, dash) {
		      this.render_options.dashed = dashed;
		      if (dash) this.render_options.dash = dash;
		      return this;
		    }
		
		    // Set the font for the text
		
		  }, {
		    key: 'setFont',
		    value: function setFont(font) {
		      // We use Object.assign to support partial updates to the font object
		      this.font = _extends({}, this.font, font);
		      return this;
		    }
		    // Set the rendering `context` for the octave bracket
		
		  }, {
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;return this;
		    }
		
		    // Draw the octave bracket on the rendering context
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var ctx = this.context;
		      this.setRendered();
		
		      var y = 0;
		      switch (this.position) {
		        case TextBracket.Positions.TOP:
		          y = this.start.getStave().getYForTopText(this.line);
		          break;
		        case TextBracket.Positions.BOTTOM:
		          y = this.start.getStave().getYForBottomText(this.line + _tables.Flow.TEXT_HEIGHT_OFFSET_HACK);
		          break;
		        default:
		          throw new _vex.Vex.RERR('InvalidPosition', 'The position ' + this.position + ' is invalid');
		      }
		
		      // Get the preliminary start and stop coordintates for the bracket
		      var start = { x: this.start.getAbsoluteX(), y: y };
		      var stop = { x: this.stop.getAbsoluteX(), y: y };
		
		      L('Rendering TextBracket: start:', start, 'stop:', stop, 'y:', y);
		
		      var bracket_height = this.render_options.bracket_height * this.position;
		
		      ctx.save();
		      this.applyStyle(ctx);
		
		      // Draw text
		      ctx.fillText(this.text, start.x, start.y);
		
		      // Get the width and height for the octave number
		      var main_width = ctx.measureText(this.text).width;
		      var main_height = ctx.measureText('M').width;
		
		      // Calculate the y position for the super script
		      var super_y = start.y - main_height / 2.5;
		
		      // Draw the superscript
		      ctx.setFont(this.font.family, this.font.size / 1.4, this.font.weight);
		      ctx.fillText(this.superscript, start.x + main_width + 1, super_y);
		
		      // Determine width and height of the superscript
		      var superscript_width = ctx.measureText(this.superscript).width;
		      var super_height = ctx.measureText('M').width;
		
		      // Setup initial coordinates for the bracket line
		      var start_x = start.x;
		      var line_y = super_y;
		      var end_x = stop.x + this.stop.getGlyph().getWidth();
		
		      // Adjust x and y coordinates based on position
		      if (this.position === TextBracket.Positions.TOP) {
		        start_x += main_width + superscript_width + 5;
		        line_y -= super_height / 2.7;
		      } else if (this.position === TextBracket.Positions.BOTTOM) {
		        line_y += super_height / 2.7;
		        start_x += main_width + 2;
		
		        if (!this.render_options.underline_superscript) {
		          start_x += superscript_width;
		        }
		      }
		
		      if (this.render_options.dashed) {
		        // Main line
		        _renderer.Renderer.drawDashedLine(ctx, start_x, line_y, end_x, line_y, this.render_options.dash);
		        // Ending Bracket
		        if (this.render_options.show_bracket) {
		          _renderer.Renderer.drawDashedLine(ctx, end_x, line_y + 1 * this.position, end_x, line_y + bracket_height, this.render_options.dash);
		        }
		      } else {
		        ctx.beginPath();
		        ctx.moveTo(start_x, line_y);
		        // Main line
		        ctx.lineTo(end_x, line_y);
		        if (this.render_options.show_bracket) {
		          // Ending bracket
		          ctx.lineTo(end_x, line_y + bracket_height);
		        }
		        ctx.stroke();
		        ctx.closePath();
		      }
		
		      ctx.restore();
		    }
		  }]);
	
		  return TextBracket;
		}(_element.Element);
	
	/***/ },
	/* 71 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.BarNote = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _note = __webpack_require__(22);
		
		var _stavebarline = __webpack_require__(44);
		
		var _boundingbox = __webpack_require__(8);
		
		function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// A `BarNote` is used to render bar lines (from `barline.js`). `BarNote`s can
		// be added to a voice and rendered in the middle of a stave. Since it has no
		// duration, it consumes no `tick`s, and is dealt with appropriately by the formatter.
		//
		// See `tests/barnote_tests.js` for usage examples.
		
		// To enable logging for this class. Set `Vex.Flow.BarNote.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (BarNote.DEBUG) _vex.Vex.L('Vex.Flow.BarNote', args);
		}
		
		var BarNote = exports.BarNote = function (_Note) {
		  _inherits(BarNote, _Note);
		
		  function BarNote() {
		    var _this$metrics$widths;
		
		    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _stavebarline.Barline.type.SINGLE;
		
		    _classCallCheck(this, BarNote);
		
		    var _this = _possibleConstructorReturn(this, (BarNote.__proto__ || Object.getPrototypeOf(BarNote)).call(this, { duration: 'b' }));
		
		    _this.setAttribute('type', 'BarNote');
		
		    _this.metrics = {
		      widths: {}
		    };
		
		    var TYPE = _stavebarline.Barline.type;
		    _this.metrics.widths = (_this$metrics$widths = {}, _defineProperty(_this$metrics$widths, TYPE.SINGLE, 8), _defineProperty(_this$metrics$widths, TYPE.DOUBLE, 12), _defineProperty(_this$metrics$widths, TYPE.END, 15), _defineProperty(_this$metrics$widths, TYPE.REPEAT_BEGIN, 14), _defineProperty(_this$metrics$widths, TYPE.REPEAT_END, 14), _defineProperty(_this$metrics$widths, TYPE.REPEAT_BOTH, 18), _defineProperty(_this$metrics$widths, TYPE.NONE, 0), _this$metrics$widths);
		
		    // Tell the formatter that bar notes have no duration.
		    _this.ignore_ticks = true;
		    _this.setType(type);
		    return _this;
		  }
		
		  // Get and set the type of Bar note. `type` must be one of `Vex.Flow.Barline.type`.
		
		
		  _createClass(BarNote, [{
		    key: 'getType',
		    value: function getType() {
		      return this.type;
		    }
		  }, {
		    key: 'setType',
		    value: function setType(type) {
		      this.type = typeof type === 'string' ? _stavebarline.Barline.typeString[type] : type;
		
		      // Set width to width of relevant `Barline`.
		      this.setWidth(this.metrics.widths[this.type]);
		      return this;
		    }
		  }, {
		    key: 'getBoundingBox',
		    value: function getBoundingBox() {
		      return new _boundingbox.BoundingBox(0, 0, 0, 0);
		    }
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext() {
		      /* overridden to ignore */
		      return this;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      /* overridden to ignore */
		      this.setPreFormatted(true);
		      return this;
		    }
		
		    // Render note to stave.
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      if (!this.stave) throw new _vex.Vex.RERR('NoStave', "Can't draw without a stave.");
		      L('Rendering bar line at: ', this.getAbsoluteX());
		      var barline = new _stavebarline.Barline(this.type);
		      barline.setX(this.getAbsoluteX());
		      barline.draw(this.stave);
		      this.setRendered();
		    }
		  }]);
	
		  return BarNote;
		}(_note.Note);
	
	/***/ },
	/* 72 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.GhostNote = undefined;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _vex = __webpack_require__(1);
		
		var _stemmablenote = __webpack_require__(24);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		
		var GhostNote = exports.GhostNote = function (_StemmableNote) {
		  _inherits(GhostNote, _StemmableNote);
		
		  /** @constructor */
		  function GhostNote(parameter) {
		    _classCallCheck(this, GhostNote);
		
		    // Sanity check
		    if (!parameter) {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Ghost note must have valid initialization data to identify ' + 'duration.');
		    }
		
		    var note_struct = void 0;
		
		    // Preserve backwards-compatibility
		    if (typeof parameter === 'string') {
		      note_struct = { duration: parameter };
		    } else if ((typeof parameter === 'undefined' ? 'undefined' : _typeof(parameter)) === 'object') {
		      note_struct = parameter;
		    } else {
		      throw new _vex.Vex.RuntimeError('BadArguments', 'Ghost note must have valid initialization data to identify ' + 'duration.');
		    }
		
		    var _this = _possibleConstructorReturn(this, (GhostNote.__proto__ || Object.getPrototypeOf(GhostNote)).call(this, note_struct));
		
		    _this.setAttribute('type', 'GhostNote');
		
		    // Note properties
		    _this.setWidth(0);
		    return _this;
		  }
		
		  _createClass(GhostNote, [{
		    key: 'isRest',
		    value: function isRest() {
		      return true;
		    }
		  }, {
		    key: 'setStave',
		    value: function setStave(stave) {
		      _get(GhostNote.prototype.__proto__ || Object.getPrototypeOf(GhostNote.prototype), 'setStave', this).call(this, stave);
		    }
		  }, {
		    key: 'addToModifierContext',
		    value: function addToModifierContext() {
		      /* intentionally overridden */return this;
		    }
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      this.setPreFormatted(true);
		      return this;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      if (!this.stave) throw new _vex.Vex.RERR('NoStave', "Can't draw without a stave.");
		
		      // Draw the modifiers
		      this.setRendered();
		      for (var i = 0; i < this.modifiers.length; ++i) {
		        var modifier = this.modifiers[i];
		        modifier.setContext(this.context);
		        modifier.draw();
		      }
		    }
		  }]);
	
		  return GhostNote;
		}(_stemmablenote.StemmableNote);
	
	/***/ },
	/* 73 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Tremolo = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _modifier = __webpack_require__(25);
		
		var _glyph = __webpack_require__(4);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// Author: Mike Corrigan <corrigan@gmail.com>
		//
		// This class implements tremolo notation.
		
		var Tremolo = exports.Tremolo = function (_Modifier) {
		  _inherits(Tremolo, _Modifier);
		
		  _createClass(Tremolo, null, [{
		    key: 'CATEGORY',
		    get: function get() {
		      return 'tremolo';
		    }
		  }]);
		
		  function Tremolo(num) {
		    _classCallCheck(this, Tremolo);
		
		    var _this = _possibleConstructorReturn(this, (Tremolo.__proto__ || Object.getPrototypeOf(Tremolo)).call(this));
		
		    _this.setAttribute('type', 'Tremolo');
		
		    _this.num = num;
		    _this.note = null;
		    _this.index = null;
		    _this.position = _modifier.Modifier.Position.CENTER;
		    _this.code = 'v74';
		    _this.shift_right = -2;
		    _this.y_spacing = 4;
		
		    _this.render_options = {
		      font_scale: 35,
		      stroke_px: 3,
		      stroke_spacing: 10
		    };
		
		    _this.font = {
		      family: 'Arial',
		      size: 16,
		      weight: ''
		    };
		    return _this;
		  }
		
		  _createClass(Tremolo, [{
		    key: 'getCategory',
		    value: function getCategory() {
		      return Tremolo.CATEGORY;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		
		      if (!(this.note && this.index != null)) {
		        throw new _vex.Vex.RERR('NoAttachedNote', "Can't draw Tremolo without a note and index.");
		      }
		
		      this.setRendered();
		      var start = this.note.getModifierStartXY(this.position, this.index);
		      var x = start.x;
		      var y = start.y;
		
		      x += this.shift_right;
		      for (var i = 0; i < this.num; ++i) {
		        _glyph.Glyph.renderGlyph(this.context, x, y, this.render_options.font_scale, this.code);
		        y += this.y_spacing;
		      }
		    }
		  }]);
	
		  return Tremolo;
		}(_modifier.Modifier);
	
	/***/ },
	/* 74 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Crescendo = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _vex = __webpack_require__(1);
		
		var _note = __webpack_require__(22);
		
		var _tickcontext = __webpack_require__(39);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// ## Description
		//
		// This file implements the `Crescendo` object which draws crescendos and
		// decrescendo dynamics markings. A `Crescendo` is initialized with a
		// duration and formatted as part of a `Voice` like any other `Note`
		// type in VexFlow. This object would most likely be formatted in a Voice
		// with `TextNotes` - which are used to represent other dynamics markings.
		
		// To enable logging for this class. Set `Vex.Flow.Crescendo.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Crescendo.DEBUG) _vex.Vex.L('Vex.Flow.Crescendo', args);
		}
		
		// Private helper to draw the hairpin
		function renderHairpin(ctx, params) {
		  var begin_x = params.begin_x;
		  var end_x = params.end_x;
		  var y = params.y;
		  var half_height = params.height / 2;
		
		  ctx.beginPath();
		
		  if (params.reverse) {
		    ctx.moveTo(begin_x, y - half_height);
		    ctx.lineTo(end_x, y);
		    ctx.lineTo(begin_x, y + half_height);
		  } else {
		    ctx.moveTo(end_x, y - half_height);
		    ctx.lineTo(begin_x, y);
		    ctx.lineTo(end_x, y + half_height);
		  }
		
		  ctx.stroke();
		  ctx.closePath();
		}
		
		var Crescendo = exports.Crescendo = function (_Note) {
		  _inherits(Crescendo, _Note);
		
		  // Initialize the crescendo's properties
		  function Crescendo(note_struct) {
		    _classCallCheck(this, Crescendo);
		
		    var _this = _possibleConstructorReturn(this, (Crescendo.__proto__ || Object.getPrototypeOf(Crescendo)).call(this, note_struct));
		
		    _this.setAttribute('type', 'Crescendo');
		
		    // Whether the object is a decrescendo
		    _this.decrescendo = false;
		
		    // The staff line to be placed on
		    _this.line = note_struct.line || 0;
		
		    // The height at the open end of the cresc/decresc
		    _this.height = 15;
		
		    _vex.Vex.Merge(_this.render_options, {
		      // Extensions to the length of the crescendo on either side
		      extend_left: 0,
		      extend_right: 0,
		      // Vertical shift
		      y_shift: 0
		    });
		    return _this;
		  }
		
		  // Set the line to center the element on
		
		
		  _createClass(Crescendo, [{
		    key: 'setLine',
		    value: function setLine(line) {
		      this.line = line;return this;
		    }
		
		    // Set the full height at the open end
		
		  }, {
		    key: 'setHeight',
		    value: function setHeight(height) {
		      this.height = height;return this;
		    }
		
		    // Set whether the sign should be a descresendo by passing a bool
		    // to `decresc`
		
		  }, {
		    key: 'setDecrescendo',
		    value: function setDecrescendo(decresc) {
		      this.decrescendo = decresc;
		      return this;
		    }
		
		    // Preformat the note
		
		  }, {
		    key: 'preFormat',
		    value: function preFormat() {
		      this.preFormatted = true;return this;
		    }
		
		    // Render the Crescendo object onto the canvas
		
		  }, {
		    key: 'draw',
		    value: function draw() {
		      this.checkContext();
		      this.setRendered();
		
		      var tick_context = this.getTickContext();
		      var next_context = _tickcontext.TickContext.getNextContext(tick_context);
		
		      var begin_x = this.getAbsoluteX();
		      var end_x = next_context ? next_context.getX() : this.stave.x + this.stave.width;
		      var y = this.stave.getYForLine(this.line + -3) + 1;
		
		      L('Drawing ', this.decrescendo ? 'decrescendo ' : 'crescendo ', this.height, 'x', begin_x - end_x);
		
		      renderHairpin(this.context, {
		        begin_x: begin_x - this.render_options.extend_left,
		        end_x: end_x + this.render_options.extend_right,
		        y: y + this.render_options.y_shift,
		        height: this.height,
		        reverse: this.decrescendo
		      });
		    }
		  }]);
	
		  return Crescendo;
		}(_note.Note);
	
	/***/ },
	/* 75 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.System = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
		
		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// This class implements a musical system, which is a collection of staves,
		// each which can have one or more voices. All voices across all staves in
		// the system are formatted together.
		
		var _element = __webpack_require__(5);
		
		var _factory = __webpack_require__(76);
		
		var _formatter = __webpack_require__(14);
		
		var _note = __webpack_require__(22);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
		
		function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
		
		function setDefaults(params, defaults) {
		  var default_options = defaults.options;
		  params = _extends(defaults, params);
		  params.options = _extends(default_options, params.options);
		  return params;
		}
		
		var System = exports.System = function (_Element) {
		  _inherits(System, _Element);
		
		  function System() {
		    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		
		    _classCallCheck(this, System);
		
		    var _this = _possibleConstructorReturn(this, (System.__proto__ || Object.getPrototypeOf(System)).call(this));
		
		    _this.setAttribute('type', 'System');
		    _this.setOptions(params);
		    _this.parts = [];
		    return _this;
		  }
		
		  _createClass(System, [{
		    key: 'setOptions',
		    value: function setOptions() {
		      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		
		      this.options = setDefaults(options, {
		        x: 10,
		        y: 10,
		        width: 500,
		        connector: null,
		        spaceBetweenStaves: 12, // stave spaces
		        factory: null,
		        debugFormatter: false,
		        formatIterations: 0, // number of formatter tuning steps
		        options: {}
		      });
		
		      this.factory = this.options.factory || new _factory.Factory({ renderer: { el: null } });
		    }
		  }, {
		    key: 'setContext',
		    value: function setContext(context) {
		      _get(System.prototype.__proto__ || Object.getPrototypeOf(System.prototype), 'setContext', this).call(this, context);
		      this.factory.setContext(context);
		      return this;
		    }
		  }, {
		    key: 'addConnector',
		    value: function addConnector() {
		      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'double';
		
		      this.connector = this.factory.StaveConnector({
		        top_stave: this.parts[0].stave,
		        bottom_stave: this.parts[this.parts.length - 1].stave,
		        type: type
		      });
		      return this.connector;
		    }
		  }, {
		    key: 'addStave',
		    value: function addStave(params) {
		      var _this2 = this;
		
		      params = setDefaults(params, {
		        stave: null,
		        voices: [],
		        spaceAbove: 0, // stave spaces
		        spaceBelow: 0, // stave spaces
		        debugNoteMetrics: false,
		        options: {}
		      });
		
		      if (!params.stave) {
		        var options = { left_bar: false };
		        params.stave = this.factory.Stave({
		          x: this.options.x,
		          y: this.options.y,
		          width: this.options.width,
		          options: options
		        });
		      }
		
		      params.voices.forEach(function (voice) {
		        return voice.setContext(_this2.context).setStave(params.stave).getTickables().forEach(function (tickable) {
		          return tickable.setStave(params.stave);
		        });
		      });
		
		      this.parts.push(params);
		      return params.stave;
		    }
		  }, {
		    key: 'format',
		    value: function format() {
		      var _this3 = this;
		
		      var formatter = new _formatter.Formatter();
		      this.formatter = formatter;
		
		      var y = this.options.y;
		      var startX = 0;
		      var allVoices = [];
		      var debugNoteMetricsYs = [];
		
		      // Join the voices for each stave.
		      this.parts.forEach(function (part) {
		        y = y + part.stave.space(part.spaceAbove);
		        part.stave.setY(y);
		        formatter.joinVoices(part.voices);
		        y = y + part.stave.space(part.spaceBelow);
		        y = y + part.stave.space(_this3.options.spaceBetweenStaves);
		        if (part.debugNoteMetrics) {
		          debugNoteMetricsYs.push({ y: y, voice: part.voices[0] });
		          y += 15;
		        }
		        allVoices = allVoices.concat(part.voices);
		
		        startX = Math.max(startX, part.stave.getNoteStartX());
		      });
		
		      // Update the start position of all staves.
		      this.parts.forEach(function (part) {
		        return part.stave.setNoteStartX(startX);
		      });
		      var justifyWidth = this.options.width - (startX - this.options.x) - _note.Note.STAVEPADDING;
		      formatter.format(allVoices, justifyWidth);
		
		      for (var i = 0; i < this.options.formatIterations; i++) {
		        formatter.tune();
		      }
		
		      this.startX = startX;
		      this.debugNoteMetricsYs = debugNoteMetricsYs;
		      this.lastY = y;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      // Render debugging information, if requested.
		      var ctx = this.checkContext();
		      this.setRendered();
		
		      if (this.options.debugFormatter) {
		        _formatter.Formatter.plotDebugging(ctx, this.formatter, this.startX, this.options.y, this.lastY);
		      }
		
		      this.debugNoteMetricsYs.forEach(function (d) {
		        d.voice.getTickables().forEach(function (note) {
		          return _note.Note.plotMetrics(ctx, note, d.y);
		        });
		      });
		    }
		  }]);
	
		  return System;
		}(_element.Element);
	
	/***/ },
	/* 76 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Factory = exports.X = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
		
		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		// @author Mohit Cheppudira
		//
		// ## Description
		//
		// This file implements a high level API around VexFlow. It will eventually
		// become the canonical way to use VexFlow.
		//
		// *This API is currently DRAFT*
		
		var _vex = __webpack_require__(1);
		
		var _accidental = __webpack_require__(29);
		
		var _articulation = __webpack_require__(37);
		
		var _annotation = __webpack_require__(40);
		
		var _formatter = __webpack_require__(14);
		
		var _frethandfinger = __webpack_require__(28);
		
		var _stringnumber = __webpack_require__(36);
		
		var _textdynamics = __webpack_require__(67);
		
		var _modifiercontext = __webpack_require__(27);
		
		var _renderer = __webpack_require__(10);
		
		var _stave = __webpack_require__(43);
		
		var _stavetie = __webpack_require__(33);
		
		var _staveline = __webpack_require__(68);
		
		var _stavenote = __webpack_require__(20);
		
		var _staveconnector = __webpack_require__(19);
		
		var _system = __webpack_require__(75);
		
		var _tickcontext = __webpack_require__(39);
		
		var _tuplet = __webpack_require__(16);
		
		var _voice = __webpack_require__(18);
		
		var _beam = __webpack_require__(15);
		
		var _curve = __webpack_require__(66);
		
		var _gracenote = __webpack_require__(61);
		
		var _gracenotegroup = __webpack_require__(32);
		
		var _notesubgroup = __webpack_require__(31);
		
		var _easyscore = __webpack_require__(77);
		
		var _timesignote = __webpack_require__(59);
		
		var _clefnote = __webpack_require__(58);
		
		var _pedalmarking = __webpack_require__(69);
		
		var _textbracket = __webpack_require__(70);
		
		var _vibratobracket = __webpack_require__(57);
		
		var _ghostnote = __webpack_require__(72);
		
		var _barnote = __webpack_require__(71);
		
		var _tabnote = __webpack_require__(56);
		
		var _tabstave = __webpack_require__(55);
		
		var _textnote = __webpack_require__(50);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// To enable logging for this class. Set `Vex.Flow.Factory.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Factory.DEBUG) _vex.Vex.L('Vex.Flow.Factory', args);
		}
		
		var X = exports.X = _vex.Vex.MakeException('FactoryError');
		
		function setDefaults() {
		  var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		  var defaults = arguments[1];
		
		  var default_options = defaults.options;
		  params = _extends(defaults, params);
		  params.options = _extends(default_options, params.options);
		  return params;
		}
		
		var Factory = exports.Factory = function () {
		  function Factory(options) {
		    _classCallCheck(this, Factory);
		
		    L('New factory: ', options);
		    var defaults = {
		      stave: {
		        space: 10
		      },
		      renderer: {
		        context: null,
		        elementId: '',
		        backend: _renderer.Renderer.Backends.SVG,
		        width: 500,
		        height: 200,
		        background: '#FFF'
		      },
		      font: {
		        face: 'Arial',
		        point: 10,
		        style: ''
		      }
		    };
		
		    this.options = defaults;
		    this.setOptions(options);
		  }
		
		  _createClass(Factory, [{
		    key: 'reset',
		    value: function reset() {
		      this.renderQ = [];
		      this.systems = [];
		      this.staves = [];
		      this.voices = [];
		      this.stave = null; // current stave
		    }
		  }, {
		    key: 'getOptions',
		    value: function getOptions() {
		      return this.options;
		    }
		  }, {
		    key: 'setOptions',
		    value: function setOptions(options) {
		      var _arr = ['stave', 'renderer', 'font'];
		
		      for (var _i = 0; _i < _arr.length; _i++) {
		        var key = _arr[_i];
		        _extends(this.options[key], options[key]);
		      }
		      if (this.options.renderer.elementId !== null || this.options.renderer.context) {
		        this.initRenderer();
		      }
		
		      this.reset();
		    }
		  }, {
		    key: 'initRenderer',
		    value: function initRenderer() {
		      var _options$renderer = this.options.renderer,
		          elementId = _options$renderer.elementId,
		          backend = _options$renderer.backend,
		          width = _options$renderer.width,
		          height = _options$renderer.height,
		          background = _options$renderer.background;
		
		      if (elementId === '') {
		        throw new X('HTML DOM element not set in Factory');
		      }
		
		      this.context = _renderer.Renderer.buildContext(elementId, backend, width, height, background);
		    }
		  }, {
		    key: 'getContext',
		    value: function getContext() {
		      return this.context;
		    }
		  }, {
		    key: 'setContext',
		    value: function setContext(context) {
		      this.context = context;return this;
		    }
		  }, {
		    key: 'getStave',
		    value: function getStave() {
		      return this.stave;
		    }
		  }, {
		    key: 'getVoices',
		    value: function getVoices() {
		      return this.voices;
		    }
		
		    // Returns pixels from current stave spacing.
		
		  }, {
		    key: 'space',
		    value: function space(spacing) {
		      return this.options.stave.space * spacing;
		    }
		  }, {
		    key: 'Stave',
		    value: function Stave(params) {
		      params = setDefaults(params, {
		        x: 0,
		        y: 0,
		        width: this.options.renderer.width - this.space(1),
		        options: {
		          spacing_between_lines_px: this.options.stave.space
		        }
		      });
		
		      var stave = new _stave.Stave(params.x, params.y, params.width, params.options);
		      this.staves.push(stave);
		      stave.setContext(this.context);
		      this.stave = stave;
		      return stave;
		    }
		  }, {
		    key: 'TabStave',
		    value: function TabStave(params) {
		      params = setDefaults(params, {
		        x: 0,
		        y: 0,
		        width: this.options.renderer.width - this.space(1),
		        options: {
		          spacing_between_lines_px: this.options.stave.space * 1.3
		        }
		      });
		
		      var stave = new _tabstave.TabStave(params.x, params.y, params.width, params.options);
		      this.staves.push(stave);
		      stave.setContext(this.context);
		      this.stave = stave;
		      return stave;
		    }
		  }, {
		    key: 'StaveNote',
		    value: function StaveNote(noteStruct) {
		      var note = new _stavenote.StaveNote(noteStruct);
		      if (this.stave) note.setStave(this.stave);
		      note.setContext(this.context);
		      this.renderQ.push(note);
		      return note;
		    }
		  }, {
		    key: 'GhostNote',
		    value: function GhostNote(noteStruct) {
		      var ghostNote = new _ghostnote.GhostNote(noteStruct);
		      if (this.stave) ghostNote.setStave(this.stave);
		      ghostNote.setContext(this.context);
		      this.renderQ.push(ghostNote);
		      return ghostNote;
		    }
		  }, {
		    key: 'TextNote',
		    value: function TextNote(textNoteStruct) {
		      var textNote = new _textnote.TextNote(textNoteStruct);
		      if (this.stave) textNote.setStave(this.stave);
		      textNote.setContext(this.context);
		      this.renderQ.push(textNote);
		      return textNote;
		    }
		  }, {
		    key: 'BarNote',
		    value: function BarNote(params) {
		      params = setDefaults(params, {
		        type: 'single',
		        options: {}
		      });
		
		      var barNote = new _barnote.BarNote(params.type);
		      if (this.stave) barNote.setStave(this.stave);
		      barNote.setContext(this.context);
		      this.renderQ.push(barNote);
		      return barNote;
		    }
		  }, {
		    key: 'ClefNote',
		    value: function ClefNote(params) {
		      params = setDefaults(params, {
		        type: 'treble',
		        options: {
		          size: 'default'
		        }
		      });
		
		      var clefNote = new _clefnote.ClefNote(params.type, params.options.size, params.options.annotation);
		      if (this.stave) clefNote.setStave(this.stave);
		      clefNote.setContext(this.context);
		      this.renderQ.push(clefNote);
		      return clefNote;
		    }
		  }, {
		    key: 'TimeSigNote',
		    value: function TimeSigNote(params) {
		      params = setDefaults(params, {
		        time: '4/4',
		        options: {}
		      });
		
		      var timeSigNote = new _timesignote.TimeSigNote(params.time);
		      if (this.stave) timeSigNote.setStave(this.stave);
		      timeSigNote.setContext(this.context);
		      this.renderQ.push(timeSigNote);
		      return timeSigNote;
		    }
		  }, {
		    key: 'TabNote',
		    value: function TabNote(noteStruct) {
		      var note = new _tabnote.TabNote(noteStruct);
		      if (this.stave) note.setStave(this.stave);
		      note.setContext(this.context);
		      this.renderQ.push(note);
		      return note;
		    }
		  }, {
		    key: 'GraceNote',
		    value: function GraceNote(noteStruct) {
		      var note = new _gracenote.GraceNote(noteStruct);
		      if (this.stave) note.setStave(this.stave);
		      note.setContext(this.context);
		      return note;
		    }
		  }, {
		    key: 'GraceNoteGroup',
		    value: function GraceNoteGroup(params) {
		      var group = new _gracenotegroup.GraceNoteGroup(params.notes, params.slur);
		      group.setContext(this.context);
		      return group;
		    }
		  }, {
		    key: 'Accidental',
		    value: function Accidental(params) {
		      params = setDefaults(params, {
		        type: null,
		        options: {}
		      });
		
		      var accid = new _accidental.Accidental(params.type);
		      accid.setContext(this.context);
		      return accid;
		    }
		  }, {
		    key: 'Annotation',
		    value: function Annotation(params) {
		      params = setDefaults(params, {
		        text: 'p',
		        vJustify: 'below',
		        hJustify: 'center',
		        fontFamily: 'Times',
		        fontSize: 14,
		        fontWeight: 'bold italic',
		        options: {}
		      });
		
		      var annotation = new _annotation.Annotation(params.text);
		      annotation.setJustification(params.hJustify);
		      annotation.setVerticalJustification(params.vJustify);
		      annotation.setFont(params.fontFamily, params.fontSize, params.fontWeight);
		      annotation.setContext(this.context);
		      return annotation;
		    }
		  }, {
		    key: 'Articulation',
		    value: function Articulation(params) {
		      params = setDefaults(params, {
		        type: 'a.',
		        position: 'above',
		        options: {}
		      });
		
		      var articulation = new _articulation.Articulation(params.type);
		      articulation.setPosition(params.position);
		      articulation.setContext(this.context);
		      return articulation;
		    }
		  }, {
		    key: 'TextDynamics',
		    value: function TextDynamics(params) {
		      params = setDefaults(params, {
		        text: 'p',
		        duration: 'q',
		        dots: 0,
		        line: 0,
		        options: {}
		      });
		
		      var text = new _textdynamics.TextDynamics({
		        text: params.text,
		        line: params.line,
		        duration: params.duration,
		        dots: params.dots
		      });
		
		      if (this.stave) text.setStave(this.stave);
		      text.setContext(this.context);
		      this.renderQ.push(text);
		      return text;
		    }
		  }, {
		    key: 'Fingering',
		    value: function Fingering(params) {
		      params = setDefaults(params, {
		        number: '0',
		        position: 'left',
		        options: {}
		      });
		
		      var fingering = new _frethandfinger.FretHandFinger(params.number);
		      fingering.setPosition(params.position);
		      fingering.setContext(this.context);
		      return fingering;
		    }
		  }, {
		    key: 'StringNumber',
		    value: function StringNumber(params) {
		      params = setDefaults(params, {
		        number: '0',
		        position: 'left',
		        options: {}
		      });
		
		      var stringNumber = new _stringnumber.StringNumber(params.number);
		      stringNumber.setPosition(params.position);
		      stringNumber.setContext(this.context);
		      return stringNumber;
		    }
		  }, {
		    key: 'TickContext',
		    value: function TickContext() {
		      return new _tickcontext.TickContext().setContext(this.context);
		    }
		  }, {
		    key: 'ModifierContext',
		    value: function ModifierContext() {
		      return new _modifiercontext.ModifierContext();
		    }
		  }, {
		    key: 'Voice',
		    value: function Voice(params) {
		      params = setDefaults(params, {
		        time: '4/4',
		        options: {}
		      });
		      var voice = new _voice.Voice(params.time);
		      this.voices.push(voice);
		      return voice;
		    }
		  }, {
		    key: 'StaveConnector',
		    value: function StaveConnector(params) {
		      params = setDefaults(params, {
		        top_stave: null,
		        bottom_stave: null,
		        type: 'double',
		        options: {}
		      });
		      var connector = new _staveconnector.StaveConnector(params.top_stave, params.bottom_stave);
		      connector.setType(params.type).setContext(this.context);
		      this.renderQ.push(connector);
		      return connector;
		    }
		  }, {
		    key: 'Formatter',
		    value: function Formatter() {
		      return new _formatter.Formatter();
		    }
		  }, {
		    key: 'Tuplet',
		    value: function Tuplet(params) {
		      params = setDefaults(params, {
		        notes: [],
		        options: {}
		      });
		
		      var tuplet = new _tuplet.Tuplet(params.notes, params.options).setContext(this.context);
		      this.renderQ.push(tuplet);
		      return tuplet;
		    }
		  }, {
		    key: 'Beam',
		    value: function Beam(params) {
		      params = setDefaults(params, {
		        notes: [],
		        options: {
		          autoStem: false,
		          secondaryBeamBreaks: []
		        }
		      });
		
		      var beam = new _beam.Beam(params.notes, params.options.autoStem).setContext(this.context);
		      beam.breakSecondaryAt(params.options.secondaryBeamBreaks);
		      this.renderQ.push(beam);
		      return beam;
		    }
		  }, {
		    key: 'Curve',
		    value: function Curve(params) {
		      params = setDefaults(params, {
		        from: null,
		        to: null,
		        options: {}
		      });
		
		      var curve = new _curve.Curve(params.from, params.to, params.options).setContext(this.context);
		      this.renderQ.push(curve);
		      return curve;
		    }
		  }, {
		    key: 'StaveTie',
		    value: function StaveTie(params) {
		      params = setDefaults(params, {
		        from: null,
		        to: null,
		        first_indices: [0],
		        last_indices: [0],
		        text: null,
		        options: {
		          direction: undefined
		        }
		      });
		
		      var tie = new _stavetie.StaveTie({
		        first_note: params.from,
		        last_note: params.to,
		        first_indices: params.first_indices,
		        last_indices: params.last_indices
		      }, params.text);
		
		      if (params.options.direction) tie.setDirection(params.options.direction);
		      tie.setContext(this.context);
		      this.renderQ.push(tie);
		      return tie;
		    }
		  }, {
		    key: 'StaveLine',
		    value: function StaveLine(params) {
		      params = setDefaults(params, {
		        from: null,
		        to: null,
		        first_indices: [0],
		        last_indices: [0],
		        options: {}
		      });
		
		      var line = new _staveline.StaveLine({
		        first_note: params.from,
		        last_note: params.to,
		        first_indices: params.first_indices,
		        last_indices: params.last_indices
		      });
		
		      if (params.options.text) line.setText(params.options.text);
		      if (params.options.font) line.setFont(params.options.font);
		
		      line.setContext(this.context);
		      this.renderQ.push(line);
		      return line;
		    }
		  }, {
		    key: 'VibratoBracket',
		    value: function VibratoBracket(params) {
		      params = setDefaults(params, {
		        from: null,
		        to: null,
		        options: {
		          harsh: false
		        }
		      });
		
		      var vibratoBracket = new _vibratobracket.VibratoBracket({
		        start: params.from,
		        stop: params.to
		      });
		
		      if (params.options.line) vibratoBracket.setLine(params.options.line);
		      if (params.options.harsh) vibratoBracket.setHarsh(params.options.harsh);
		
		      vibratoBracket.setContext(this.context);
		      this.renderQ.push(vibratoBracket);
		
		      return vibratoBracket;
		    }
		  }, {
		    key: 'TextBracket',
		    value: function TextBracket(params) {
		      params = setDefaults(params, {
		        from: null,
		        to: null,
		        text: '',
		        options: {
		          superscript: '',
		          position: 1
		        }
		      });
		
		      var textBracket = new _textbracket.TextBracket({
		        start: params.from,
		        stop: params.to,
		        text: params.text,
		        superscript: params.options.superscript,
		        position: params.options.position
		      });
		
		      if (params.options.line) textBracket.setLine(params.options.line);
		      if (params.options.font) textBracket.setFont(params.options.font);
		
		      textBracket.setContext(this.context);
		      this.renderQ.push(textBracket);
		      return textBracket;
		    }
		  }, {
		    key: 'System',
		    value: function System() {
		      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		
		      params.factory = this;
		      var system = new _system.System(params).setContext(this.context);
		      this.systems.push(system);
		      return system;
		    }
		  }, {
		    key: 'EasyScore',
		    value: function EasyScore() {
		      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		
		      params.factory = this;
		      return new _easyscore.EasyScore(params);
		    }
		  }, {
		    key: 'PedalMarking',
		    value: function PedalMarking() {
		      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		
		      params = setDefaults(params, {
		        notes: [],
		        options: {
		          style: 'mixed'
		        }
		      });
		
		      var pedal = new _pedalmarking.PedalMarking(params.notes);
		      pedal.setStyle(_pedalmarking.PedalMarking.StylesString[params.options.style]);
		      pedal.setContext(this.context);
		      this.renderQ.push(pedal);
		      return pedal;
		    }
		  }, {
		    key: 'NoteSubGroup',
		    value: function NoteSubGroup() {
		      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		
		      params = setDefaults(params, {
		        notes: [],
		        options: {}
		      });
		
		      var group = new _notesubgroup.NoteSubGroup(params.notes);
		      group.setContext(this.context);
		      return group;
		    }
		  }, {
		    key: 'draw',
		    value: function draw() {
		      var _this = this;
		
		      this.systems.forEach(function (i) {
		        return i.setContext(_this.context).format();
		      });
		      this.staves.forEach(function (i) {
		        return i.setContext(_this.context).draw();
		      });
		      this.voices.forEach(function (i) {
		        return i.setContext(_this.context).draw();
		      });
		      this.renderQ.forEach(function (i) {
		        if (!i.isRendered()) i.setContext(_this.context).draw();
		      });
		      this.systems.forEach(function (i) {
		        return i.setContext(_this.context).draw();
		      });
		      this.reset();
		    }
		  }], [{
		    key: 'newFromElementId',
		    value: function newFromElementId(elementId) {
		      var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
		      var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 200;
		
		      return new Factory({ renderer: { elementId: elementId, width: width, height: height } });
		    }
		  }]);
	
		  return Factory;
		}();
	
	/***/ },
	/* 77 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.EasyScore = exports.X = undefined;
		
		var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
		
		var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// This class implements a parser for a simple language to generate
		// VexFlow objects.
		
		var _vex = __webpack_require__(1);
		
		var _stavenote = __webpack_require__(20);
		
		var _parser = __webpack_require__(78);
		
		var _articulation = __webpack_require__(37);
		
		function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// To enable logging for this class. Set `Vex.Flow.EasyScore.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (EasyScore.DEBUG) _vex.Vex.L('Vex.Flow.EasyScore', args);
		}
		
		var X = exports.X = _vex.Vex.MakeException('EasyScoreError');
		
		var Grammar = function () {
		  function Grammar(builder) {
		    _classCallCheck(this, Grammar);
		
		    this.builder = builder;
		  }
		
		  _createClass(Grammar, [{
		    key: 'begin',
		    value: function begin() {
		      return this.LINE;
		    }
		  }, {
		    key: 'LINE',
		    value: function LINE() {
		      return {
		        expect: [this.PIECE, this.PIECES, this.EOL]
		      };
		    }
		  }, {
		    key: 'PIECE',
		    value: function PIECE() {
		      var _this = this;
		
		      return {
		        expect: [this.CHORDORNOTE, this.PARAMS],
		        run: function run() {
		          return _this.builder.commitPiece();
		        }
		      };
		    }
		  }, {
		    key: 'PIECES',
		    value: function PIECES() {
		      return {
		        expect: [this.COMMA, this.PIECE],
		        zeroOrMore: true
		      };
		    }
		  }, {
		    key: 'PARAMS',
		    value: function PARAMS() {
		      return {
		        expect: [this.DURATION, this.TYPE, this.DOTS, this.OPTS]
		      };
		    }
		  }, {
		    key: 'CHORDORNOTE',
		    value: function CHORDORNOTE() {
		      return {
		        expect: [this.CHORD, this.SINGLENOTE],
		        or: true
		      };
		    }
		  }, {
		    key: 'CHORD',
		    value: function CHORD() {
		      var _this2 = this;
		
		      return {
		        expect: [this.LPAREN, this.NOTES, this.RPAREN],
		        run: function run(state) {
		          return _this2.builder.addChord(state.matches[1]);
		        }
		      };
		    }
		  }, {
		    key: 'NOTES',
		    value: function NOTES() {
		      return {
		        expect: [this.NOTE],
		        oneOrMore: true
		      };
		    }
		  }, {
		    key: 'NOTE',
		    value: function NOTE() {
		      return {
		        expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE]
		      };
		    }
		  }, {
		    key: 'SINGLENOTE',
		    value: function SINGLENOTE() {
		      var _this3 = this;
		
		      return {
		        expect: [this.NOTENAME, this.ACCIDENTAL, this.OCTAVE],
		        run: function run(state) {
		          return _this3.builder.addSingleNote(state.matches[0], state.matches[1], state.matches[2]);
		        }
		      };
		    }
		  }, {
		    key: 'ACCIDENTAL',
		    value: function ACCIDENTAL() {
		      return {
		        expect: [this.ACCIDENTALS],
		        maybe: true
		      };
		    }
		  }, {
		    key: 'DOTS',
		    value: function DOTS() {
		      var _this4 = this;
		
		      return {
		        expect: [this.DOT],
		        zeroOrMore: true,
		        run: function run(state) {
		          return _this4.builder.setNoteDots(state.matches[0]);
		        }
		      };
		    }
		  }, {
		    key: 'TYPE',
		    value: function TYPE() {
		      var _this5 = this;
		
		      return {
		        expect: [this.SLASH, this.MAYBESLASH, this.TYPES],
		        maybe: true,
		        run: function run(state) {
		          return _this5.builder.setNoteType(state.matches[2]);
		        }
		      };
		    }
		  }, {
		    key: 'DURATION',
		    value: function DURATION() {
		      var _this6 = this;
		
		      return {
		        expect: [this.SLASH, this.DURATIONS],
		        maybe: true,
		        run: function run(state) {
		          return _this6.builder.setNoteDuration(state.matches[1]);
		        }
		      };
		    }
		  }, {
		    key: 'OPTS',
		    value: function OPTS() {
		      return {
		        expect: [this.LBRACKET, this.KEYVAL, this.KEYVALS, this.RBRACKET],
		        maybe: true
		      };
		    }
		  }, {
		    key: 'KEYVALS',
		    value: function KEYVALS() {
		      return {
		        expect: [this.COMMA, this.KEYVAL],
		        zeroOrMore: true
		      };
		    }
		  }, {
		    key: 'KEYVAL',
		    value: function KEYVAL() {
		      var _this7 = this;
		
		      var unquote = function unquote(str) {
		        return str.slice(1, -1);
		      };
		
		      return {
		        expect: [this.KEY, this.EQUALS, this.VAL],
		        run: function run(state) {
		          return _this7.builder.addNoteOption(state.matches[0], unquote(state.matches[2]));
		        }
		      };
		    }
		  }, {
		    key: 'VAL',
		    value: function VAL() {
		      return {
		        expect: [this.SVAL, this.DVAL],
		        or: true
		      };
		    }
		  }, {
		    key: 'KEY',
		    value: function KEY() {
		      return { token: '[a-zA-Z][a-zA-Z0-9]*' };
		    }
		  }, {
		    key: 'DVAL',
		    value: function DVAL() {
		      return { token: '["][^"]*["]' };
		    }
		  }, {
		    key: 'SVAL',
		    value: function SVAL() {
		      return { token: "['][^']*[']" };
		    }
		  }, {
		    key: 'NOTENAME',
		    value: function NOTENAME() {
		      return { token: '[a-gA-G]' };
		    }
		  }, {
		    key: 'OCTAVE',
		    value: function OCTAVE() {
		      return { token: '[0-9]+' };
		    }
		  }, {
		    key: 'ACCIDENTALS',
		    value: function ACCIDENTALS() {
		      return { token: 'bbs|bb|bss|bs|b|db|d|##|#|n|\\+\\+-|\\+-|\\+\\+|\\+|k|o' };
		    }
		  }, {
		    key: 'DURATIONS',
		    value: function DURATIONS() {
		      return { token: '[0-9whq]+' };
		    }
		  }, {
		    key: 'TYPES',
		    value: function TYPES() {
		      return { token: '[rRsSxX]' };
		    }
		  }, {
		    key: 'LPAREN',
		    value: function LPAREN() {
		      return { token: '[(]' };
		    }
		  }, {
		    key: 'RPAREN',
		    value: function RPAREN() {
		      return { token: '[)]' };
		    }
		  }, {
		    key: 'COMMA',
		    value: function COMMA() {
		      return { token: '[,]' };
		    }
		  }, {
		    key: 'DOT',
		    value: function DOT() {
		      return { token: '[.]' };
		    }
		  }, {
		    key: 'SLASH',
		    value: function SLASH() {
		      return { token: '[/]' };
		    }
		  }, {
		    key: 'MAYBESLASH',
		    value: function MAYBESLASH() {
		      return { token: '[/]?' };
		    }
		  }, {
		    key: 'EQUALS',
		    value: function EQUALS() {
		      return { token: '[=]' };
		    }
		  }, {
		    key: 'LBRACKET',
		    value: function LBRACKET() {
		      return { token: '\\[' };
		    }
		  }, {
		    key: 'RBRACKET',
		    value: function RBRACKET() {
		      return { token: '\\]' };
		    }
		  }, {
		    key: 'EOL',
		    value: function EOL() {
		      return { token: '$' };
		    }
		  }]);
		
		  return Grammar;
		}();
		
		var Builder = function () {
		  function Builder(factory) {
		    _classCallCheck(this, Builder);
		
		    this.factory = factory;
		    this.commitHooks = [];
		    this.reset();
		  }
		
		  _createClass(Builder, [{
		    key: 'reset',
		    value: function reset() {
		      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		
		      this.options = {
		        stem: 'auto',
		        clef: 'treble'
		      };
		      this.elements = {
		        notes: [],
		        accidentals: []
		      };
		      this.rollingDuration = '8';
		      this.resetPiece();
		      _extends(this.options, options);
		    }
		  }, {
		    key: 'getFactory',
		    value: function getFactory() {
		      return this.factory;
		    }
		  }, {
		    key: 'getElements',
		    value: function getElements() {
		      return this.elements;
		    }
		  }, {
		    key: 'addCommitHook',
		    value: function addCommitHook(commitHook) {
		      this.commitHooks.push(commitHook);
		    }
		  }, {
		    key: 'resetPiece',
		    value: function resetPiece() {
		      L('resetPiece');
		      this.piece = {
		        chord: [],
		        duration: this.rollingDuration,
		        dots: 0,
		        type: undefined,
		        options: {}
		      };
		    }
		  }, {
		    key: 'setNoteDots',
		    value: function setNoteDots(dots) {
		      L('setNoteDots:', dots);
		      if (dots) this.piece.dots = dots.length;
		    }
		  }, {
		    key: 'setNoteDuration',
		    value: function setNoteDuration(duration) {
		      L('setNoteDuration:', duration);
		      this.rollingDuration = this.piece.duration = duration || this.rollingDuration;
		    }
		  }, {
		    key: 'setNoteType',
		    value: function setNoteType(type) {
		      L('setNoteType:', type);
		      if (type) this.piece.type = type;
		    }
		  }, {
		    key: 'addNoteOption',
		    value: function addNoteOption(key, value) {
		      L('addNoteOption: key:', key, 'value:', value);
		      this.piece.options[key] = value;
		    }
		  }, {
		    key: 'addNote',
		    value: function addNote(key, accid, octave) {
		      L('addNote:', key, accid, octave);
		      this.piece.chord.push({ key: key, accid: accid, octave: octave });
		    }
		  }, {
		    key: 'addSingleNote',
		    value: function addSingleNote(key, accid, octave) {
		      L('addSingleNote:', key, accid, octave);
		      this.addNote(key, accid, octave);
		    }
		  }, {
		    key: 'addChord',
		    value: function addChord(notes) {
		      var _this8 = this;
		
		      L('startChord');
		      if (_typeof(notes[0]) !== 'object') {
		        this.addSingleNote(notes[0]);
		      } else {
		        notes.forEach(function (n) {
		          if (n) _this8.addNote.apply(_this8, _toConsumableArray(n));
		        });
		      }
		      L('endChord');
		    }
		  }, {
		    key: 'commitPiece',
		    value: function commitPiece() {
		      var _this9 = this;
		
		      L('commitPiece');
		      var factory = this.factory;
		
		
		      if (!factory) return;
		
		      var options = _extends({}, this.options, this.piece.options);
		      var stem = options.stem,
		          clef = options.clef;
		
		      var autoStem = stem.toLowerCase() === 'auto';
		      var stemDirection = !autoStem && stem.toLowerCase() === 'up' ? _stavenote.StaveNote.STEM_UP : _stavenote.StaveNote.STEM_DOWN;
		
		      // Build StaveNotes.
		      var _piece = this.piece,
		          chord = _piece.chord,
		          duration = _piece.duration,
		          dots = _piece.dots,
		          type = _piece.type;
		
		      var keys = chord.map(function (note) {
		        return note.key + '/' + note.octave;
		      });
		      var note = factory.StaveNote({
		        keys: keys,
		        duration: duration,
		        dots: dots,
		        type: type,
		        clef: clef,
		        auto_stem: autoStem
		      });
		      if (!autoStem) note.setStemDirection(stemDirection);
		
		      // Attach accidentals.
		      var accids = chord.map(function (note) {
		        return note.accid || null;
		      });
		      accids.forEach(function (accid, i) {
		        if (accid) note.addAccidental(i, factory.Accidental({ type: accid }));
		      });
		
		      // Attach dots.
		      for (var i = 0; i < dots; i++) {
		        note.addDotToAll();
		      }this.commitHooks.forEach(function (fn) {
		        return fn(options, note, _this9);
		      });
		
		      this.elements.notes.push(note);
		      this.elements.accidentals.concat(accids);
		      this.resetPiece();
		    }
		  }]);
		
		  return Builder;
		}();
		
		function setId(_ref, note) {
		  var id = _ref.id;
		
		  if (id === undefined) return;
		
		  note.setAttribute('id', id);
		}
		
		function setClass(options, note) {
		  if (!options.class) return;
		
		  var commaSeparatedRegex = /\s*,\s*/;
		
		  options.class.split(commaSeparatedRegex).forEach(function (className) {
		    return note.addClass(className);
		  });
		}
		
		var EasyScore = exports.EasyScore = function () {
		  function EasyScore() {
		    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
		
		    _classCallCheck(this, EasyScore);
		
		    this.setOptions(options);
		    this.defaults = {
		      clef: 'treble',
		      time: '4/4',
		      stem: 'auto'
		    };
		  }
		
		  _createClass(EasyScore, [{
		    key: 'set',
		    value: function set(defaults) {
		      _extends(this.defaults, defaults);
		      return this;
		    }
		  }, {
		    key: 'setOptions',
		    value: function setOptions(options) {
		      var _this10 = this;
		
		      this.options = _extends({
		        factory: null,
		        builder: null,
		        commitHooks: [setId, setClass, _articulation.Articulation.easyScoreHook],
		        throwOnError: false
		      }, options);
		
		      this.factory = this.options.factory;
		      this.builder = this.options.builder || new Builder(this.factory);
		      this.grammar = new Grammar(this.builder);
		      this.parser = new _parser.Parser(this.grammar);
		      this.options.commitHooks.forEach(function (commitHook) {
		        return _this10.addCommitHook(commitHook);
		      });
		      return this;
		    }
		  }, {
		    key: 'setContext',
		    value: function setContext(context) {
		      if (this.factory) this.factory.setContext(context);
		      return this;
		    }
		  }, {
		    key: 'parse',
		    value: function parse(line) {
		      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		
		      this.builder.reset(options);
		      var result = this.parser.parse(line);
		      if (!result.success && this.options.throwOnError) {
		        throw new X('Error parsing line: ' + line, result);
		      }
		      return result;
		    }
		  }, {
		    key: 'beam',
		    value: function beam(notes) {
		      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		
		      this.factory.Beam({ notes: notes, options: options });
		      return notes;
		    }
		  }, {
		    key: 'tuplet',
		    value: function tuplet(notes) {
		      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		
		      this.factory.Tuplet({ notes: notes, options: options });
		      return notes;
		    }
		  }, {
		    key: 'notes',
		    value: function notes(line) {
		      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
		
		      options = _extends({ clef: this.defaults.clef, stem: this.defaults.stem }, options);
		      this.parse(line, options);
		      return this.builder.getElements().notes;
		    }
		  }, {
		    key: 'voice',
		    value: function voice(notes, voiceOptions) {
		      voiceOptions = _extends({ time: this.defaults.time }, voiceOptions);
		      return this.factory.Voice(voiceOptions).addTickables(notes);
		    }
		  }, {
		    key: 'addCommitHook',
		    value: function addCommitHook(commitHook) {
		      return this.builder.addCommitHook(commitHook);
		    }
		  }]);
	
		  return EasyScore;
		}();
	
	/***/ },
	/* 78 */
	/***/ function(module, exports, __webpack_require__) {
	
		'use strict';
		
		Object.defineProperty(exports, "__esModule", {
		  value: true
		});
		exports.Parser = exports.X = undefined;
		
		var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); // [VexFlow](http://vexflow.com) - Copyright (c) Mohit Muthanna 2010.
		//
		// A generic text parsing class for VexFlow.
		
		var _vex = __webpack_require__(1);
		
		function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
		
		// To enable logging for this class. Set `Vex.Flow.Parser.DEBUG` to `true`.
		function L() {
		  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
		    args[_key] = arguments[_key];
		  }
		
		  if (Parser.DEBUG) _vex.Vex.L('Vex.Flow.Parser', args);
		}
		
		var X = exports.X = _vex.Vex.MakeException('ParserError');
		
		// Converts parser results into an easy to reference list that can be
		// used in triggers.
		function flattenMatches(results) {
		  if (results.matchedString !== undefined) return results.matchedString;
		  if (results.results) return flattenMatches(results.results);
		  if (results.length === 1) return flattenMatches(results[0]);
		  if (results.length === 0) return null;
		  return results.map(flattenMatches);
		}
		
		// This is the base parser class. Given an arbitrary context-free grammar, it
		// can parse any line and execute code when specific rules are met (e.g.,
		// when a string is terminated.)
		
		var Parser = exports.Parser = function () {
		  // For an example of a simple grammar, take a look at tests/parser_tests.js or
		  // the EasyScore grammar in easyscore.js.
		  function Parser(grammar) {
		    _classCallCheck(this, Parser);
		
		    this.grammar = grammar;
		  }
		
		  // Parse `line` using current grammar. Returns {success: true} if the
		  // line parsed correctly, otherwise returns `{success: false, errorPos: N}`
		  // where `errorPos` is the location of the error in the string.
		
		
		  _createClass(Parser, [{
		    key: 'parse',
		    value: function parse(line) {
		      this.line = line;
		      this.pos = 0;
		      this.errorPos = -1;
		      var results = this.expect(this.grammar.begin());
		      results.errorPos = this.errorPos;
		      return results;
		    }
		  }, {
		    key: 'matchFail',
		    value: function matchFail(returnPos) {
		      if (this.errorPos === -1) this.errorPos = this.pos;
		      this.pos = returnPos;
		    }
		  }, {
		    key: 'matchSuccess',
		    value: function matchSuccess() {
		      this.errorPos = -1;
		    }
		
		    // Look for `token` in this.line[this.pos], and return success
		    // if one is found. `token` is specified as a regular expression.
		
		  }, {
		    key: 'matchToken',
		    value: function matchToken(token) {
		      var noSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		
		      var regexp = noSpace ? new RegExp('^((' + token + '))') : new RegExp('^((' + token + ')\\s*)');
		      var workingLine = this.line.slice(this.pos);
		      var result = workingLine.match(regexp);
		      if (result !== null) {
		        return {
		          success: true,
		          matchedString: result[2],
		          incrementPos: result[1].length,
		          pos: this.pos
		        };
		      } else {
		        return {
		          success: false,
		          pos: this.pos
		        };
		      }
		    }
		
		    // Execute rule to match a sequence of tokens (or rules). If `maybe` is
		    // set, then return success even if the token is not found, but reset
		    // the position before exiting.
		
		  }, {
		    key: 'expectOne',
		    value: function expectOne(rule) {
		      var maybe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		
		      var results = [];
		      var pos = this.pos;
		
		      var allMatches = true;
		      var oneMatch = false;
		      maybe = maybe === true || rule.maybe === true;
		
		      // Execute all sub rules in sequence.
		      for (var i = 0; i < rule.expect.length; i++) {
		        var next = rule.expect[i];
		        var localPos = this.pos;
		        var result = this.expect(next);
		
		        // If `rule.or` is set, then return success if any one
		        // of the subrules match, else all subrules must match.
		        if (result.success) {
		          results.push(result);
		          oneMatch = true;
		          if (rule.or) break;
		        } else {
		          allMatches = false;
		          if (!rule.or) {
		            this.pos = localPos;
		            break;
		          }
		        }
		      }
		
		      var gotOne = rule.or && oneMatch || allMatches;
		      var success = gotOne || maybe === true;
		      if (maybe && !gotOne) this.pos = pos;
		      if (success) this.matchSuccess();else this.matchFail(pos);
		      return { success: success, results: results, numMatches: gotOne ? 1 : 0 };
		    }
		
		    // Try to match multiple (one or more) instances of the rule. If `maybe` is set,
		    // then a failed match is also a success (but the position is reset).
		
		  }, {
		    key: 'expectOneOrMore',
		    value: function expectOneOrMore(rule) {
		      var maybe = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
		
		      var results = [];
		      var pos = this.pos;
		      var numMatches = 0;
		      var more = true;
		
		      do {
		        var result = this.expectOne(rule);
		        if (result.success) {
		          numMatches++;
		          results.push(result.results);
		        } else {
		          more = false;
		        }
		      } while (more);
		
		      var success = numMatches > 0 || maybe === true;
		      if (maybe && !(numMatches > 0)) this.pos = pos;
		      if (success) this.matchSuccess();else this.matchFail(pos);
		      return { success: success, results: results, numMatches: numMatches };
		    }
		
		    // Match zero or more instances of `rule`. Offloads to `expectOneOrMore`.
		
		  }, {
		    key: 'expectZeroOrMore',
		    value: function expectZeroOrMore(rule) {
		      return this.expectOneOrMore(rule, true);
		    }
		
		    // Execute the rule produced by the provided the `rules` function. This
		    // ofloads to one of the above matchers and consolidates the results. It is also
		    // responsible for executing any code triggered by the rule (in `rule.run`.)
		
		  }, {
		    key: 'expect',
		    value: function expect(rules) {
		      L('Evaluating rules:', rules);
		      var result = void 0;
		      if (!rules) {
		        throw new X('Invalid Rule: ' + rules, rules);
		      }
		
		      // Get rule from Grammar class.
		      var rule = rules.bind(this.grammar)();
		
		      if (rule.token) {
		        // Base case: parse the regex and throw an error if the
		        // line doesn't match.
		        result = this.matchToken(rule.token, rule.noSpace === true);
		        if (result.success) {
		          // Token match! Update position and throw away parsed portion
		          // of string.
		          this.pos += result.incrementPos;
		        }
		      } else if (rule.expect) {
		        if (rule.oneOrMore) {
		          result = this.expectOneOrMore(rule);
		        } else if (rule.zeroOrMore) {
		          result = this.expectZeroOrMore(rule);
		        } else {
		          result = this.expectOne(rule);
		        }
		      } else {
		        throw new X('Bad grammar! No `token` or `expect` property', rule);
		      }
		
		      // If there's a trigger attached to this rule, then pull it.
		      result.matches = [];
		      if (result.results) result.results.forEach(function (r) {
		        return result.matches.push(flattenMatches(r));
		      });
		      if (rule.run && result.success) rule.run(result);
		      return result;
		    }
		  }]);
	
		  return Parser;
		}();
	
	/***/ }
	/******/ ])
	});
	;
	//# sourceMappingURL=vexflow-debug.js.map

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict'
	/**
	 * The `tonal` module is a facade to all the rest of the modules. They are namespaced,
	 * so for example to use `pc` function from `tonal-note` you have to write:
	 * `tonal.note.pc`
	 *
	 * Some modules are NOT namespaced for developer comfort:
	 *
	 * - `tonal-array`: for example `tonal.map(tonal.note.pc, 'C#2')`
	 * - `tonal-transpose`: for example `tonal.transpose('C', '3M')`
	 * - `tonal-distance`: for example `tonal.interval('C3', 'G4')`
	 *
	 * It also adds a couple of function aliases:
	 *
	 * - `tonal.scale` is an alias for `tonal.scale.notes`
	 * - `tonal.chord` is an alias for `tonal.chord.notes`
	 *
	 * @example
	 * var tonal = require('tonal')
	 * tonal.transpose(tonal.note.pc('C#2'), 'M3') // => 'E#'
	 * tonal.chord('Dmaj7') // => ['D', 'F#', 'A', 'C#']
	 *
	 * @module tonal
	 */
	
	var assign = Object.assign
	var tonal = {}
	
	assign(tonal, __webpack_require__(8))
	assign(tonal, __webpack_require__(13))
	assign(tonal, __webpack_require__(16))
	assign(tonal, __webpack_require__(14))
	
	tonal.note = __webpack_require__(17)
	tonal.ivl = __webpack_require__(20)
	tonal.midi = __webpack_require__(18)
	tonal.freq = __webpack_require__(19)
	tonal.range = __webpack_require__(21)
	tonal.key = __webpack_require__(26)
	
	tonal.scale = function (name) { return tonal.scale.notes(name) }
	assign(tonal.scale, __webpack_require__(28))
	tonal.chord = function (name) { return tonal.chord.notes(name) }
	assign(tonal.chord, __webpack_require__(31))
	
	tonal.pitch = __webpack_require__(9)
	tonal.notation = __webpack_require__(27)
	tonal.progression = __webpack_require__(33)
	tonal.sonority = __webpack_require__(34)
	tonal.pitchset = __webpack_require__(35)
	tonal.pcset = __webpack_require__(22)
	
	if (typeof module === 'object' && module.exports) module.exports = tonal
	if (typeof window !== 'undefined') window.Tonal = tonal


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalPitch = __webpack_require__(9);
	var tonalTranspose = __webpack_require__(13);
	var tonalDistance = __webpack_require__(14);
	var toArr = __webpack_require__(15);
	
	// utility
	var isArr = Array.isArray
	function hasVal (e) { return e || e === 0 }
	
	/**
	 * Convert anything to array. Speifically, split string separated by spaces,
	 * commas or bars. If you give it an actual array, it returns it without
	 * modification.
	 *
	 * This function __always__ returns an array (null or undefined values are converted
	 * to empty arrays)
	 *
	 * Thanks to this function, the rest of the functions of this module accepts
	 * strings as an array parameter.
	 *
	 * @function
	 * @param {*} source - the thing to get an array from
	 * @return {Array} the object as an array
	 *
	 * @example
	 * import { asArr } from 'tonal-arrays'
	 * asArr('C D E F G') // => ['C', 'D', 'E', 'F', 'G']
	 * asArr('A, B, c') // => ['A', 'B', 'c']
	 * asArr('1 | 2 | x') // => ['1', '2', 'x']
	 */
	var asArr = toArr.use(/\s*\|\s*|\s*,\s*|\s+/)
	
	/**
	 * Return a new array with the elements mapped by a function.
	 * Basically the same as the JavaScript standard `array.map` but with
	 * two enhacements:
	 *
	 * - Arrays can be expressed as strings (see [asArr])
	 * - This function can be partially applied. This is useful to create _mapped_
	 * versions of single element functions. For an excellent introduction of
	 * the adventages [read this](https://drboolean.gitbooks.io/mostly-adequate-guide/content/ch4.html)
	 *
	 * @param {Function} fn - the function
	 * @param {Array|String} arr - the array to be mapped
	 * @return {Array}
	 * @example
	 * var arr = require('tonal-arr')
	 * var toUp = arr.map(function(e) { return e.toUpperCase() })
	 * toUp('a b c') // => ['A', 'B', 'C']
	 *
	 * @example
	 * var tonal = require('tonal')
	 * tonal.map(tonal.transpose('M3'), 'C D E') // => ['E', 'F#', 'G#']
	 */
	function map (fn, list) {
	  return arguments.length > 1 ? map(fn)(list)
	    : function (l) { return asArr(l).map(fn) }
	}
	
	/**
	 * Return a copy of the array with the null values removed
	 * @param {String|Array} list
	 * @return {Array}
	 * @example
	 * tonal.compact(['a', 'b', null, 'c']) // => ['a', 'b', 'c']
	 */
	function compact (arr) {
	  return asArr(arr).filter(hasVal)
	}
	
	/**
	 * Filter an array with a function. Again, almost the same as JavaScript standard
	 * filter function but:
	 *
	 * - It accepts strings as arrays
	 * - Can be partially applied
	 *
	 * @param {Function} fn
	 * @param {String|Array} arr
	 * @return {Array}
	 * @example
	 * t.filter(t.noteName, 'a b c x bb') // => [ 'a', 'b', 'c', 'bb' ]
	 */
	function filter (fn, list) {
	  return arguments.length > 1 ? filter(fn)(list)
	    : function (l) { return asArr(l).filter(fn) }
	}
	
	// a custom height function that
	// - returns -Infinity for non-pitch objects
	// - assumes pitch classes has octave -100 (so are sorted before that notes)
	function objHeight (p) {
	  if (!p) return -Infinity
	  var f = tonalPitch.fifths(p) * 7
	  var o = tonalPitch.focts(p) || -Math.floor(f / 12) - 100
	  return f + o * 12
	}
	
	// ascending comparator
	function ascComp (a, b) { return objHeight(a) - objHeight(b) }
	// descending comparator
	function descComp (a, b) { return -ascComp(a, b) }
	
	/**
	 * Sort a list of notes or intervals in ascending or descending pitch order.
	 * It removes from the list any thing is not a pitch (a note or interval)
	 *
	 * Note this function returns a __copy__ of the array, it does NOT modify
	 * the original.
	 *
	 * @param {Array|String} list - the list of notes or intervals
	 * @param {Boolean|Function} comp - (Optional) comparator.
	 * Ascending pitch by default. Pass a `false` to order descending
	 * or a custom comparator function (that receives pitches in array notation).
	 * Note that any other value is ignored.
	 * @example
	 * array.sort('D E C') // => ['C', 'D', 'E']
	 * array.sort('D E C', false) // => ['E', 'D', 'C']
	 * // if is not a note, it wil be removed
	 * array.sort('g h f i c') // => ['C', 'F', 'G']
	 */
	function sort (list, comp) {
	  var fn = arguments.length === 1 || comp === true ? ascComp
	    : comp === false ? descComp
	    : typeof comp === 'function' ? comp : ascComp
	  // if the list is an array, make a copy
	  list = Array.isArray(list) ? list.slice() : asArr(list)
	  return listFn(function (arr) {
	    return arr.sort(fn).filter(hasVal)
	  }, list)
	}
	
	/**
	 * Randomizes the order of the specified array using the Fisher–Yates shuffle.
	 *
	 * @function
	 * @param {Array|String} arr - the array
	 * @return {Array} the shuffled array
	 *
	 * @example
	 * import { shuffle } from 'tonal-arrays'
	 * @example
	 * var tonal = require('tonal')
	 * tonal.shuffle('C D E F')
	 */
	var shuffle = listFn(function (arr) {
	  var i, t
	  var m = arr.length
	  while (m) {
	    i = Math.random() * m-- | 0
	    t = arr[m]
	    arr[m] = arr[i]
	    arr[i] = t
	  }
	  return arr
	})
	
	function trOct (n) { return tonalTranspose.transpose(tonalPitch.pitch(0, n, 1)) }
	
	/**
	 * Rotates a list a number of times. It's completly agnostic about the
	 * contents of the list.
	 * @param {Integer} times - the number of rotations
	 * @param {Array|String} list - the list to be rotated
	 * @return {Array} the rotated array
	 */
	function rotate (times, list) {
	  var arr = asArr(list)
	  var len = arr.length
	  var n = ((times % len) + len) % len
	  return arr.slice(n, len).concat(arr.slice(0, n))
	}
	
	/**
	 * Rotates an ascending list of pitches n times keeping the ascending property.
	 * This functions assumes the list is an ascending list of pitches, and
	 * transposes the them to ensure they are ascending after rotation.
	 * It can be used, for example, to invert chords.
	 *
	 * @param {Integer} times - the number of rotations
	 * @param {Array|String} list - the list to be rotated
	 * @return {Array} the rotated array
	 */
	function rotateAsc (times, list) {
	  return listFn(function (arr) {
	    var len = arr.length
	    var n = ((times % len) + len) % len
	    var head = arr.slice(n, len)
	    var tail = arr.slice(0, n)
	    // See if the first note of tail is lower than the last of head
	    var s = tonalDistance.semitones(head[len - n - 1], tail[0])
	    if (s < 0) {
	      var octs = Math.floor(s / 12)
	      if (times < 0) head = head.map(trOct(octs))
	      else tail = tail.map(trOct(-octs))
	    }
	    return head.concat(tail)
	  }, list)
	}
	
	/**
	 * Select elements from a list.
	 *
	 * @param {String|Array} numbers - a __1-based__ index of the elements
	 * @param {String|Array} list - the list of pitches
	 * @return {Array} the selected elements (with nulls if not valid index)
	 *
	 * @example
	 * import { select } from 'tonal-array'
	 * select('1 3 5', 'C D E F G A B') // => ['C', 'E', 'G']
	 * select('-1 0 1 2 3', 'C D') // => [ null, null, 'C', 'D', null ]
	 */
	function select (nums, list) {
	  if (arguments.length === 1) return function (l) { return select(nums, l) }
	  var arr = asArr(list)
	  return asArr(nums).map(function (n) {
	    return arr[n - 1] || null
	  })
	}
	
	// http://stackoverflow.com/questions/9960908/permutations-in-javascript
	/**
	 * Get all permutations of a list
	 * @param {Array|Strng} list - the list
	 * @return {Array<Array>} an array with all the permutations
	 */
	function permutations (list) {
	  list = asArr(list)
	  if (list.length === 0) return [[]]
	  return permutations(list.slice(1)).reduce(function (acc, perm) {
	    return acc.concat(list.map(function (e, pos) {
	      var new_perm = perm.slice()
	      new_perm.splice(pos, 0, list[0])
	      return new_perm
	    }))
	  }, [])
	}
	
	// #### Transform lists in array notation
	function asPitchStr (p) { return tonalPitch.strPitch(p) || p }
	function listToStr (v) {
	  return tonalPitch.isPitch(v) ? tonalPitch.strPitch(v)
	    : isArr(v) ? v.map(asPitchStr)
	    : v
	}
	
	/**
	 * Decorates a function to so it's first parameter is an array of pitches in
	 * array notation. Also, if the return value is a pitch or an array of pitches
	 * in array notation, it convert backs to strings.
	 *
	 * @private
	 * @param {Function} fn - the function to decorate
	 * @return {Function} the decorated function
	 * @example
	 * import { listFn } from 'tonal-arrays'
	 * var octUp = listFn((p) => { p[2] = p[2] + 1; return p[2] })
	 * octUp('C2 D2 E2') // => ['C3', 'D3', 'E3']
	 */
	function listFn (fn, list) {
	  if (arguments.length === 1) return function (l) { return listFn(fn, l) }
	  var arr = asArr(list).map(tonalPitch.asPitch)
	  var res = fn(arr)
	  return listToStr(res)
	}
	
	exports.asArr = asArr;
	exports.map = map;
	exports.compact = compact;
	exports.filter = filter;
	exports.sort = sort;
	exports.shuffle = shuffle;
	exports.rotate = rotate;
	exports.rotateAsc = rotateAsc;
	exports.select = select;
	exports.permutations = permutations;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var noteParser = __webpack_require__(10);
	var intervalNotation = __webpack_require__(11);
	var tonalEncoding = __webpack_require__(12);
	
	/**
	 * Create a pitch
	 * @param {Integer} fifths - the number of fifths from C or from P1
	 * @param {Integer} focts - the number of encoded octaves
	 * @param {Integer} dir - (Optional) Only required for intervals. Can be 1 or -1
	 * @return {Pitch}
	 */
	function pitch (fifths, focts, dir) {
	  return dir ? ['tnlp', [fifths, focts], dir] : ['tnlp', [fifths, focts]]
	}
	/**
	 * Test if an object is a pitch
	 * @param {Pitch}
	 * @return {Boolean}
	 */
	function isPitch (p) { return Array.isArray(p) && p[0] === 'tnlp' }
	/**
	 * Encode a pitch
	 * @param {Integer} step
	 * @param {Integer} alt
	 * @param {Integer} oct
	 * @param {Integer} dir - (Optional)
	 */
	function encode$1 (s, a, o, dir) {
	  return dir ? ['tnlp', tonalEncoding.encode(s, a, o), dir] : ['tnlp', tonalEncoding.encode(s, a, o)]
	}
	
	/**
	 * Decode a pitch
	 * @param {Pitch} the pitch
	 * @return {Array} An array with [step, alt, oct]
	 */
	function decode$1 (p) {
	  return tonalEncoding.decode.apply(null, p[1])
	}
	
	/**
	 * Get pitch type
	 * @param {Pitch}
	 * @return {String} 'ivl' or 'note' or null if not a pitch
	 */
	function pType (p) {
	  return !isPitch(p) ? null : p[2] ? 'ivl' : 'note'
	}
	/**
	 * Test if is a pitch note (with or without octave)
	 * @param {Pitch}
	 * @return {Boolean}
	 */
	function isNotePitch (p) { return pType(p) === 'note' }
	/**
	 * Test if is an interval
	 * @param {Pitch}
	 * @return {Boolean}
	 */
	function isIvlPitch (p) { return pType(p) === 'ivl' }
	/**
	 * Test if is a pitch class (a pitch note without octave)
	 * @param {Pitch}
	 * @return {Boolean}
	 */
	function isPC (p) { return isPitch(p) && p[1].length === 1 }
	
	/**
	 * Get direction of a pitch (even for notes)
	 * @param {Pitch}
	 * @return {Integer} 1 or -1
	 */
	function dir (p) { return p[2] === -1 ? -1 : 1 }
	
	/**
	 * Get encoded fifths from pitch.
	 * @param {Pitch}
	 * @return {Integer}
	 */
	function fifths (p) { return p[2] === -1 ? -p[1][0] : p[1][0] }
	/**
	 * Get encoded octaves from pitch.
	 * @param {Pitch}
	 * @return {Integer}
	 */
	function focts (p) { return p[2] === -1 ? -p[1][1] : p[1][1] }
	/**
	 * Get height of a pitch.
	 * @param {Pitch}
	 * @return {Integer}
	 */
	function height (p) { return fifths(p) * 7 + focts(p) * 12 }
	
	/**
	 * Get chroma of a pitch. The chroma is a number between 0 and 11 to represent
	 * the position of a pitch inside an octave. Is the numeric equivlent of a
	 * pitch class.
	 *
	 * @param {Pitch}
	 * @return {Integer}
	 */
	function chr (p) {
	  var f = fifths(p)
	  return 7 * f - 12 * Math.floor(f * 7 / 12)
	}
	
	// memoize parsers
	function memoize (fn) {
	  var cache = {}
	  return function (str) {
	    if (typeof str !== 'string') return null
	    return cache[str] || (cache[str] = fn(str))
	  }
	}
	
	/**
	 * Parse a note
	 * @function
	 * @param {String} str
	 * @return {Pitch} the pitch or null if not valid note string
	 */
	var parseNote = memoize(function (s) {
	  var p = noteParser.parse(s)
	  return p ? encode$1(p.step, p.alt, p.oct) : null
	})
	
	/**
	 * Parse an interval
	 * @function
	 * @param {String} str
	 * @return {Pitch} the pitch or null if not valid interval string
	 */
	var parseIvl = memoize(function (s) {
	  var p = intervalNotation.parse(s)
	  if (!p) return null
	  return p ? encode$1(p.simple - 1, p.alt, p.oct, p.dir) : null
	})
	
	/**
	 * Parse a note or an interval
	 * @param {String} str
	 * @return {Pitch} the pitch or null if not valid pitch string
	 */
	function parsePitch (s) { return parseNote(s) || parseIvl(s) }
	
	/**
	 * Ensure the given object is a note pitch. If is a string, it will be
	 * parsed. If not a note pitch or valid note string, it returns null.
	 * @param {Pitch|String}
	 * @return {Pitch}
	 */
	function asNotePitch (p) { return isNotePitch(p) ? p : parseNote(p) }
	/**
	 * Ensure the given object is a interval pitch. If is a string, it will be
	 * parsed. If not a interval pitch or valid interval string, it returns null.
	 * @param {Pitch|String}
	 * @return {Pitch}
	 */
	function asIvlPitch (p) { return isIvlPitch(p) ? p : parseIvl(p) }
	/**
	 * Ensure the given object is a pitch. If is a string, it will be
	 * parsed. If not a pitch or valid pitch string, it returns null.
	 * @param {Pitch|String}
	 * @return {Pitch}
	 */
	function asPitch (p) { return isPitch(p) ? p : parsePitch(p) }
	
	/**
	 * Convert a note pitch to string representation
	 * @param {Pitch}
	 * @return {String}
	 */
	function strNote (p) {
	  if (!isNotePitch(p)) return null
	  return noteParser.build.apply(null, decode$1(p))
	}
	
	/**
	 * Convert a interval pitch to string representation
	 * @param {Pitch}
	 * @return {String}
	 */
	function strIvl (p) {
	  if (!isIvlPitch(p)) return null
	  // decode to [step, alt, oct]
	  var d = decode$1(p)
	  // d = [step, alt, oct]
	  var num = d[0] + 1 + 7 * d[2]
	  return p[2] * num + intervalNotation.altToQ(num, d[1])
	}
	
	/**
	 * Convert a pitch to string representation (either notes or intervals)
	 * @param {Pitch}
	 * @return {String}
	 */
	function strPitch (p) { return strNote(p) || strIvl(p) }
	
	// A function that creates a decorator
	// The returned function can _decorate_ other functions to parse and build
	// string representations
	function decorator (is, parse, str) {
	  return function (fn) {
	    return function (v) {
	      var i = is(v)
	      // if the value is in pitch notation no conversion
	      if (i) return fn(v)
	      // else parse the pitch
	      var p = parse(v)
	      // if parsed, apply function and back to string
	      return p ? str(fn(p)) : null
	    }
	  }
	}
	
	/**
	 * Decorate a function to work internally with note pitches, even if the
	 * parameters are provided as strings. Also it converts back the result
	 * to string if a note pitch is returned.
	 * @function
	 * @param {Function} fn
	 * @return {Function} the decorated function
	 */
	var noteFn = decorator(isNotePitch, parseNote, strNote)
	/**
	 * Decorate a function to work internally with interval pitches, even if the
	 * parameters are provided as strings. Also it converts back the result
	 * to string if a interval pitch is returned.
	 * @function
	 * @param {Function} fn
	 * @return {Function} the decorated function
	 */
	var ivlFn = decorator(isIvlPitch, parseIvl, strIvl)
	/**
	 * Decorate a function to work internally with pitches, even if the
	 * parameters are provided as strings. Also it converts back the result
	 * to string if a pitch is returned.
	 * @function
	 * @param {Function} fn
	 * @return {Function} the decorated function
	 */
	var pitchFn = decorator(isPitch, parsePitch, strPitch)
	
	exports.pitch = pitch;
	exports.isPitch = isPitch;
	exports.encode = encode$1;
	exports.decode = decode$1;
	exports.pType = pType;
	exports.isNotePitch = isNotePitch;
	exports.isIvlPitch = isIvlPitch;
	exports.isPC = isPC;
	exports.dir = dir;
	exports.fifths = fifths;
	exports.focts = focts;
	exports.height = height;
	exports.chr = chr;
	exports.parseNote = parseNote;
	exports.parseIvl = parseIvl;
	exports.parsePitch = parsePitch;
	exports.asNotePitch = asNotePitch;
	exports.asIvlPitch = asIvlPitch;
	exports.asPitch = asPitch;
	exports.strNote = strNote;
	exports.strIvl = strIvl;
	exports.strPitch = strPitch;
	exports.noteFn = noteFn;
	exports.ivlFn = ivlFn;
	exports.pitchFn = pitchFn;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	!function(t,n){ true?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n(t.NoteParser=t.NoteParser||{})}(this,function(t){"use strict";function n(t,n){return Array(n+1).join(t)}function r(t){return"number"==typeof t}function e(t){return"string"==typeof t}function u(t){return void 0!==t}function c(t,n){return Math.pow(2,(t-69)/12)*(n||440)}function o(){return b}function i(t,n,r){if("string"!=typeof t)return null;var e=b.exec(t);if(!e||!n&&e[4])return null;var u={letter:e[1].toUpperCase(),acc:e[2].replace(/x/g,"##")};u.pc=u.letter+u.acc,u.step=(u.letter.charCodeAt(0)+3)%7,u.alt="b"===u.acc[0]?-u.acc.length:u.acc.length;var o=A[u.step]+u.alt;return u.chroma=o<0?12+o:o%12,e[3]&&(u.oct=+e[3],u.midi=o+12*(u.oct+1),u.freq=c(u.midi,r)),n&&(u.tonicOf=e[4]),u}function f(t){return r(t)?t<0?n("b",-t):n("#",t):""}function a(t){return r(t)?""+t:""}function l(t,n,r){return null===t||void 0===t?null:t.step?l(t.step,t.alt,t.oct):t<0||t>6?null:C.charAt(t)+f(n)+a(r)}function p(t){if((r(t)||e(t))&&t>=0&&t<128)return+t;var n=i(t);return n&&u(n.midi)?n.midi:null}function s(t,n){var r=p(t);return null===r?null:c(r,n)}function d(t){return(i(t)||{}).letter}function m(t){return(i(t)||{}).acc}function h(t){return(i(t)||{}).pc}function v(t){return(i(t)||{}).step}function g(t){return(i(t)||{}).alt}function x(t){return(i(t)||{}).chroma}function y(t){return(i(t)||{}).oct}var b=/^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)\s*$/,A=[0,2,4,5,7,9,11],C="CDEFGAB";t.regex=o,t.parse=i,t.build=l,t.midi=p,t.freq=s,t.letter=d,t.acc=m,t.pc=h,t.step=v,t.alt=g,t.chroma=x,t.oct=y});
	//# sourceMappingURL=note-parser.js.map


/***/ }),
/* 11 */
/***/ (function(module, exports) {

	'use strict'
	
	// shorthand tonal notation (with quality after number)
	var IVL_TNL = '([-+]?)(\\d+)(d{1,4}|m|M|P|A{1,4})'
	// standard shorthand notation (with quality before number)
	var IVL_STR = '(AA|A|P|M|m|d|dd)([-+]?)(\\d+)'
	var COMPOSE = '(?:(' + IVL_TNL + ')|(' + IVL_STR + '))'
	var IVL_REGEX = new RegExp('^' + COMPOSE + '$')
	
	/**
	 * Parse a string with an interval in shorthand notation (https://en.wikipedia.org/wiki/Interval_(music)#Shorthand_notation)
	 * and returns an object with interval properties.
	 *
	 * @param {String} str - the string with the interval
	 * @param {Boolean} strict - (Optional) if its false, it doesn't check if the
	 * interval is valid or not. For example, parse('P2') returns null
	 * (because a perfect second is not a valid interval), but
	 * parse('P2', false) it returns { num: 2, dir: 1, q: 'P'... }
	 * @return {Object} an object properties or null if not valid interval string
	 * The returned object contains:
	 * - `num`: the interval number
	 * - `q`: the interval quality string (M is major, m is minor, P is perfect...)
	 * - `simple`: the simplified number (from 1 to 7)
	 * - `dir`: the interval direction (1 ascending, -1 descending)
	 * - `type`: the interval type (P is perfectable, M is majorable)
	 * - `alt`: the alteration, a numeric representation of the quality
	 * - `oct`: the number of octaves the interval spans. 0 for simple intervals.
	 * - `size`: the size of the interval in semitones
	 * @example
	 * var parse = require('interval-notation').parse
	 * parse('M3')
	 * // => { num: 3, q: 'M', dir: 1, simple: 3,
	 * //      type: 'M', alt: 0, oct: 0, size: 4 }
	 */
	function parse (str, strict) {
	  if (typeof str !== 'string') return null
	  var m = IVL_REGEX.exec(str)
	  if (!m) return null
	  var i = { num: +(m[3] || m[8]), q: m[4] || m[6] }
	  i.dir = (m[2] || m[7]) === '-' ? -1 : 1
	  var step = (i.num - 1) % 7
	  i.simple = step + 1
	  i.type = TYPES[step]
	  i.alt = qToAlt(i.type, i.q)
	  i.oct = Math.floor((i.num - 1) / 7)
	  i.size = i.dir * (SIZES[step] + i.alt + 12 * i.oct)
	  if (strict !== false) {
	    if (i.type === 'M' && i.q === 'P') return null
	  }
	  return i
	}
	var SIZES = [0, 2, 4, 5, 7, 9, 11]
	
	var TYPES = 'PMMPPMM'
	/**
	 * Get the type of interval. Can be perfectavle ('P') or majorable ('M')
	 * @param {Integer} num - the interval number
	 * @return {String} `P` if it's perfectable, `M` if it's majorable.
	 */
	function type (num) {
	  return TYPES[(num - 1) % 7]
	}
	
	function dirStr (dir) { return dir === -1 ? '-' : '' }
	function num (simple, oct) { return simple + 7 * oct }
	
	/**
	 * Build a shorthand interval notation string from properties.
	 *
	 * @param {Integer} simple - the interval simple number (from 1 to 7)
	 * @param {Integer} alt - the quality expressed in numbers. 0 means perfect
	 * or major, depending of the interval number.
	 * @param {Integer} oct - the number of octaves the interval spans.
	 * 0 por simple intervals. Positive number.
	 * @param {Integer} dir - the interval direction: 1 ascending, -1 descending.
	 * @example
	 * var interval = require('interval-notation')
	 * interval.shorthand(3, 0, 0, 1) // => 'M3'
	 * interval.shorthand(3, -1, 0, -1) // => 'm-3'
	 * interval.shorthand(3, 1, 1, 1) // => 'A10'
	 */
	function shorthand (simple, alt, oct, dir) {
	  return altToQ(simple, alt) + dirStr(dir) + num(simple, oct)
	}
	/**
	 * Build a special shorthand interval notation string from properties.
	 * The special shorthand interval notation changes the order or the standard
	 * shorthand notation so instead of 'M-3' it returns '-3M'.
	 *
	 * The standard shorthand notation has a string 'A4' (augmented four) that can't
	 * be differenciate from 'A4' (the A note in 4th octave), so the purpose of this
	 * notation is avoid collisions
	 *
	 * @param {Integer} simple - the interval simple number (from 1 to 7)
	 * @param {Integer} alt - the quality expressed in numbers. 0 means perfect
	 * or major, depending of the interval number.
	 * @param {Integer} oct - the number of octaves the interval spans.
	 * 0 por simple intervals. Positive number.
	 * @param {Integer} dir - the interval direction: 1 ascending, -1 descending.
	 * @example
	 * var interval = require('interval-notation')
	 * interval.build(3, 0, 0, 1) // => '3M'
	 * interval.build(3, -1, 0, -1) // => '-3m'
	 * interval.build(3, 1, 1, 1) // => '10A'
	 */
	function build (simple, alt, oct, dir) {
	  return dirStr(dir) + num(simple, oct) + altToQ(simple, alt)
	}
	
	/**
	 * Get an alteration number from an interval quality string.
	 * It accepts the standard `dmMPA` but also sharps and flats.
	 *
	 * @param {Integer|String} num - the interval number or a string representing
	 * the interval type ('P' or 'M')
	 * @param {String} quality - the quality string
	 * @return {Integer} the interval alteration
	 * @example
	 * qToAlt('M', 'm') // => -1 (for majorables, 'm' is -1)
	 * qToAlt('P', 'A') // => 1 (for perfectables, 'A' means 1)
	 * qToAlt('M', 'P') // => null (majorables can't be perfect)
	 */
	function qToAlt (num, q) {
	  var t = typeof num === 'number' ? type(num) : num
	  if (q === 'M' && t === 'M') return 0
	  if (q === 'P' && t === 'P') return 0
	  if (q === 'm' && t === 'M') return -1
	  if (/^A+$/.test(q)) return q.length
	  if (/^d+$/.test(q)) return t === 'P' ? -q.length : -q.length - 1
	  return null
	}
	
	function fillStr (s, n) { return Array(Math.abs(n) + 1).join(s) }
	/**
	 * Get interval quality from interval type and alteration
	 *
	 * @function
	 * @param {Integer|String} num - the interval number of the the interval
	 * type ('M' for majorables, 'P' for perfectables)
	 * @param {Integer} alt - the interval alteration
	 * @return {String} the quality string
	 * @example
	 * altToQ('M', 0) // => 'M'
	 */
	function altToQ (num, alt) {
	  var t = typeof num === 'number' ? type(Math.abs(num)) : num
	  if (alt === 0) return t === 'M' ? 'M' : 'P'
	  else if (alt === -1 && t === 'M') return 'm'
	  else if (alt > 0) return fillStr('A', alt)
	  else if (alt < 0) return fillStr('d', t === 'P' ? alt : alt + 1)
	  else return null
	}
	
	module.exports = { parse: parse, type: type,
	  altToQ: altToQ, qToAlt: qToAlt,
	  build: build, shorthand: shorthand }


/***/ }),
/* 12 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	/**
	 * Functions to encoding and decoding pitches into fifths/octaves notation.
	 *
	 * This functions are very low level and it's probably you wont need them. That's
	 * why __this module is NOT exported in the tonal package__.
	 *
	 * @private
	 * @module encoding
	 */
	
	function isNum (n) { return typeof n === 'number' }
	
	// Map from letter step to number of fifths starting from 'C':
	// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }
	var FIFTHS = [0, 2, 4, -1, 1, 3, 5]
	// Given a number of fifths, return the octaves they span
	function fOcts (f) { return Math.floor(f * 7 / 12) }
	// Get the number of octaves it span each step
	var FIFTH_OCTS = FIFTHS.map(fOcts)
	
	function encode (step, alt, oct) {
	  var f = FIFTHS[step] + 7 * alt
	  if (!isNum(oct)) return [f]
	  var o = oct - FIFTH_OCTS[step] - 4 * alt
	  return [f, o]
	}
	
	// Return the number of fifths as if it were unaltered
	function unaltered (f) {
	  var i = (f + 1) % 7
	  return i < 0 ? 7 + i : i
	}
	
	// We need to get the steps from fifths
	// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]
	// We add 1 to fifths to avoid negative numbers, so:
	// for ['F', 'C', 'G', 'D', 'A', 'E', 'B'] we have:
	var STEPS = [3, 0, 4, 1, 5, 2, 6]
	
	/**
	 * Decode a encoded pitch
	 * @param {Number} fifths - the number of fifths
	 * @param {Number} octs - the number of octaves to compensate the fifhts
	 * @return {Array} in the form [step, alt, oct]
	 */
	function decode (f, o) {
	  var step = STEPS[unaltered(f)]
	  var alt = Math.floor((f + 1) / 7)
	  if (!isNum(o)) return [step, alt]
	  var oct = o + 4 * alt + FIFTH_OCTS[step]
	  return [step, alt, oct]
	}
	
	exports.encode = encode;
	exports.decode = decode;

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalPitch = __webpack_require__(9);
	
	function trBy (i, p) {
	  var t = tonalPitch.pType(p)
	  if (!t) return null
	  var f = tonalPitch.fifths(i) + tonalPitch.fifths(p)
	  if (tonalPitch.isPC(p)) return ['tnlp', [f]]
	  var o = tonalPitch.focts(i) + tonalPitch.focts(p)
	  if (t === 'note') return ['tnlp', [f, o]]
	  var d = tonalPitch.height(i) + tonalPitch.height(p) < 0 ? -1 : 1
	  return ['tnlp', [d * f, d * o], d]
	}
	
	/**
	 * Transpose notes. Can be used to add intervals. At least one of the parameter
	 * is expected to be an interval. If not, it returns null.
	 *
	 * @param {String|Pitch} a - a note or interval
	 * @param {String|Pitch} b - a note or interavl
	 * @return {String|Pitch} the transposed pitch or null if not valid parameters
	 * @example
	 * var _ = require('tonal')
	 * // transpose a note by an interval
	 * _.transpose('d3', '3M') // => 'F#3'
	 * // transpose intervals
	 * _.transpose('3m', '5P') // => '7m'
	 * // it works with pitch classes
	 * _.transpose('d', '3M') // => 'F#'
	 * // order or parameters is irrelevant
	 * _.transpose('3M', 'd3') // => 'F#3'
	 * // can be partially applied
	 * _.map(_.transpose('3M'), 'c d e f g') // => ['E', 'F#', 'G#', 'A', 'B']
	 */
	function transpose (a, b) {
	  if (arguments.length === 1) return function (b) { return transpose(a, b) }
	  var pa = tonalPitch.asPitch(a)
	  var pb = tonalPitch.asPitch(b)
	  var r = tonalPitch.isIvlPitch(pa) ? trBy(pa, pb)
	    : tonalPitch.isIvlPitch(pb) ? trBy(pb, pa) : null
	  return a === pa && b === pb ? r : tonalPitch.strPitch(r)
	}
	
	/**
	 * Transpose a tonic a number of perfect fifths. It can be partially applied.
	 *
	 * @function
	 * @param {Pitch|String} tonic
	 * @param {Integer} number - the number of times
	 * @return {String|Pitch} the transposed note
	 * @example
	 * import { trFifths } from 'tonal-transpose'
	 * [0, 1, 2, 3, 4].map(trFifths('C')) // => ['C', 'G', 'D', 'A', 'E']
	 * // or using tonal
	 * tonal.trFifths('G4', 1) // => 'D5'
	 */
	function trFifths (t, n) {
	  if (arguments.length > 1) return trFifths(t)(n)
	  return function (n) {
	    return transpose(t, tonalPitch.pitch(n, 0, 1))
	  }
	}
	
	exports.transpose = transpose;
	exports.trFifths = trFifths;

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalPitch = __webpack_require__(9);
	
	// substract two pitches
	function substr (a, b) {
	  if (!a || !b || a[1].length !== b[1].length) return null
	  var f = tonalPitch.fifths(b) - tonalPitch.fifths(a)
	  if (tonalPitch.isPC(a)) return tonalPitch.pitch(f, -Math.floor(f * 7 / 12), 1)
	  var o = tonalPitch.focts(b) - tonalPitch.focts(a)
	  var d = tonalPitch.height(b) - tonalPitch.height(a) < 0 ? -1 : 1
	  return tonalPitch.pitch(d * f, d * o, d)
	}
	
	/**
	 * Find the interval between two pitches. Both pitches MUST be of the same type:
	 *
	 * - notes: it returns the interval between the first and the second
	 * - pitch classes: it returns the __ascending__ interval between both
	 * - intervals: substract one from the other
	 *
	 * @param {Pitch|String} from - distance from
	 * @param {Pitch|String} to - distance to
	 * @return {Interval} the distance between pitches
	 *
	 * @example
	 * var distance = require('tonal-distance')
	 * distance.interval('C2', 'C3') // => 'P8'
	 * distance.interval('G', 'B') // => 'M3'
	 * // or use tonal
	 * var tonal = require('tonal')
	 * tonal.distance.interval('M2', 'P5') // => 'P4'
	 */
	function interval (a, b) {
	  if (arguments.length === 1) return function (b) { return interval(a, b) }
	  var pa = tonalPitch.asPitch(a)
	  var pb = tonalPitch.asPitch(b)
	  var i = substr(pa, pb)
	  // if a and b are in array notation, no conversion back
	  return a === pa && b === pb ? i : tonalPitch.strIvl(i)
	}
	
	/**
	 * Get the distance between two notes in semitones
	 * @param {String|Pitch} from - first note
	 * @param {String|Pitch} to - last note
	 * @return {Integer} the distance in semitones or null if not valid notes
	 * @example
	 * import { semitones } from 'tonal-distance'
	 * semitones('C3', 'A2') // => -3
	 * // or use tonal
	 * tonal.distance.semitones('C3', 'G3') // => 7
	 */
	function semitones (a, b) {
	  var i = substr(tonalPitch.asPitch(a), tonalPitch.asPitch(b))
	  return i ? tonalPitch.height(i) : null
	}
	
	exports.interval = interval;
	exports.semitones = semitones;

/***/ }),
/* 15 */
/***/ (function(module, exports) {

	'use strict'
	
	// Create a function that converts objects to arrays using the given string separator
	function use (sep) {
	  return function (o, s) {
	    var l = arguments.length
	    return l === 0 ? []
	      : Array.isArray(o) ? o
	      : typeof o === 'string' ? o.trim().split(l === 1 ? sep : s)
	      : [ o ]
	  }
	}
	var asArr = use(/\s+/)
	asArr.use = use
	
	module.exports = asArr


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalTranspose = __webpack_require__(13);
	var tonalDistance = __webpack_require__(14);
	var tonalArray = __webpack_require__(8);
	
	/**
	 * Functions to transpose o calculate distances from a collection of notes.
	 *
	 * A useful concept is _harmonizer_: a function that _harmonizes_ notes. It can
	 * be created by partially applying the `harmonize` function (see examples)
	 *
	 * @example
	 * var harmonizer = require('tonal-harmonizer')
	 * harmonizer.harmonize('1P 3M 5P', 'C') // => ['C', 'E', 'G']
	 * var maj7 = harmonizer.harmonize('1P 3M 5P 7M')
	 * maj7('D4') // =>  ['D4', 'F#4', 'A4', 'C#5']
	 * harmonizer.harmonics('C E G') // => ['1P', '3M', '5P']
	 *
	 * @example
	 * // in tonal this functions are NOT namespaced
	 * var tonal = require('tonal')
	 * tonal.harmonize('1P 3M 5P', 'G')
	 *
	 * @example
	 * // using ES6 import syntax
	 * import { harmonize } from 'tonal-harmonizer'
	 * harmonize(...)
	 *
	 * @module harmonizer
	 */
	/**
	 * Given a list of notes, return the distance from the first note to the rest.
	 * @param {Array|String} notes - the list of notes
	 * @return {Array} the intervals relative to the first note
	 * @example
	 * harmonizer.harmonics('C E G') // => ['1P', '3M', '5P']
	 *
	 * @example
	 * // in tonal this functions are NOT namespaced
	 * tonal.harmonics(tonal.scale('C major')) // => ['1P', ...]
	 */
	function harmonics (list) {
	  var a = tonalArray.asArr(list);
	  return a.length ? tonalArray.compact(a.map(tonalDistance.interval(a[0]))) : a
	}
	
	/**
	 * Given a list of notes, return the intervallic structure: the distance from
	 * one to the next.
	 *
	 * Notice that the number of intervals is one less that the number of notes.
	 *
	 * @param {Array|String} notes - the list of notes
	 * @return {Array} the intervals relative to the previous
	 * @example
	 * harmonizer.intervallic('c e g') // => ['3M', '3m']
	 * harmonizer.intervallic('e g c') // => ['3m', '4P']
	 * harmonizer.intervallic('c') // => []
	 */
	function intervallic (notes) {
	  var dist = [];
	  notes = tonalArray.asArr(notes);
	  for (var i = 1; i < notes.length; i++) {
	    dist.push(tonalDistance.interval(notes[i - 1], notes[i]));
	  }
	  return dist
	}
	
	/**
	 * Given a list of intervals and a tonic, return that tonic transposed
	 * to that intervals.
	 *
	 * It's currified and, calling with only one parameter, returns an harmonizer,
	 * a function that harmonizes any note (see example)
	 *
	 * @function
	 * @param {String|Array} list - the list of intervals
	 * @param {String|Pitch} note - the note to be harmonized
	 * @return {Array} the resulting notes
	 * @example
	 * harmonizer.harmonize('P1 M3 P5 M7', 'C') // => ['C', 'E', 'G', 'B']
	 * @example
	 * // harmonizer with partial application
	 * var maj7 = harmonize.harmonizer('P1 M3 P5 M7')
	 * maj7('C') // => ['C', 'E', 'G', 'B']
	 * @example
	 * // in tonal this function is NOT namespaced
	 * var C = tonal.harmonizer('C D E')
	 * C('M3') // => ['E', 'G#', 'B']
	 */
	function harmonize (list, pitch) {
	  if (arguments.length > 1) return harmonize(list)(pitch)
	  return function (tonic) {
	    return tonalArray.compact(tonalArray.map(tonalTranspose.transpose(tonic || 'P1'), list))
	  }
	}
	
	exports.harmonics = harmonics;
	exports.intervallic = intervallic;
	exports.harmonize = harmonize;


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var noteParser = __webpack_require__(10);
	var tonalPitch = __webpack_require__(9);
	var tonalTranspose = __webpack_require__(13);
	var tonalMidi = __webpack_require__(18);
	var tonalFreq = __webpack_require__(19);
	
	/**
	 * `tonal-note` is a collection of functions to get properties from musical notes.
	 *
	 * @module note
	 * @example
	 * var note = require('tonal-note')
	 * note.name('bb2') // => 'Bb2'
	 * note.chroma('bb2') // => 10
	 * note.enharmonics('C#6') // => [ 'B##5', 'C#6', 'Db6' ]
	 * note.simplify('B#3') // => 'C4'
	 *
	 * @example
	 * // using ES6 import syntax
	 * import { name } from 'tonal-note'
	 * ['c', 'db3', '2', 'g+', 'gx4'].map(name) // => ['C', 'Db3', null, null, 'G##4']
	 */
	/**
	 * Get the note midi number
	 * (an alias of tonal-midi `toMidi` function)
	 *
	 * @function
	 * @param {Array|String|Number} note - the note to get the midi number from
	 * @return {Integer} the midi number or null if not valid pitch
	 * @example
	 * note.midi('C4') // => 60
	 * @see midi.toMidi
	 */
	var midi = tonalMidi.toMidi;
	
	/**
	 * Get the note name of a given midi note number
	 * (an alias of tonal-midi `note` function)
	 *
	 * @function
	 * @param {Integer} midi - the midi note number
	 * @param {Boolean} useSharps - (Optional) set to true to use sharps instead of flats
	 * @return {String} the note name
	 * @example
	 * note.fromMidi(60) // => 'C4'
	 * @see midi.note
	 */
	var fromMidi = tonalMidi.note;
	
	/**
	 * Get the frequency of a note
	 * (an alias of the tonal-freq package `toFreq` function)
	 *
	 * @function
	 * @param {Array|String|Number} note - the note to get the frequency
	 * @return {Number} the frequency
	 * @example
	 * note.freq('A4') // => 440
	 * @see freq.toFreq
	 */
	var freq = tonalFreq.toFreq;
	
	/**
	 * Return the chroma of a note. The chroma is the numeric equivalent to the
	 * pitch class, where 0 is C, 1 is C# or Db, 2 is D... 11 is B
	 *
	 * @param {String|Pitch} note
	 * @return {Integer} the chroma
	 * @example
	 * var note = require('tonal-note')
	 * note.chroma('Cb') // => 11
	 * ['C', 'D', 'E', 'F'].map(note.chroma) // => [0, 2, 4, 5]
	 */
	function chroma (n) {
	  var p = tonalPitch.asNotePitch(n);
	  return p ? tonalPitch.chr(p) : null
	}
	
	/**
	 * Given a note (as string or as array notation) returns a string
	 * with the note name in scientific notation or null
	 * if not valid note
	 *
	 * @function
	 * @param {Pitch|String}
	 * @return {String}
	 *
	 * @example
	 * var note = require('tonal-note')
	 * note.note('cb2') // => 'Cb2'
	 * ['c', 'db3', '2', 'g+', 'gx4'].map(note.name) // => ['C', 'Db3', null, null, 'G##4']
	 */
	function note$1 (n) {
	  var p = tonalPitch.asNotePitch(n);
	  return p ? tonalPitch.strNote(p) : null
	}
	
	/**
	 * An alias for note. Get the name of a note in scientific notation
	 * @example
	 * note.name('fx') // => 'F##'
	 * note.name('bbb3') // => 'Bbb3'
	 */
	const name = note$1;
	
	/**
	 * Get note properties. It returns an object with the following properties:
	 *
	 * - step: 0 for C, 6 for B. Do not confuse with chroma
	 * - alt: 0 for not accidentals, positive sharps, negative flats
	 * - oct: the octave number or undefined if a pitch class
	 *
	 * @param {String|Pitch} note - the note
	 * @return {Object} the object with note properties or null if not valid note
	 * @example
	 * note.props('Db3') // => { step: 1, alt: -1, oct: 3 }
	 * note.props('C#') // => { step: 0, alt: 1, oct: undefined }
	 */
	function props (n) {
	  var p = tonalPitch.asNotePitch(n);
	  if (!p) return null
	  var d = tonalPitch.decode(p);
	  return { step: d[0], alt: d[1], oct: d[2] }
	}
	
	/**
	 * Given a note properties object, return the string representation if
	 * scientific notation
	 *
	 * @param {Object} noteProps - an object with the following attributes:
	 * @return {String} the note name
	 *
	 * - step: a number from 0 to 6 meaning note step letter from 'C' to 'B'
	 * - alt: the accidentals as number (0 no accidentals, 1 is '#', 2 is '##', -2 is 'bb')
	 * - oct: (Optional) the octave. If not present (or undefined) it returns a pitch class
	 *
	 * @example
	 * note.fromProps({ step: 1, alt: -1, oct: 5 }) // => 'Db5'
	 * note.fromProps({ step: 0, alt: 1 }) // => 'C#'
	 */
	function fromProps (props) {
	  return props ? noteParser.build(props.step, props.alt, props.oct) : null
	}
	
	function getProp (name) {
	  return function (n) { var p = props(n); return p ? p[name] : null }
	}
	
	/**
	 * Get the octave of the given pitch
	 *
	 * @function
	 * @param {String|Pitch} note - the note
	 * @return {Integer} the octave, undefined if its a pitch class or null if
	 * not a valid note
	 * @example
	 * note.oct('C#4') // => 4
	 * note.oct('C') // => undefined
	 * note.oct('blah') // => undefined
	 */
	var oct = getProp('oct');
	
	/**
	 * Get the note step: a number equivalent of the note letter. 0 means C and
	 * 6 means B. This is different from `chroma` (see example)
	 *
	 * @function
	 * @param {String|Pitch} note - the note
	 * @return {Integer} a number between 0 and 6 or null if not a note
	 * @example
	 * note.step('C') // => 0
	 * note.step('Cb') // => 0
	 * // usually what you need is chroma
	 * note.chroma('Cb') // => 6
	 */
	var step = getProp('step');
	
	/**
	 * Get the note step in fifths from 'C'. One property of the perfect fifht
	 * interval is that you can obtain any pitch class by transposing 'C' a
	 * number of times. This function return that number.
	 * @param {String|Pitch} note - the note (can be a pitch class)
	 * @return {Integer} the number of fifths to reach that pitch class from 'C'
	 */
	function pcFifths (note$$1) {
	  var p = tonalPitch.asNotePitch(note$$1);
	  return p ? tonalPitch.fifths(p) : null
	}
	
	/**
	 * Get the note alteration: a number equivalent to the accidentals. 0 means
	 * no accidentals, negative numbers are for flats, positive for sharps
	 *
	 * @function
	 * @param {String|Pitch} note - the note
	 * @return {Integer} the alteration
	 * @example
	 * note.alt('C') // => 0
	 * note.alt('C#') // => 1
	 * note.alt('Cb') // => -1
	 */
	var alt = getProp('alt');
	
	/**
	 * Get pitch class of a note. The note can be a string or a pitch array.
	 *
	 * @function
	 * @param {String|Pitch}
	 * @return {String} the pitch class
	 * @example
	 * tonal.pc('Db3') // => 'Db'
	 * tonal.map(tonal.pc, 'db3 bb6 fx2') // => [ 'Db', 'Bb', 'F##']
	 */
	function pc (n) {
	  var p = tonalPitch.asNotePitch(n);
	  return p ? tonalPitch.strNote([ p[0], [ tonalPitch.fifths(p) ] ]) : null
	}
	
	var ASC = tonalPitch.parseIvl('2d');
	var DESC = tonalPitch.parseIvl('-2d');
	
	/**
	 * Get the enharmonics of a note. It returns an array of three elements: the
	 * below enharmonic, the note, and the upper enharmonic
	 *
	 * @param {String} note - the note to get the enharmonics from
	 * @return {Array} an array of pitches ordered by distance to the given one
	 *
	 * @example
	 * var note = require('tonal-note')
	 * note.enharmonics('C') // => ['B#', 'C', 'Dbb']
	 * note.enharmonics('A') // => ['G##', 'A', 'Bbb']
	 * note.enharmonics('C#4') // => ['B##3', 'C#4' 'Db4']
	 * note.enharmonics('Db') // => ['C#', 'Db', 'Ebbb'])
	 */
	function enharmonics (pitch) {
	  var notes = [];
	  notes.push(tonalTranspose.transpose(DESC, pitch));
	  if (notes[0] === null) return null
	  notes.push(pitch);
	  notes.push(tonalTranspose.transpose(ASC, pitch));
	  return notes
	}
	
	/**
	 * Get a simpler enharmonic note name from a note if exists
	 *
	 * @param {String} note - the note to simplify
	 * @return {String} the simplfiied note (if not found, return same note)
	 *
	 * @example
	 * var note = require('tonal-note')
	 * note.simplify('B#3') // => 'C4'
	 */
	function simplify (pitch) {
	  return enharmonics(pitch).reduce(function (simple, next) {
	    if (!simple) return next
	    return simple.length > next.length ? next : simple
	  }, null)
	}
	
	exports.midi = midi;
	exports.fromMidi = fromMidi;
	exports.freq = freq;
	exports.chroma = chroma;
	exports.note = note$1;
	exports.name = name;
	exports.props = props;
	exports.fromProps = fromProps;
	exports.oct = oct;
	exports.step = step;
	exports.pcFifths = pcFifths;
	exports.alt = alt;
	exports.pc = pc;
	exports.enharmonics = enharmonics;
	exports.simplify = simplify;


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
	
	var parser = _interopDefault(__webpack_require__(10));
	
	/**
	 * A midi note number is a number representation of a note pitch. It can be
	 * integers so it's equal tempered tuned, or float to indicate it's not
	 * tuned into equal temepered scale.
	 *
	 * This module contains functions to convert to and from midi notes.
	 *
	 * @example
	 * var midi = require('tonal-midi')
	 * midi.toMidi('A4') // => 69
	 * midi.note(69) // => 'A4'
	 * midi.note(61) // => 'Db4'
	 * midi.note(61, true) // => 'C#4'
	 *
	 * @module midi
	 */
	
	/**
	 * Convert the given note to a midi note number. If you pass a midi number it
	 * will returned as is.
	 *
	 * @param {Array|String|Number} note - the note to get the midi number from
	 * @return {Integer} the midi number or null if not valid pitch
	 * @example
	 * midi.toMidi('C4') // => 60
	 * midi.toMidi(60) // => 60
	 * midi.toMidi('60') // => 60
	 */
	function toMidi (val) {
	  if (Array.isArray(val) && val.length === 2) return val[0] * 7 + val[1] * 12 + 12
	  return parser.midi(val)
	}
	
	var FLATS = 'C Db D Eb E F Gb G Ab A Bb B'.split(' ');
	var SHARPS = 'C C# D D# E F F# G G# A A# B'.split(' ');
	
	/**
	 * Given a midi number, returns a note name. The altered notes will have
	 * flats unless explicitly set with the optional `useSharps` parameter.
	 *
	 * @function
	 * @param {Integer} midi - the midi note number
	 * @param {Boolean} useSharps - (Optional) set to true to use sharps instead of flats
	 * @return {String} the note name
	 * @example
	 * var midi = require('tonal-midi')
	 * midi.note(61) // => 'Db4'
	 * midi.note(61, true) // => 'C#4'
	 * // it rounds to nearest note
	 * midi.note(61.7) // => 'D4'
	 */
	function note (num, sharps) {
	  if (num === true || num === false) return function (m) { return note(m, num) }
	  num = Math.round(num);
	  var pcs = sharps === true ? SHARPS : FLATS;
	  var pc = pcs[num % 12];
	  var o = Math.floor(num / 12) - 1;
	  return pc + o
	}
	
	exports.toMidi = toMidi;
	exports.note = note;


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalMidi = __webpack_require__(18);
	
	/**
	 * A collection of modules to work with note frequencies
	 *
	 * @example
	 * var freq = require('tonal-freq')
	 * freq.toFreq('A4') // => 440
	 * freq.note(440) // => 'A4'
	 * freq.noteAndDetune(320) // => ['C4', 200]
	 * @module freq
	 */
	// decorate a function to round the numeric result to a max
	function round (m, fn) {
	  m = m || m === 0 ? Math.pow(10, m) : false;
	  return function (v) {
	    v = fn(v);
	    return v === null ? null : m ? Math.round(v * m) / m : v
	  }
	}
	
	/**
	 * Return the equal tempered frequency of a note.
	 *
	 * This function can be partially applied if note parameter is not present.
	 * @function
	 * @param {Float} ref - the tuning reference
	 * @param {Integer} maxDecimals - (Optional) the maximum number of decimals (all by default)
	 * @param {String|Pitch} note - the note to get the frequency from
	 * @return {Number} the frequency
	 * @example
	 * eqTempFreq(444, 4, 'C3')
	 * const toFreq = eqTempFreq(444, 2)
	 * toFreq('A3') // => 222
	 */
	function eqTempFreq (ref, max, note$$1) {
	  if (arguments.length > 2) return eqTempFreq(ref, max)(note$$1)
	  return round(max, function (p) {
	    var m = tonalMidi.toMidi(p);
	    return m ? Math.pow(2, (m - 69) / 12) * ref : null
	  })
	}
	
	/**
	 * Get the frequency of note with 2 decimals precission using A4 440Hz tuning
	 *
	 * This is an alias for: `eqTempFreq(440, 2, <note>)`
	 *
	 * @function
	 * @param {Number|String} note - the note name or midi number
	 * @return {Float} the frequency in herzs
	 * @example
	 * freq.toFreq('A4') // => 440
	 * freq.toFreq('C4') // => 261.63
	 */
	var toFreq = eqTempFreq(440, 2);
	
	/**
	 * Get the midi note from a frequency in equal temperament scale. You can
	 * specify the number of decimals of the midi number.
	 *
	 * @param {Float} tuning - (Optional) the reference A4 tuning (440Hz by default)
	 * @param {Number} freq - the frequency
	 * @return {Number} the midi number
	 */
	function eqTempFreqToMidi (ref, max, freq) {
	  if (arguments.length > 2) return eqTempFreqToMidi(ref, max)(freq)
	  return round(max, function (freq) {
	    return 12 * (Math.log(freq) - Math.log(ref)) / Math.log(2) + 69
	  })
	}
	
	/**
	 * Get midi number from frequency with two decimals of precission.
	 *
	 * This is an alisas for: `eqTempFreqToMidi(440, 2, <freq>)`
	 *
	 * @function
	 * @param {Float} freq
	 * @return {Number} midi number
	 * @example
	 * freq.toMidi(361) // => 59.96
	 */
	var toMidi$1 = eqTempFreqToMidi(440, 2);
	
	/**
	 * Get note name from frequency using an equal temperament scale with 440Hz
	 * as reference
	 *
	 * @param {Float} freq
	 * @param {Boolean} useSharps - (Optional) set to true to use sharps instead of flats
	 * @return {String} note name
	 * @example
	 * freq.note(440) // => 'A4'
	 */
	function note$1 (freq, useSharps) {
	  return tonalMidi.note(toMidi$1(freq), useSharps)
	}
	
	/**
	 * Get difference in cents between two frequencies. The frequencies can be
	 * expressed with hertzs or midi numbers or note names
	 * @param {Float|Integer|String} base
	 * @param {Float|Integer|String} freq
	 * @return {Integer} The difference in cents
	 * @example
	 * import { cents } from 'tonal-freq'
	 * cents('C4', 261) // => -4
	 */
	function cents (base, freq) {
	  var b = toFreq(base) || base;
	  var f = toFreq(freq) || freq;
	  return Math.round(1200 * (Math.log(f / b) / Math.log(2)))
	}
	
	exports.eqTempFreq = eqTempFreq;
	exports.toFreq = toFreq;
	exports.eqTempFreqToMidi = eqTempFreqToMidi;
	exports.toMidi = toMidi$1;
	exports.note = note$1;
	exports.cents = cents;


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var intervalNotation = __webpack_require__(11);
	var tonalPitch = __webpack_require__(9);
	
	/**
	 * A collection of functions to obtain music interval properties.
	 *
	 * The intervals are strings in shorthand notation. Two variations are supported:
	 *
	 * - standard shorthand notation: type and number, for example: 'M3', 'd-4'
	 * - inverse shorthand notation: number and then type, for example: '3M', '-4d'
	 *
	 * The problem with the standard shorthand notation is that some strings can be
	 * parsed as notes or intervals, for example: 'A4' can be note A in 4th octave
	 * or an augmented four. To remove ambiguity, the prefered notation in tonal is the
	 * inverse shortand notation.
	 *
	 * NOTE: this module is exported in tonal as ivl
	 *
	 * @example
	 * var interval = require('tonal-interval')
	 * interval.semitones('4P') // => 5
	 * interval.invert('3m') // => '6M'
	 * interval.simplify('9m') // => '2m'
	 *
	 * @example
	 * // from tonal
	 * var tonal = require('tonal')
	 * tonal.ivl.invert('4P') // => '5P'
	 *
	 * @module interval
	 */
	/**
	 * Get interval name. Can be used to test if it's an interval. It accepts intervals
	 * as pitch or string in shorthand notation or tonal notation. It returns always
	 * intervals in tonal notation.
	 *
	 * @param {String|Pitch} interval - the interval string or array
	 * @return {String} the interval name or null if not valid interval
	 * @example
	 * interval.toInterval('m-3') // => '-3m'
	 * interval.toInterval('3') // => null
	 */
	function toInterval (ivl) {
	  var i = tonalPitch.asIvlPitch(ivl);
	  return i ? tonalPitch.strIvl(i) : null
	}
	
	/**
	 * Get the number of the interval (same as value, but always positive)
	 *
	 * @param {String|Pitch} interval - the interval
	 * @return {Integer} the positive interval number (P1 is 1, m2 is 2, ...)
	 * @example
	 * interval.num('m2') // => 2
	 * interval.num('P9') // => 9
	 * interval.num('P-4') // => 4
	 */
	function num (ivl) {
	  var p = props(ivl);
	  return p ? p.num : null
	}
	
	/**
	 * Get the interval value (the interval number, but positive or negative
	 * depending the interval direction)
	 *
	 * @param {String|Pitch} interval - the interval
	 * @return {Integer} the positive interval number (P1 is 1, m-2 is -2, ...)
	 * @example
	 * interval.num('m2') // => 2
	 * interval.num('m9') // => 9
	 * interval.num('P-4') // => -4
	 * interval.num('m-9') // => -9
	 */
	function value (ivl) {
	  var p = props(ivl);
	  return p ? p.num * p.dir : null
	}
	
	/**
	 * Get interval properties. It returns an object with:
	 *
	 * - num: the interval number (always positive)
	 * - alt: the interval alteration (0 for perfect in perfectables, or 0 for major in _majorables_)
	 * - dir: the interval direction (1 ascending, -1 descending)
	 *
	 * @param {String|Pitch} interval - the interval
	 * @return {Array} the interval in the form [number, alt]
	 * @example
	 * interval.parse('m2') // => { num: 2, alt: -1, dir: 1 }
	 * interval.parse('m9') // => { num: 9, alt: -1, dir: 1 }
	 * interval.parse('P-4') // => { num: 4, alt: 0, dir: -1}
	 * interval.parse('m-9') // => { num: 9, alt: -1, dir: -1 }
	 */
	function props (ivl) {
	  var i = tonalPitch.asIvlPitch(ivl);
	  if (!i) return null
	  var d = tonalPitch.decode(i);
	  return { num: d[0] + 1 + d[2] * 7, alt: d[1], dir: i[2] }
	}
	
	/**
	 * Given a interval property object, get the interval name
	 *
	 * @param {Object} props - the interval property object
	 *
	 * - num: the interval number
	 * - alt: the interval alteration
	 * - dir: the direction
	 * @return {String} the interval name
	 */
	function fromProps (props) {
	  if (!props || props.num < 1) return null
	  var octs = Math.floor((props.num) / 8);
	  var simple = props.num - 7 * octs;
	  return intervalNotation.build(simple, props.alt || 0, octs, props.dir)
	}
	
	/**
	 * Get size in semitones of an interval
	 * @param {String|Pitch} ivl
	 * @return {Integer} the number of semitones or null if not an interval
	 * @example
	 * import { semitones } from 'tonal-interval'
	 * semitones('P4') // => 5
	 * // or using tonal
	 * tonal.semitones('P5') // => 7
	 */
	function semitones (ivl) {
	  var i = tonalPitch.asIvlPitch(ivl);
	  return i ? tonalPitch.height(i) : null
	}
	
	// interval numbers
	var IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];
	// interval qualities
	var IQ = 'P m M m M P d P m M m M'.split(' ');
	
	/**
	 * Get interval name from semitones number. Since there are several interval
	 * names for the same number, the name it's arbitraty, but deterministic.
	 * @param {Integer} num - the number of semitones (can be negative)
	 * @return {String} the interval name
	 * @example
	 * import { fromSemitones } from 'tonal-interval'
	 * fromSemitones(7) // => '5P'
	 * // or using tonal
	 * tonal.fromSemitones(-7) // => '-5P'
	 */
	function fromSemitones (num) {
	  var d = num < 0 ? -1 : 1;
	  var n = Math.abs(num);
	  var c = n % 12;
	  var o = Math.floor(n / 12);
	  return d * (IN[c] + 7 * o) + IQ[c]
	}
	
	var CLASSES = [0, 1, 2, 3, 4, 5, 6, 5, 4, 3, 2, 1];
	/**
	 * Get the [interval class](https://en.wikipedia.org/wiki/Interval_class)
	 * number of a given interval.
	 *
	 * In musical set theory, an interval class is the shortest distance in
	 * pitch class space between two unordered pitch classes
	 *
	 * As paramter you can pass an interval in shorthand notation, an interval in
	 * array notation or the number of semitones of the interval
	 *
	 * @param {String|Integer} interval - the interval or the number of semitones
	 * @return {Integer} A value between 0 and 6
	 *
	 * @example
	 * interval.ic('P8') // => 0
	 * interval.ic('m6') // => 4
	 * ['P1', 'M2', 'M3', 'P4', 'P5', 'M6', 'M7'].map(ic) // => [0, 2, 4, 5, 5, 3, 1]
	 */
	function ic (ivl) {
	  var i = tonalPitch.asIvlPitch(ivl);
	  var s = i ? tonalPitch.chr(i) : Math.round(ivl);
	  return isNaN(s) ? null : CLASSES[Math.abs(s) % 12]
	}
	
	var TYPES = 'PMMPPMM';
	/**
	 * Get interval type. Can be perfectable (1, 4, 5) or majorable (2, 3, 6, 7)
	 * It does NOT return the actual quality.
	 *
	 * @param {String|Pitch} interval
	 * @return {String} 'P' for perfectables, 'M' for majorables or null if not
	 * valid interval
	 * @example
	 * interval.type('5A') // => 'P'
	 */
	function type (ivl) {
	  var i = tonalPitch.asIvlPitch(ivl);
	  return i ? TYPES[tonalPitch.decode(i)[0]] : null
	}
	
	/**
	 * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)
	 * of an interval.
	 *
	 * @function
	 * @param {String|Pitch} interval - the interval to invert in interval shorthand
	 * notation or interval array notation
	 * @return {String|Pitch} the inverted interval
	 *
	 * @example
	 * interval.invert('3m') // => '6M'
	 * interval.invert('2M') // => '7m'
	 */
	var invert = tonalPitch.ivlFn(function (i) {
	  var d = tonalPitch.decode(i);
	  // d = [step, alt, oct]
	  var step = (7 - d[0]) % 7;
	  var alt = TYPES[d[0]] === 'P' ? -d[1] : -(d[1] + 1);
	  return tonalPitch.encode(step, alt, d[2], tonalPitch.dir(i))
	});
	
	/**
	 * Get the simplified version of an interval.
	 *
	 * @function
	 * @param {String|Array} interval - the interval to simplify
	 * @return {String|Array} the simplified interval
	 *
	 * @example
	 * interval.simplify('9M') // => '2M'
	 * ['8P', '9M', '10M', '11P', '12P', '13M', '14M', '15P'].map(interval.simplify)
	 * // => [ '8P', '2M', '3M', '4P', '5P', '6M', '7M', '8P' ]
	 * interval.simplify('2M') // => '2M'
	 * interval.simplify('-2M') // => '7m'
	 */
	var simplify = tonalPitch.ivlFn(function (i) {
	  // decode to [step, alt, octave]
	  var dec = tonalPitch.decode(i);
	  // if it's not 8 reduce the octaves to 0
	  if (dec[0] !== 0 || dec[2] !== 1) dec[2] = 0;
	  // encode back
	  return tonalPitch.encode(dec[0], dec[1], dec[2], tonalPitch.dir(i))
	});
	
	exports.toInterval = toInterval;
	exports.num = num;
	exports.value = value;
	exports.props = props;
	exports.fromProps = fromProps;
	exports.semitones = semitones;
	exports.fromSemitones = fromSemitones;
	exports.ic = ic;
	exports.type = type;
	exports.invert = invert;
	exports.simplify = simplify;


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalArray = __webpack_require__(8);
	var tonalTranspose = __webpack_require__(13);
	var tonalMidi = __webpack_require__(18);
	var tonalPcset = __webpack_require__(22);
	
	/**
	 * A collection of functions to create note ranges.
	 *
	 * @example
	 * var range = require('tonal-range')
	 * // ascending chromatic range
	 * range.chromatic(['C4', 'E4']) // => ['C4', 'Db4', 'D4', 'Eb4', 'E4']
	 * // descending chromatic range
	 * range.chromatic(['E4', 'C4']) // => ['E4', 'Eb4', 'D4', 'Db4', 'C4']
	 * // combining ascending and descending in complex ranges
	 * range.chromatic(['C2', 'E2', 'D2']) // => ['C2', 'Db2', 'D2', 'Eb2', 'E2', 'Eb2', 'D2']
	 * // numeric (midi note numbers) range
	 * range.numeric('C4 E4 Bb3') // => [60, 61, 62, 63, 64]
	 * // complex numeric range
	 * range.numeric('C4 E4 Bb3') // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]
	 * // create a scale range
	 * range.pitchSet('c e g a', 'c2 c3 c2') // => [ 'C2', 'E2', 'G2', 'A2', 'C3', 'A2', 'G2', 'E2', 'C2' ] *
	 g
	 * @module range
	 */
	function isNum (n) { return typeof n === 'number' }
	// convert notes to midi if needed
	function asNum (n) { return isNum(n) ? n : tonalMidi.toMidi(n) }
	// ascending range
	function ascR (b, n) { for (var a = []; n--; a[n] = n + b); return a }
	// descending range
	function descR (b, n) { for (var a = []; n--; a[n] = b - n); return a }
	// create a range between a and b
	function ran (a, b) {
	  return a === null || b === null ? []
	    : a < b ? ascR(a, b - a + 1) : descR(a, a - b + 1)
	}
	
	/**
	 * Create a numeric range. You supply a list of notes or numbers and it will
	 * be conected to create complex ranges.
	 *
	 * @param {String|Array} list - the list of notes or numbers used
	 * @return {Array} an array of numbers or empty array if not vald parameters
	 *
	 * @example
	 * range.numeric('C5 C4') // => [ 72, 71, 70, 69, 68, 67, 66, 65, 64, 63, 62, 61, 60 ]
	 * // it works with numbers
	 * range.numeric([10, 5]) // => [ 10, 9, 8, 7, 6, 5 ]
	 * // complex range
	 * range.numeric('C4 E4 Bb3') // => [60, 61, 62, 63, 64, 63, 62, 61, 60, 59, 58]
	 * // can be expressed with a string or array
	 * range.numeric('C2 C4 C2') === range.numeric(['C2', 'C4', 'C2'])
	 */
	function numeric (list) {
	  return tonalArray.asArr(list).map(asNum).reduce(function (r, n, i) {
	    if (i === 1) return ran(r, n)
	    var last = r[r.length - 1];
	    return r.concat(ran(last, n).slice(1))
	  })
	}
	
	/**
	 * Create a range of chromatic notes. The altered notes will use flats.
	 *
	 * @function
	 * @param {String|Array} list - the list of notes or midi note numbers
	 * @return {Array} an array of note names
	 * @example
	 * tonal.chromatic('C2 E2 D2') // => ['C2', 'Db2', 'D2', 'Eb2', 'E2', 'Eb2', 'D2']
	 * // with sharps
	 * tonal.chromatic('C2 C3', true) // => [ 'C2', 'C#2', 'D2', 'D#2', 'E2', 'F2', 'F#2', 'G2', 'G#2', 'A2', 'A#2', 'B2', 'C3' ]
	 */
	function chromatic (list, sharps) {
	  return tonalArray.map(tonalMidi.note(sharps === true), numeric(list))
	}
	
	/**
	 * Create a range with a cycle of fifths
	 * @function
	 * @param {String|Pitch} tonic - the tonic note or pitch class
	 * @param {Array|String} range - the range array
	 * @return {Array} a range of cycle of fifths starting with the tonic
	 * @example
	 * range.fifths('C', [0, 6]) // => [ 'C', 'G', 'D', 'A', 'E', 'B', 'F#' ])
	 */
	function fifths (tonic, range) {
	  return numeric(range).map(tonalTranspose.trFifths(tonic))
	}
	
	/**
	 * Create a pitch set (scale or chord) range. Given a pitch set (a collection
	 * of pitch classes), and a range array, it returns a range in notes.
	 *
	 * @param {String|Array|Function} scale - the scale to use or a function to
	 * convert from midi numbers to note names
	 * @param {String|Array} range - a list of notes or midi numbers
	 * @return {Array} the scale range, an empty array if not valid source or
	 * null if not valid start or end
	 * @example
	 * range.pitchSet('C D E F G A B', ['C3', 'C2'])
	 * // => [ 'C3', 'B2', 'A2', 'G2', 'F2', 'E2', 'D2', 'C2' ]
	 */
	function pitchSet (set, range) {
	  if (arguments.length === 1) return function (l) { return pitchSet(set, l) }
	
	  return tonalPcset.filter(set, chromatic(range))
	}
	
	exports.numeric = numeric;
	exports.chromatic = chromatic;
	exports.fifths = fifths;
	exports.pitchSet = pitchSet;


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalPitch = __webpack_require__(9);
	var tonalNote = __webpack_require__(23);
	var tonalArray = __webpack_require__(8);
	var tonalTranspose = __webpack_require__(13);
	
	/**
	 * Functions to create and manipulate pitch class sets
	 *
	 * @example
	 * var pcset = require('tonal-pcset')
	 * pcset.equal('c2 d5 e6', 'c6 e3 d1') // => true
	 *
	 * @module pcset
	 */
	function chrToInt (set) { return parseInt(chroma(set), 2) }
	function pitchChr (p) { p = tonalPitch.asPitch(p); return p ? tonalPitch.chr(p) : null }
	
	/**
	 * Get chroma of a pitch class set. A chroma identifies each set uniquely.
	 * It's a 12-digit binary each presenting one semitone of the octave.
	 *
	 * Note that this function accepts a chroma as parameter and return it
	 * without modification.
	 *
	 * @param {Array|String} set - the pitch class set
	 * @return {String} a binary representation of the pitch class set
	 * @example
	 * pcset.chroma('C D E') // => '1010100000000'
	 */
	function chroma (set) {
	  if (isChroma(set)) return set
	  var b = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
	  tonalArray.map(pitchChr, set).forEach(function (i) {
	    b[i] = 1;
	  });
	  return b.join('')
	}
	
	/**
	 * Given a list of notes, return the pitch class names of the set
	 * starting with the first note of the list
	 * @param {String|Array} notes - the pitch class set notes
	 * @return {Array} an array of pitch class sets
	 */
	function notes (notes) {
	  var pcs = tonalArray.map(tonalNote.pc, notes);
	  if (!pcs.length) return pcs
	  var tonic = pcs[0];
	  // since the first note of the chroma is always C, we have to rotate it
	  var rotated = tonalArray.rotate(pitchChr(tonic), chroma(pcs).split('')).join('');
	  return fromChroma(rotated, tonic)
	}
	
	/**
	 * Given a pitch class set (a list of notes or a pitch class set chroma), produce the 12 rotations
	 * of the chroma (and discard the ones that starts with '0')
	 *
	 * This can be used, for example, to get all the modes of a scale.
	 *
	 * @param {Array|String} set - the list of notes or pitchChr of the set
	 * @param {Boolean} normalize - (Optional, true by default) remove all
	 * the rotations that starts with '0'
	 * @return {Array<String>} an array with all the modes of the chroma
	 *
	 * @example
	 * pcset.chromaModes('C E G')
	 */
	function chromaModes (set, normalize) {
	  normalize = normalize !== false;
	  var binary = chroma(set).split('');
	  return tonalArray.compact(binary.map(function (_, i) {
	    var r = tonalArray.rotate(i, binary);
	    return normalize && r[0] === '0' ? null : r.join('')
	  }))
	}
	
	var REGEX = /^[01]{12}$/;
	
	/**
	 * Test if the given string is a pitch class set chroma.
	 * @param {String} chroma - the pitch class set chroma
	 * @return {Boolean} true if its a valid pcset chroma
	 * @example
	 * pcset.isChroma('101010101010') // => true
	 * pcset.isChroma('101001') // => false
	 */
	function isChroma (set) {
	  return REGEX.test(set)
	}
	
	var IVLS = '1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M'.split(' ');
	/**
	 * Given a pitch class set in binary notation it returns the intervals or notes
	 * (depending on the tonic)
	 * @param {String} binary - the pitch class set in binary representation
	 * @param {String|Pitch} tonic - the pitch class set tonic
	 * @return {Array} a list of notes or intervals
	 * @example
	 * pcset.fromChroma('101010101010', 'C') // => ['C', 'D', 'E', 'Gb', 'Ab', 'Bb']
	 */
	function fromChroma (binary, tonic) {
	  if (arguments.length === 1) return function (t) { return fromChroma(binary, t) }
	  if (!isChroma(binary)) return null
	
	  tonic = tonic || 'P1';
	  return tonalArray.compact(binary.split('').map(function (d, i) {
	    return d === '1' ? tonalTranspose.transpose(IVLS[i], tonic) : null
	  }))
	}
	
	/**
	 * Test if two pitch class sets are identical
	 *
	 * @param {Array|String} set1 - one of the pitch class sets
	 * @param {Array|String} set2 - the other pitch class set
	 * @return {Boolean} true if they are equal
	 * @example
	 * pcset.equal('c2 d3', 'c5 d2') // => true
	 */
	function equal (s1, s2) {
	  if (arguments.length === 1) return function (s) { return equal(s1, s) }
	  return chroma(s1) === chroma(s2)
	}
	
	/**
	 * Test if a pitch class set is a subset of another
	 *
	 * @param {Array|String} set - the base set to test against
	 * @param {Array|String} test - the set to test
	 * @return {Boolean} true if the test set is a subset of the set
	 * @example
	 * pcset.subset('c d e', 'C2 D4 D5 C6') // => true
	 */
	function subset (set, test) {
	  if (arguments.length === 1) return function (t) { return subset(set, t) }
	  test = chrToInt(test);
	  return (test & chrToInt(set)) === test
	}
	
	/**
	 * Test if a pitch class set is a superset
	 *
	 * @param {Array|String} set - the base set to test against
	 * @param {Array|String} test - the set to test
	 * @return {Boolean} true if the test set is a superset of the set
	 * @example
	 * pcset.subset('c d e', 'C2 D4 F4 D5 E5 C6') // => true
	 */
	function superset (set, test) {
	  if (arguments.length === 1) return function (t) { return superset(set, t) }
	  test = chrToInt(test);
	  return (test | chrToInt(set)) === test
	}
	
	/**
	 * Test if a given pitch class set includes a note
	 * @param {Array|String} set - the base set to test against
	 * @param {String|Pitch} note - the note to test
	 * @return {Boolean} true if the note is included in the pcset
	 * @example
	 * pcset.includes('c d e', 'C4') // =A true
	 * pcset.includes('c d e', 'C#4') // =A false
	 */
	function includes (set, note) {
	  if (arguments.length > 1) return includes(set)(note)
	  set = chroma(set);
	  return function (note) { return set[pitchChr(note)] === '1' }
	}
	
	/**
	 * Filter a list with a pitch class set
	 *
	 * @param {Array|String} set - the pitch class set notes
	 * @param {Array|String} notes - the note list to be filtered
	 * @return {Array} the filtered notes
	 *
	 * @example
	 * pcset.filter('c d e', 'c2 c#2 d2 c3 c#3 d3') // => [ 'c2', 'd2', 'c3', 'd3' ])
	 * pcset.filter('c2', 'c2 c#2 d2 c3 c#3 d3') // => [ 'c2', 'c3' ])
	 */
	function filter (set, notes) {
	  if (arguments.length === 1) return function (n) { return filter(set, n) }
	  return tonalArray.asArr(notes).filter(includes(set))
	}
	
	exports.chroma = chroma;
	exports.notes = notes;
	exports.chromaModes = chromaModes;
	exports.isChroma = isChroma;
	exports.fromChroma = fromChroma;
	exports.equal = equal;
	exports.subset = subset;
	exports.superset = superset;
	exports.includes = includes;
	exports.filter = filter;


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var noteParser = __webpack_require__(10);
	var tonalPitch = __webpack_require__(9);
	var tonalTranspose = __webpack_require__(13);
	var tonalMidi = __webpack_require__(24);
	var tonalFreq = __webpack_require__(25);
	
	/**
	 * Get the note midi number
	 * (an alias of tonal-midi `toMidi` function)
	 *
	 * @function
	 * @param {Array|String|Number} note - the note to get the midi number from
	 * @return {Integer} the midi number or null if not valid pitch
	 * @example
	 * note.midi('C4') // => 60
	 * @see midi.toMidi
	 */
	var midi = tonalMidi.toMidi
	
	/**
	 * Get the note name of a given midi note number
	 * (an alias of tonal-midi `note` function)
	 *
	 * @function
	 * @param {Integer} midi - the midi note number
	 * @param {Boolean} useSharps - (Optional) set to true to use sharps instead of flats
	 * @return {String} the note name
	 * @example
	 * note.fromMidi(60) // => 'C4'
	 * @see midi.note
	 */
	var fromMidi = tonalMidi.note
	
	/**
	 * Get the frequency of a note
	 * (an alias of the tonal-freq package `toFreq` function)
	 *
	 * @function
	 * @param {Array|String|Number} note - the note to get the frequency
	 * @return {Number} the frequency
	 * @example
	 * note.freq('A4') // => 440
	 * @see freq.toFreq
	 */
	var freq = tonalFreq.toFreq
	
	/**
	 * Return the chroma of a note. The chroma is the numeric equivalent to the
	 * pitch class, where 0 is C, 1 is C# or Db, 2 is D... 11 is B
	 *
	 * @param {String|Pitch} note
	 * @return {Integer} the chroma
	 * @example
	 * var note = require('tonal-note')
	 * note.chroma('Cb') // => 11
	 * ['C', 'D', 'E', 'F'].map(note.chroma) // => [0, 2, 4, 5]
	 */
	function chroma (n) {
	  var p = tonalPitch.asNotePitch(n)
	  return p ? tonalPitch.chr(p) : null
	}
	
	/**
	 * Given a note (as string or as array notation) returns a string
	 * with the note name in scientific notation or null
	 * if not valid note
	 *
	 * @function
	 * @param {Pitch|String}
	 * @return {String}
	 *
	 * @example
	 * var note = require('tonal-note')
	 * note.note('cb2') // => 'Cb2'
	 * ['c', 'db3', '2', 'g+', 'gx4'].map(note.name) // => ['C', 'Db3', null, null, 'G##4']
	 */
	function note$1 (n) {
	  var p = tonalPitch.asNotePitch(n)
	  return p ? tonalPitch.strNote(p) : null
	}
	
	/**
	 * Get note properties. It returns an object with the following properties:
	 *
	 * - step: 0 for C, 6 for B. Do not confuse with chroma
	 * - alt: 0 for not accidentals, positive sharps, negative flats
	 * - oct: the octave number or undefined if a pitch class
	 *
	 * @param {String|Pitch} note - the note
	 * @return {Object} the object with note properties or null if not valid note
	 * @example
	 * note.props('Db3') // => { step: 1, alt: -1, oct: 3 }
	 * note.props('C#') // => { step: 0, alt: 1, oct: undefined }
	 */
	function props (n) {
	  var p = tonalPitch.asNotePitch(n)
	  if (!p) return null
	  var d = tonalPitch.decode(p)
	  return { step: d[0], alt: d[1], oct: d[2] }
	}
	
	/**
	 * Given a note properties object, return the string representation if
	 * scientific notation
	 *
	 * @param {Object} noteProps - an object with the following attributes:
	 * @return {String} the note name
	 *
	 * - step: a number from 0 to 6 meaning note step letter from 'C' to 'B'
	 * - alt: the accidentals as number (0 no accidentals, 1 is '#', 2 is '##', -2 is 'bb')
	 * - oct: (Optional) the octave. If not present (or undefined) it returns a pitch class
	 *
	 * @example
	 * note.fromProps({ step: 1, alt: -1, oct: 5 }) // => 'Db5'
	 * note.fromProps({ step: 0, alt: 1 }) // => 'C#'
	 */
	function fromProps (props) {
	  return props ? noteParser.build(props.step, props.alt, props.oct) : null
	}
	
	function getProp (name) {
	  return function (n) { var p = props(n); return p ? p[name] : null }
	}
	
	/**
	 * Get the octave of the given pitch
	 *
	 * @function
	 * @param {String|Pitch} note - the note
	 * @return {Integer} the octave, undefined if its a pitch class or null if
	 * not a valid note
	 * @example
	 * note.oct('C#4') // => 4
	 * note.oct('C') // => undefined
	 * note.oct('blah') // => undefined
	 */
	var oct = getProp('oct')
	
	/**
	 * Get the note step: a number equivalent of the note letter. 0 means C and
	 * 6 means B. This is different from `chroma` (see example)
	 *
	 * @function
	 * @param {String|Pitch} note - the note
	 * @return {Integer} a number between 0 and 6 or null if not a note
	 * @example
	 * note.step('C') // => 0
	 * note.step('Cb') // => 0
	 * // usually what you need is chroma
	 * note.chroma('Cb') // => 6
	 */
	var step = getProp('step')
	
	/**
	 * Get the note step in fifths from 'C'. One property of the perfect fifht
	 * interval is that you can obtain any pitch class by transposing 'C' a
	 * number of times. This function return that number.
	 * @param {String|Pitch} note - the note (can be a pitch class)
	 * @return {Integer} the number of fifths to reach that pitch class from 'C'
	 */
	function pcFifths (note) {
	  var p = tonalPitch.asNotePitch(note)
	  return p ? tonalPitch.fifths(p) : null
	}
	
	/**
	 * Get the note alteration: a number equivalent to the accidentals. 0 means
	 * no accidentals, negative numbers are for flats, positive for sharps
	 *
	 * @function
	 * @param {String|Pitch} note - the note
	 * @return {Integer} the alteration
	 * @example
	 * note.alt('C') // => 0
	 * note.alt('C#') // => 1
	 * note.alt('Cb') // => -1
	 */
	var alt = getProp('alt')
	
	/**
	 * Get pitch class of a note. The note can be a string or a pitch array.
	 *
	 * @function
	 * @param {String|Pitch}
	 * @return {String} the pitch class
	 * @example
	 * tonal.pc('Db3') // => 'Db'
	 * tonal.map(tonal.pc, 'db3 bb6 fx2') // => [ 'Db', 'Bb', 'F##']
	 */
	function pc (n) {
	  var p = tonalPitch.asNotePitch(n)
	  return p ? tonalPitch.strNote([ p[0], [ tonalPitch.fifths(p) ] ]) : null
	}
	
	var ASC = tonalPitch.parseIvl('2d')
	var DESC = tonalPitch.parseIvl('-2d')
	
	/**
	 * Get the enharmonics of a note. It returns an array of three elements: the
	 * below enharmonic, the note, and the upper enharmonic
	 *
	 * @param {String} note - the note to get the enharmonics from
	 * @return {Array} an array of pitches ordered by distance to the given one
	 *
	 * @example
	 * var note = require('tonal-note')
	 * note.enharmonics('C') // => ['B#', 'C', 'Dbb']
	 * note.enharmonics('A') // => ['G##', 'A', 'Bbb']
	 * note.enharmonics('C#4') // => ['B##3', 'C#4' 'Db4']
	 * note.enharmonics('Db') // => ['C#', 'Db', 'Ebbb'])
	 */
	function enharmonics (pitch) {
	  var notes = []
	  notes.push(tonalTranspose.transpose(DESC, pitch))
	  if (notes[0] === null) return null
	  notes.push(pitch)
	  notes.push(tonalTranspose.transpose(ASC, pitch))
	  return notes
	}
	
	/**
	 * Get a simpler enharmonic note name from a note if exists
	 *
	 * @param {String} note - the note to simplify
	 * @return {String} the simplfiied note (if not found, return same note)
	 *
	 * @example
	 * var note = require('tonal-note')
	 * note.simplify('B#3') // => 'C4'
	 */
	function simplify (pitch) {
	  return enharmonics(pitch).reduce(function (simple, next) {
	    if (!simple) return next
	    return simple.length > next.length ? next : simple
	  }, null)
	}
	
	exports.midi = midi;
	exports.fromMidi = fromMidi;
	exports.freq = freq;
	exports.chroma = chroma;
	exports.note = note$1;
	exports.props = props;
	exports.fromProps = fromProps;
	exports.oct = oct;
	exports.step = step;
	exports.pcFifths = pcFifths;
	exports.alt = alt;
	exports.pc = pc;
	exports.enharmonics = enharmonics;
	exports.simplify = simplify;

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }
	
	var parser = _interopDefault(__webpack_require__(10));
	
	/**
	 * Test if the given number is a valid midi note number
	 * @function
	 * @param {Object} num - the thing to be tested
	 * @return {Boolean} true if it's a valid midi note number
	 * @example
	 * midi.isValidNote(30) // => true
	 * midi.isValidNote(200) // => false
	 */
	function isValidNote (m) {
	  return parser.midi(m) !== null
	}
	
	// To match the general midi specification where `C4` is 60 we must add 12 to
	// `height` function:
	
	/**
	 * Get midi note number. If you pass a midi number it will be
	 * bypassed.
	 *
	 * @param {Array|String} note - the note to get the midi number from
	 * @return {Integer} the midi number or null if not valid pitch
	 * @example
	 * midi.fromNote('C4') // => 60
	 * midi.fromNote(60) // => 60
	 * midi.fromNote('60') // => 60
	 */
	function fromNote (val) {
	  if (Array.isArray(val) && val.length === 2) return val[0] * 7 + val[1] * 12 + 12
	  return parser.midi(val)
	}
	
	var FLATS = 'C Db D Eb E F Gb G Ab A Bb B'.split(' ')
	var SHARPS = 'C C# D D# E F F# G G# A A# B'.split(' ')
	
	/**
	 * Given a midi number, returns a note name. The altered notes will have
	 * flats.
	 * @function
	 * @param {Integer} midi - the midi note number
	 * @param {Boolean} useSharps - (Optional) set to true to use sharps instead of flats
	 * @return {String} the note name
	 * @example
	 * var midi = require('tonal-midi')
	 * midi.toNote(61) // => 'Db4'
	 * midi.toNote(61, true) // => 'C#4'
	 */
	function toNote (num, sharps) {
	  if (num === true || num === false) return function (m) { return toNote(m, num) }
	  var pcs = sharps === true ? SHARPS : FLATS
	  var pc = pcs[num % 12]
	  var o = Math.floor(num / 12) - 1
	  return pc + o
	}
	
	exports.isValidNote = isValidNote;
	exports.fromNote = fromNote;
	exports.toNote = toNote;

/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalMidi = __webpack_require__(24);
	
	/**
	 * Return a function that converts midi or notes names to frequency using
	 * equal temperament.
	 * @function
	 * @param {Float} ref - the tuning reference
	 * @return {Function} the frequency calculator. It accepts midi numbers,
	 * note names, pitches and returns a float.
	 * @example
	 * import { toEqualTemp } from 'tonal-freq'
	 * const toFreq = toEqualTemp(444)
	 * toFreq('A3') // => 222
	 */
	function toEqualTemp (ref) {
	  return function (p) {
	    var m = tonalMidi.fromNote(p)
	    return m ? Math.pow(2, (m - 69) / 12) * ref : null
	  }
	}
	
	/**
	 * Get the frequency of a pitch using equal temperament scale and A4 equal to 440Hz
	 * @function
	 * @param {Number|String} note - the note name or midi number
	 * @return {Float} the frequency in herzs
	 * @example
	 * import { toFreq } from 'tonal-freq'
	 * toFreq('A4') // => 440
	 * // using tonal
	 * tonal.toFreq('C4') // => 261.6255653005986
	 */
	var toFreq = toEqualTemp(440)
	
	/**
	 * Create a function that returns a midi number from a frequency using an
	 * equal temperament and `ref` frequency as 'A4' frequency.
	 *
	 * @param {Float} ref - the frequency of A4
	 * @return {Function} a function that converts from frequency to midi
	 */
	function fromEqualTemp (ref) {
	  return function (freq) {
	    var midiNum = 12 * (Math.log(freq) - Math.log(ref)) / Math.log(2) + 69
	    return Math.round(midiNum)
	  }
	}
	
	/**
	 * Get note from frequency using a equal temeperament scale and 440Hz as
	 * freq reference
	 * @param {Float} freq
	 * @return {Integer} midi number
	 * @function
	 */
	var midiFromFreq = fromEqualTemp(440)
	
	/**
	 * Get note name from frequency using an equal temperament scale with 440Hz
	 * as reference
	 * @param {Float} freq
	 * @return {String} note name
	 */
	function fromFreq (freq) {
	  return tonalMidi.toNote(midiFromFreq(freq))
	}
	
	/**
	 * Get difference in cents between two frequencies. The frequencies can be
	 * expressed with hertzs or midi numbers or note names
	 * @param {Float|Integer|String} base
	 * @param {Float|Integer|String} freq
	 * @return {Float} The difference in cents
	 * @example
	 * import { cents } from 'tonal-freq'
	 * cents('C4', 261) // => -4.1444603457298985
	 */
	function cents (base, freq) {
	  var b = toFreq(base) || base
	  var f = toFreq(freq) || freq
	  return 1200 * (Math.log(f / b) / Math.log(2))
	}
	
	exports.toEqualTemp = toEqualTemp;
	exports.toFreq = toFreq;
	exports.fromEqualTemp = fromEqualTemp;
	exports.midiFromFreq = midiFromFreq;
	exports.fromFreq = fromFreq;
	exports.cents = cents;

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalNotation = __webpack_require__(27);
	var tonalTranspose = __webpack_require__(13);
	var tonalNote = __webpack_require__(17);
	var tonalRange = __webpack_require__(21);
	var tonalArray = __webpack_require__(8);
	var tonalHarmonizer = __webpack_require__(16);
	
	/**
	 * _Key_ refers to the tonal system based on the major and minor scales. This is
	 * is the most common tonal system, but tonality can be present in music
	 * based in other scales or concepts.
	 *
	 * This is a collection of functions related to keys.
	 *
	 * @example
	 * var key = require('tonal-key')
	 * key.scale('E mixolydian') // => [ 'E', 'F#', 'G#', 'A', 'B', 'C#', 'D' ]
	 * key.relative('minor', 'C major') // => 'A minor'
	 *
	 * @module key
	 */
	
	// Order matters: use an array
	var MODES = ['ionian', 'dorian', 'phrygian', 'lydian', 'mixolydian',
	  'aeolian', 'locrian', 'major', 'minor'];
	// { C: 0, D: 2, E: 4, F: -1, G: 1, A: 3, B: 5 }
	var FIFTHS = [0, 2, 4, -1, 1, 3, 5, 0, 3];
	var SCALES = [0, 1, 2, 3, 4, 5, 6, 0, 5].map(function (n) {
	  return tonalHarmonizer.harmonics(tonalArray.rotate(n, ['C', 'D', 'E', 'F', 'G', 'A', 'B']))
	});
	
	// PRIVATE
	// Given a tonic, mode pair, return the key string
	function toKey (t, m) { return !t ? m : t + ' ' + m }
	// Given the alterations, return the major key
	function majorKey (n) { return toKey(tonalTranspose.trFifths('C', n), 'major') }
	// given the mode name, return the alterations
	function modeNum (mode) { return FIFTHS[MODES.indexOf(mode)] }
	// given a string, return the valid mode it represents or null
	function validMode (m) {
	  m = m.trim().toLowerCase();
	  return MODES.indexOf(m) === -1 ? null : m
	}
	
	/**
	 * Return the key properties, an object with { tonic, mode }
	 *
	 * @param {String} name - the key name
	 * @return {Key} the key properties object or null if not a valid key
	 * @example
	 * var key = require('tonal-key')
	 * key.props('C3 dorian') // => { tonic: 'C', mode: 'dorian' }
	 * key.props('dorian') // => { tonic: false, mode: 'dorian' }
	 * key.props('Ab bebop') // => null
	 * key.props('blah') // => null
	 */
	function props (str) {
	  if (typeof str !== 'string') return null
	  var ndx = str.indexOf(' ');
	  var key;
	  if (ndx === -1) {
	    var p = tonalNote.pc(str);
	    key = p ? { tonic: p, mode: 'major' }
	      : { tonic: false, mode: validMode(str) };
	  } else {
	    key = { tonic: tonalNote.pc(str.slice(0, ndx)), mode: validMode(str.slice(ndx + 1)) };
	  }
	  return key.mode ? key : null
	}
	
	/**
	 * Test if a given name is a valid key name
	 *
	 * @param {String} name
	 * @param {Boolean}
	 * @example
	 * key.isKeyName('C major') // => true
	 * key.isKeyName('major') // => true
	 * key.isKeyName('Bb bebop') // => false
	 */
	function isKeyName (name) {
	  return props(name) !== null
	}
	
	/**
	 * Get the tonic of a key
	 *
	 * @param {String} key - the key
	 * @return {String} the tonic or false is no tonic, or null if its not a valid key
	 * @example
	 * key.tonic('c3 major') // => 'C'
	 * key.tonic('minor') // => false
	 * key.tonic('bebop') // null
	 */
	function tonic (key) {
	  return (props(key) || key || {}).tonic || null
	}
	
	/**
	 * Get the mode of a key. It can be used to test if its a valid key mode.
	 *
	 * @param {String}
	 * @return {Boolean}
	 * @example
	 * key.mode('A dorian') // => 'dorian'
	 * key.mode('DORIAN') // => 'dorian'
	 * key.mode('mixophrygian') // => null
	 */
	function mode (key) {
	  return (props(key) || key || {}).mode || null
	}
	
	/**
	 * Get relative of a key. Two keys are relative when the have the same
	 * key signature (for example C major and A minor)
	 *
	 * It can be partially applied.
	 *
	 * @param {String} mode - the relative destination
	 * @param {String} key - the key source
	 * @example
	 * key.relative('dorian', 'B major') // => 'C# dorian'
	 * // partial application
	 * var minor = key.relative('minor')
	 * minor('C major') // => 'A minor'
	 * minor('E major') // => 'C# minor'
	 */
	function relative (rel, key) {
	  if (arguments.length === 1) return function (k) { return relative(rel, k) }
	  rel = props(rel);
	  if (!rel || rel.tonic) return null
	  key = props(key);
	  if (!key || !key.tonic) return null
	  var tonic = tonalTranspose.trFifths(key.tonic, modeNum(rel.mode) - modeNum(key.mode));
	  return toKey(tonic, rel.mode)
	}
	
	/**
	 * Get a list of the altered notes of a given key. The notes will be in
	 * the same order than in the key signature.
	 * @param {String|Nunber} key
	 * @return {Array}
	 * @example
	 * var key = require('tonal-keys')
	 * key.alteredNotes('Eb major') // => [ 'Bb', 'Eb', 'Ab' ]
	 */
	function alteredNotes (key) {
	  var alt = alteration(key);
	  return alt === null ? null
	    : alt < 0 ? tonalRange.numeric([-1, alt]).map(tonalTranspose.trFifths('F'))
	    : tonalRange.numeric([1, alt]).map(tonalTranspose.trFifths('B'))
	}
	
	/**
	 * Get a list of valid mode names. The list of modes will be always in
	 * increasing order (ionian to locrian)
	 *
	 * @param {Boolean} alias - true to get aliases names
	 * @return {Array} an array of strings
	 * @example
	 * key.modes() // => [ 'ionian', 'dorian', 'phrygian', 'lydian',
	 * // 'mixolydian', 'aeolian', 'locrian' ]
	 * key.modes(true) // => [ 'ionian', 'dorian', 'phrygian', 'lydian',
	 * // 'mixolydian', 'aeolian', 'locrian', 'major', 'minor' ]
	 */
	function modes (alias) {
	  return alias ? MODES.slice() : MODES.slice(0, -2)
	}
	
	/**
	 * Create a major key from alterations
	 * @function
	 * @param {Integer} alt - the alteration number (positive sharps, negative flats)
	 * @return {Key} the key object
	 * @example
	 * var key = require('tonal-key')
	 * key.fromAlter(2) // => 'D major'
	 */
	function fromAlter (n) {
	  return typeof n === 'number' ? majorKey(n) : null
	}
	
	/**
	 * Get key name from accidentals
	 *
	 * @param {String} acc - the accidentals string
	 * @return {Key} the key object
	 * @example
	 * var key = require('tonal-key')
	 * key.fromAcc('b') // => 'F major'
	 * key.fromAcc('##') // => 'D major'
	 */
	function fromAcc (s) {
	  return tonalNotation.areSharps(s) ? majorKey(s.length)
	    : tonalNotation.areFlats(s) ? majorKey(-s.length)
	    : null
	}
	
	/**
	 * Get scale of a key
	 *
	 * @param {String|Object} key
	 * @return {Array} the key scale
	 * @example
	 * key.scale('A major') // => [ 'A', 'B', 'C#', 'D', 'E', 'F#', 'G#' ]
	 * key.scale('Bb minor') // => [ 'Bb', 'C', 'Db', 'Eb', 'F', 'Gb', 'Ab' ]
	 * key.scale('C dorian') // => [ 'C', 'D', 'Eb', 'F', 'G', 'A', 'Bb' ]
	 * key.scale('E mixolydian') // => [ 'E', 'F#', 'G#', 'A', 'B', 'C#', 'D' ]
	 */
	function scale (key) {
	  var p = props(key);
	  if (!p || !p.tonic) return null
	  return tonalHarmonizer.harmonize(SCALES[MODES.indexOf(p.mode)], p.tonic)
	}
	
	/**
	 * Get key alteration. The alteration is a number indicating the number of
	 * sharpen notes (positive) or flaten notes (negative)
	 * @param {String|Integer} key
	 * @return {Integer}
	 * @example
	 * var key = require('tonal-keys')
	 * key.alteration('A major') // => 3
	 */
	function alteration (key) {
	  var k = props(key);
	  if (!k || !k.tonic) return null
	  var toMajor = modeNum(k.mode);
	  var toC = tonalNote.pcFifths(k.tonic);
	  return toC - toMajor
	}
	
	/**
	 * Get the signature of a key. The signature is a string with sharps or flats.
	 * @example
	 * var key = require('tonal-keys')
	 * key.signature('A major') // => '###'
	 */
	function signature (key) {
	  return tonalNotation.toAcc(alteration(key))
	}
	
	/**
	 * An alias for `signature()`
	 * @function
	 */
	var accidentals = signature;
	
	exports.props = props;
	exports.isKeyName = isKeyName;
	exports.tonic = tonic;
	exports.mode = mode;
	exports.relative = relative;
	exports.alteredNotes = alteredNotes;
	exports.modes = modes;
	exports.fromAlter = fromAlter;
	exports.fromAcc = fromAcc;
	exports.scale = scale;
	exports.alteration = alteration;
	exports.signature = signature;
	exports.accidentals = accidentals;


/***/ }),
/* 27 */
/***/ (function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	/**
	 * Functions related to music notation in strings. Things like parse accidentals,
	 * or convert from step to note letter.
	 *
	 * Glossary:
	 *
	 * - step: the number from 0 to 6 representing the letters from C to B
	 * - letter: a valid note letter (from A to G)
	 * - alteration: a number indicating the sharps (positive) or flats (negative)
	 * - accidentals: a string with sharps (#) or flats (b)
	 *
	 * @example
	 * var notation = require('tonal-notation')
	 * notation.toAcc('3') // => '###'
	 * notation.toAcc('-3') // => 'bbb'
	 * notation.toAlt('###') // => 3
	 * @module notation
	 */
	
	/**
	 * Given a letter, return step
	 * @param {String} letter - the letter
	 * @return {Integer} the step number (from 0 to 6)
	 */
	function toStep (l) {
	  var s = 'CDEFGAB'.indexOf(l.toUpperCase())
	  return s < 0 ? null : s
	}
	
	/**
	 * Test if a number is a valid step number (a number from 0 to 6)
	 * @param {Integer} step - the step number
	 * @return {Boolean} true if it's a valid step number, false otherwise
	 */
	function isStep (d) { return !(d < 0 || d > 6) }
	
	/**
	 * Given a step, return a letter
	 * @param {Integer} step - the step number
	 * @return {String} the note letter or null if not valid step number
	 */
	function toLetter (s) {
	  return isStep(s) ? 'CDEFGAB'.charAt(s) : null
	}
	
	// ACCIDENTALS
	// ===========
	
	/**
	 * Test if a string are all flats (`b`) chars
	 * @param {String} str - the string to test
	 * @return {Boolean} true if all charaters are `b`, false otherwise
	 */
	function areFlats (s) { return /^b+$/.test(s) }
	/**
	 * Test if a string are all sharps (`#`) chars
	 * @param {String} str - the string to test
	 * @return {Boolean} true if all charaters are `#`, false otherwise
	 */
	function areSharps (s) { return /^#+$/.test(s) }
	
	/**
	 * Given an accidentals string return its alteration, the number
	 * of semitones (positive for sharps, negative for flats, 0 for none)
	 * @param {String} accidentals - the string to parse
	 * @return {Integer} the alteration number of null if not a valid accidental strings
	 * @example
	 * toAlt('###') // => 3
	 * toAlt('bbb') // => -3
	 */
	function toAlt (s) {
	  return s === '' ? 0
	    : areFlats(s) ? -s.length
	    : areSharps(s) ? s.length
	    : null
	}
	
	function fillStr (s, num) { return Array(num + 1).join(s) }
	
	/**
	 * Given an alteration number, returns the accidentals string
	 * @param {Integer} alteration - the number of semitones (positive and negative
	 * values are accepted for sharps and flats)
	 * @return {String} the accidental string
	 * @example
	 * toAcc(3) // => '###'
	 * toAcc(-3) // => 'bbb'
	 */
	function toAcc (n) {
	  return !n ? '' : n < 0 ? fillStr('b', -n) : fillStr('#', n)
	}
	
	exports.toStep = toStep;
	exports.isStep = isStep;
	exports.toLetter = toLetter;
	exports.areFlats = areFlats;
	exports.areSharps = areSharps;
	exports.toAlt = toAlt;
	exports.toAcc = toAcc;

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalDictionary = __webpack_require__(29);
	var tonalArray = __webpack_require__(8);
	var tonalNote = __webpack_require__(17);
	var tonalHarmonizer = __webpack_require__(16);
	
	/**
	 * A scale is a collection of pitches in ascending or descending order.
	 *
	 * This module provides functions to get and manipulate scales.
	 *
	 * @example
	 * scale.notes('Ab bebop') // => [ 'Ab', 'Bb', 'C', 'Db', 'Eb', 'F', 'Gb', 'G' ]
	 * scale.get('hungarian major', 'B3') // => [ 'B3', 'C##4', 'D#4', 'E#4', 'F#4', 'G#4', 'A4'
	 * scale.get('C E F G', 'F') // => [ 'F', 'A', 'Bb', 'C' ]
	 * scale.get('1P 2M 3M 5P 6M', 'D4') // => [ 'D4', 'E4', 'F#4', 'A4', 'B4' ]
	 * scale.names() => ['major', 'minor', ...]
	 * scale.detect('f5 d2 c5 b5 a2 e4 g') // => [ 'C major', 'D dorian', 'E phrygian', 'F lydian', 'G mixolydian', 'A aeolian', 'B locrian'])
	 * @module scale
	 */
	var DATA = __webpack_require__(30);
	
	var dict = tonalDictionary.dictionary(DATA, function (str) { return str.split(' ') });
	
	/**
	 * Transpose the given scale notes, intervals or name to a given tonic.
	 * The returned scale is an array of notes (or intervals if you specify `false` as tonic)
	 *
	 * This function is currified
	 *
	 * @param {String} source - the scale type, intervals or notes
	 * @param {String} tonic - the scale tonic (or false to get intervals)
	 * @return {Array} the scale notes
	 *
	 * @example
	 * scale.get('bebop', 'Eb') // => [ 'Eb', 'F', 'G', 'Ab', 'Bb', 'C', 'Db', 'D' ]
	 * scale.get('major', false) // => [ '1P', '2M', '3M', '4P', '5P', '6M', '7M' ]
	 * var major = scale.get('major')
	 * major('Db3') // => [ 'Db3', 'Eb3', 'F3', 'Gb3', 'Ab3', 'Bb3', 'C4' ]
	 */
	function get (type, tonic) {
	  if (arguments.length === 1) return function (t) { return get(type, t) }
	  var ivls = dict.get(type);
	  return ivls ? tonalHarmonizer.harmonize(ivls, tonic) : null
	}
	
	/**
	 * Return the available scale names
	 *
	 * @function
	 * @param {boolean} aliases - true to include aliases
	 * @return {Array} the scale names
	 *
	 * @example
	 * var scale = require('tonal-scale')
	 * scale.names() // => ['maj7', ...]
	 */
	var names = dict.keys;
	
	/**
	 * Get the notes (pitch classes) of a scale. It accepts either a scale name
	 * (tonic and type) or a collection of notes.
	 *
	 * Note that it always returns an array, and the values are only pitch classes.
	 *
	 * @param {String|Array} src - the scale name (it must include the scale type and
	 * a tonic. The tonic can be a note or a pitch class) or the list of notes
	 * @return {Array} the scale pitch classes
	 *
	 * @example
	 * scale.notes('C major') // => [ 'C', 'D', 'E', 'F', 'G', 'A', 'B' ]
	 * scale.notes('C4 major') // => [ 'C', 'D', 'E', 'F', 'G', 'A', 'B' ]
	 * scale.notes('Ab bebop') // => [ 'Ab', 'Bb', 'C', 'Db', 'Eb', 'F', 'Gb', 'G' ]
	 * scale.notes('C4 D6 E2 c7 a2 b5 g2 g4 f') // => ['C', 'D', 'E', 'F', 'G', 'A', 'B']
	 */
	function notes (name) {
	  var scale = parse(name);
	  var notes = scale.tonic ? get(scale.type, tonalNote.pc(scale.tonic)) : null;
	  return notes || tonalArray.compact(tonalArray.map(tonalNote.pc, name).map(function (n, i, arr) {
	    // check for duplicates
	    // TODO: sort but preserving the root
	    return arr.indexOf(n) < i ? null : n
	  }))
	}
	
	/**
	 * Given a scale name, return its intervals. The name can be the type and
	 * optionally the tonic (which is ignored)
	 *
	 * @param {String} name - the scale name (tonic and type, tonic is optional)
	 * @return {Array<String>} the scale intervals if is a known scale, null otherwise
	 * @example
	 * scale.intervals('C major')
	 */
	function intervals (name) {
	  var scale = parse(name);
	  return get(scale.type, false)
	}
	
	/**
	 * Check if the given name (and optional tonic and type) is a know scale
	 * @param {String} name - the scale name
	 * @return {Boolean}
	 * @example
	 * scale.intervals('C major') // => [ '1P', '2M', '3M', '4P', '5P', '6M', '7M' ])
	 * scale.intervals('major') // => [ '1P', '2M', '3M', '4P', '5P', '6M', '7M' ])
	 * scale.intervals('mixophrygian') // => null
	 */
	function isKnowScale (name) {
	  return intervals(name) !== null
	}
	
	/**
	 * Given a string try to parse as scale name. It retuns an object with the
	 * form { tonic, type } where tonic is the note or false if no tonic specified
	 * and type is the rest of the string minus the tonic
	 *
	 * Note that this function doesn't check that the scale type is a valid scale
	 * type or if is present in any scale dictionary.
	 *
	 * @param {String} name - the scale name
	 * @return {Object} an object { tonic, type }
	 * @example
	 * scale.parse('C mixoblydean') // => { tonic: 'C', type: 'mixoblydean' }
	 * scale.parse('anything is valid') // => { tonic: false, type: 'anything is valid'}
	 */
	function parse (str) {
	  if (typeof str !== 'string') return null
	  var i = str.indexOf(' ');
	  var tonic = tonalNote.note(str.substring(0, i)) || false;
	  var type = tonic ? str.substring(i + 1) : str;
	  return { tonic: tonic, type: type }
	}
	
	/**
	 * Detect a scale. Given a list of notes, return the scale name(s) if any.
	 * It only detects chords with exactly same notes.
	 *
	 * @function
	 * @param {Array|String} notes - the list of notes
	 * @return {Array<String>} an array with the possible scales
	 * @example
	 * scale.detect('b g f# d') // => [ 'GMaj7' ]
	 * scale.detect('e c a g') // => [ 'CM6', 'Am7' ]
	 */
	var detect = tonalDictionary.detector(dict, ' ');
	
	exports.get = get;
	exports.names = names;
	exports.notes = notes;
	exports.intervals = intervals;
	exports.isKnowScale = isKnowScale;
	exports.parse = parse;
	exports.detect = detect;


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalArray = __webpack_require__(8);
	var tonalNote = __webpack_require__(17);
	var tonalPcset = __webpack_require__(22);
	
	/**
	 * This module contains functions to query tonal dictionaries.
	 *
	 * A tonal dictionary is basically a map from keys to list of intervals. It
	 * also supports name aliases. See `tonal-chords` or `tonal-scales` to examples
	 * of dictionaries.
	 *
	 * This functions are quite low level, and probably you wont need it, because
	 * they are friendly served via `tonal-chords` and `tonal-scales`.
	 *
	 * __Those functions are NOT visible via `tonal` package__.
	 *
	 * @module dictionary
	 */
	function id (x) { return x }
	
	/**
	 * Create a tonal dictionary. A dictionary is an object with two functions: get and
	 * keys.
	 *
	 * The data given to this constructor it's a HashMap in the form:
	 * `{ key: [intervals, [aliases]] }`
	 *
	 * @param {HashMap} data - the dictionary data
	 * @return {Object} the dictionary object
	 *
	 * @example
	 * var dictionary = require('tonal-dictionary').dictionary
	 * var DATA = {
	 * 'maj7': ['1 3 5 7', ['Maj7']],
	 *   'm7': ['1 b3 5 7']
	 * }
	 * var chords = dictionary(DATA, function (str) { return str.split(' ') })
	 * chords.get('maj7') // => [ '1', '3', '5', '7' ]
	 * chords.get('Maj7') // => [ '1', '3', '5', '7' ]
	 * chords.get('m7') // => ['1', 'b3', '5', '7']
	 * chords.get('m7b5') // => null
	 * chords.keys() // => ['maj7', 'm7']
	 * chords.keys(true) // => ['maj7', 'm7', 'Maj7']
	 */
	function dictionary (raw, parse) {
	  parse = parse || id;
	  var byKey = {};
	  var names = Object.keys(raw);
	  var aliases = [];
	  names.forEach(function (k) {
	    var value = parse(raw[k][0]);
	    byKey[k] = value;
	    if (raw[k][1]) {
	      raw[k][1].forEach(function (alias) {
	        byKey[alias] = value;
	        aliases.push(alias);
	      });
	    }
	  });
	  return {
	    /**
	     * Get a value by key
	     * @name get
	     * @function
	     * @param {String} key
	     * @return {Object} the value (normally an array of intervals or notes)
	     * @memberof dictionary
	     */
	    get: function (n) { return byKey[n] },
	    /**
	     * Get the valid keys of dictionary
	     * @name keys
	     * @function
	     * @param {Boolean} aliases - (Optional) include aliases names (false by default)
	     * @param {Function} filter - a function to filter the names. It receives the
	     * name and the value as parameters
	     * @return {Array<String>} the keys
	     * @memberof dictionary
	     */
	    keys: function (all, filter) {
	      var keys = all ? names.concat(aliases) : names.slice();
	      return typeof filter !== 'function' ? keys
	        : keys.filter(function (k) { return filter(k, byKey[k]) })
	    }
	  }
	}
	
	/**
	 * Create a pitch set detector. Given a dictionary data, it returns a
	 * function that tries to detect a given pitch set inside the dictionary
	 *
	 * @param {Dictionary} dictionary - the dictionary object
	 * @param {Function|String} builder - (Optional) a function that given a name and a tonic,
	 * returns the object or a string to join both
	 * @return {Function} the detector function
	 * @see chord.detect
	 * @see scale.detect
	 * @example
	 * var detect = detector(dictionary(DATA), '')
	 * detect('c d e b') // => 'Cmaj/'
	 */
	function detector (dict, build) {
	  var isSep = typeof build === 'string';
	  var isFn = typeof build === 'function';
	  var nameByChroma = dict.keys(false).reduce(function (map$$1, key) {
	    map$$1[tonalPcset.chroma(dict.get(key))] = key;
	    return map$$1
	  }, {});
	
	  return function (notes) {
	    notes = tonalArray.sort(tonalArray.map(tonalNote.pc, notes));
	    var sets = tonalPcset.chromaModes(notes);
	    return tonalArray.compact(sets.map(function (set, i) {
	      var type = nameByChroma[set];
	      if (!type) return null
	      var tonic = notes[i];
	      return isSep ? tonic + build + type
	        : isFn ? build(type, tonic)
	        : [type, tonic]
	    }))
	  }
	}
	
	exports.dictionary = dictionary;
	exports.detector = detector;


/***/ }),
/* 30 */
/***/ (function(module, exports) {

	module.exports = {
		"lydian": [
			"1P 2M 3M 4A 5P 6M 7M"
		],
		"major": [
			"1P 2M 3M 4P 5P 6M 7M",
			[
				"ionian"
			]
		],
		"mixolydian": [
			"1P 2M 3M 4P 5P 6M 7m",
			[
				"dominant"
			]
		],
		"dorian": [
			"1P 2M 3m 4P 5P 6M 7m"
		],
		"aeolian": [
			"1P 2M 3m 4P 5P 6m 7m",
			[
				"minor"
			]
		],
		"phrygian": [
			"1P 2m 3m 4P 5P 6m 7m"
		],
		"locrian": [
			"1P 2m 3m 4P 5d 6m 7m"
		],
		"melodic minor": [
			"1P 2M 3m 4P 5P 6M 7M"
		],
		"melodic minor second mode": [
			"1P 2m 3m 4P 5P 6M 7m"
		],
		"lydian augmented": [
			"1P 2M 3M 4A 5A 6M 7M"
		],
		"lydian dominant": [
			"1P 2M 3M 4A 5P 6M 7m",
			[
				"lydian b7"
			]
		],
		"melodic minor fifth mode": [
			"1P 2M 3M 4P 5P 6m 7m",
			[
				"hindu",
				"mixolydian b6M"
			]
		],
		"locrian #2": [
			"1P 2M 3m 4P 5d 6m 7m"
		],
		"locrian major": [
			"1P 2M 3M 4P 5d 6m 7m",
			[
				"arabian"
			]
		],
		"altered": [
			"1P 2m 3m 3M 5d 6m 7m",
			[
				"super locrian",
				"diminished whole tone",
				"pomeroy"
			]
		],
		"major pentatonic": [
			"1P 2M 3M 5P 6M",
			[
				"pentatonic"
			]
		],
		"lydian pentatonic": [
			"1P 3M 4A 5P 7M",
			[
				"chinese"
			]
		],
		"mixolydian pentatonic": [
			"1P 3M 4P 5P 7m",
			[
				"indian"
			]
		],
		"locrian pentatonic": [
			"1P 3m 4P 5d 7m",
			[
				"minor seven flat five pentatonic"
			]
		],
		"minor pentatonic": [
			"1P 3m 4P 5P 7m"
		],
		"minor six pentatonic": [
			"1P 3m 4P 5P 6M"
		],
		"minor hexatonic": [
			"1P 2M 3m 4P 5P 7M"
		],
		"flat three pentatonic": [
			"1P 2M 3m 5P 6M",
			[
				"kumoi"
			]
		],
		"flat six pentatonic": [
			"1P 2M 3M 5P 6m"
		],
		"major flat two pentatonic": [
			"1P 2m 3M 5P 6M"
		],
		"whole tone pentatonic": [
			"1P 3M 5d 6m 7m"
		],
		"ionian pentatonic": [
			"1P 3M 4P 5P 7M"
		],
		"lydian #5P pentatonic": [
			"1P 3M 4A 5A 7M"
		],
		"lydian dominant pentatonic": [
			"1P 3M 4A 5P 7m"
		],
		"minor #7M pentatonic": [
			"1P 3m 4P 5P 7M"
		],
		"super locrian pentatonic": [
			"1P 3m 4d 5d 7m"
		],
		"in-sen": [
			"1P 2m 4P 5P 7m"
		],
		"iwato": [
			"1P 2m 4P 5d 7m"
		],
		"hirajoshi": [
			"1P 2M 3m 5P 6m"
		],
		"kumoijoshi": [
			"1P 2m 4P 5P 6m"
		],
		"pelog": [
			"1P 2m 3m 5P 6m"
		],
		"vietnamese 1": [
			"1P 3m 4P 5P 6m"
		],
		"vietnamese 2": [
			"1P 3m 4P 5P 7m"
		],
		"prometheus": [
			"1P 2M 3M 4A 6M 7m"
		],
		"prometheus neopolitan": [
			"1P 2m 3M 4A 6M 7m"
		],
		"ritusen": [
			"1P 2M 4P 5P 6M"
		],
		"scriabin": [
			"1P 2m 3M 5P 6M"
		],
		"piongio": [
			"1P 2M 4P 5P 6M 7m"
		],
		"major blues": [
			"1P 2M 3m 3M 5P 6M"
		],
		"minor blues": [
			"1P 3m 4P 5d 5P 7m",
			[
				"blues"
			]
		],
		"composite blues": [
			"1P 2M 3m 3M 4P 5d 5P 6M 7m"
		],
		"augmented": [
			"1P 2A 3M 5P 5A 7M"
		],
		"augmented heptatonic": [
			"1P 2A 3M 4P 5P 5A 7M"
		],
		"dorian #4": [
			"1P 2M 3m 4A 5P 6M 7m"
		],
		"lydian diminished": [
			"1P 2M 3m 4A 5P 6M 7M"
		],
		"whole tone": [
			"1P 2M 3M 4A 5A 7m"
		],
		"leading whole tone": [
			"1P 2M 3M 4A 5A 7m 7M"
		],
		"harmonic minor": [
			"1P 2M 3m 4P 5P 6m 7M"
		],
		"lydian minor": [
			"1P 2M 3M 4A 5P 6m 7m"
		],
		"neopolitan": [
			"1P 2m 3m 4P 5P 6m 7M"
		],
		"neopolitan minor": [
			"1P 2m 3m 4P 5P 6m 7M"
		],
		"neopolitan major": [
			"1P 2m 3m 4P 5P 6M 7M",
			[
				"dorian b2"
			]
		],
		"neopolitan major pentatonic": [
			"1P 3M 4P 5d 7m"
		],
		"romanian minor": [
			"1P 2M 3m 5d 5P 6M 7m"
		],
		"double harmonic lydian": [
			"1P 2m 3M 4A 5P 6m 7M"
		],
		"diminished": [
			"1P 2M 3m 4P 5d 6m 6M 7M"
		],
		"harmonic major": [
			"1P 2M 3M 4P 5P 6m 7M"
		],
		"double harmonic major": [
			"1P 2m 3M 4P 5P 6m 7M",
			[
				"gypsy"
			]
		],
		"egyptian": [
			"1P 2M 4P 5P 7m"
		],
		"hungarian minor": [
			"1P 2M 3m 4A 5P 6m 7M"
		],
		"hungarian major": [
			"1P 2A 3M 4A 5P 6M 7m"
		],
		"oriental": [
			"1P 2m 3M 4P 5d 6M 7m"
		],
		"spanish": [
			"1P 2m 3M 4P 5P 6m 7m",
			[
				"phrygian major"
			]
		],
		"spanish heptatonic": [
			"1P 2m 3m 3M 4P 5P 6m 7m"
		],
		"flamenco": [
			"1P 2m 3m 3M 4A 5P 7m"
		],
		"balinese": [
			"1P 2m 3m 4P 5P 6m 7M"
		],
		"todi raga": [
			"1P 2m 3m 4A 5P 6m 7M"
		],
		"malkos raga": [
			"1P 3m 4P 6m 7m"
		],
		"kafi raga": [
			"1P 3m 3M 4P 5P 6M 7m 7M"
		],
		"purvi raga": [
			"1P 2m 3M 4P 4A 5P 6m 7M"
		],
		"persian": [
			"1P 2m 3M 4P 5d 6m 7M"
		],
		"bebop": [
			"1P 2M 3M 4P 5P 6M 7m 7M"
		],
		"bebop dominant": [
			"1P 2M 3M 4P 5P 6M 7m 7M"
		],
		"bebop minor": [
			"1P 2M 3m 3M 4P 5P 6M 7m"
		],
		"bebop major": [
			"1P 2M 3M 4P 5P 5A 6M 7M"
		],
		"bebop locrian": [
			"1P 2m 3m 4P 5d 5P 6m 7m"
		],
		"minor bebop": [
			"1P 2M 3m 4P 5P 6m 7m 7M"
		],
		"mystery #1": [
			"1P 2m 3M 5d 6m 7m"
		],
		"enigmatic": [
			"1P 2m 3M 5d 6m 7m 7M"
		],
		"minor six diminished": [
			"1P 2M 3m 4P 5P 6m 6M 7M"
		],
		"ionian augmented": [
			"1P 2M 3M 4P 5A 6M 7M"
		],
		"lydian #9": [
			"1P 2m 3M 4A 5P 6M 7M"
		],
		"ichikosucho": [
			"1P 2M 3M 4P 5d 5P 6M 7M"
		],
		"six tone symmetric": [
			"1P 2m 3M 4P 5A 6M"
		]
	};

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalDictionary = __webpack_require__(29);
	var tonalArray = __webpack_require__(8);
	var tonalNote = __webpack_require__(17);
	var noteParser = __webpack_require__(10);
	var tonalHarmonizer = __webpack_require__(16);
	
	/**
	 * A chord is a harmonic unit with at least three different tones sounding simultaneously.
	 *
	 * This module have functions to create and manipulate chords. It includes a
	 * chord dictionary and a simple chord detection algorithm.
	 *
	 * @example
	 * var chord = require('tonal-chord')
	 * chord.detect('c b g e') // => 'CMaj7'
	 * chord.get('CMaj7') // => ['C', 'E', 'G', 'B']
	 *
	 * @module chord
	 */
	var DATA = __webpack_require__(32);
	
	var dict = tonalDictionary.dictionary(DATA, function (str) { return str.split(' ') });
	
	/**
	 * Return the available chord names
	 *
	 * @function
	 * @param {boolean} aliases - true to include aliases
	 * @return {Array} the chord names
	 *
	 * @example
	 * var chord = require('tonal-chord')
	 * chord.names() // => ['maj7', ...]
	 */
	var names = dict.keys;
	
	/**
	 * Get chord notes or intervals from chord type
	 *
	 * This function is currified
	 *
	 * @param {String} type - the chord type
	 * @param {Strng|Pitch} tonic - the tonic or false to get the intervals
	 * @return {Array<String>} the chord notes or intervals, or null if not valid type
	 *
	 * @example
	 * chords.get('dom7', 'C') // => ['C', 'E', 'G', 'Bb']
	 * maj7 = chords.get('Maj7')
	 * maj7('C') // => ['C', 'E', 'G', 'B']
	 */
	function get (type, tonic) {
	  if (arguments.length === 1) return function (t) { return get(type, t) }
	  var ivls = dict.get(type);
	  return ivls ? tonalHarmonizer.harmonize(ivls, tonic) : null
	}
	
	/**
	 * Get the chord notes of a chord. This function accepts either a chord name
	 * (for example: 'Cmaj7') or a list of notes.
	 *
	 * It always returns an array, even if the chord is not found.
	 *
	 * @param {String|Array} chord - the chord to get the notes from
	 * @return {Array<String>} a list of notes or empty list if not chord found
	 *
	 * @example
	 * chord.notes('Cmaj7') // => ['C', 'E', 'G', 'B']
	 */
	function notes (chord) {
	  var p = parse(chord);
	  var ivls = dict.get(p.type);
	  return ivls ? tonalHarmonizer.harmonize(ivls, p.tonic) : tonalArray.compact(tonalArray.map(tonalNote.note, chord))
	}
	
	/**
	 * Get chord intervals
	 *
	 * @param {String} name - the chord name (optionally a tonic and type)
	 * @return {Array<String>} a list of intervals or null if the type is not known
	 */
	function intervals (name) {
	  var p = parse(name);
	  return dict.get(p.type)
	}
	
	/**
	 * Check if a given name correspond to a chord in the dictionary
	 * @param {String} name
	 * @return {Boolean}
	 * @example
	 * chord.isKnownChord('CMaj7') // => true
	 * chord.isKnownChord('Maj7') // => true
	 * chord.isKnownChord('Ablah') // => false
	 */
	function isKnownChord (name) {
	  return intervals(name) !== null
	}
	
	/**
	 * Detect a chord. Given a list of notes, return the chord name(s) if any.
	 * It only detects chords with exactly same notes.
	 *
	 * @function
	 * @param {Array|String} notes - the list of notes
	 * @return {Array<String>} an array with the possible chords
	 * @example
	 * chord.detect('b g f# d') // => [ 'GMaj7' ]
	 * chord.detect('e c a g') // => [ 'CM6', 'Am7' ]
	 */
	var detect = tonalDictionary.detector(dict, '');
	
	/**
	 * Get the position (inversion number) of a chord (0 is root position, 1 is first
	 * inversion...). It assumes the chord is formed by superposed thirds.
	 *
	 * @param {Array|String} chord - the chord notes
	 * @return {Integer} the inversion number (0 for root inversion, 1 for first
	 * inversion...) or null if not a valid chord
	 *
	 * @example
	 * chord.position('e g c') // => 1
	 * chord.position('g3 e2 c5') // => 1 (e is the lowest note)
	 */
	function position (chord) {
	  var pcs = tonalArray.map(tonalNote.pc, chord);
	  var sorted = sortTriads(pcs);
	  return sorted ? sorted.indexOf(pcs[0]) : null
	}
	
	/**
	 * Given a chord in any inverstion, set to the given inversion. It accepts
	 * chord names
	 *
	 * @param {Integer} num - the inversion number (0 root position, 1 first
	 * inversion, ...)
	 * @param {String|Array} chord - the chord name or notes
	 * @return {Array} the chord pitch classes in the desired inversion
	 *
	 * @example
	 * chord.inversion(1, 'Cmaj7') // => [ 'E', 'G', 'B', 'C' ]
	 * chord.inversion(0, 'e g c') // => [ 'C', 'E', 'G' ]
	 */
	function inversion (num, chord) {
	  if (arguments.length === 1) return function (c) { return inversion(num, c) }
	  var sorted = sortTriads(chord);
	  return sorted ? tonalArray.rotate(num, sorted) : []
	}
	
	function sortTriads (chord) {
	  var all = tonalArray.permutations(notes(chord).map(tonalNote.pc));
	  for (var i = 0; i < all.length; i++) {
	    var ivls = tonalHarmonizer.intervallic(all[i]);
	    if (areTriads(ivls)) return all[i]
	  }
	  return null
	}
	
	function areTriads (list) {
	  for (var i = 0; i < list.length; i++) {
	    if (list[i][0] !== '3') return false
	  }
	  return true
	}
	
	/**
	 * Try to parse a chord name. It returns an array with the chord type and
	 * the tonic. If not tonic is found, all the name is considered the chord
	 * name.
	 *
	 * This function does NOT check if the chord type exists or not. It only tries
	 * to split the tonic and chord type.
	 *
	 * @param {String} name - the chord name
	 * @return {Array} an array with [type, tonic]
	 * @example
	 * chord.parse('Cmaj7') // => { tonic: 'C', type: 'maj7' }
	 * chord.parse('C7') // => { tonic: 'C', type: '7' }
	 * chord.parse('mMaj7') // => { tonic: false, type: 'mMaj7' }
	 * chord.parse('Cnonsense') // => { tonic: 'C', type: 'nonsense' }
	 */
	function parse (name) {
	  var p = noteParser.regex().exec(name);
	  if (!p) return { type: name, tonic: false }
	  // it can have a chord name: Cmaj7 is ['maj7', 'C']
	  // or if not, the octave is treated as chord name: C7 is ['7', 'C']
	  // doesn't have chord name: the name is the octave (example: 'C7' is dominant)
	  return p[4] ? { type: p[4], tonic: p[1] + p[2] + p[3] } : { type: p[3], tonic: p[1] + p[2] }
	}
	
	exports.names = names;
	exports.get = get;
	exports.notes = notes;
	exports.intervals = intervals;
	exports.isKnownChord = isKnownChord;
	exports.detect = detect;
	exports.position = position;
	exports.inversion = inversion;
	exports.parse = parse;


/***/ }),
/* 32 */
/***/ (function(module, exports) {

	module.exports = {
		"4": [
			"1P 4P 7m 10m",
			[
				"quartal"
			]
		],
		"5": [
			"1P 5P"
		],
		"7": [
			"1P 3M 5P 7m",
			[
				"Dominant",
				"Dom"
			]
		],
		"9": [
			"1P 3M 5P 7m 9M",
			[
				"79"
			]
		],
		"11": [
			"1P 5P 7m 9M 11P"
		],
		"13": [
			"1P 3M 5P 7m 9M 13M",
			[
				"13_"
			]
		],
		"64": [
			"5P 8P 10M"
		],
		"M": [
			"1P 3M 5P",
			[
				"Major",
				""
			]
		],
		"M#5": [
			"1P 3M 5A",
			[
				"augmented",
				"maj#5",
				"Maj#5",
				"+",
				"aug"
			]
		],
		"M#5add9": [
			"1P 3M 5A 9M",
			[
				"+add9"
			]
		],
		"M13": [
			"1P 3M 5P 7M 9M 13M",
			[
				"maj13",
				"Maj13"
			]
		],
		"M13#11": [
			"1P 3M 5P 7M 9M 11A 13M",
			[
				"maj13#11",
				"Maj13#11",
				"M13+4",
				"M13#4"
			]
		],
		"M6": [
			"1P 3M 5P 13M",
			[
				"6"
			]
		],
		"M6#11": [
			"1P 3M 5P 6M 11A",
			[
				"M6b5",
				"6#11",
				"6b5"
			]
		],
		"M69": [
			"1P 3M 5P 6M 9M",
			[
				"69"
			]
		],
		"M69#11": [
			"1P 3M 5P 6M 9M 11A"
		],
		"M7#11": [
			"1P 3M 5P 7M 11A",
			[
				"maj7#11",
				"Maj7#11",
				"M7+4",
				"M7#4"
			]
		],
		"M7#5": [
			"1P 3M 5A 7M",
			[
				"maj7#5",
				"Maj7#5",
				"maj9#5",
				"M7+"
			]
		],
		"M7#5sus4": [
			"1P 4P 5A 7M"
		],
		"M7#9#11": [
			"1P 3M 5P 7M 9A 11A"
		],
		"M7add13": [
			"1P 3M 5P 6M 7M 9M"
		],
		"M7b5": [
			"1P 3M 5d 7M"
		],
		"M7b6": [
			"1P 3M 6m 7M"
		],
		"M7b9": [
			"1P 3M 5P 7M 9m"
		],
		"M7sus4": [
			"1P 4P 5P 7M"
		],
		"M9": [
			"1P 3M 5P 7M 9M",
			[
				"maj9",
				"Maj9"
			]
		],
		"M9#11": [
			"1P 3M 5P 7M 9M 11A",
			[
				"maj9#11",
				"Maj9#11",
				"M9+4",
				"M9#4"
			]
		],
		"M9#5": [
			"1P 3M 5A 7M 9M",
			[
				"Maj9#5"
			]
		],
		"M9#5sus4": [
			"1P 4P 5A 7M 9M"
		],
		"M9b5": [
			"1P 3M 5d 7M 9M"
		],
		"M9sus4": [
			"1P 4P 5P 7M 9M"
		],
		"Madd9": [
			"1P 3M 5P 9M",
			[
				"2",
				"add9",
				"add2"
			]
		],
		"Maj7": [
			"1P 3M 5P 7M",
			[
				"maj7",
				"M7"
			]
		],
		"Mb5": [
			"1P 3M 5d"
		],
		"Mb6": [
			"1P 3M 13m"
		],
		"Msus2": [
			"1P 2M 5P",
			[
				"add9no3",
				"sus2"
			]
		],
		"Msus4": [
			"1P 4P 5P",
			[
				"sus",
				"sus4"
			]
		],
		"addb9": [
			"1P 3M 5P 9m"
		],
		"11b9": [
			"1P 5P 7m 9m 11P"
		],
		"13#11": [
			"1P 3M 5P 7m 9M 11A 13M",
			[
				"13+4",
				"13#4"
			]
		],
		"13#9": [
			"1P 3M 5P 7m 9A 13M",
			[
				"13#9_"
			]
		],
		"13#9#11": [
			"1P 3M 5P 7m 9A 11A 13M"
		],
		"13b5": [
			"1P 3M 5d 6M 7m 9M"
		],
		"13b9": [
			"1P 3M 5P 7m 9m 13M"
		],
		"13b9#11": [
			"1P 3M 5P 7m 9m 11A 13M"
		],
		"13no5": [
			"1P 3M 7m 9M 13M"
		],
		"13sus4": [
			"1P 4P 5P 7m 9M 13M",
			[
				"13sus"
			]
		],
		"69#11": [
			"1P 3M 5P 6M 9M 11A"
		],
		"7#11": [
			"1P 3M 5P 7m 11A",
			[
				"7+4",
				"7#4",
				"7#11_",
				"7#4_"
			]
		],
		"7#11b13": [
			"1P 3M 5P 7m 11A 13m",
			[
				"7b5b13"
			]
		],
		"7#5": [
			"1P 3M 5A 7m",
			[
				"+7",
				"7aug",
				"aug7"
			]
		],
		"7#5#9": [
			"1P 3M 5A 7m 9A",
			[
				"7alt",
				"7#5#9_",
				"7#9b13_"
			]
		],
		"7#5b9": [
			"1P 3M 5A 7m 9m"
		],
		"7#5b9#11": [
			"1P 3M 5A 7m 9m 11A"
		],
		"7#5sus4": [
			"1P 4P 5A 7m"
		],
		"7#9": [
			"1P 3M 5P 7m 9A",
			[
				"7#9_"
			]
		],
		"7#9#11": [
			"1P 3M 5P 7m 9A 11A",
			[
				"7b5#9"
			]
		],
		"7#9#11b13": [
			"1P 3M 5P 7m 9A 11A 13m"
		],
		"7#9b13": [
			"1P 3M 5P 7m 9A 13m"
		],
		"7add6": [
			"1P 3M 5P 7m 13M",
			[
				"67",
				"7add13"
			]
		],
		"7b13": [
			"1P 3M 7m 13m"
		],
		"7b5": [
			"1P 3M 5d 7m"
		],
		"7b6": [
			"1P 3M 5P 6m 7m"
		],
		"7b9": [
			"1P 3M 5P 7m 9m"
		],
		"7b9#11": [
			"1P 3M 5P 7m 9m 11A",
			[
				"7b5b9"
			]
		],
		"7b9#9": [
			"1P 3M 5P 7m 9m 9A"
		],
		"7b9b13": [
			"1P 3M 5P 7m 9m 13m"
		],
		"7b9b13#11": [
			"1P 3M 5P 7m 9m 11A 13m",
			[
				"7b9#11b13",
				"7b5b9b13"
			]
		],
		"7no5": [
			"1P 3M 7m"
		],
		"7sus4": [
			"1P 4P 5P 7m",
			[
				"7sus"
			]
		],
		"7sus4b9": [
			"1P 4P 5P 7m 9m",
			[
				"susb9",
				"7susb9",
				"7b9sus",
				"7b9sus4",
				"phryg"
			]
		],
		"7sus4b9b13": [
			"1P 4P 5P 7m 9m 13m",
			[
				"7b9b13sus4"
			]
		],
		"9#11": [
			"1P 3M 5P 7m 9M 11A",
			[
				"9+4",
				"9#4",
				"9#11_",
				"9#4_"
			]
		],
		"9#11b13": [
			"1P 3M 5P 7m 9M 11A 13m",
			[
				"9b5b13"
			]
		],
		"9#5": [
			"1P 3M 5A 7m 9M",
			[
				"9+"
			]
		],
		"9#5#11": [
			"1P 3M 5A 7m 9M 11A"
		],
		"9b13": [
			"1P 3M 7m 9M 13m"
		],
		"9b5": [
			"1P 3M 5d 7m 9M"
		],
		"9no5": [
			"1P 3M 7m 9M"
		],
		"9sus4": [
			"1P 4P 5P 7m 9M",
			[
				"9sus"
			]
		],
		"m": [
			"1P 3m 5P",
			[
				"minor"
			]
		],
		"m#5": [
			"1P 3m 5A",
			[
				"m+",
				"mb6"
			]
		],
		"m11": [
			"1P 3m 5P 7m 9M 11P",
			[
				"_11"
			]
		],
		"m11A 5": [
			"1P 3m 6m 7m 9M 11P"
		],
		"m11b5": [
			"1P 3m 7m 12d 2M 4P",
			[
				"h11",
				"_11b5"
			]
		],
		"m13": [
			"1P 3m 5P 7m 9M 11P 13M",
			[
				"_13"
			]
		],
		"m6": [
			"1P 3m 4P 5P 13M",
			[
				"_6"
			]
		],
		"m69": [
			"1P 3m 5P 6M 9M",
			[
				"_69"
			]
		],
		"m7": [
			"1P 3m 5P 7m",
			[
				"minor7",
				"_",
				"_7"
			]
		],
		"m7#5": [
			"1P 3m 6m 7m"
		],
		"m7add11": [
			"1P 3m 5P 7m 11P",
			[
				"m7add4"
			]
		],
		"m7b5": [
			"1P 3m 5d 7m",
			[
				"half-diminished",
				"h7",
				"_7b5"
			]
		],
		"m9": [
			"1P 3m 5P 7m 9M",
			[
				"_9"
			]
		],
		"m9#5": [
			"1P 3m 6m 7m 9M"
		],
		"m9b5": [
			"1P 3m 7m 12d 2M",
			[
				"h9",
				"-9b5"
			]
		],
		"mMaj7": [
			"1P 3m 5P 7M",
			[
				"mM7",
				"_M7"
			]
		],
		"mMaj7b6": [
			"1P 3m 5P 6m 7M",
			[
				"mM7b6"
			]
		],
		"mM9": [
			"1P 3m 5P 7M 9M",
			[
				"mMaj9",
				"-M9"
			]
		],
		"mM9b6": [
			"1P 3m 5P 6m 7M 9M",
			[
				"mMaj9b6"
			]
		],
		"mb6M7": [
			"1P 3m 6m 7M"
		],
		"mb6b9": [
			"1P 3m 6m 9m"
		],
		"o": [
			"1P 3m 5d",
			[
				"mb5",
				"dim"
			]
		],
		"o7": [
			"1P 3m 5d 13M",
			[
				"diminished",
				"m6b5",
				"dim7"
			]
		],
		"o7M7": [
			"1P 3m 5d 6M 7M"
		],
		"oM7": [
			"1P 3m 5d 7M"
		],
		"sus24": [
			"1P 2M 4P 5P",
			[
				"sus4add9"
			]
		],
		"+add#9": [
			"1P 3M 5A 9A"
		],
		"madd4": [
			"1P 3m 4P 5P"
		],
		"madd9": [
			"1P 3m 5P 9M"
		]
	};

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalNote = __webpack_require__(17);
	var tonalInterval = __webpack_require__(20);
	var tonalArray = __webpack_require__(8);
	var tonalTranspose = __webpack_require__(13);
	var tonalDistance = __webpack_require__(14);
	var tonalChord = __webpack_require__(31);
	var tonalNotation = __webpack_require__(27);
	
	/**
	 * Work with chord progressions.
	 *
	 * @example
	 * var progression = require('tonal-progression')
	 * progression.abstract('Cmaj7 Dm7 G7', 'C')
	 *
	 * @module progression
	 */
	/**
	 * Given a chord progression and a tonic, return the chord progression
	 * with roman numeral chords.
	 *
	 * @param {Array|String} chords - the chord progression
	 * @param {String} tonic - the tonic
	 * @return {Array} the chord progression in roman numerals
	 * @example
	 * progression.abstract('Cmaj7 Dm7 G7', 'C') // => [ 'Imaj7', 'IIm7', 'V7' ]
	 */
	function abstract (chords, tonic) {
	  tonic = tonalNote.pc(tonic);
	  chords = tonalArray.map(tonalChord.parse, chords);
	  var tonics = tonalArray.compact(chords.map(function (x) { return x.tonic }));
	  // if some tonic missing, can't do the analysis
	  if (tonics.length !== chords.length) return null
	
	  return tonics.map(function (t, i) {
	    var p = tonalInterval.props(tonalDistance.interval(tonic, t));
	    return buildRoman(p.num - 1, p.alt, chords[i].type)
	  })
	}
	
	var NUMS = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII'];
	/**
	 * Build an abstract chord name using roman numerals
	 */
	function buildRoman (num, alt, element) {
	  return tonalNotation.toAcc(alt) + NUMS[num % 7] + (element || '')
	}
	
	/**
	 * Get chord progression from a tonic and a list of chord in roman numerals
	 *
	 * @param {String} tonic - the tonic
	 * @param {Array|String} progression - the progression in roman numerals
	 * @return {Array} the chord progression
	 *
	 * @example
	 * var progression = require('chord-progression')
	 * progression.concrete('I IIm7 V7', 'C') // => ['C', 'Dm7', 'G7']
	 */
	function concrete (chords, tonic) {
	  return tonalArray.map(function (e) {
	    var r = parseRomanChord(e);
	    return r ? tonalTranspose.transpose(r.root, tonic) + r.type : null
	  }, chords)
	}
	
	var ROMAN = /^\s*(b|bb|#|##|)(IV|III|II|I|VII|VI|V|iv|iii|ii|i|vii|vi|v)\s*(.*)\s*$/;
	/**
	 * Returns a regex to match roman numbers literals with the from:
	 * `[accidentals]roman[element]`.
	 *
	 * The executed regex contains:
	 *
	 * - input: the input string
	 * - accidentals: (Optional) one or two flats (b) or shaprs (#)
	 * - roman: (Required) a roman numeral from I to VII either in upper or lower case
	 * - element: (Optional) a name of an element
	 *
	 * @return {RegExp} the regexp
	 *
	 * @example
	 * var r = progression.romanRegex()
	 * r.exec('bVImaj7') // => ['bVImaj7', 'b', 'VI', 'maj7'])
	 * r.exec('III dom') // => ['III dom', '', 'III', 'dom'])
	 */
	function romanRegex () { return ROMAN }
	
	var NUM = {i: 0, ii: 1, iii: 2, iv: 3, v: 4, vi: 5, vii: 6};
	
	/**
	 * Parse a chord expressed with roman numerals. It returns an interval representing
	 * the root of the chord relative to the key tonic and the chord name.
	 *
	 * @param {String} str - the roman numeral string
	 * @return {Object} the roman chord property object with:
	 *
	 * - type: the chord type
	 * - root: the interval from the key to the root of this chord
	 *
	 * @example
	 * var parse = require('music-notation/roman.parse')
	 * parse('V7') // => { root: '5P', type: '7' }
	 * parse('bIIalt') // => { root: '2m', type: 'alt' }
	 */
	function parseRomanChord (str) {
	  var m = ROMAN.exec(str);
	  if (!m) return null
	  var num = NUM[m[2].toLowerCase()] + 1;
	  var alt = m[1].length;
	  if (m[1][0] === 'b') alt = -alt;
	  return { root: tonalInterval.fromProps({ num: num, alt: alt, dir: 1 }), type: m[3] }
	}
	
	exports.abstract = abstract;
	exports.buildRoman = buildRoman;
	exports.concrete = concrete;
	exports.romanRegex = romanRegex;
	exports.parseRomanChord = parseRomanChord;


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalInterval = __webpack_require__(20);
	var tonalPitch = __webpack_require__(9);
	var tonalArray = __webpack_require__(8);
	
	/**
	 *
	 * @module sonority
	 */
	/**
	 * Get the intervals analysis of a collection of notes
	 *
	 * Returns an array with the format `[p, m, n, s, d, t]` where:
	 *
	 * - p: the number of perfect fourths or fifths
	 * - m: the number of major thirds or minor sixths
	 * - n: the number of major sixths or minor thirds
	 * - s: the number of major seconds or minor sevenths
	 * - d: the number of major sevents or minor seconds
	 * - t: the number of tritones
	 *
	 * This is, mostly, an academic puzzle to show the expresiveness of tonal.
	 * Implements the ideas found in "The Analysis of Intervals" chapter from
	 * [Harmonic Materials of Modern Music]():
	 *
	 * > The letters _pmn_, therefore, represent intervals commonly considered
	 * consonant, whereas the letters _sdt_ represent the intervals commonly
	 * considered dissonant. (...) A sonority represented, for example, by the
	 * symbol `sd^2`, indicating a triad composed of one major second and two minor
	 * seconds, would be recognized as a highly dissonant sound, while the symbol
	 * `pmn` would indicate a consonant sound.
	 *
	 * @param {Array|String} notes - the notes to analyze
	 * @return {Array} the _pmnsdt_ array
	 */
	function density (list) {
	  var a, b, i;
	  var notes = tonalArray.compact(tonalArray.map(tonalPitch.asNotePitch, list));
	  var len = notes.length;
	  var result = [0, 0, 0, 0, 0, 0];
	  for (a = 0; a < len; a++) {
	    for (b = a; b < len; b++) {
	      i = tonalInterval.ic(tonalPitch.chr(notes[b]) - tonalPitch.chr(notes[a]));
	      if (i === 6) result[5] = result[5] + 1;
	      else if (i > 0) result[5 - i] = result[5 - i] + 1;
	    }
	  }
	  return result
	}
	
	exports.density = density;


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, '__esModule', { value: true });
	
	var tonalArray = __webpack_require__(8);
	
	/**
	 * Functions to create and manipulate pitch sets
	 *
	 * @example
	 * var pitchset = require('tonal-pitchset')
	 *
	 * @module pitchset
	 */
	/**
	 * Get the notes of a pitch set. The notes in the set are sorted in asceding
	 * pitch order, and no repetitions are allowed.
	 *
	 * Note that it creates pitch sets and NOT picth class sets. This functionallity
	 * resides inside `tonal-pcset` module.
	 *
	 * @param {String|Array} notes - the notes to create the pitch set from
	 * @return {Array<String>} the ordered pitch set notes
	 * @example
	 * pitchset.notes('C4 c3 C5 c4') // => ['C3', 'C4', 'C5']
	 */
	function notes (notes) {
	  return tonalArray.sort(notes).filter(function (n, i, arr) {
	    return i === 0 || n !== arr[i - 1]
	  })
	}
	
	exports.notes = notes;


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict'
	
	var load = __webpack_require__(37)
	var player = __webpack_require__(40)
	
	/**
	 * Load a soundfont instrument. It returns a promise that resolves to a
	 * instrument object.
	 *
	 * The instrument object returned by the promise has the following properties:
	 *
	 * - name: the instrument name
	 * - play: A function to play notes from the buffer with the signature
	 * `play(note, time, duration, options)`
	 *
	 *
	 * The valid options are:
	 *
	 * - `format`: the soundfont format. 'mp3' by default. Can be 'ogg'
	 * - `soundfont`: the soundfont name. 'MusyngKite' by default. Can be 'FluidR3_GM'
	 * - `nameToUrl` <Function>: a function to convert from instrument names to URL
	 * - `destination`: by default Soundfont uses the `audioContext.destination` but you can override it.
	 * - `gain`: the gain of the player (1 by default)
	 * - `notes`: an array of the notes to decode. It can be an array of strings
	 * with note names or an array of numbers with midi note numbers. This is a
	 * performance option: since decoding mp3 is a cpu intensive process, you can limit
	 * limit the number of notes you want and reduce the time to load the instrument.
	 *
	 * @param {AudioContext} ac - the audio context
	 * @param {String} name - the instrument name. For example: 'acoustic_grand_piano'
	 * @param {Object} options - (Optional) the same options as Soundfont.loadBuffers
	 * @return {Promise}
	 *
	 * @example
	 * var Soundfont = require('sounfont-player')
	 * Soundfont.instrument('marimba').then(function (marimba) {
	 *   marimba.play('C4')
	 * })
	 */
	function instrument (ac, name, options) {
	  if (arguments.length === 1) return function (n, o) { return instrument(ac, n, o) }
	  var opts = options || {}
	  var isUrl = opts.isSoundfontURL || isSoundfontURL
	  var toUrl = opts.nameToUrl || nameToUrl
	  var url = isUrl(name) ? name : toUrl(name, opts.soundfont, opts.format)
	
	  return load(ac, url, { only: opts.only || opts.notes }).then(function (buffers) {
	    var p = player(ac, buffers, opts).connect(ac.destination)
	    p.url = url
	    p.name = name
	    return p
	  })
	}
	
	function isSoundfontURL (name) {
	  return /\.js(\?.*)?$/i.test(name)
	}
	
	/**
	 * Given an instrument name returns a URL to to the Benjamin Gleitzman's
	 * package of [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)
	 *
	 * @param {String} name - instrument name
	 * @param {String} soundfont - (Optional) the soundfont name. One of 'FluidR3_GM'
	 * or 'MusyngKite' ('MusyngKite' by default)
	 * @param {String} format - (Optional) Can be 'mp3' or 'ogg' (mp3 by default)
	 * @returns {String} the Soundfont file url
	 * @example
	 * var Soundfont = require('soundfont-player')
	 * Soundfont.nameToUrl('marimba', 'mp3')
	 */
	function nameToUrl (name, sf, format) {
	  format = format === 'ogg' ? format : 'mp3'
	  sf = sf === 'FluidR3_GM' ? sf : 'MusyngKite'
	  return 'https://gleitz.github.io/midi-js-soundfonts/' + sf + '/' + name + '-' + format + '.js'
	}
	
	// In the 1.0.0 release it will be:
	// var Soundfont = {}
	var Soundfont = __webpack_require__(49)
	Soundfont.instrument = instrument
	Soundfont.nameToUrl = nameToUrl
	
	if (typeof module === 'object' && module.exports) module.exports = Soundfont
	if (typeof window !== 'undefined') window.Soundfont = Soundfont


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict'
	
	var base64 = __webpack_require__(38)
	var fetch = __webpack_require__(39)
	
	// Given a regex, return a function that test if against a string
	function fromRegex (r) {
	  return function (o) { return typeof o === 'string' && r.test(o) }
	}
	// Try to apply a prefix to a name
	function prefix (pre, name) {
	  return typeof pre === 'string' ? pre + name
	    : typeof pre === 'function' ? pre(name)
	    : name
	}
	
	/**
	 * Load one or more audio files
	 *
	 *
	 * Possible option keys:
	 *
	 * - __from__ {Function|String}: a function or string to convert from file names to urls.
	 * If is a string it will be prefixed to the name:
	 * `load(ac, 'snare.mp3', { from: 'http://audio.net/samples/' })`
	 * If it's a function it receives the file name and should return the url as string.
	 * - __only__ {Array} - when loading objects, if provided, only the given keys
	 * will be included in the decoded object:
	 * `load(ac, 'piano.json', { only: ['C2', 'D2'] })`
	 *
	 * @param {AudioContext} ac - the audio context
	 * @param {Object} source - the object to be loaded
	 * @param {Object} options - (Optional) the load options for that object
	 * @param {Object} defaultValue - (Optional) the default value to return as
	 * in a promise if not valid loader found
	 */
	function load (ac, source, options, defVal) {
	  var loader =
	    // Basic audio loading
	      isArrayBuffer(source) ? loadArrayBuffer
	    : isAudioFileName(source) ? loadAudioFile
	    : isPromise(source) ? loadPromise
	    // Compound objects
	    : isArray(source) ? loadArrayData
	    : isObject(source) ? loadObjectData
	    : isJsonFileName(source) ? loadJsonFile
	    // Base64 encoded audio
	    : isBase64Audio(source) ? loadBase64Audio
	    : isJsFileName(source) ? loadMidiJSFile
	    : null
	
	  var opts = options || {}
	  return loader ? loader(ac, source, opts)
	    : defVal ? Promise.resolve(defVal)
	    : Promise.reject('Source not valid (' + source + ')')
	}
	load.fetch = fetch
	
	// BASIC AUDIO LOADING
	// ===================
	
	// Load (decode) an array buffer
	function isArrayBuffer (o) { return o instanceof ArrayBuffer }
	function loadArrayBuffer (ac, array, options) {
	  return new Promise(function (done, reject) {
	    ac.decodeAudioData(array,
	      function (buffer) { done(buffer) },
	      function () { reject("Can't decode audio data (" + array.slice(0, 30) + '...)') }
	    )
	  })
	}
	
	// Load an audio filename
	var isAudioFileName = fromRegex(/\.(mp3|wav|ogg)(\?.*)?$/i)
	function loadAudioFile (ac, name, options) {
	  var url = prefix(options.from, name)
	  return load(ac, load.fetch(url, 'arraybuffer'), options)
	}
	
	// Load the result of a promise
	function isPromise (o) { return o && typeof o.then === 'function' }
	function loadPromise (ac, promise, options) {
	  return promise.then(function (value) {
	    return load(ac, value, options)
	  })
	}
	
	// COMPOUND OBJECTS
	// ================
	
	// Try to load all the items of an array
	var isArray = Array.isArray
	function loadArrayData (ac, array, options) {
	  return Promise.all(array.map(function (data) {
	    return load(ac, data, options, data)
	  }))
	}
	
	// Try to load all the values of a key/value object
	function isObject (o) { return o && typeof o === 'object' }
	function loadObjectData (ac, obj, options) {
	  var dest = {}
	  var promises = Object.keys(obj).map(function (key) {
	    if (options.only && options.only.indexOf(key) === -1) return null
	    var value = obj[key]
	    return load(ac, value, options, value).then(function (audio) {
	      dest[key] = audio
	    })
	  })
	  return Promise.all(promises).then(function () { return dest })
	}
	
	// Load the content of a JSON file
	var isJsonFileName = fromRegex(/\.json(\?.*)?$/i)
	function loadJsonFile (ac, name, options) {
	  var url = prefix(options.from, name)
	  return load(ac, load.fetch(url, 'text').then(JSON.parse), options)
	}
	
	// BASE64 ENCODED FORMATS
	// ======================
	
	// Load strings with Base64 encoded audio
	var isBase64Audio = fromRegex(/^data:audio/)
	function loadBase64Audio (ac, source, options) {
	  var i = source.indexOf(',')
	  return load(ac, base64.decode(source.slice(i + 1)).buffer, options)
	}
	
	// Load .js files with MidiJS soundfont prerendered audio
	var isJsFileName = fromRegex(/\.js(\?.*)?$/i)
	function loadMidiJSFile (ac, name, options) {
	  var url = prefix(options.from, name)
	  return load(ac, load.fetch(url, 'text').then(midiJsToJson), options)
	}
	
	// convert a MIDI.js javascript soundfont file to json
	function midiJsToJson (data) {
	  var begin = data.indexOf('MIDI.Soundfont.')
	  if (begin < 0) throw Error('Invalid MIDI.js Soundfont format')
	  begin = data.indexOf('=', begin) + 2
	  var end = data.lastIndexOf(',')
	  return JSON.parse(data.slice(begin, end) + '}')
	}
	
	if (typeof module === 'object' && module.exports) module.exports = load
	if (typeof window !== 'undefined') window.loadAudio = load


/***/ }),
/* 38 */
/***/ (function(module, exports) {

	'use strict'
	
	// DECODE UTILITIES
	function b64ToUint6 (nChr) {
	  return nChr > 64 && nChr < 91 ? nChr - 65
	    : nChr > 96 && nChr < 123 ? nChr - 71
	    : nChr > 47 && nChr < 58 ? nChr + 4
	    : nChr === 43 ? 62
	    : nChr === 47 ? 63
	    : 0
	}
	
	// Decode Base64 to Uint8Array
	// ---------------------------
	function decode (sBase64, nBlocksSize) {
	  var sB64Enc = sBase64.replace(/[^A-Za-z0-9\+\/]/g, '')
	  var nInLen = sB64Enc.length
	  var nOutLen = nBlocksSize
	    ? Math.ceil((nInLen * 3 + 1 >> 2) / nBlocksSize) * nBlocksSize
	    : nInLen * 3 + 1 >> 2
	  var taBytes = new Uint8Array(nOutLen)
	
	  for (var nMod3, nMod4, nUint24 = 0, nOutIdx = 0, nInIdx = 0; nInIdx < nInLen; nInIdx++) {
	    nMod4 = nInIdx & 3
	    nUint24 |= b64ToUint6(sB64Enc.charCodeAt(nInIdx)) << 18 - 6 * nMod4
	    if (nMod4 === 3 || nInLen - nInIdx === 1) {
	      for (nMod3 = 0; nMod3 < 3 && nOutIdx < nOutLen; nMod3++, nOutIdx++) {
	        taBytes[nOutIdx] = nUint24 >>> (16 >>> nMod3 & 24) & 255
	      }
	      nUint24 = 0
	    }
	  }
	  return taBytes
	}
	
	module.exports = { decode: decode }


/***/ }),
/* 39 */
/***/ (function(module, exports) {

	/* global XMLHttpRequest */
	'use strict'
	
	/**
	 * Given a url and a return type, returns a promise to the content of the url
	 * Basically it wraps a XMLHttpRequest into a Promise
	 *
	 * @param {String} url
	 * @param {String} type - can be 'text' or 'arraybuffer'
	 * @return {Promise}
	 */
	module.exports = function (url, type) {
	  return new Promise(function (done, reject) {
	    var req = new XMLHttpRequest()
	    if (type) req.responseType = type
	
	    req.open('GET', url)
	    req.onload = function () {
	      req.status === 200 ? done(req.response) : reject(Error(req.statusText))
	    }
	    req.onerror = function () { reject(Error('Network Error')) }
	    req.send()
	  })
	}


/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict'
	
	var player = __webpack_require__(41)
	var events = __webpack_require__(43)
	var notes = __webpack_require__(44)
	var scheduler = __webpack_require__(46)
	var midi = __webpack_require__(47)
	
	function SamplePlayer (ac, source, options) {
	  return midi(scheduler(notes(events(player(ac, source, options)))))
	}
	
	if (typeof module === 'object' && module.exports) module.exports = SamplePlayer
	if (typeof window !== 'undefined') window.SamplePlayer = SamplePlayer


/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

	/* global AudioBuffer */
	'use strict'
	
	var ADSR = __webpack_require__(42)
	
	var EMPTY = {}
	var DEFAULTS = {
	  gain: 1,
	  attack: 0.01,
	  decay: 0.1,
	  sustain: 0.9,
	  release: 0.3,
	  loop: false,
	  cents: 0,
	  loopStart: 0,
	  loopEnd: 0
	}
	
	/**
	 * Create a sample player.
	 *
	 * @param {AudioContext} ac - the audio context
	 * @param {ArrayBuffer|Object<String,ArrayBuffer>} source
	 * @param {Onject} options - (Optional) an options object
	 * @return {player} the player
	 * @example
	 * var SamplePlayer = require('sample-player')
	 * var ac = new AudioContext()
	 * var snare = SamplePlayer(ac, <AudioBuffer>)
	 * snare.play()
	 */
	function SamplePlayer (ac, source, options) {
	  var connected = false
	  var nextId = 0
	  var tracked = {}
	  var out = ac.createGain()
	  out.gain.value = 1
	
	  var opts = Object.assign({}, DEFAULTS, options)
	
	  /**
	   * @namespace
	   */
	  var player = { context: ac, out: out, opts: opts }
	  if (source instanceof AudioBuffer) player.buffer = source
	  else player.buffers = source
	
	  /**
	   * Start a sample buffer.
	   *
	   * The returned object has a function `stop(when)` to stop the sound.
	   *
	   * @param {String} name - the name of the buffer. If the source of the
	   * SamplePlayer is one sample buffer, this parameter is not required
	   * @param {Float} when - (Optional) when to start (current time if by default)
	   * @param {Object} options - additional sample playing options
	   * @return {AudioNode} an audio node with a `stop` function
	   * @example
	   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)
	   * sample.start()
	   * sample.start(5, { gain: 0.7 }) // name not required since is only one AudioBuffer
	   * @example
	   * var drums = player(ac, { snare: <AudioBuffer>, kick: <AudioBuffer>, ... }).connect(ac.destination)
	   * drums.start('snare')
	   * drums.start('snare', 0, { gain: 0.3 })
	   */
	  player.start = function (name, when, options) {
	    // if only one buffer, reorder arguments
	    if (player.buffer && name !== null) return player.start(null, name, when)
	
	    var buffer = name ? player.buffers[name] : player.buffer
	    if (!buffer) {
	      console.warn('Buffer ' + name + ' not found.')
	      return
	    } else if (!connected) {
	      console.warn('SamplePlayer not connected to any node.')
	      return
	    }
	
	    var opts = options || EMPTY
	    when = Math.max(ac.currentTime, when || 0)
	    player.emit('start', when, name, opts)
	    var node = createNode(name, buffer, opts)
	    node.id = track(name, node)
	    node.env.start(when)
	    node.source.start(when)
	    player.emit('started', when, node.id, node)
	    if (opts.duration) node.stop(when + opts.duration)
	    return node
	  }
	
	  // NOTE: start will be override so we can't copy the function reference
	  // this is obviously not a good design, so this code will be gone soon.
	  /**
	   * An alias for `player.start`
	   * @see player.start
	   * @since 0.3.0
	   */
	  player.play = function (name, when, options) {
	    return player.start(name, when, options)
	  }
	
	  /**
	   * Stop some or all samples
	   *
	   * @param {Float} when - (Optional) an absolute time in seconds (or currentTime
	   * if not specified)
	   * @param {Array} nodes - (Optional) an array of nodes or nodes ids to stop
	   * @return {Array} an array of ids of the stoped samples
	   *
	   * @example
	   * var longSound = player(ac, <AudioBuffer>).connect(ac.destination)
	   * longSound.start(ac.currentTime)
	   * longSound.start(ac.currentTime + 1)
	   * longSound.start(ac.currentTime + 2)
	   * longSound.stop(ac.currentTime + 3) // stop the three sounds
	   */
	  player.stop = function (when, ids) {
	    var node
	    ids = ids || Object.keys(tracked)
	    return ids.map(function (id) {
	      node = tracked[id]
	      if (!node) return null
	      node.stop(when)
	      return node.id
	    })
	  }
	  /**
	   * Connect the player to a destination node
	   *
	   * @param {AudioNode} destination - the destination node
	   * @return {AudioPlayer} the player
	   * @chainable
	   * @example
	   * var sample = player(ac, <AudioBuffer>).connect(ac.destination)
	   */
	  player.connect = function (dest) {
	    connected = true
	    out.connect(dest)
	    return player
	  }
	
	  player.emit = function (event, when, obj, opts) {
	    if (player.onevent) player.onevent(event, when, obj, opts)
	    var fn = player['on' + event]
	    if (fn) fn(when, obj, opts)
	  }
	
	  return player
	
	  // =============== PRIVATE FUNCTIONS ============== //
	
	  function track (name, node) {
	    node.id = nextId++
	    tracked[node.id] = node
	    node.source.onended = function () {
	      var now = ac.currentTime
	      node.source.disconnect()
	      node.env.disconnect()
	      node.disconnect()
	      player.emit('ended', now, node.id, node)
	    }
	    return node.id
	  }
	
	  function createNode (name, buffer, options) {
	    var node = ac.createGain()
	    node.gain.value = 0 // the envelope will control the gain
	    node.connect(out)
	
	    node.env = envelope(ac, options, opts)
	    node.env.connect(node.gain)
	
	    node.source = ac.createBufferSource()
	    node.source.buffer = buffer
	    node.source.connect(node)
	    node.source.loop = options.loop || opts.loop
	    node.source.playbackRate.value = centsToRate(options.cents || opts.cents)
	    node.source.loopStart = options.loopStart || opts.loopStart
	    node.source.loopEnd = options.loopEnd || opts.loopEnd
	    node.stop = function (when) {
	      var time = when || ac.currentTime
	      player.emit('stop', time, name)
	      var stopAt = node.env.stop(time)
	      node.source.stop(stopAt)
	    }
	    return node
	  }
	}
	
	function isNum (x) { return typeof x === 'number' }
	var PARAMS = ['attack', 'decay', 'sustain', 'release']
	function envelope (ac, options, opts) {
	  var env = ADSR(ac)
	  var adsr = options.adsr || opts.adsr
	  PARAMS.forEach(function (name, i) {
	    if (adsr) env[name] = adsr[i]
	    else env[name] = options[name] || opts[name]
	  })
	  env.value.value = isNum(options.gain) ? options.gain
	    : isNum(opts.gain) ? opts.gain : 1
	  return env
	}
	
	/*
	 * Get playback rate for a given pitch change (in cents)
	 * Basic [math](http://www.birdsoft.demon.co.uk/music/samplert.htm):
	 * f2 = f1 * 2^( C / 1200 )
	 */
	function centsToRate (cents) { return cents ? Math.pow(2, cents / 1200) : 1 }
	
	module.exports = SamplePlayer


/***/ }),
/* 42 */
/***/ (function(module, exports) {

	module.exports = ADSR
	
	function ADSR(audioContext){
	  var node = audioContext.createGain()
	
	  var voltage = node._voltage = getVoltage(audioContext)
	  var value = scale(voltage)
	  var startValue = scale(voltage)
	  var endValue = scale(voltage)
	
	  node._startAmount = scale(startValue)
	  node._endAmount = scale(endValue)
	
	  node._multiplier = scale(value)
	  node._multiplier.connect(node)
	  node._startAmount.connect(node)
	  node._endAmount.connect(node)
	
	  node.value = value.gain
	  node.startValue = startValue.gain
	  node.endValue = endValue.gain
	
	  node.startValue.value = 0
	  node.endValue.value = 0
	
	  Object.defineProperties(node, props)
	  return node
	}
	
	var props = {
	
	  attack: { value: 0, writable: true },
	  decay: { value: 0, writable: true },
	  sustain: { value: 1, writable: true },
	  release: {value: 0, writable: true },
	
	  getReleaseDuration: {
	    value: function(){
	      return this.release
	    }
	  },
	
	  start: {
	    value: function(at){
	      var target = this._multiplier.gain
	      var startAmount = this._startAmount.gain
	      var endAmount = this._endAmount.gain
	
	      this._voltage.start(at)
	      this._decayFrom = this._decayFrom = at+this.attack
	      this._startedAt = at
	
	      var sustain = this.sustain
	
	      target.cancelScheduledValues(at)
	      startAmount.cancelScheduledValues(at)
	      endAmount.cancelScheduledValues(at)
	
	      endAmount.setValueAtTime(0, at)
	
	      if (this.attack){
	        target.setValueAtTime(0, at)
	        target.linearRampToValueAtTime(1, at + this.attack)
	
	        startAmount.setValueAtTime(1, at)
	        startAmount.linearRampToValueAtTime(0, at + this.attack)
	      } else {
	        target.setValueAtTime(1, at)
	        startAmount.setValueAtTime(0, at)
	      }
	
	      if (this.decay){
	        target.setTargetAtTime(sustain, this._decayFrom, getTimeConstant(this.decay))
	      }
	    }
	  },
	
	  stop: {
	    value: function(at, isTarget){
	      if (isTarget){
	        at = at - this.release
	      }
	
	      var endTime = at + this.release
	      if (this.release){
	
	        var target = this._multiplier.gain
	        var startAmount = this._startAmount.gain
	        var endAmount = this._endAmount.gain
	
	        target.cancelScheduledValues(at)
	        startAmount.cancelScheduledValues(at)
	        endAmount.cancelScheduledValues(at)
	
	        var expFalloff = getTimeConstant(this.release)
	
	        // truncate attack (required as linearRamp is removed by cancelScheduledValues)
	        if (this.attack && at < this._decayFrom){
	          var valueAtTime = getValue(0, 1, this._startedAt, this._decayFrom, at)
	          target.linearRampToValueAtTime(valueAtTime, at)
	          startAmount.linearRampToValueAtTime(1-valueAtTime, at)
	          startAmount.setTargetAtTime(0, at, expFalloff)
	        }
	
	        endAmount.setTargetAtTime(1, at, expFalloff)
	        target.setTargetAtTime(0, at, expFalloff)
	      }
	
	      this._voltage.stop(endTime)
	      return endTime
	    }
	  },
	
	  onended: {
	    get: function(){
	      return this._voltage.onended
	    },
	    set: function(value){
	      this._voltage.onended = value
	    }
	  }
	
	}
	
	var flat = new Float32Array([1,1])
	function getVoltage(context){
	  var voltage = context.createBufferSource()
	  var buffer = context.createBuffer(1, 2, context.sampleRate)
	  buffer.getChannelData(0).set(flat)
	  voltage.buffer = buffer
	  voltage.loop = true
	  return voltage
	}
	
	function scale(node){
	  var gain = node.context.createGain()
	  node.connect(gain)
	  return gain
	}
	
	function getTimeConstant(time){
	  return Math.log(time+1)/Math.log(100)
	}
	
	function getValue(start, end, fromTime, toTime, at){
	  var difference = end - start
	  var time = toTime - fromTime
	  var truncateTime = at - fromTime
	  var phase = truncateTime / time
	  var value = start + phase * difference
	
	  if (value <= start) {
	      value = start
	  }
	  if (value >= end) {
	      value = end
	  }
	
	  return value
	}


/***/ }),
/* 43 */
/***/ (function(module, exports) {

	
	module.exports = function (player) {
	  /**
	   * Adds a listener of an event
	   * @chainable
	   * @param {String} event - the event name
	   * @param {Function} callback - the event handler
	   * @return {SamplePlayer} the player
	   * @example
	   * player.on('start', function(time, note) {
	   *   console.log(time, note)
	   * })
	   */
	  player.on = function (event, cb) {
	    if (arguments.length === 1 && typeof event === 'function') return player.on('event', event)
	    var prop = 'on' + event
	    var old = player[prop]
	    player[prop] = old ? chain(old, cb) : cb
	    return player
	  }
	  return player
	}
	
	function chain (fn1, fn2) {
	  return function (a, b, c, d) { fn1(a, b, c, d); fn2(a, b, c, d) }
	}


/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict'
	
	var note = __webpack_require__(45)
	var isMidi = function (n) { return n !== null && n !== [] && n >= 0 && n < 129 }
	var toMidi = function (n) { return isMidi(n) ? +n : note.midi(n) }
	
	// Adds note name to midi conversion
	module.exports = function (player) {
	  if (player.buffers) {
	    var map = player.opts.map
	    var toKey = typeof map === 'function' ? map : toMidi
	    var mapper = function (name) {
	      return name ? toKey(name) || name : null
	    }
	
	    player.buffers = mapBuffers(player.buffers, mapper)
	    var start = player.start
	    player.start = function (name, when, options) {
	      var key = mapper(name)
	      var dec = key % 1
	      if (dec) {
	        key = Math.floor(key)
	        options = Object.assign(options || {}, { cents: Math.floor(dec * 100) })
	      }
	      return start(key, when, options)
	    }
	  }
	  return player
	}
	
	function mapBuffers (buffers, toKey) {
	  return Object.keys(buffers).reduce(function (mapped, name) {
	    mapped[toKey(name)] = buffers[name]
	    return mapped
	  }, {})
	}


/***/ }),
/* 45 */
/***/ (function(module, exports) {

	'use strict'
	
	var REGEX = /^([a-gA-G])(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)\s*$/
	/**
	 * A regex for matching note strings in scientific notation.
	 *
	 * @name regex
	 * @function
	 * @return {RegExp} the regexp used to parse the note name
	 *
	 * The note string should have the form `letter[accidentals][octave][element]`
	 * where:
	 *
	 * - letter: (Required) is a letter from A to G either upper or lower case
	 * - accidentals: (Optional) can be one or more `b` (flats), `#` (sharps) or `x` (double sharps).
	 * They can NOT be mixed.
	 * - octave: (Optional) a positive or negative integer
	 * - element: (Optional) additionally anything after the duration is considered to
	 * be the element name (for example: 'C2 dorian')
	 *
	 * The executed regex contains (by array index):
	 *
	 * - 0: the complete string
	 * - 1: the note letter
	 * - 2: the optional accidentals
	 * - 3: the optional octave
	 * - 4: the rest of the string (trimmed)
	 *
	 * @example
	 * var parser = require('note-parser')
	 * parser.regex.exec('c#4')
	 * // => ['c#4', 'c', '#', '4', '']
	 * parser.regex.exec('c#4 major')
	 * // => ['c#4major', 'c', '#', '4', 'major']
	 * parser.regex().exec('CMaj7')
	 * // => ['CMaj7', 'C', '', '', 'Maj7']
	 */
	function regex () { return REGEX }
	
	var SEMITONES = [0, 2, 4, 5, 7, 9, 11]
	/**
	 * Parse a note name in scientific notation an return it's components,
	 * and some numeric properties including midi number and frequency.
	 *
	 * @name parse
	 * @function
	 * @param {String} note - the note string to be parsed
	 * @param {Boolean} isTonic - true if the note is the tonic of something.
	 * If true, en extra tonicOf property is returned. It's false by default.
	 * @param {Float} tunning - The frequency of A4 note to calculate frequencies.
	 * By default it 440.
	 * @return {Object} the parsed note name or null if not a valid note
	 *
	 * The parsed note name object will ALWAYS contains:
	 * - letter: the uppercase letter of the note
	 * - acc: the accidentals of the note (only sharps or flats)
	 * - pc: the pitch class (letter + acc)
	 * - step: s a numeric representation of the letter. It's an integer from 0 to 6
	 * where 0 = C, 1 = D ... 6 = B
	 * - alt: a numeric representation of the accidentals. 0 means no alteration,
	 * positive numbers are for sharps and negative for flats
	 * - chroma: a numeric representation of the pitch class. It's like midi for
	 * pitch classes. 0 = C, 1 = C#, 2 = D ... It can have negative values: -1 = Cb.
	 * Can detect pitch class enhramonics.
	 *
	 * If the note has octave, the parser object will contain:
	 * - oct: the octave number (as integer)
	 * - midi: the midi number
	 * - freq: the frequency (using tuning parameter as base)
	 *
	 * If the parameter `isTonic` is set to true, the parsed object will contain:
	 * - tonicOf: the rest of the string that follows note name (left and right trimmed)
	 *
	 * @example
	 * var parse = require('note-parser').parse
	 * parse('Cb4')
	 * // => { letter: 'C', acc: 'b', pc: 'Cb', step: 0, alt: -1, chroma: -1,
	 *         oct: 4, midi: 59, freq: 246.94165062806206 }
	 * // if no octave, no midi, no freq
	 * parse('fx')
	 * // => { letter: 'F', acc: '##', pc: 'F##', step: 3, alt: 2, chroma: 7 })
	 */
	function parse (str, isTonic, tuning) {
	  if (typeof str !== 'string') return null
	  var m = REGEX.exec(str)
	  if (!m || !isTonic && m[4]) return null
	
	  var p = { letter: m[1].toUpperCase(), acc: m[2].replace(/x/g, '##') }
	  p.pc = p.letter + p.acc
	  p.step = (p.letter.charCodeAt(0) + 3) % 7
	  p.alt = p.acc[0] === 'b' ? -p.acc.length : p.acc.length
	  p.chroma = SEMITONES[p.step] + p.alt
	  if (m[3]) {
	    p.oct = +m[3]
	    p.midi = p.chroma + 12 * (p.oct + 1)
	    p.freq = midiToFreq(p.midi, tuning)
	  }
	  if (isTonic) p.tonicOf = m[4]
	  return p
	}
	
	/**
	 * Given a midi number, return its frequency
	 * @param {Integer} midi - midi note number
	 * @param {Float} tuning - (Optional) the A4 tuning (440Hz by default)
	 * @return {Float} frequency in hertzs
	 */
	function midiToFreq (midi, tuning) {
	  return Math.pow(2, (midi - 69) / 12) * (tuning || 440)
	}
	
	var parser = { parse: parse, regex: regex, midiToFreq: midiToFreq }
	var FNS = ['letter', 'acc', 'pc', 'step', 'alt', 'chroma', 'oct', 'midi', 'freq']
	FNS.forEach(function (name) {
	  parser[name] = function (src) {
	    var p = parse(src)
	    return p && (typeof p[name] !== 'undefined') ? p[name] : null
	  }
	})
	
	module.exports = parser
	
	// extra API docs
	/**
	 * Get midi of a note
	 *
	 * @name midi
	 * @function
	 * @param {String} note - the note name
	 * @return {Integer} the midi number of the note or null if not a valid note
	 * or the note does NOT contains octave
	 * @example
	 * var parser = require('note-parser')
	 * parser.midi('A4') // => 69
	 * parser.midi('A') // => null
	 */
	/**
	 * Get freq of a note in hertzs (in a well tempered 440Hz A4)
	 *
	 * @name freq
	 * @function
	 * @param {String} note - the note name
	 * @return {Float} the freq of the number if hertzs or null if not valid note
	 * or the note does NOT contains octave
	 * @example
	 * var parser = require('note-parser')
	 * parser.freq('A4') // => 440
	 * parser.freq('A') // => null
	 */


/***/ }),
/* 46 */
/***/ (function(module, exports) {

	'use strict'
	
	var isArr = Array.isArray
	var isObj = function (o) { return o && typeof o === 'object' }
	var OPTS = {}
	
	module.exports = function (player) {
	  /**
	   * Schedule a list of events to be played at specific time.
	   *
	   * It supports three formats of events for the events list:
	   *
	   * - An array with [time, note]
	   * - An array with [time, object]
	   * - An object with { time: ?, [name|note|midi|key]: ? }
	   *
	   * @param {Float} time - an absolute time to start (or AudioContext's
	   * currentTime if provided number is 0)
	   * @param {Array} events - the events list.
	   * @return {Array} an array of ids
	   *
	   * @example
	   * // Event format: [time, note]
	   * var piano = player(ac, ...).connect(ac.destination)
	   * piano.schedule(0, [ [0, 'C2'], [0.5, 'C3'], [1, 'C4'] ])
	   *
	   * @example
	   * // Event format: an object { time: ?, name: ? }
	   * var drums = player(ac, ...).connect(ac.destination)
	   * drums.schedule(0, [
	   *   { name: 'kick', time: 0 },
	   *   { name: 'snare', time: 0.5 },
	   *   { name: 'kick', time: 1 },
	   *   { name: 'snare', time: 1.5 }
	   * ])
	   */
	  player.schedule = function (time, events) {
	    var now = player.context.currentTime
	    var when = time < now ? now : time
	    player.emit('schedule', when, events)
	    var t, o, note, opts
	    return events.map(function (event) {
	      if (!event) return null
	      else if (isArr(event)) {
	        t = event[0]; o = event[1]
	      } else {
	        t = event.time; o = event
	      }
	
	      if (isObj(o)) {
	        note = o.name || o.key || o.note || o.midi || null
	        opts = o
	      } else {
	        note = o
	        opts = OPTS
	      }
	
	      return player.start(note, when + (t || 0), opts)
	    })
	  }
	  return player
	}


/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

	var midimessage = __webpack_require__(48)
	
	module.exports = function (player) {
	  /**
	  * Connect a player to a midi input
	  *
	  * The options accepts:
	  *
	  * - channel: the channel to listen to. Listen to all channels by default.
	  *
	  * @param {MIDIInput} input
	  * @param {Object} options - (Optional)
	  * @return {SamplePlayer} the player
	  * @example
	  * var piano = player(...)
	  * window.navigator.requestMIDIAccess().then(function (midiAccess) {
	  *   midiAccess.inputs.forEach(function (midiInput) {
	  *     piano.listenToMidi(midiInput)
	  *   })
	  * })
	  */
	  player.listenToMidi = function (input, options) {
	    var started = {}
	    var opts = options || {}
	    var gain = opts.gain || function (vel) { return vel / 127 }
	
	    input.onmidimessage = function (msg) {
	      var mm = msg.messageType ? msg : midimessage(msg)
	      if (mm.messageType === 'noteon' && mm.velocity === 0) {
	        mm.messageType = 'noteoff'
	      }
	      if (opts.channel && mm.channel !== opts.channel) return
	
	      switch (mm.messageType) {
	        case 'noteon':
	          started[mm.key] = player.play(mm.key, 0, { gain: gain(mm.velocity) })
	          break
	        case 'noteoff':
	          if (started[mm.key]) {
	            started[mm.key].stop()
	            delete started[mm.key]
	          }
	          break
	      }
	    }
	    return player
	  }
	  return player
	}


/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

	var require;var require;(function(e){if(true){module.exports=e()}else if(typeof define==="function"&&define.amd){define([],e)}else{var t;if(typeof window!=="undefined"){t=window}else if(typeof global!=="undefined"){t=global}else if(typeof self!=="undefined"){t=self}else{t=this}t.midimessage=e()}})(function(){var e,t,s;return function o(e,t,s){function a(n,i){if(!t[n]){if(!e[n]){var l=typeof require=="function"&&require;if(!i&&l)return require(n,!0);if(r)return r(n,!0);var h=new Error("Cannot find module '"+n+"'");throw h.code="MODULE_NOT_FOUND",h}var c=t[n]={exports:{}};e[n][0].call(c.exports,function(t){var s=e[n][1][t];return a(s?s:t)},c,c.exports,o,e,t,s)}return t[n].exports}var r=typeof require=="function"&&require;for(var n=0;n<s.length;n++)a(s[n]);return a}({1:[function(e,t,s){"use strict";Object.defineProperty(s,"__esModule",{value:true});s["default"]=function(e){function t(e){this._event=e;this._data=e.data;this.receivedTime=e.receivedTime;if(this._data&&this._data.length<2){console.warn("Illegal MIDI message of length",this._data.length);return}this._messageCode=e.data[0]&240;this.channel=e.data[0]&15;switch(this._messageCode){case 128:this.messageType="noteoff";this.key=e.data[1]&127;this.velocity=e.data[2]&127;break;case 144:this.messageType="noteon";this.key=e.data[1]&127;this.velocity=e.data[2]&127;break;case 160:this.messageType="keypressure";this.key=e.data[1]&127;this.pressure=e.data[2]&127;break;case 176:this.messageType="controlchange";this.controllerNumber=e.data[1]&127;this.controllerValue=e.data[2]&127;if(this.controllerNumber===120&&this.controllerValue===0){this.channelModeMessage="allsoundoff"}else if(this.controllerNumber===121){this.channelModeMessage="resetallcontrollers"}else if(this.controllerNumber===122){if(this.controllerValue===0){this.channelModeMessage="localcontroloff"}else{this.channelModeMessage="localcontrolon"}}else if(this.controllerNumber===123&&this.controllerValue===0){this.channelModeMessage="allnotesoff"}else if(this.controllerNumber===124&&this.controllerValue===0){this.channelModeMessage="omnimodeoff"}else if(this.controllerNumber===125&&this.controllerValue===0){this.channelModeMessage="omnimodeon"}else if(this.controllerNumber===126){this.channelModeMessage="monomodeon"}else if(this.controllerNumber===127){this.channelModeMessage="polymodeon"}break;case 192:this.messageType="programchange";this.program=e.data[1];break;case 208:this.messageType="channelpressure";this.pressure=e.data[1]&127;break;case 224:this.messageType="pitchbendchange";var t=e.data[2]&127;var s=e.data[1]&127;this.pitchBend=(t<<8)+s;break}}return new t(e)};t.exports=s["default"]},{}]},{},[1])(1)});
	//# sourceMappingURL=dist/index.js.map

/***/ }),
/* 49 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict'
	
	var parser = __webpack_require__(10)
	
	/**
	 * Create a Soundfont object
	 *
	 * @param {AudioContext} context - the [audio context](https://developer.mozilla.org/en/docs/Web/API/AudioContext)
	 * @param {Function} nameToUrl - (Optional) a function that maps the sound font name to the url
	 * @return {Soundfont} a soundfont object
	 */
	function Soundfont (ctx, nameToUrl) {
	  console.warn('new Soundfont() is deprected')
	  console.log('Please use Soundfont.instrument() instead of new Soundfont().instrument()')
	  if (!(this instanceof Soundfont)) return new Soundfont(ctx)
	
	  this.nameToUrl = nameToUrl || Soundfont.nameToUrl
	  this.ctx = ctx
	  this.instruments = {}
	  this.promises = []
	}
	
	Soundfont.prototype.onready = function (callback) {
	  console.warn('deprecated API')
	  console.log('Please use Promise.all(Soundfont.instrument(), Soundfont.instrument()).then() instead of new Soundfont().onready()')
	  Promise.all(this.promises).then(callback)
	}
	
	Soundfont.prototype.instrument = function (name, options) {
	  console.warn('new Soundfont().instrument() is deprecated.')
	  console.log('Please use Soundfont.instrument() instead.')
	  var ctx = this.ctx
	  name = name || 'default'
	  if (name in this.instruments) return this.instruments[name]
	  var inst = {name: name, play: oscillatorPlayer(ctx, options)}
	  this.instruments[name] = inst
	  if (name !== 'default') {
	    var promise = Soundfont.instrument(ctx, name, options).then(function (instrument) {
	      inst.play = instrument.play
	      return inst
	    })
	    this.promises.push(promise)
	    inst.onready = function (cb) {
	      console.warn('onready is deprecated. Use Soundfont.instrument().then()')
	      promise.then(cb)
	    }
	  } else {
	    inst.onready = function (cb) {
	      console.warn('onready is deprecated. Use Soundfont.instrument().then()')
	      cb()
	    }
	  }
	  return inst
	}
	
	/*
	 * Load the buffers of a given instrument name. It returns a promise that resolves
	 * to a hash with midi note numbers as keys, and audio buffers as values.
	 *
	 * @param {AudioContext} ac - the audio context
	 * @param {String} name - the instrument name (it accepts an url if starts with "http")
	 * @param {Object} options - (Optional) options object
	 * @return {Promise} a promise that resolves to a Hash of { midiNoteNum: <AudioBuffer> }
	 *
	 * The options object accepts the following keys:
	 *
	 * - nameToUrl {Function}: a function to convert from instrument names to urls.
	 * By default it uses Benjamin Gleitzman's package of
	 * [pre-rendered sound fonts](https://github.com/gleitz/midi-js-soundfonts)
	 * - notes {Array}: the list of note names to be decoded (all by default)
	 *
	 * @example
	 * var Soundfont = require('soundfont-player')
	 * Soundfont.loadBuffers(ctx, 'acoustic_grand_piano').then(function(buffers) {
	 *  buffers[60] // => An <AudioBuffer> corresponding to note C4
	 * })
	 */
	function loadBuffers (ac, name, options) {
	  console.warn('Soundfont.loadBuffers is deprecate.')
	  console.log('Use Soundfont.instrument(..) and get buffers properties from the result.')
	  return Soundfont.instrument(ac, name, options).then(function (inst) {
	    return inst.buffers
	  })
	}
	Soundfont.loadBuffers = loadBuffers
	
	/**
	 * Returns a function that plays an oscillator
	 *
	 * @param {AudioContext} ac - the audio context
	 * @param {Hash} defaultOptions - (Optional) a hash of options:
	 * - vcoType: the oscillator type (default: 'sine')
	 * - gain: the output gain value (default: 0.4)
	  * - destination: the player destination (default: ac.destination)
	 */
	function oscillatorPlayer (ctx, defaultOptions) {
	  defaultOptions = defaultOptions || {}
	  return function (note, time, duration, options) {
	    console.warn('The oscillator player is deprecated.')
	    console.log('Starting with version 0.9.0 you will have to wait until the soundfont is loaded to play sounds.')
	    var midi = note > 0 && note < 129 ? +note : parser.midi(note)
	    var freq = midi ? parser.midiToFreq(midi, 440) : null
	    if (!freq) return
	
	    duration = duration || 0.2
	
	    options = options || {}
	    var destination = options.destination || defaultOptions.destination || ctx.destination
	    var vcoType = options.vcoType || defaultOptions.vcoType || 'sine'
	    var gain = options.gain || defaultOptions.gain || 0.4
	
	    var vco = ctx.createOscillator()
	    vco.type = vcoType
	    vco.frequency.value = freq
	
	    /* VCA */
	    var vca = ctx.createGain()
	    vca.gain.value = gain
	
	    /* Connections */
	    vco.connect(vca)
	    vca.connect(destination)
	
	    vco.start(time)
	    if (duration > 0) vco.stop(time + duration)
	    return vco
	  }
	}
	
	/**
	 * Given a note name, return the note midi number
	 *
	 * @name noteToMidi
	 * @function
	 * @param {String} noteName
	 * @return {Integer} the note midi number or null if not a valid note name
	 */
	Soundfont.noteToMidi = parser.midi
	
	module.exports = Soundfont


/***/ }),
/* 50 */
/***/ (function(module, exports) {

	module.exports = {
		"type": "sheets",
		"data": [
			{
				"name": "C Major",
				"notes": [
					"c4",
					"d4",
					"e4",
					"f4",
					"g4",
					"a4",
					"b4",
					"c5"
				]
			},
			{
				"name": "C Harmonic Minor",
				"notes": [
					"c4",
					"d4",
					"eb4",
					"f4",
					"g4",
					"ab4",
					"b4",
					"c5"
				]
			},
			{
				"name": "C Rast رست",
				"notes": [
					"c4",
					"d4",
					"ebs4",
					"f4",
					"g4",
					"a4",
					"bbs4",
					"c5"
				]
			}
		]
	};

/***/ }),
/* 51 */
/***/ (function(module, exports) {

	module.exports = {
		"type": "soundfonts",
		"data": {
			"musyngkite": {
				"name": "MusyngKite",
				"url": "https://gleitz.github.io/midi-js-soundfonts/MusyngKite/"
			},
			"fluidr3_gm": {
				"name": "FluidR3_GM",
				"url": "https://gleitz.github.io/midi-js-soundfonts/FluidR3_GM/"
			},
			"qanoon": {
				"name": "Qanoon",
				"url": "/soundfonts/Qanoon/"
			},
			"doumbek": {
				"name": "Doumbek-Faisal",
				"url": "/soundfonts/Doumbek-Faisal/"
			}
		}
	};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

	var core = __webpack_require__(53);
	
	/**
	 * math.js factory function. Creates a new instance of math.js
	 *
	 * @param {Object} [config] Available configuration options:
	 *                            {number} epsilon
	 *                              Minimum relative difference between two
	 *                              compared values, used by all comparison functions.
	 *                            {string} matrix
	 *                              A string 'matrix' (default) or 'array'.
	 *                            {string} number
	 *                              A string 'number' (default), 'bignumber', or
	 *                              'fraction'
	 *                            {number} precision
	 *                              The number of significant digits for BigNumbers.
	 *                              Not applicable for Numbers.
	 *                            {boolean} predictable
	 *                              Predictable output type of functions. When true,
	 *                              output type depends only on the input types. When
	 *                              false (default), output type can vary depending
	 *                              on input values. For example `math.sqrt(-4)`
	 *                              returns `complex('2i')` when predictable is false, and
	 *                              returns `NaN` when true.
	 */
	function create (config) {
	  // create a new math.js instance
	  var math = core.create(config);
	  math.create = create;
	
	  // import data types, functions, constants, expression parser, etc.
	  math['import'](__webpack_require__(64));
	
	  return math;
	}
	
	// return a new instance of math.js
	module.exports = create();


/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(54);

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

	var isFactory = __webpack_require__(55).isFactory;
	var typedFactory = __webpack_require__(56);
	var emitter = __webpack_require__(59);
	
	var importFactory = __webpack_require__(61);
	var configFactory = __webpack_require__(63);
	
	/**
	 * Math.js core. Creates a new, empty math.js instance
	 * @param {Object} [options] Available options:
	 *                            {number} epsilon
	 *                              Minimum relative difference between two
	 *                              compared values, used by all comparison functions.
	 *                            {string} matrix
	 *                              A string 'Matrix' (default) or 'Array'.
	 *                            {string} number
	 *                              A string 'number' (default), 'BigNumber', or 'Fraction'
	 *                            {number} precision
	 *                              The number of significant digits for BigNumbers.
	 *                              Not applicable for Numbers.
	 *                            {boolean} predictable
	 *                              Predictable output type of functions. When true,
	 *                              output type depends only on the input types. When
	 *                              false (default), output type can vary depending
	 *                              on input values. For example `math.sqrt(-4)`
	 *                              returns `complex('2i')` when predictable is false, and
	 *                              returns `NaN` when true.
	 *                            {string} randomSeed
	 *                              Random seed for seeded pseudo random number generator.
	 *                              Set to null to randomly seed.
	 * @returns {Object} Returns a bare-bone math.js instance containing
	 *                   functions:
	 *                   - `import` to add new functions
	 *                   - `config` to change configuration
	 *                   - `on`, `off`, `once`, `emit` for events
	 */
	exports.create = function create (options) {
	  // simple test for ES5 support
	  if (typeof Object.create !== 'function') {
	    throw new Error('ES5 not supported by this JavaScript engine. ' +
	    'Please load the es5-shim and es5-sham library for compatibility.');
	  }
	
	  // cached factories and instances
	  var factories = [];
	  var instances = [];
	
	  // create a namespace for the mathjs instance, and attach emitter functions
	  var math = emitter.mixin({});
	  math.type = {};
	  math.expression = {
	    transform: {},
	    mathWithTransform: {}
	  };
	
	  // create a new typed instance
	  math.typed = typedFactory.create(math.type);
	
	  // create configuration options. These are private
	  var _config = {
	    // minimum relative difference between two compared values,
	    // used by all comparison functions
	    epsilon: 1e-12,
	
	    // type of default matrix output. Choose 'matrix' (default) or 'array'
	    matrix: 'Matrix',
	
	    // type of default number output. Choose 'number' (default) 'BigNumber', or 'Fraction
	    number: 'number',
	
	    // number of significant digits in BigNumbers
	    precision: 64,
	
	    // predictable output type of functions. When true, output type depends only
	    // on the input types. When false (default), output type can vary depending
	    // on input values. For example `math.sqrt(-4)` returns `complex('2i')` when
	    // predictable is false, and returns `NaN` when true.
	    predictable: false,
	
	    // random seed for seeded pseudo random number generation
	    // null = randomly seed
	    randomSeed: null
	  };
	
	  /**
	   * Load a function or data type from a factory.
	   * If the function or data type already exists, the existing instance is
	   * returned.
	   * @param {{type: string, name: string, factory: Function}} factory
	   * @returns {*}
	   */
	  function load (factory) {
	    if (!isFactory(factory)) {
	      throw new Error('Factory object with properties `type`, `name`, and `factory` expected');
	    }
	
	    var index = factories.indexOf(factory);
	    var instance;
	    if (index === -1) {
	      // doesn't yet exist
	      if (factory.math === true) {
	        // pass with math namespace
	        instance = factory.factory(math.type, _config, load, math.typed, math);
	      }
	      else {
	        instance = factory.factory(math.type, _config, load, math.typed);
	      }
	
	      // append to the cache
	      factories.push(factory);
	      instances.push(instance);
	    }
	    else {
	      // already existing function, return the cached instance
	      instance = instances[index];
	    }
	
	    return instance;
	  }
	
	  // load the import and config functions
	  math['import'] = load(importFactory);
	  math['config'] = load(configFactory);
	  math.expression.mathWithTransform['config'] = math['config']
	
	  // apply options
	  if (options) {
	    math.config(options);
	  }
	
	  return math;
	};


/***/ }),
/* 55 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Clone an object
	 *
	 *     clone(x)
	 *
	 * Can clone any primitive type, array, and object.
	 * If x has a function clone, this function will be invoked to clone the object.
	 *
	 * @param {*} x
	 * @return {*} clone
	 */
	exports.clone = function clone(x) {
	  var type = typeof x;
	
	  // immutable primitive types
	  if (type === 'number' || type === 'string' || type === 'boolean' ||
	      x === null || x === undefined) {
	    return x;
	  }
	
	  // use clone function of the object when available
	  if (typeof x.clone === 'function') {
	    return x.clone();
	  }
	
	  // array
	  if (Array.isArray(x)) {
	    return x.map(function (value) {
	      return clone(value);
	    });
	  }
	
	  if (x instanceof Number)    return new Number(x.valueOf());
	  if (x instanceof String)    return new String(x.valueOf());
	  if (x instanceof Boolean)   return new Boolean(x.valueOf());
	  if (x instanceof Date)      return new Date(x.valueOf());
	  if (x && x.isBigNumber === true) return x; // bignumbers are immutable
	  if (x instanceof RegExp)  throw new TypeError('Cannot clone ' + x);  // TODO: clone a RegExp
	
	  // object
	  return exports.map(x, clone);
	};
	
	/**
	 * Apply map to all properties of an object
	 * @param {Object} object
	 * @param {function} callback
	 * @return {Object} Returns a copy of the object with mapped properties
	 */
	exports.map = function(object, callback) {
	  var clone = {};
	
	  for (var key in object) {
	    if (Object.hasOwnProperty.call(object, key)) {
	      clone[key] = callback(object[key]);
	    }
	  }
	
	  return clone;
	}
	
	/**
	 * Extend object a with the properties of object b
	 * @param {Object} a
	 * @param {Object} b
	 * @return {Object} a
	 */
	exports.extend = function(a, b) {
	  for (var prop in b) {
	    if (Object.hasOwnProperty.call(b, prop)) {
	      a[prop] = b[prop];
	    }
	  }
	  return a;
	};
	
	/**
	 * Deep extend an object a with the properties of object b
	 * @param {Object} a
	 * @param {Object} b
	 * @returns {Object}
	 */
	exports.deepExtend = function deepExtend (a, b) {
	  // TODO: add support for Arrays to deepExtend
	  if (Array.isArray(b)) {
	    throw new TypeError('Arrays are not supported by deepExtend');
	  }
	
	  for (var prop in b) {
	    if (Object.hasOwnProperty.call(b, prop)) {
	      if (b[prop] && b[prop].constructor === Object) {
	        if (a[prop] === undefined) {
	          a[prop] = {};
	        }
	        if (a[prop].constructor === Object) {
	          deepExtend(a[prop], b[prop]);
	        }
	        else {
	          a[prop] = b[prop];
	        }
	      } else if (Array.isArray(b[prop])) {
	        throw new TypeError('Arrays are not supported by deepExtend');
	      } else {
	        a[prop] = b[prop];
	      }
	    }
	  }
	  return a;
	};
	
	/**
	 * Deep test equality of all fields in two pairs of arrays or objects.
	 * @param {Array | Object} a
	 * @param {Array | Object} b
	 * @returns {boolean}
	 */
	exports.deepEqual = function deepEqual (a, b) {
	  var prop, i, len;
	  if (Array.isArray(a)) {
	    if (!Array.isArray(b)) {
	      return false;
	    }
	
	    if (a.length != b.length) {
	      return false;
	    }
	
	    for (i = 0, len = a.length; i < len; i++) {
	      if (!exports.deepEqual(a[i], b[i])) {
	        return false;
	      }
	    }
	    return true;
	  }
	  else if (a instanceof Object) {
	    if (Array.isArray(b) || !(b instanceof Object)) {
	      return false;
	    }
	
	    for (prop in a) {
	      //noinspection JSUnfilteredForInLoop
	      if (!exports.deepEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }
	    for (prop in b) {
	      //noinspection JSUnfilteredForInLoop
	      if (!exports.deepEqual(a[prop], b[prop])) {
	        return false;
	      }
	    }
	    return true;
	  }
	  else {
	    return (typeof a === typeof b) && (a == b);
	  }
	};
	
	/**
	 * Test whether the current JavaScript engine supports Object.defineProperty
	 * @returns {boolean} returns true if supported
	 */
	exports.canDefineProperty = function () {
	  // test needed for broken IE8 implementation
	  try {
	    if (Object.defineProperty) {
	      Object.defineProperty({}, 'x', { get: function () {} });
	      return true;
	    }
	  } catch (e) {}
	
	  return false;
	};
	
	/**
	 * Attach a lazy loading property to a constant.
	 * The given function `fn` is called once when the property is first requested.
	 * On older browsers (<IE8), the function will fall back to direct evaluation
	 * of the properties value.
	 * @param {Object} object   Object where to add the property
	 * @param {string} prop     Property name
	 * @param {Function} fn     Function returning the property value. Called
	 *                          without arguments.
	 */
	exports.lazy = function (object, prop, fn) {
	  if (exports.canDefineProperty()) {
	    var _uninitialized = true;
	    var _value;
	    Object.defineProperty(object, prop, {
	      get: function () {
	        if (_uninitialized) {
	          _value = fn();
	          _uninitialized = false;
	        }
	        return _value;
	      },
	
	      set: function (value) {
	        _value = value;
	        _uninitialized = false;
	      },
	
	      configurable: true,
	      enumerable: true
	    });
	  }
	  else {
	    // fall back to immediate evaluation
	    object[prop] = fn();
	  }
	};
	
	/**
	 * Traverse a path into an object.
	 * When a namespace is missing, it will be created
	 * @param {Object} object
	 * @param {string} path   A dot separated string like 'name.space'
	 * @return {Object} Returns the object at the end of the path
	 */
	exports.traverse = function(object, path) {
	  var obj = object;
	
	  if (path) {
	    var names = path.split('.');
	    for (var i = 0; i < names.length; i++) {
	      var name = names[i];
	      if (!(name in obj)) {
	        obj[name] = {};
	      }
	      obj = obj[name];
	    }
	  }
	
	  return obj;
	};
	
	/**
	 * Test whether an object is a factory. a factory has fields:
	 *
	 * - factory: function (type: Object, config: Object, load: function, typed: function [, math: Object])   (required)
	 * - name: string (optional)
	 * - path: string    A dot separated path (optional)
	 * - math: boolean   If true (false by default), the math namespace is passed
	 *                   as fifth argument of the factory function
	 *
	 * @param {*} object
	 * @returns {boolean}
	 */
	exports.isFactory = function (object) {
	  return object && typeof object.factory === 'function';
	};


/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

	var typedFunction = __webpack_require__(57);
	var digits = __webpack_require__(58).digits;
	
	// returns a new instance of typed-function
	var createTyped = function () {
	  // initially, return the original instance of typed-function
	  // consecutively, return a new instance from typed.create.
	  createTyped = typedFunction.create;
	  return typedFunction;
	};
	
	/**
	 * Factory function for creating a new typed instance
	 * @param {Object} type   Object with data types like Complex and BigNumber
	 * @returns {Function}
	 */
	exports.create = function create(type) {
	  // TODO: typed-function must be able to silently ignore signatures with unknown data types
	
	  // get a new instance of typed-function
	  var typed = createTyped();
	
	  // define all types. The order of the types determines in which order function
	  // arguments are type-checked (so for performance it's important to put the
	  // most used types first).
	  typed.types = [
	    { name: 'number',          test: function (x) { return typeof x === 'number' } },
	    { name: 'Complex',         test: function (x) { return x && x.isComplex } },
	    { name: 'BigNumber',       test: function (x) { return x && x.isBigNumber } },
	    { name: 'Fraction',        test: function (x) { return x && x.isFraction } },
	    { name: 'Unit',            test: function (x) { return x && x.isUnit } },
	    { name: 'string',          test: function (x) { return typeof x === 'string' } },
	    { name: 'Array',           test: Array.isArray },
	    { name: 'Matrix',          test: function (x) { return x && x.isMatrix } },
	    { name: 'DenseMatrix',     test: function (x) { return x && x.isDenseMatrix } },
	    { name: 'SparseMatrix',    test: function (x) { return x && x.isSparseMatrix } },
	    { name: 'Range',           test: function (x) { return x && x.isRange } },
	    { name: 'Index',           test: function (x) { return x && x.isIndex } },
	    { name: 'boolean',         test: function (x) { return typeof x === 'boolean' } },
	    { name: 'ResultSet',       test: function (x) { return x && x.isResultSet } },
	    { name: 'Help',            test: function (x) { return x && x.isHelp } },
	    { name: 'function',        test: function (x) { return typeof x === 'function'} },
	    { name: 'Date',            test: function (x) { return x instanceof Date } },
	    { name: 'RegExp',          test: function (x) { return x instanceof RegExp } },
	    { name: 'Object',          test: function (x) { return typeof x === 'object' } },
	    { name: 'null',            test: function (x) { return x === null } },
	    { name: 'undefined',       test: function (x) { return x === undefined } },
	    
	    { name: 'OperatorNode',    test: function (x) { return x && x.isOperatorNode } },
	    { name: 'ConstantNode',    test: function (x) { return x && x.isConstantNode } },
	    { name: 'SymbolNode',      test: function (x) { return x && x.isSymbolNode } },
	    { name: 'ParenthesisNode', test: function (x) { return x && x.isParenthesisNode } },
	    { name: 'FunctionNode',    test: function (x) { return x && x.isFunctionNode } },
	    { name: 'FunctionAssignmentNode',    test: function (x) { return x && x.isFunctionAssignmentNode } },
	    { name: 'ArrayNode',                 test: function (x) { return x && x.isArrayNode } },
	    { name: 'AssignmentNode',            test: function (x) { return x && x.isAssignmentNode } },
	    { name: 'BlockNode',                 test: function (x) { return x && x.isBlockNode } },
	    { name: 'ConditionalNode',           test: function (x) { return x && x.isConditionalNode } },
	    { name: 'IndexNode',                 test: function (x) { return x && x.isIndexNode } },
	    { name: 'RangeNode',                 test: function (x) { return x && x.isRangeNode } },
	    { name: 'UpdateNode',                test: function (x) { return x && x.isUpdateNode } },
	    { name: 'Node',                      test: function (x) { return x && x.isNode } }
	  ];
	
	  // TODO: add conversion from BigNumber to number?
	  typed.conversions = [
	    {
	      from: 'number',
	      to: 'BigNumber',
	      convert: function (x) {
	        // note: conversion from number to BigNumber can fail if x has >15 digits
	        if (digits(x) > 15) {
	          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to BigNumber ' +
	          '(value: ' + x + '). ' +
	          'Use function bignumber(x) to convert to BigNumber.');
	        }
	        return new type.BigNumber(x);
	      }
	    }, {
	      from: 'number',
	      to: 'Complex',
	      convert: function (x) {
	        return new type.Complex(x, 0);
	      }
	    }, {
	      from: 'number',
	      to: 'string',
	      convert: function (x) {
	        return x + '';
	      }
	    }, {
	      from: 'BigNumber',
	      to: 'Complex',
	      convert: function (x) {
	        return new type.Complex(x.toNumber(), 0);
	      }
	    }, {
	      from: 'Fraction',
	      to: 'BigNumber',
	      convert: function (x) {
	        throw new TypeError('Cannot implicitly convert a Fraction to BigNumber or vice versa. ' +
	            'Use function bignumber(x) to convert to BigNumber or fraction(x) to convert to Fraction.');
	      }
	    }, {
	      from: 'Fraction',
	      to: 'Complex',
	      convert: function (x) {
	        return new type.Complex(x.valueOf(), 0);
	      }
	    }, {
	      from: 'number',
	      to: 'Fraction',
	      convert: function (x) {
	        if (digits(x) > 15) {
	          throw new TypeError('Cannot implicitly convert a number with >15 significant digits to Fraction ' +
	              '(value: ' + x + '). ' +
	              'Use function fraction(x) to convert to Fraction.');
	        }
	        return new type.Fraction(x);
	      }
	    }, {
	    // FIXME: add conversion from Fraction to number, for example for `sqrt(fraction(1,3))`
	    //  from: 'Fraction',
	    //  to: 'number',
	    //  convert: function (x) {
	    //    return x.valueOf();
	    //  }
	    //}, {
	      from: 'string',
	      to: 'number',
	      convert: function (x) {
	        var n = Number(x);
	        if (isNaN(n)) {
	          throw new Error('Cannot convert "' + x + '" to a number');
	        }
	        return n;
	      }
	    }, {
	      from: 'string',
	      to: 'BigNumber',
	      convert: function (x) {
	        try {
	          return new type.BigNumber(x);
	        }
	        catch (err) {
	          throw new Error('Cannot convert "' + x + '" to BigNumber');
	        }
	      }
	    }, {
	      from: 'string',
	      to: 'Fraction',
	      convert: function (x) {
	        try {
	          return new type.Fraction(x);
	        }
	        catch (err) {
	          throw new Error('Cannot convert "' + x + '" to Fraction');
	        }
	      }
	    }, {
	      from: 'string',
	      to: 'Complex',
	      convert: function (x) {
	        try {
	          return new type.Complex(x);
	        }
	        catch (err) {
	          throw new Error('Cannot convert "' + x + '" to Complex');
	        }
	      }
	    }, {
	      from: 'boolean',
	      to: 'number',
	      convert: function (x) {
	        return +x;
	      }
	    }, {
	      from: 'boolean',
	      to: 'BigNumber',
	      convert: function (x) {
	        return new type.BigNumber(+x);
	      }
	    }, {
	      from: 'boolean',
	      to: 'Fraction',
	      convert: function (x) {
	        return new type.Fraction(+x);
	      }
	    }, {
	      from: 'boolean',
	      to: 'string',
	      convert: function (x) {
	        return +x;
	      }
	    }, {
	      from: 'null',
	      to: 'number',
	      convert: function () {
	        return 0;
	      }
	    }, {
	      from: 'null',
	      to: 'string',
	      convert: function () {
	        return 'null';
	      }
	    }, {
	      from: 'null',
	      to: 'BigNumber',
	      convert: function () {
	        return new type.BigNumber(0);
	      }
	    }, {
	      from: 'null',
	      to: 'Fraction',
	      convert: function () {
	        return new type.Fraction(0);
	      }
	    }, {
	      from: 'Array',
	      to: 'Matrix',
	      convert: function (array) {
	        // TODO: how to decide on the right type of matrix to create?
	        return new type.DenseMatrix(array);
	      }
	    }, {
	      from: 'Matrix',
	      to: 'Array',
	      convert: function (matrix) {
	        return matrix.valueOf();
	      }
	    }
	  ];
	
	  return typed;
	};


/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**
	 * typed-function
	 *
	 * Type checking for JavaScript functions
	 *
	 * https://github.com/josdejong/typed-function
	 */
	'use strict';
	
	(function (root, factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof exports === 'object') {
	    // OldNode. Does not work with strict CommonJS, but
	    // only CommonJS-like environments that support module.exports,
	    // like OldNode.
	    module.exports = factory();
	  } else {
	    // Browser globals (root is window)
	    root.typed = factory();
	  }
	}(this, function () {
	  // factory function to create a new instance of typed-function
	  // TODO: allow passing configuration, types, tests via the factory function
	  function create() {
	    /**
	     * Get a type test function for a specific data type
	     * @param {string} name                   Name of a data type like 'number' or 'string'
	     * @returns {Function(obj: *) : boolean}  Returns a type testing function.
	     *                                        Throws an error for an unknown type.
	     */
	    function getTypeTest(name) {
	      var test;
	      for (var i = 0; i < typed.types.length; i++) {
	        var entry = typed.types[i];
	        if (entry.name === name) {
	          test = entry.test;
	          break;
	        }
	      }
	
	      if (!test) {
	        var hint;
	        for (i = 0; i < typed.types.length; i++) {
	          entry = typed.types[i];
	          if (entry.name.toLowerCase() == name.toLowerCase()) {
	            hint = entry.name;
	            break;
	          }
	        }
	
	        throw new Error('Unknown type "' + name + '"' +
	            (hint ? ('. Did you mean "' + hint + '"?') : ''));
	      }
	      return test;
	    }
	
	    /**
	     * Retrieve the function name from a set of functions, and check
	     * whether the name of all functions match (if given)
	     * @param {Array.<function>} fns
	     */
	    function getName (fns) {
	      var name = '';
	
	      for (var i = 0; i < fns.length; i++) {
	        var fn = fns[i];
	
	        // merge function name when this is a typed function
	        if (fn.signatures && fn.name != '') {
	          if (name == '') {
	            name = fn.name;
	          }
	          else if (name != fn.name) {
	            var err = new Error('Function names do not match (expected: ' + name + ', actual: ' + fn.name + ')');
	            err.data = {
	              actual: fn.name,
	              expected: name
	            };
	            throw err;
	          }
	        }
	      }
	
	      return name;
	    }
	
	    /**
	     * Create an ArgumentsError. Creates messages like:
	     *
	     *   Unexpected type of argument (expected: ..., actual: ..., index: ...)
	     *   Too few arguments (expected: ..., index: ...)
	     *   Too many arguments (expected: ..., actual: ...)
	     *
	     * @param {String} fn         Function name
	     * @param {number} argCount   Number of arguments
	     * @param {Number} index      Current argument index
	     * @param {*} actual          Current argument
	     * @param {string} [expected] An optional, comma separated string with
	     *                            expected types on given index
	     * @extends Error
	     */
	    function createError(fn, argCount, index, actual, expected) {
	      var actualType = getTypeOf(actual);
	      var _expected = expected ? expected.split(',') : null;
	      var _fn = (fn || 'unnamed');
	      var anyType = _expected && contains(_expected, 'any');
	      var message;
	      var data = {
	        fn: fn,
	        index: index,
	        actual: actual,
	        expected: _expected
	      };
	
	      if (_expected) {
	        if (argCount > index && !anyType) {
	          // unexpected type
	          message = 'Unexpected type of argument in function ' + _fn +
	              ' (expected: ' + _expected.join(' or ') + ', actual: ' + actualType + ', index: ' + index + ')';
	        }
	        else {
	          // too few arguments
	          message = 'Too few arguments in function ' + _fn +
	              ' (expected: ' + _expected.join(' or ') + ', index: ' + index + ')';
	        }
	      }
	      else {
	        // too many arguments
	        message = 'Too many arguments in function ' + _fn +
	            ' (expected: ' + index + ', actual: ' + argCount + ')'
	      }
	
	      var err = new TypeError(message);
	      err.data = data;
	      return err;
	    }
	
	    /**
	     * Collection with function references (local shortcuts to functions)
	     * @constructor
	     * @param {string} [name='refs']  Optional name for the refs, used to generate
	     *                                JavaScript code
	     */
	    function Refs(name) {
	      this.name = name || 'refs';
	      this.categories = {};
	    }
	
	    /**
	     * Add a function reference.
	     * @param {Function} fn
	     * @param {string} [category='fn']    A function category, like 'fn' or 'signature'
	     * @returns {string} Returns the function name, for example 'fn0' or 'signature2'
	     */
	    Refs.prototype.add = function (fn, category) {
	      var cat = category || 'fn';
	      if (!this.categories[cat]) this.categories[cat] = [];
	
	      var index = this.categories[cat].indexOf(fn);
	      if (index == -1) {
	        index = this.categories[cat].length;
	        this.categories[cat].push(fn);
	      }
	
	      return cat + index;
	    };
	
	    /**
	     * Create code lines for all function references
	     * @returns {string} Returns the code containing all function references
	     */
	    Refs.prototype.toCode = function () {
	      var code = [];
	      var path = this.name + '.categories';
	      var categories = this.categories;
	
	      for (var cat in categories) {
	        if (categories.hasOwnProperty(cat)) {
	          var category = categories[cat];
	
	          for (var i = 0; i < category.length; i++) {
	            code.push('var ' + cat + i + ' = ' + path + '[\'' + cat + '\'][' + i + '];');
	          }
	        }
	      }
	
	      return code.join('\n');
	    };
	
	    /**
	     * A function parameter
	     * @param {string | string[] | Param} types    A parameter type like 'string',
	     *                                             'number | boolean'
	     * @param {boolean} [varArgs=false]            Variable arguments if true
	     * @constructor
	     */
	    function Param(types, varArgs) {
	      // parse the types, can be a string with types separated by pipe characters |
	      if (typeof types === 'string') {
	        // parse variable arguments operator (ellipses '...number')
	        var _types = types.trim();
	        var _varArgs = _types.substr(0, 3) === '...';
	        if (_varArgs) {
	          _types = _types.substr(3);
	        }
	        if (_types === '') {
	          this.types = ['any'];
	        }
	        else {
	          this.types = _types.split('|');
	          for (var i = 0; i < this.types.length; i++) {
	            this.types[i] = this.types[i].trim();
	          }
	        }
	      }
	      else if (Array.isArray(types)) {
	        this.types = types;
	      }
	      else if (types instanceof Param) {
	        return types.clone();
	      }
	      else {
	        throw new Error('String or Array expected');
	      }
	
	      // can hold a type to which to convert when handling this parameter
	      this.conversions = [];
	      // TODO: implement better API for conversions, be able to add conversions via constructor (support a new type Object?)
	
	      // variable arguments
	      this.varArgs = _varArgs || varArgs || false;
	
	      // check for any type arguments
	      this.anyType = this.types.indexOf('any') !== -1;
	    }
	
	    /**
	     * Order Params
	     * any type ('any') will be ordered last, and object as second last (as other
	     * types may be an object as well, like Array).
	     *
	     * @param {Param} a
	     * @param {Param} b
	     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.
	     */
	    Param.compare = function (a, b) {
	      // TODO: simplify parameter comparison, it's a mess
	      if (a.anyType) return 1;
	      if (b.anyType) return -1;
	
	      if (contains(a.types, 'Object')) return 1;
	      if (contains(b.types, 'Object')) return -1;
	
	      if (a.hasConversions()) {
	        if (b.hasConversions()) {
	          var i, ac, bc;
	
	          for (i = 0; i < a.conversions.length; i++) {
	            if (a.conversions[i] !== undefined) {
	              ac = a.conversions[i];
	              break;
	            }
	          }
	
	          for (i = 0; i < b.conversions.length; i++) {
	            if (b.conversions[i] !== undefined) {
	              bc = b.conversions[i];
	              break;
	            }
	          }
	
	          return typed.conversions.indexOf(ac) - typed.conversions.indexOf(bc);
	        }
	        else {
	          return 1;
	        }
	      }
	      else {
	        if (b.hasConversions()) {
	          return -1;
	        }
	        else {
	          // both params have no conversions
	          var ai, bi;
	
	          for (i = 0; i < typed.types.length; i++) {
	            if (typed.types[i].name === a.types[0]) {
	              ai = i;
	              break;
	            }
	          }
	
	          for (i = 0; i < typed.types.length; i++) {
	            if (typed.types[i].name === b.types[0]) {
	              bi = i;
	              break;
	            }
	          }
	
	          return ai - bi;
	        }
	      }
	    };
	
	    /**
	     * Test whether this parameters types overlap an other parameters types.
	     * Will not match ['any'] with ['number']
	     * @param {Param} other
	     * @return {boolean} Returns true when there are overlapping types
	     */
	    Param.prototype.overlapping = function (other) {
	      for (var i = 0; i < this.types.length; i++) {
	        if (contains(other.types, this.types[i])) {
	          return true;
	        }
	      }
	      return false;
	    };
	
	    /**
	     * Test whether this parameters types matches an other parameters types.
	     * When any of the two parameters contains `any`, true is returned
	     * @param {Param} other
	     * @return {boolean} Returns true when there are matching types
	     */
	    Param.prototype.matches = function (other) {
	      return this.anyType || other.anyType || this.overlapping(other);
	    };
	
	    /**
	     * Create a clone of this param
	     * @returns {Param} Returns a cloned version of this param
	     */
	    Param.prototype.clone = function () {
	      var param = new Param(this.types.slice(), this.varArgs);
	      param.conversions = this.conversions.slice();
	      return param;
	    };
	
	    /**
	     * Test whether this parameter contains conversions
	     * @returns {boolean} Returns true if the parameter contains one or
	     *                    multiple conversions.
	     */
	    Param.prototype.hasConversions = function () {
	      return this.conversions.length > 0;
	    };
	
	    /**
	     * Tests whether this parameters contains any of the provided types
	     * @param {Object} types  A Map with types, like {'number': true}
	     * @returns {boolean}     Returns true when the parameter contains any
	     *                        of the provided types
	     */
	    Param.prototype.contains = function (types) {
	      for (var i = 0; i < this.types.length; i++) {
	        if (types[this.types[i]]) {
	          return true;
	        }
	      }
	      return false;
	    };
	
	    /**
	     * Return a string representation of this params types, like 'string' or
	     * 'number | boolean' or '...number'
	     * @param {boolean} [toConversion]   If true, the returned types string
	     *                                   contains the types where the parameter
	     *                                   will convert to. If false (default)
	     *                                   the "from" types are returned
	     * @returns {string}
	     */
	    Param.prototype.toString = function (toConversion) {
	      var types = [];
	      var keys = {};
	
	      for (var i = 0; i < this.types.length; i++) {
	        var conversion = this.conversions[i];
	        var type = toConversion && conversion ? conversion.to : this.types[i];
	        if (!(type in keys)) {
	          keys[type] = true;
	          types.push(type);
	        }
	      }
	
	      return (this.varArgs ? '...' : '') + types.join('|');
	    };
	
	    /**
	     * A function signature
	     * @param {string | string[] | Param[]} params
	     *                         Array with the type(s) of each parameter,
	     *                         or a comma separated string with types
	     * @param {Function} fn    The actual function
	     * @constructor
	     */
	    function Signature(params, fn) {
	      var _params;
	      if (typeof params === 'string') {
	        _params = (params !== '') ? params.split(',') : [];
	      }
	      else if (Array.isArray(params)) {
	        _params = params;
	      }
	      else {
	        throw new Error('string or Array expected');
	      }
	
	      this.params = new Array(_params.length);
	      this.anyType = false;
	      this.varArgs = false;
	      for (var i = 0; i < _params.length; i++) {
	        var param = new Param(_params[i]);
	        this.params[i] = param;
	        if (param.anyType) {
	          this.anyType = true;
	        }
	        if (i === _params.length - 1) {
	          // the last argument
	          this.varArgs = param.varArgs;
	        }
	        else {
	          // non-last argument
	          if (param.varArgs) {
	            throw new SyntaxError('Unexpected variable arguments operator "..."');
	          }
	        }
	      }
	
	      this.fn = fn;
	    }
	
	    /**
	     * Create a clone of this signature
	     * @returns {Signature} Returns a cloned version of this signature
	     */
	    Signature.prototype.clone = function () {
	      return new Signature(this.params.slice(), this.fn);
	    };
	
	    /**
	     * Expand a signature: split params with union types in separate signatures
	     * For example split a Signature "string | number" into two signatures.
	     * @return {Signature[]} Returns an array with signatures (at least one)
	     */
	    Signature.prototype.expand = function () {
	      var signatures = [];
	
	      function recurse(signature, path) {
	        if (path.length < signature.params.length) {
	          var i, newParam, conversion;
	
	          var param = signature.params[path.length];
	          if (param.varArgs) {
	            // a variable argument. do not split the types in the parameter
	            newParam = param.clone();
	
	            // add conversions to the parameter
	            // recurse for all conversions
	            for (i = 0; i < typed.conversions.length; i++) {
	              conversion = typed.conversions[i];
	              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
	                var j = newParam.types.length;
	                newParam.types[j] = conversion.from;
	                newParam.conversions[j] = conversion;
	              }
	            }
	
	            recurse(signature, path.concat(newParam));
	          }
	          else {
	            // split each type in the parameter
	            for (i = 0; i < param.types.length; i++) {
	              recurse(signature, path.concat(new Param(param.types[i])));
	            }
	
	            // recurse for all conversions
	            for (i = 0; i < typed.conversions.length; i++) {
	              conversion = typed.conversions[i];
	              if (!contains(param.types, conversion.from) && contains(param.types, conversion.to)) {
	                newParam = new Param(conversion.from);
	                newParam.conversions[0] = conversion;
	                recurse(signature, path.concat(newParam));
	              }
	            }
	          }
	        }
	        else {
	          signatures.push(new Signature(path, signature.fn));
	        }
	      }
	
	      recurse(this, []);
	
	      return signatures;
	    };
	
	    /**
	     * Compare two signatures.
	     *
	     * When two params are equal and contain conversions, they will be sorted
	     * by lowest index of the first conversions.
	     *
	     * @param {Signature} a
	     * @param {Signature} b
	     * @returns {number} Returns 1 if a > b, -1 if a < b, and else 0.
	     */
	    Signature.compare = function (a, b) {
	      if (a.params.length > b.params.length) return 1;
	      if (a.params.length < b.params.length) return -1;
	
	      // count the number of conversions
	      var i;
	      var len = a.params.length; // a and b have equal amount of params
	      var ac = 0;
	      var bc = 0;
	      for (i = 0; i < len; i++) {
	        if (a.params[i].hasConversions()) ac++;
	        if (b.params[i].hasConversions()) bc++;
	      }
	
	      if (ac > bc) return 1;
	      if (ac < bc) return -1;
	
	      // compare the order per parameter
	      for (i = 0; i < a.params.length; i++) {
	        var cmp = Param.compare(a.params[i], b.params[i]);
	        if (cmp !== 0) {
	          return cmp;
	        }
	      }
	
	      return 0;
	    };
	
	    /**
	     * Test whether any of the signatures parameters has conversions
	     * @return {boolean} Returns true when any of the parameters contains
	     *                   conversions.
	     */
	    Signature.prototype.hasConversions = function () {
	      for (var i = 0; i < this.params.length; i++) {
	        if (this.params[i].hasConversions()) {
	          return true;
	        }
	      }
	      return false;
	    };
	
	    /**
	     * Test whether this signature should be ignored.
	     * Checks whether any of the parameters contains a type listed in
	     * typed.ignore
	     * @return {boolean} Returns true when the signature should be ignored
	     */
	    Signature.prototype.ignore = function () {
	      // create a map with ignored types
	      var types = {};
	      for (var i = 0; i < typed.ignore.length; i++) {
	        types[typed.ignore[i]] = true;
	      }
	
	      // test whether any of the parameters contains this type
	      for (i = 0; i < this.params.length; i++) {
	        if (this.params[i].contains(types)) {
	          return true;
	        }
	      }
	
	      return false;
	    };
	
	    /**
	     * Test whether the path of this signature matches a given path.
	     * @param {Param[]} params
	     */
	    Signature.prototype.paramsStartWith = function (params) {
	      if (params.length === 0) {
	        return true;
	      }
	
	      var aLast = last(this.params);
	      var bLast = last(params);
	
	      for (var i = 0; i < params.length; i++) {
	        var a = this.params[i] || (aLast.varArgs ? aLast: null);
	        var b = params[i]      || (bLast.varArgs ? bLast: null);
	
	        if (!a ||  !b || !a.matches(b)) {
	          return false;
	        }
	      }
	
	      return true;
	    };
	
	    /**
	     * Generate the code to invoke this signature
	     * @param {Refs} refs
	     * @param {string} prefix
	     * @returns {string} Returns code
	     */
	    Signature.prototype.toCode = function (refs, prefix) {
	      var code = [];
	
	      var args = new Array(this.params.length);
	      for (var i = 0; i < this.params.length; i++) {
	        var param = this.params[i];
	        var conversion = param.conversions[0];
	        if (param.varArgs) {
	          args[i] = 'varArgs';
	        }
	        else if (conversion) {
	          args[i] = refs.add(conversion.convert, 'convert') + '(arg' + i + ')';
	        }
	        else {
	          args[i] = 'arg' + i;
	        }
	      }
	
	      var ref = this.fn ? refs.add(this.fn, 'signature') : undefined;
	      if (ref) {
	        return prefix + 'return ' + ref + '(' + args.join(', ') + '); // signature: ' + this.params.join(', ');
	      }
	
	      return code.join('\n');
	    };
	
	    /**
	     * Return a string representation of the signature
	     * @returns {string}
	     */
	    Signature.prototype.toString = function () {
	      return this.params.join(', ');
	    };
	
	    /**
	     * A group of signatures with the same parameter on given index
	     * @param {Param[]} path
	     * @param {Signature} [signature]
	     * @param {Node[]} childs
	     * @param {boolean} [fallThrough=false]
	     * @constructor
	     */
	    function Node(path, signature, childs, fallThrough) {
	      this.path = path || [];
	      this.param = path[path.length - 1] || null;
	      this.signature = signature || null;
	      this.childs = childs || [];
	      this.fallThrough = fallThrough || false;
	    }
	
	    /**
	     * Generate code for this group of signatures
	     * @param {Refs} refs
	     * @param {string} prefix
	     * @returns {string} Returns the code as string
	     */
	    Node.prototype.toCode = function (refs, prefix) {
	      // TODO: split this function in multiple functions, it's too large
	      var code = [];
	
	      if (this.param) {
	        var index = this.path.length - 1;
	        var conversion = this.param.conversions[0];
	        var comment = '// type: ' + (conversion ?
	                (conversion.from + ' (convert to ' + conversion.to + ')') :
	                this.param);
	
	        // non-root node (path is non-empty)
	        if (this.param.varArgs) {
	          if (this.param.anyType) {
	            // variable arguments with any type
	            code.push(prefix + 'if (arguments.length > ' + index + ') {');
	            code.push(prefix + '  var varArgs = [];');
	            code.push(prefix + '  for (var i = ' + index + '; i < arguments.length; i++) {');
	            code.push(prefix + '    varArgs.push(arguments[i]);');
	            code.push(prefix + '  }');
	            code.push(this.signature.toCode(refs, prefix + '  '));
	            code.push(prefix + '}');
	          }
	          else {
	            // variable arguments with a fixed type
	            var getTests = function (types, arg) {
	              var tests = [];
	              for (var i = 0; i < types.length; i++) {
	                tests[i] = refs.add(getTypeTest(types[i]), 'test') + '(' + arg + ')';
	              }
	              return tests.join(' || ');
	            }.bind(this);
	
	            var allTypes = this.param.types;
	            var exactTypes = [];
	            for (var i = 0; i < allTypes.length; i++) {
	              if (this.param.conversions[i] === undefined) {
	                exactTypes.push(allTypes[i]);
	              }
	            }
	
	            code.push(prefix + 'if (' + getTests(allTypes, 'arg' + index) + ') { ' + comment);
	            code.push(prefix + '  var varArgs = [arg' + index + '];');
	            code.push(prefix + '  for (var i = ' + (index + 1) + '; i < arguments.length; i++) {');
	            code.push(prefix + '    if (' + getTests(exactTypes, 'arguments[i]') + ') {');
	            code.push(prefix + '      varArgs.push(arguments[i]);');
	
	            for (var i = 0; i < allTypes.length; i++) {
	              var conversion_i = this.param.conversions[i];
	              if (conversion_i) {
	                var test = refs.add(getTypeTest(allTypes[i]), 'test');
	                var convert = refs.add(conversion_i.convert, 'convert');
	                code.push(prefix + '    }');
	                code.push(prefix + '    else if (' + test + '(arguments[i])) {');
	                code.push(prefix + '      varArgs.push(' + convert + '(arguments[i]));');
	              }
	            }
	            code.push(prefix + '    } else {');
	            code.push(prefix + '      throw createError(name, arguments.length, i, arguments[i], \'' + exactTypes.join(',') + '\');');
	            code.push(prefix + '    }');
	            code.push(prefix + '  }');
	            code.push(this.signature.toCode(refs, prefix + '  '));
	            code.push(prefix + '}');
	          }
	        }
	        else {
	          if (this.param.anyType) {
	            // any type
	            code.push(prefix + '// type: any');
	            code.push(this._innerCode(refs, prefix));
	          }
	          else {
	            // regular type
	            var type = this.param.types[0];
	            var test = type !== 'any' ? refs.add(getTypeTest(type), 'test') : null;
	
	            code.push(prefix + 'if (' + test + '(arg' + index + ')) { ' + comment);
	            code.push(this._innerCode(refs, prefix + '  '));
	            code.push(prefix + '}');
	          }
	        }
	      }
	      else {
	        // root node (path is empty)
	        code.push(this._innerCode(refs, prefix));
	      }
	
	      return code.join('\n');
	    };
	
	    /**
	     * Generate inner code for this group of signatures.
	     * This is a helper function of Node.prototype.toCode
	     * @param {Refs} refs
	     * @param {string} prefix
	     * @returns {string} Returns the inner code as string
	     * @private
	     */
	    Node.prototype._innerCode = function (refs, prefix) {
	      var code = [];
	      var i;
	
	      if (this.signature) {
	        code.push(prefix + 'if (arguments.length === ' + this.path.length + ') {');
	        code.push(this.signature.toCode(refs, prefix + '  '));
	        code.push(prefix + '}');
	      }
	
	      for (i = 0; i < this.childs.length; i++) {
	        code.push(this.childs[i].toCode(refs, prefix));
	      }
	
	      // TODO: shouldn't the this.param.anyType check be redundant
	      if (!this.fallThrough || (this.param && this.param.anyType)) {
	        var exceptions = this._exceptions(refs, prefix);
	        if (exceptions) {
	          code.push(exceptions);
	        }
	      }
	
	      return code.join('\n');
	    };
	
	
	    /**
	     * Generate code to throw exceptions
	     * @param {Refs} refs
	     * @param {string} prefix
	     * @returns {string} Returns the inner code as string
	     * @private
	     */
	    Node.prototype._exceptions = function (refs, prefix) {
	      var index = this.path.length;
	
	      if (this.childs.length === 0) {
	        // TODO: can this condition be simplified? (we have a fall-through here)
	        return [
	          prefix + 'if (arguments.length > ' + index + ') {',
	          prefix + '  throw createError(name, arguments.length, ' + index + ', arguments[' + index + ']);',
	          prefix + '}'
	        ].join('\n');
	      }
	      else {
	        var keys = {};
	        var types = [];
	
	        for (var i = 0; i < this.childs.length; i++) {
	          var node = this.childs[i];
	          if (node.param) {
	            for (var j = 0; j < node.param.types.length; j++) {
	              var type = node.param.types[j];
	              if (!(type in keys) && !node.param.conversions[j]) {
	                keys[type] = true;
	                types.push(type);
	              }
	            }
	          }
	        }
	
	        return prefix + 'throw createError(name, arguments.length, ' + index + ', arguments[' + index + '], \'' + types.join(',') + '\');';
	      }
	    };
	
	    /**
	     * Split all raw signatures into an array with expanded Signatures
	     * @param {Object.<string, Function>} rawSignatures
	     * @return {Signature[]} Returns an array with expanded signatures
	     */
	    function parseSignatures(rawSignatures) {
	      // FIXME: need to have deterministic ordering of signatures, do not create via object
	      var signature;
	      var keys = {};
	      var signatures = [];
	      var i;
	
	      for (var types in rawSignatures) {
	        if (rawSignatures.hasOwnProperty(types)) {
	          var fn = rawSignatures[types];
	          signature = new Signature(types, fn);
	
	          if (signature.ignore()) {
	            continue;
	          }
	
	          var expanded = signature.expand();
	
	          for (i = 0; i < expanded.length; i++) {
	            var signature_i = expanded[i];
	            var key = signature_i.toString();
	            var existing = keys[key];
	            if (!existing) {
	              keys[key] = signature_i;
	            }
	            else {
	              var cmp = Signature.compare(signature_i, existing);
	              if (cmp < 0) {
	                // override if sorted first
	                keys[key] = signature_i;
	              }
	              else if (cmp === 0) {
	                throw new Error('Signature "' + key + '" is defined twice');
	              }
	              // else: just ignore
	            }
	          }
	        }
	      }
	
	      // convert from map to array
	      for (key in keys) {
	        if (keys.hasOwnProperty(key)) {
	          signatures.push(keys[key]);
	        }
	      }
	
	      // order the signatures
	      signatures.sort(function (a, b) {
	        return Signature.compare(a, b);
	      });
	
	      // filter redundant conversions from signatures with varArgs
	      // TODO: simplify this loop or move it to a separate function
	      for (i = 0; i < signatures.length; i++) {
	        signature = signatures[i];
	
	        if (signature.varArgs) {
	          var index = signature.params.length - 1;
	          var param = signature.params[index];
	
	          var t = 0;
	          while (t < param.types.length) {
	            if (param.conversions[t]) {
	              var type = param.types[t];
	
	              for (var j = 0; j < signatures.length; j++) {
	                var other = signatures[j];
	                var p = other.params[index];
	
	                if (other !== signature &&
	                    p &&
	                    contains(p.types, type) && !p.conversions[index]) {
	                  // this (conversion) type already exists, remove it
	                  param.types.splice(t, 1);
	                  param.conversions.splice(t, 1);
	                  t--;
	                  break;
	                }
	              }
	            }
	            t++;
	          }
	        }
	      }
	
	      return signatures;
	    }
	
	    /**
	     * Filter all any type signatures
	     * @param {Signature[]} signatures
	     * @return {Signature[]} Returns only any type signatures
	     */
	    function filterAnyTypeSignatures (signatures) {
	      var filtered = [];
	
	      for (var i = 0; i < signatures.length; i++) {
	        if (signatures[i].anyType) {
	          filtered.push(signatures[i]);
	        }
	      }
	
	      return filtered;
	    }
	
	    /**
	     * create a map with normalized signatures as key and the function as value
	     * @param {Signature[]} signatures   An array with split signatures
	     * @return {Object.<string, Function>} Returns a map with normalized
	     *                                     signatures as key, and the function
	     *                                     as value.
	     */
	    function mapSignatures(signatures) {
	      var normalized = {};
	
	      for (var i = 0; i < signatures.length; i++) {
	        var signature = signatures[i];
	        if (signature.fn && !signature.hasConversions()) {
	          var params = signature.params.join(',');
	          normalized[params] = signature.fn;
	        }
	      }
	
	      return normalized;
	    }
	
	    /**
	     * Parse signatures recursively in a node tree.
	     * @param {Signature[]} signatures  Array with expanded signatures
	     * @param {Param[]} path            Traversed path of parameter types
	     * @param {Signature[]} anys
	     * @return {Node}                   Returns a node tree
	     */
	    function parseTree(signatures, path, anys) {
	      var i, signature;
	      var index = path.length;
	      var nodeSignature;
	
	      var filtered = [];
	      for (i = 0; i < signatures.length; i++) {
	        signature = signatures[i];
	
	        // filter the first signature with the correct number of params
	        if (signature.params.length === index && !nodeSignature) {
	          nodeSignature = signature;
	        }
	
	        if (signature.params[index] != undefined) {
	          filtered.push(signature);
	        }
	      }
	
	      // sort the filtered signatures by param
	      filtered.sort(function (a, b) {
	        return Param.compare(a.params[index], b.params[index]);
	      });
	
	      // recurse over the signatures
	      var entries = [];
	      for (i = 0; i < filtered.length; i++) {
	        signature = filtered[i];
	        // group signatures with the same param at current index
	        var param = signature.params[index];
	
	        // TODO: replace the next filter loop
	        var existing = entries.filter(function (entry) {
	          return entry.param.overlapping(param);
	        })[0];
	
	        //var existing;
	        //for (var j = 0; j < entries.length; j++) {
	        //  if (entries[j].param.overlapping(param)) {
	        //    existing = entries[j];
	        //    break;
	        //  }
	        //}
	
	        if (existing) {
	          if (existing.param.varArgs) {
	            throw new Error('Conflicting types "' + existing.param + '" and "' + param + '"');
	          }
	          existing.signatures.push(signature);
	        }
	        else {
	          entries.push({
	            param: param,
	            signatures: [signature]
	          });
	        }
	      }
	
	      // find all any type signature that can still match our current path
	      var matchingAnys = [];
	      for (i = 0; i < anys.length; i++) {
	        if (anys[i].paramsStartWith(path)) {
	          matchingAnys.push(anys[i]);
	        }
	      }
	
	      // see if there are any type signatures that don't match any of the
	      // signatures that we have in our tree, i.e. we have alternative
	      // matching signature(s) outside of our current tree and we should
	      // fall through to them instead of throwing an exception
	      var fallThrough = false;
	      for (i = 0; i < matchingAnys.length; i++) {
	        if (!contains(signatures, matchingAnys[i])) {
	          fallThrough = true;
	          break;
	        }
	      }
	
	      // parse the childs
	      var childs = new Array(entries.length);
	      for (i = 0; i < entries.length; i++) {
	        var entry = entries[i];
	        childs[i] = parseTree(entry.signatures, path.concat(entry.param), matchingAnys)
	      }
	
	      return new Node(path, nodeSignature, childs, fallThrough);
	    }
	
	    /**
	     * Generate an array like ['arg0', 'arg1', 'arg2']
	     * @param {number} count Number of arguments to generate
	     * @returns {Array} Returns an array with argument names
	     */
	    function getArgs(count) {
	      // create an array with all argument names
	      var args = [];
	      for (var i = 0; i < count; i++) {
	        args[i] = 'arg' + i;
	      }
	
	      return args;
	    }
	
	    /**
	     * Compose a function from sub-functions each handling a single type signature.
	     * Signatures:
	     *   typed(signature: string, fn: function)
	     *   typed(name: string, signature: string, fn: function)
	     *   typed(signatures: Object.<string, function>)
	     *   typed(name: string, signatures: Object.<string, function>)
	     *
	     * @param {string | null} name
	     * @param {Object.<string, Function>} signatures
	     * @return {Function} Returns the typed function
	     * @private
	     */
	    function _typed(name, signatures) {
	      var refs = new Refs();
	
	      // parse signatures, expand them
	      var _signatures = parseSignatures(signatures);
	      if (_signatures.length == 0) {
	        throw new Error('No signatures provided');
	      }
	
	      // filter all any type signatures
	      var anys = filterAnyTypeSignatures(_signatures);
	
	      // parse signatures into a node tree
	      var node = parseTree(_signatures, [], anys);
	
	      //var util = require('util');
	      //console.log('ROOT');
	      //console.log(util.inspect(node, { depth: null }));
	
	      // generate code for the typed function
	      var code = [];
	      var _name = name || '';
	      var _args = getArgs(maxParams(_signatures));
	      code.push('function ' + _name + '(' + _args.join(', ') + ') {');
	      code.push('  "use strict";');
	      code.push('  var name = \'' + _name + '\';');
	      code.push(node.toCode(refs, '  ', false));
	      code.push('}');
	
	      // generate body for the factory function
	      var body = [
	        refs.toCode(),
	        'return ' + code.join('\n')
	      ].join('\n');
	
	      // evaluate the JavaScript code and attach function references
	      var factory = (new Function(refs.name, 'createError', body));
	      var fn = factory(refs, createError);
	
	      //console.log('FN\n' + fn.toString()); // TODO: cleanup
	
	      // attach the signatures with sub-functions to the constructed function
	      fn.signatures = mapSignatures(_signatures);
	
	      return fn;
	    }
	
	    /**
	     * Calculate the maximum number of parameters in givens signatures
	     * @param {Signature[]} signatures
	     * @returns {number} The maximum number of parameters
	     */
	    function maxParams(signatures) {
	      var max = 0;
	
	      for (var i = 0; i < signatures.length; i++) {
	        var len = signatures[i].params.length;
	        if (len > max) {
	          max = len;
	        }
	      }
	
	      return max;
	    }
	
	    /**
	     * Get the type of a value
	     * @param {*} x
	     * @returns {string} Returns a string with the type of value
	     */
	    function getTypeOf(x) {
	      var obj;
	
	      for (var i = 0; i < typed.types.length; i++) {
	        var entry = typed.types[i];
	
	        if (entry.name === 'Object') {
	          // Array and Date are also Object, so test for Object afterwards
	          obj = entry;
	        }
	        else {
	          if (entry.test(x)) return entry.name;
	        }
	      }
	
	      // at last, test whether an object
	      if (obj && obj.test(x)) return obj.name;
	
	      return 'unknown';
	    }
	
	    /**
	     * Test whether an array contains some item
	     * @param {Array} array
	     * @param {*} item
	     * @return {boolean} Returns true if array contains item, false if not.
	     */
	    function contains(array, item) {
	      return array.indexOf(item) !== -1;
	    }
	
	    /**
	     * Returns the last item in the array
	     * @param {Array} array
	     * @return {*} item
	     */
	    function last (array) {
	      return array[array.length - 1];
	    }
	
	    // data type tests
	    var types = [
	      { name: 'number',    test: function (x) { return typeof x === 'number' } },
	      { name: 'string',    test: function (x) { return typeof x === 'string' } },
	      { name: 'boolean',   test: function (x) { return typeof x === 'boolean' } },
	      { name: 'Function',  test: function (x) { return typeof x === 'function'} },
	      { name: 'Array',     test: Array.isArray },
	      { name: 'Date',      test: function (x) { return x instanceof Date } },
	      { name: 'RegExp',    test: function (x) { return x instanceof RegExp } },
	      { name: 'Object',    test: function (x) { return typeof x === 'object' } },
	      { name: 'null',      test: function (x) { return x === null } },
	      { name: 'undefined', test: function (x) { return x === undefined } }
	    ];
	
	    // configuration
	    var config = {};
	
	    // type conversions. Order is important
	    var conversions = [];
	
	    // types to be ignored
	    var ignore = [];
	
	    // temporary object for holding types and conversions, for constructing
	    // the `typed` function itself
	    // TODO: find a more elegant solution for this
	    var typed = {
	      config: config,
	      types: types,
	      conversions: conversions,
	      ignore: ignore
	    };
	
	    /**
	     * Construct the typed function itself with various signatures
	     *
	     * Signatures:
	     *
	     *   typed(signatures: Object.<string, function>)
	     *   typed(name: string, signatures: Object.<string, function>)
	     */
	    typed = _typed('typed', {
	      'Object': function (signatures) {
	        var fns = [];
	        for (var signature in signatures) {
	          if (signatures.hasOwnProperty(signature)) {
	            fns.push(signatures[signature]);
	          }
	        }
	        var name = getName(fns);
	
	        return _typed(name, signatures);
	      },
	      'string, Object': _typed,
	      // TODO: add a signature 'Array.<function>'
	      '...Function': function (fns) {
	        var err;
	        var name = getName(fns);
	        var signatures = {};
	
	        for (var i = 0; i < fns.length; i++) {
	          var fn = fns[i];
	
	          // test whether this is a typed-function
	          if (!(typeof fn.signatures === 'object')) {
	            err = new TypeError('Function is no typed-function (index: ' + i + ')');
	            err.data = {index: i};
	            throw err;
	          }
	
	          // merge the signatures
	          for (var signature in fn.signatures) {
	            if (fn.signatures.hasOwnProperty(signature)) {
	              if (signatures.hasOwnProperty(signature)) {
	                if (fn.signatures[signature] !== signatures[signature]) {
	                  err = new Error('Signature "' + signature + '" is defined twice');
	                  err.data = {signature: signature};
	                  throw err;
	                }
	                // else: both signatures point to the same function, that's fine
	              }
	              else {
	                signatures[signature] = fn.signatures[signature];
	              }
	            }
	          }
	        }
	
	        return _typed(name, signatures);
	      }
	    });
	
	    /**
	     * Find a specific signature from a (composed) typed function, for
	     * example:
	     *
	     *   typed.find(fn, ['number', 'string'])
	     *   typed.find(fn, 'number, string')
	     *
	     * Function find only only works for exact matches.
	     *
	     * @param {Function} fn                   A typed-function
	     * @param {string | string[]} signature   Signature to be found, can be
	     *                                        an array or a comma separated string.
	     * @return {Function}                     Returns the matching signature, or
	     *                                        throws an errror when no signature
	     *                                        is found.
	     */
	    function find (fn, signature) {
	      if (!fn.signatures) {
	        throw new TypeError('Function is no typed-function');
	      }
	
	      // normalize input
	      var arr;
	      if (typeof signature === 'string') {
	        arr = signature.split(',');
	        for (var i = 0; i < arr.length; i++) {
	          arr[i] = arr[i].trim();
	        }
	      }
	      else if (Array.isArray(signature)) {
	        arr = signature;
	      }
	      else {
	        throw new TypeError('String array or a comma separated string expected');
	      }
	
	      var str = arr.join(',');
	
	      // find an exact match
	      var match = fn.signatures[str];
	      if (match) {
	        return match;
	      }
	
	      // TODO: extend find to match non-exact signatures
	
	      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + arr.join(', ') + '))');
	    }
	
	    /**
	     * Convert a given value to another data type.
	     * @param {*} value
	     * @param {string} type
	     */
	    function convert (value, type) {
	      var from = getTypeOf(value);
	
	      // check conversion is needed
	      if (type === from) {
	        return value;
	      }
	
	      for (var i = 0; i < typed.conversions.length; i++) {
	        var conversion = typed.conversions[i];
	        if (conversion.from === from && conversion.to === type) {
	          return conversion.convert(value);
	        }
	      }
	
	      throw new Error('Cannot convert from ' + from + ' to ' + type);
	    }
	
	    // attach types and conversions to the final `typed` function
	    typed.config = config;
	    typed.types = types;
	    typed.conversions = conversions;
	    typed.ignore = ignore;
	    typed.create = create;
	    typed.find = find;
	    typed.convert = convert;
	
	    // add a type
	    typed.addType = function (type) {
	      if (!type || typeof type.name !== 'string' || typeof type.test !== 'function') {
	        throw new TypeError('Object with properties {name: string, test: function} expected');
	      }
	
	      typed.types.push(type);
	    };
	
	    // add a conversion
	    typed.addConversion = function (conversion) {
	      if (!conversion
	          || typeof conversion.from !== 'string'
	          || typeof conversion.to !== 'string'
	          || typeof conversion.convert !== 'function') {
	        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');
	      }
	
	      typed.conversions.push(conversion);
	    };
	
	    return typed;
	  }
	
	  return create();
	}));


/***/ }),
/* 58 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * @typedef {{sign: '+' | '-' | '', coefficients: number[], exponent: number}} SplitValue
	 */
	
	/**
	 * Test whether value is a number
	 * @param {*} value
	 * @return {boolean} isNumber
	 */
	exports.isNumber = function(value) {
	  return typeof value === 'number';
	};
	
	/**
	 * Check if a number is integer
	 * @param {number | boolean} value
	 * @return {boolean} isInteger
	 */
	exports.isInteger = function(value) {
	  return isFinite(value)
	      ? (value == Math.round(value))
	      : false;
	  // Note: we use ==, not ===, as we can have Booleans as well
	};
	
	/**
	 * Calculate the sign of a number
	 * @param {number} x
	 * @returns {*}
	 */
	exports.sign = Math.sign || function(x) {
	  if (x > 0) {
	    return 1;
	  }
	  else if (x < 0) {
	    return -1;
	  }
	  else {
	    return 0;
	  }
	};
	
	/**
	 * Convert a number to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'engineering'    Always use engineering notation.
	 *                                          For example '123.4e+0' and '14.0e+6'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lower` and `upper` bounds, and uses
	 *                                          exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential' and
	 *                                          'auto', `precision` defines the total
	 *                                          number of significant digits returned
	 *                                          and is undefined by default.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point, and is 0 by default.
	 *                     {Object} exponential An object containing two parameters,
	 *                                          {number} lower and {number} upper,
	 *                                          used by notation 'auto' to determine
	 *                                          when to return exponential notation.
	 *                                          Default values are `lower=1e-3` and
	 *                                          `upper=1e5`.
	 *                                          Only applicable for notation `auto`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4);                                        // '6.4'
	 *    format(1240000);                                    // '1.24e6'
	 *    format(1/3);                                        // '0.3333333333333333'
	 *    format(1/3, 3);                                     // '0.333'
	 *    format(21385, 2);                                   // '21000'
	 *    format(12.071, {notation: 'fixed'});                // '12'
	 *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'
	 *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'
	 *    format(12345678, {notation: 'engineering'});        // '12.345678e+6'
	 *
	 * @param {number} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */
	exports.format = function(value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  }
	
	  // handle special cases
	  if (value === Infinity) {
	    return 'Infinity';
	  }
	  else if (value === -Infinity) {
	    return '-Infinity';
	  }
	  else if (isNaN(value)) {
	    return 'NaN';
	  }
	
	  // default values for options
	  var notation = 'auto';
	  var precision = undefined;
	
	  if (options) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    }
	
	    // determine precision from options
	    if (exports.isNumber(options)) {
	      precision = options;
	    }
	    else if (options.precision) {
	      precision = options.precision;
	    }
	  }
	
	  // handle the various notations
	  switch (notation) {
	    case 'fixed':
	      return exports.toFixed(value, precision);
	
	    case 'exponential':
	      return exports.toExponential(value, precision);
	
	    case 'engineering':
	      return exports.toEngineering(value, precision);
	
	    case 'auto':
	      return exports
	          .toPrecision(value, precision, options && options.exponential)
	
	          // remove trailing zeros after the decimal point
	          .replace(/((\.\d*?)(0+))($|e)/, function () {
	            var digits = arguments[2];
	            var e = arguments[4];
	            return (digits !== '.') ? digits + e : e;
	          });
	
	    default:
	      throw new Error('Unknown notation "' + notation + '". ' +
	          'Choose "auto", "exponential", or "fixed".');
	  }
	};
	
	/**
	 * Split a number into sign, coefficients, and exponent
	 * @param {number | string} value
	 * @return {SplitValue}
	 *              Returns an object containing sign, coefficients, and exponent
	 */
	exports.splitNumber = function (value) {
	  // parse the input value
	  var match = String(value).toLowerCase().match(/^0*?(-?)(\d+\.?\d*)(e([+-]?\d+))?$/);
	  if (!match) {
	    throw new SyntaxError('Invalid number ' + value);
	  }
	
	  var sign         = match[1];
	  var digits       = match[2];
	  var exponent     = parseFloat(match[4] || '0');
	
	  var dot = digits.indexOf('.');
	  exponent += (dot !== -1) ? (dot - 1) : (digits.length - 1);
	
	  var coefficients = digits
	      .replace('.', '')  // remove the dot (must be removed before removing leading zeros)
	      .replace(/^0*/, function (zeros) {
	        // remove leading zeros, add their count to the exponent
	        exponent -= zeros.length;
	        return '';
	      })
	      .replace(/0*$/, '') // remove trailing zeros
	      .split('')
	      .map(function (d) {
	        return parseInt(d);
	      });
	
	  if (coefficients.length === 0) {
	    coefficients.push(0);
	    exponent++;
	  }
	
	  return {
	    sign: sign,
	    coefficients: coefficients,
	    exponent: exponent
	  };
	};
	
	
	/**
	 * Format a number in engineering notation. Like '1.23e+6', '2.3e+0', '3.500e-3'
	 * @param {number | string} value
	 * @param {number} [precision=0]        Optional number of decimals after the
	 *                                      decimal point. Zero by default.
	 */
	exports.toEngineering = function (value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }
	  
	  var rounded = exports.roundDigits(exports.splitNumber(value), precision);
	
	  var e = rounded.exponent;
	  var c = rounded.coefficients;
	
	  // find nearest lower multiple of 3 for exponent
	  var newExp = e % 3 === 0 ? e : (e < 0 ? (e - 3) - (e % 3) : e - (e % 3));
	
	  // concatenate coefficients with necessary zeros
	  var significandsDiff = e >= 0 ? e : Math.abs(newExp);
	
	  // add zeros if necessary (for ex: 1e+8)
	  if (c.length - 1 < significandsDiff) c = c.concat(zeros(significandsDiff - (c.length - 1)));
	
	  // find difference in exponents
	  var expDiff = Math.abs(e - newExp);
	
	  var decimalIdx = 1;
	
	  // push decimal index over by expDiff times
	  while (--expDiff >= 0) decimalIdx++;
	
	  // if all coefficient values are zero after the decimal point, don't add a decimal value.
	  // otherwise concat with the rest of the coefficients
	  var decimals = c.slice(decimalIdx).join('');
	  var decimalVal = decimals.match(/[1-9]/) ? ('.' + decimals) : '';
	
	  var str = c.slice(0, decimalIdx).join('') +
	      decimalVal +
	      'e' + (e >= 0 ? '+' : '') + newExp.toString();
	  return rounded.sign + str;
	};
	
	/**
	 * Format a number with fixed notation.
	 * @param {number | string} value
	 * @param {number} [precision=0]        Optional number of decimals after the
	 *                                      decimal point. Zero by default.
	 */
	exports.toFixed = function (value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }
	
	  var splitValue = exports.splitNumber(value)
	  var rounded = exports.roundDigits(splitValue, splitValue.exponent + 1 + (precision || 0));
	  var c = rounded.coefficients;
	  var p = rounded.exponent + 1; // exponent may have changed
	
	  // append zeros if needed
	  var pp = p + (precision || 0);
	  if (c.length < pp) {
	    c = c.concat(zeros(pp - c.length));
	  }
	
	  // prepend zeros if needed
	  if (p < 0) {
	    c = zeros(-p + 1).concat(c);
	    p = 1;
	  }
	
	  // insert a dot if needed
	  if (precision) {
	    c.splice(p, 0, (p === 0) ? '0.' : '.');
	  }
	
	  return rounded.sign + c.join('');
	};
	
	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {number | string} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 */
	exports.toExponential = function (value, precision) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }
	
	  // round if needed, else create a clone
	  var split = exports.splitNumber(value)
	  var rounded = precision ? exports.roundDigits(split, precision) : split;
	  var c = rounded.coefficients;
	  var e = rounded.exponent;
	
	  // append zeros if needed
	  if (c.length < precision) {
	    c = c.concat(zeros(precision - c.length));
	  }
	
	  // format as `C.CCCe+EEE` or `C.CCCe-EEE`
	  var first = c.shift();
	  return rounded.sign + first + (c.length > 0 ? ('.' + c.join('')) : '') +
	      'e' + (e >= 0 ? '+' : '') + e;
	}
	
	/**
	 * Format a number with a certain precision
	 * @param {number | string} value
	 * @param {number} [precision=undefined] Optional number of digits.
	 * @param {{lower: number | undefined, upper: number | undefined}} [options]
	 *                                       By default:
	 *                                         lower = 1e-3 (excl)
	 *                                         upper = 1e+5 (incl)
	 * @return {string}
	 */
	exports.toPrecision = function (value, precision, options) {
	  if (isNaN(value) || !isFinite(value)) {
	    return String(value);
	  }
	
	  // determine lower and upper bound for exponential notation.
	  var lower = (options && options.lower !== undefined) ? options.lower : 1e-3;
	  var upper = (options && options.upper !== undefined) ? options.upper : 1e+5;
	
	  var split = exports.splitNumber(value)
	  var abs = Math.abs(Math.pow(10, split.exponent));
	  if (abs < lower || abs >= upper) {
	    // exponential notation
	    return exports.toExponential(value, precision);
	  }
	  else {
	    var rounded = precision ? exports.roundDigits(split, precision) : split;
	    var c = rounded.coefficients;
	    var e = rounded.exponent;
	
	    // append trailing zeros
	    if (c.length < precision) {
	      c = c.concat(zeros(precision - c.length));
	    }
	
	    // append trailing zeros
	    // TODO: simplify the next statement
	    c = c.concat(zeros(e - c.length + 1 +
	        (c.length < precision ? precision - c.length : 0)));
	
	    // prepend zeros
	    c = zeros(-e).concat(c);
	
	    var dot = e > 0 ? e : 0;
	    if (dot < c.length - 1) {
	      c.splice(dot + 1, 0, '.');
	    }
	
	    return rounded.sign + c.join('');
	  }
	}
	
	/**
	 * Round the number of digits of a number *
	 * @param {SplitValue} split       A value split with .splitNumber(value)
	 * @param {number} precision  A positive integer
	 * @return {SplitValue}
	 *              Returns an object containing sign, coefficients, and exponent
	 *              with rounded digits
	 */
	exports.roundDigits = function (split, precision) {
	  // create a clone
	  var rounded = {
	    sign: split.sign,
	    coefficients: split.coefficients,
	    exponent: split.exponent
	  }
	  var c = rounded.coefficients;
	
	  // prepend zeros if needed
	  while (precision <= 0) {
	    c.unshift(0);
	    rounded.exponent++;
	    precision++;
	  }
	
	  if (c.length > precision) {
	    var removed = c.splice(precision, c.length - precision);
	
	    if (removed[0] >= 5) {
	      var i = precision - 1;
	      c[i]++;
	      while (c[i] === 10) {
	        c.pop();
	        if (i === 0) {
	          c.unshift(0);
	          rounded.exponent++;
	          i++;
	        }
	        i--;
	        c[i]++;
	      }
	    }
	  }
	
	  return rounded;
	};
	
	/**
	 * Create an array filled with zeros.
	 * @param {number} length
	 * @return {Array}
	 */
	function zeros(length) {
	  var arr = [];
	  for (var i = 0; i < length; i++) {
	    arr.push(0);
	  }
	  return arr;
	}
	
	/**
	 * Count the number of significant digits of a number.
	 *
	 * For example:
	 *   2.34 returns 3
	 *   0.0034 returns 2
	 *   120.5e+30 returns 4
	 *
	 * @param {number} value
	 * @return {number} digits   Number of significant digits
	 */
	exports.digits = function(value) {
	  return value
	      .toExponential()
	      .replace(/e.*$/, '')          // remove exponential notation
	      .replace( /^0\.?0*|\./, '')   // remove decimal point and leading zeros
	      .length
	};
	
	/**
	 * Minimum number added to one that makes the result different than one
	 */
	exports.DBL_EPSILON = Number.EPSILON || 2.2204460492503130808472633361816E-16;
	
	/**
	 * Compares two floating point numbers.
	 * @param {number} x          First value to compare
	 * @param {number} y          Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are nearly equal
	*/
	exports.nearlyEqual = function(x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon == null) {
	    return x == y;
	  }
	
	  // use "==" operator, handles infinities
	  if (x == y) {
	    return true;
	  }
	
	  // NaN
	  if (isNaN(x) || isNaN(y)) {
	    return false;
	  }
	
	  // at this point x and y should be finite
	  if(isFinite(x) && isFinite(y)) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = Math.abs(x - y);
	    if (diff < exports.DBL_EPSILON) {
	      return true;
	    }
	    else {
	      // use relative error
	      return diff <= Math.max(Math.abs(x), Math.abs(y)) * epsilon;
	    }
	  }
	
	  // Infinite and Number or negative Infinite and positive Infinite cases
	  return false;
	};


/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

	var Emitter = __webpack_require__(60);
	
	/**
	 * Extend given object with emitter functions `on`, `off`, `once`, `emit`
	 * @param {Object} obj
	 * @return {Object} obj
	 */
	exports.mixin = function (obj) {
	  // create event emitter
	  var emitter = new Emitter();
	
	  // bind methods to obj (we don't want to expose the emitter.e Array...)
	  obj.on   = emitter.on.bind(emitter);
	  obj.off  = emitter.off.bind(emitter);
	  obj.once = emitter.once.bind(emitter);
	  obj.emit = emitter.emit.bind(emitter);
	
	  return obj;
	};


/***/ }),
/* 60 */
/***/ (function(module, exports) {

	function E () {
		// Keep this empty so it's easier to inherit from
	  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)
	}
	
	E.prototype = {
		on: function (name, callback, ctx) {
	    var e = this.e || (this.e = {});
	
	    (e[name] || (e[name] = [])).push({
	      fn: callback,
	      ctx: ctx
	    });
	
	    return this;
	  },
	
	  once: function (name, callback, ctx) {
	    var self = this;
	    function listener () {
	      self.off(name, listener);
	      callback.apply(ctx, arguments);
	    };
	
	    listener._ = callback
	    return this.on(name, listener, ctx);
	  },
	
	  emit: function (name) {
	    var data = [].slice.call(arguments, 1);
	    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();
	    var i = 0;
	    var len = evtArr.length;
	
	    for (i; i < len; i++) {
	      evtArr[i].fn.apply(evtArr[i].ctx, data);
	    }
	
	    return this;
	  },
	
	  off: function (name, callback) {
	    var e = this.e || (this.e = {});
	    var evts = e[name];
	    var liveEvents = [];
	
	    if (evts && callback) {
	      for (var i = 0, len = evts.length; i < len; i++) {
	        if (evts[i].fn !== callback && evts[i].fn._ !== callback)
	          liveEvents.push(evts[i]);
	      }
	    }
	
	    // Remove event from queue to prevent memory leak
	    // Suggested by https://github.com/lazd
	    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910
	
	    (liveEvents.length)
	      ? e[name] = liveEvents
	      : delete e[name];
	
	    return this;
	  }
	};
	
	module.exports = E;


/***/ }),
/* 61 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var lazy = __webpack_require__(55).lazy;
	var isFactory = __webpack_require__(55).isFactory;
	var traverse = __webpack_require__(55).traverse;
	var ArgumentsError = __webpack_require__(62);
	
	function factory (type, config, load, typed, math) {
	  /**
	   * Import functions from an object or a module
	   *
	   * Syntax:
	   *
	   *    math.import(object)
	   *    math.import(object, options)
	   *
	   * Where:
	   *
	   * - `object: Object`
	   *   An object with functions to be imported.
	   * - `options: Object` An object with import options. Available options:
	   *   - `override: boolean`
	   *     If true, existing functions will be overwritten. False by default.
	   *   - `silent: boolean`
	   *     If true, the function will not throw errors on duplicates or invalid
	   *     types. False by default.
	   *   - `wrap: boolean`
	   *     If true, the functions will be wrapped in a wrapper function
	   *     which converts data types like Matrix to primitive data types like Array.
	   *     The wrapper is needed when extending math.js with libraries which do not
	   *     support these data type. False by default.
	   *
	   * Examples:
	   *
	   *    // define new functions and variables
	   *    math.import({
	   *      myvalue: 42,
	   *      hello: function (name) {
	   *        return 'hello, ' + name + '!';
	   *      }
	   *    });
	   *
	   *    // use the imported function and variable
	   *    math.myvalue * 2;               // 84
	   *    math.hello('user');             // 'hello, user!'
	   *
	   *    // import the npm module 'numbers'
	   *    // (must be installed first with `npm install numbers`)
	   *    math.import(require('numbers'), {wrap: true});
	   *
	   *    math.fibonacci(7); // returns 13
	   *
	   * @param {Object | Array} object   Object with functions to be imported.
	   * @param {Object} [options]        Import options.
	   */
	  function math_import(object, options) {
	    var num = arguments.length;
	    if (num !== 1 && num !== 2) {
	      throw new ArgumentsError('import', num, 1, 2);
	    }
	
	    if (!options) {
	      options = {};
	    }
	
	    if (isFactory(object)) {
	      _importFactory(object, options);
	    }
	    // TODO: allow a typed-function with name too
	    else if (Array.isArray(object)) {
	      object.forEach(function (entry) {
	        math_import(entry, options);
	      });
	    }
	    else if (typeof object === 'object') {
	      // a map with functions
	      for (var name in object) {
	        if (object.hasOwnProperty(name)) {
	          var value = object[name];
	          if (isSupportedType(value)) {
	            _import(name, value, options);
	          }
	          else if (isFactory(object)) {
	            _importFactory(object, options);
	          }
	          else {
	            math_import(value, options);
	          }
	        }
	      }
	    }
	    else {
	      if (!options.silent) {
	        throw new TypeError('Factory, Object, or Array expected');
	      }
	    }
	  }
	
	  /**
	   * Add a property to the math namespace and create a chain proxy for it.
	   * @param {string} name
	   * @param {*} value
	   * @param {Object} options  See import for a description of the options
	   * @private
	   */
	  function _import(name, value, options) {
	    // TODO: refactor this function, it's to complicated and contains duplicate code
	    if (options.wrap && typeof value === 'function') {
	      // create a wrapper around the function
	      value = _wrap(value);
	    }
	
	    if (isTypedFunction(math[name]) && isTypedFunction(value)) {
	      if (options.override) {
	        // give the typed function the right name
	        value = typed(name, value.signatures);
	      }
	      else {
	        // merge the existing and typed function
	        value = typed(math[name], value);
	      }
	
	      math[name] = value;
	      _importTransform(name, value);
	      math.emit('import', name, function resolver() {
	        return value;
	      });
	      return;
	    }
	
	    if (math[name] === undefined || options.override) {
	      math[name] = value;
	      _importTransform(name, value);
	      math.emit('import', name, function resolver() {
	        return value;
	      });
	      return;
	    }
	
	    if (!options.silent) {
	      throw new Error('Cannot import "' + name + '": already exists');
	    }
	  }
	
	  function _importTransform (name, value) {
	    if (value && typeof value.transform === 'function') {
	      math.expression.transform[name] = value.transform;
	      if (!unsafe[name]) {
	        math.expression.mathWithTransform[name] = value.transform
	      }
	    }
	    else {
	      // remove existing transform
	      delete math.expression.transform[name]
	      if (!unsafe[name]) {
	        math.expression.mathWithTransform[name] = value
	      }
	    }
	  }
	
	  /**
	   * Create a wrapper a round an function which converts the arguments
	   * to their primitive values (like convert a Matrix to Array)
	   * @param {Function} fn
	   * @return {Function} Returns the wrapped function
	   * @private
	   */
	  function _wrap (fn) {
	    var wrapper = function wrapper () {
	      var args = [];
	      for (var i = 0, len = arguments.length; i < len; i++) {
	        var arg = arguments[i];
	        args[i] = arg && arg.valueOf();
	      }
	      return fn.apply(math, args);
	    };
	
	    if (fn.transform) {
	      wrapper.transform = fn.transform;
	    }
	
	    return wrapper;
	  }
	
	  /**
	   * Import an instance of a factory into math.js
	   * @param {{factory: Function, name: string, path: string, math: boolean}} factory
	   * @param {Object} options  See import for a description of the options
	   * @private
	   */
	  function _importFactory(factory, options) {
	    if (typeof factory.name === 'string') {
	      var name = factory.name;
	      var existingTransform = name in math.expression.transform
	      var namespace = factory.path ? traverse(math, factory.path) : math;
	      var existing = namespace.hasOwnProperty(name) ? namespace[name] : undefined;
	
	      var resolver = function () {
	        var instance = load(factory);
	        if (instance && typeof instance.transform === 'function') {
	          throw new Error('Transforms cannot be attached to factory functions. ' +
	              'Please create a separate function for it with exports.path="expression.transform"');
	        }
	
	        if (isTypedFunction(existing) && isTypedFunction(instance)) {
	          if (options.override) {
	            // replace the existing typed function (nothing to do)
	          }
	          else {
	            // merge the existing and new typed function
	            instance = typed(existing, instance);
	          }
	
	          return instance;
	        }
	
	        if (existing === undefined || options.override) {
	          return instance;
	        }
	
	        if (!options.silent) {
	          throw new Error('Cannot import "' + name + '": already exists');
	        }
	      };
	
	      if (factory.lazy !== false) {
	        lazy(namespace, name, resolver);
	
	        if (!existingTransform) {
	          if (!unsafe[name]) {
	            lazy(math.expression.mathWithTransform, name, resolver);
	          }
	        }
	      }
	      else {
	        namespace[name] = resolver();
	        if (!existingTransform) {
	          if (!unsafe[name]) {
	            math.expression.mathWithTransform[name] = resolver();
	          }
	        }
	      }
	
	      math.emit('import', name, resolver, factory.path);
	    }
	    else {
	      // unnamed factory.
	      // no lazy loading
	      load(factory);
	    }
	  }
	
	  /**
	   * Check whether given object is a type which can be imported
	   * @param {Function | number | string | boolean | null | Unit | Complex} object
	   * @return {boolean}
	   * @private
	   */
	  function isSupportedType(object) {
	    return typeof object === 'function'
	        || typeof object === 'number'
	        || typeof object === 'string'
	        || typeof object === 'boolean'
	        || object === null
	        || (object && object.isUnit === true)
	        || (object && object.isComplex === true)
	        || (object && object.isBigNumber === true)
	        || (object && object.isFraction === true)
	        || (object && object.isMatrix === true)
	        || (object && Array.isArray(object) === true)
	  }
	
	  /**
	   * Test whether a given thing is a typed-function
	   * @param {*} fn
	   * @return {boolean} Returns true when `fn` is a typed-function
	   */
	  function isTypedFunction (fn) {
	    return typeof fn === 'function' && typeof fn.signatures === 'object';
	  }
	
	  // namespaces not available in the parser for safety reasons
	  var unsafe = {
	    'expression': true,
	    'type': true,
	    'error': true,
	    'json': true
	  };
	
	  return math_import;
	}
	
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.name = 'import';
	exports.factory = factory;
	exports.lazy = true;


/***/ }),
/* 62 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Create a syntax error with the message:
	 *     'Wrong number of arguments in function <fn> (<count> provided, <min>-<max> expected)'
	 * @param {string} fn     Function name
	 * @param {number} count  Actual argument count
	 * @param {number} min    Minimum required argument count
	 * @param {number} [max]  Maximum required argument count
	 * @extends Error
	 */
	function ArgumentsError(fn, count, min, max) {
	  if (!(this instanceof ArgumentsError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }
	
	  this.fn = fn;
	  this.count = count;
	  this.min = min;
	  this.max = max;
	
	  this.message = 'Wrong number of arguments in function ' + fn +
	      ' (' + count + ' provided, ' +
	      min + ((max != undefined) ? ('-' + max) : '') + ' expected)';
	
	  this.stack = (new Error()).stack;
	}
	
	ArgumentsError.prototype = new Error();
	ArgumentsError.prototype.constructor = Error;
	ArgumentsError.prototype.name = 'ArgumentsError';
	ArgumentsError.prototype.isArgumentsError = true;
	
	module.exports = ArgumentsError;


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var object = __webpack_require__(55);
	
	function factory (type, config, load, typed, math) {
	  var MATRIX = ['Matrix', 'Array'];                   // valid values for option matrix
	  var NUMBER = ['number', 'BigNumber', 'Fraction'];   // valid values for option number
	
	  /**
	   * Set configuration options for math.js, and get current options.
	   * Will emit a 'config' event, with arguments (curr, prev, changes).
	   *
	   * Syntax:
	   *
	   *     math.config(config: Object): Object
	   *
	   * Examples:
	   *
	   *     math.config().number;                // outputs 'number'
	   *     math.eval('0.4');                    // outputs number 0.4
	   *     math.config({number: 'Fraction'});
	   *     math.eval('0.4');                    // outputs Fraction 2/5
	   *
	   * @param {Object} [options] Available options:
	   *                            {number} epsilon
	   *                              Minimum relative difference between two
	   *                              compared values, used by all comparison functions.
	   *                            {string} matrix
	   *                              A string 'Matrix' (default) or 'Array'.
	   *                            {string} number
	   *                              A string 'number' (default), 'BigNumber', or 'Fraction'
	   *                            {number} precision
	   *                              The number of significant digits for BigNumbers.
	   *                              Not applicable for Numbers.
	   *                            {string} parenthesis
	   *                              How to display parentheses in LaTeX and string
	   *                              output.
	   *                            {string} randomSeed
	   *                              Random seed for seeded pseudo random number generator.
	   *                              Set to null to randomly seed.
	   * @return {Object} Returns the current configuration
	   */
	  function _config(options) {
	    if (options) {
	      var prev = object.map(config, object.clone);
	
	      // validate some of the options
	      validateOption(options, 'matrix', MATRIX);
	      validateOption(options, 'number', NUMBER);
	
	      // merge options
	      object.deepExtend(config, options);
	
	      var curr = object.map(config, object.clone);
	
	      var changes = object.map(options, object.clone);
	
	      // emit 'config' event
	      math.emit('config', curr, prev, changes);
	
	      return curr;
	    }
	    else {
	      return object.map(config, object.clone);
	    }
	  }
	
	  // attach the valid options to the function so they can be extended
	  _config.MATRIX = MATRIX;
	  _config.NUMBER = NUMBER;
	
	  return _config;
	}
	
	/**
	 * Test whether an Array contains a specific item.
	 * @param {Array.<string>} array
	 * @param {string} item
	 * @return {boolean}
	 */
	function contains (array, item) {
	  return array.indexOf(item) !== -1;
	}
	
	/**
	 * Find a string in an array. Case insensitive search
	 * @param {Array.<string>} array
	 * @param {string} item
	 * @return {number} Returns the index when found. Returns -1 when not found
	 */
	function findIndex (array, item) {
	  return array
	      .map(function (i) {
	        return i.toLowerCase();
	      })
	      .indexOf(item.toLowerCase());
	}
	
	/**
	 * Validate an option
	 * @param {Object} options         Object with options
	 * @param {string} name            Name of the option to validate
	 * @param {Array.<string>} values  Array with valid values for this option
	 */
	function validateOption(options, name, values) {
	  if (options[name] !== undefined && !contains(values, options[name])) {
	    var index = findIndex(values, options[name]);
	    if (index !== -1) {
	      // right value, wrong casing
	      // TODO: lower case values are deprecated since v3, remove this warning some day.
	      console.warn('Warning: Wrong casing for configuration option "' + name + '", should be "' + values[index] + '" instead of "' + options[name] + '".');
	
	      options[name] = values[index]; // change the option to the right casing
	    }
	    else {
	      // unknown value
	      console.warn('Warning: Unknown value "' + options[name] + '" for configuration option "' + name + '". Available options: ' + values.map(JSON.stringify).join(', ') + '.');
	    }
	  }
	}
	
	exports.name = 'config';
	exports.math = true; // request the math namespace as fifth argument
	exports.factory = factory;


/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(65),        // data types (Matrix, Complex, Unit, ...)
	  __webpack_require__(148),   // constants
	  __webpack_require__(150),  // expression parsing
	  __webpack_require__(393),    // functions
	  __webpack_require__(569),        // serialization utility (math.json.reviver)
	  __webpack_require__(571)        // errors
	];


/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(66),
	  __webpack_require__(71),
	  __webpack_require__(72),
	  __webpack_require__(77),
	  __webpack_require__(84),
	  __webpack_require__(88),
	  __webpack_require__(122),
	  __webpack_require__(123),
	  __webpack_require__(125),
	  __webpack_require__(126)
	];


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  // type
	  __webpack_require__(67),
	
	  // construction function
	  __webpack_require__(69)
	];


/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

	var Decimal = __webpack_require__(68);
	
	function factory (type, config, load, typed, math) {
	  var BigNumber = Decimal.clone({precision: config.precision});
	
	  /**
	   * Attach type information
	   */
	  BigNumber.prototype.type = 'BigNumber';
	  BigNumber.prototype.isBigNumber = true;
	
	  /**
	   * Get a JSON representation of a BigNumber containing
	   * type information
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "BigNumber", "value": "0.2"}`
	   */
	  BigNumber.prototype.toJSON = function () {
	    return {
	      mathjs: 'BigNumber',
	      value: this.toString()
	    };
	  };
	
	  /**
	   * Instantiate a BigNumber from a JSON object
	   * @param {Object} json  a JSON object structured as:
	   *                       `{"mathjs": "BigNumber", "value": "0.2"}`
	   * @return {BigNumber}
	   */
	  BigNumber.fromJSON = function (json) {
	    return new BigNumber(json.value);
	  };
	
	  // listen for changed in the configuration, automatically apply changed precision
	  math.on('config', function (curr, prev) {
	    if (curr.precision !== prev.precision) {
	      BigNumber.config({ precision: curr.precision });
	    }
	  });
	
	  return BigNumber;
	}
	
	exports.name = 'BigNumber';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true; // request access to the math namespace

/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/*! decimal.js v7.1.1 https://github.com/MikeMcl/decimal.js/LICENCE */
	;(function (globalScope) {
	  'use strict';
	
	
	  /*
	   *  decimal.js v7.1.1
	   *  An arbitrary-precision Decimal type for JavaScript.
	   *  https://github.com/MikeMcl/decimal.js
	   *  Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>
	   *  MIT Licence
	   */
	
	
	  // -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //
	
	
	    // The maximum exponent magnitude.
	    // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.
	  var EXP_LIMIT = 9e15,                      // 0 to 9e15
	
	    // The limit on the value of `precision`, and on the value of the first argument to
	    // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.
	    MAX_DIGITS = 1e9,                        // 0 to 1e9
	
	    // Base conversion alphabet.
	    NUMERALS = '0123456789abcdef',
	
	    // The natural logarithm of 10 (1025 digits).
	    LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',
	
	    // Pi (1025 digits).
	    PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',
	
	
	    // The initial configuration properties of the Decimal constructor.
	    Decimal = {
	
	      // These values must be integers within the stated ranges (inclusive).
	      // Most of these values can be changed at run-time using the `Decimal.config` method.
	
	      // The maximum number of significant digits of the result of a calculation or base conversion.
	      // E.g. `Decimal.config({ precision: 20 });`
	      precision: 20,                         // 1 to MAX_DIGITS
	
	      // The rounding mode used when rounding to `precision`.
	      //
	      // ROUND_UP         0 Away from zero.
	      // ROUND_DOWN       1 Towards zero.
	      // ROUND_CEIL       2 Towards +Infinity.
	      // ROUND_FLOOR      3 Towards -Infinity.
	      // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
	      // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
	      // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
	      // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
	      // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
	      //
	      // E.g.
	      // `Decimal.rounding = 4;`
	      // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
	      rounding: 4,                           // 0 to 8
	
	      // The modulo mode used when calculating the modulus: a mod n.
	      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
	      // The remainder (r) is calculated as: r = a - n * q.
	      //
	      // UP         0 The remainder is positive if the dividend is negative, else is negative.
	      // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).
	      // FLOOR      3 The remainder has the same sign as the divisor (Python %).
	      // HALF_EVEN  6 The IEEE 754 remainder function.
	      // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.
	      //
	      // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian
	      // division (9) are commonly used for the modulus operation. The other rounding modes can also
	      // be used, but they may not give useful results.
	      modulo: 1,                             // 0 to 9
	
	      // The exponent value at and beneath which `toString` returns exponential notation.
	      // JavaScript numbers: -7
	      toExpNeg: -7,                          // 0 to -EXP_LIMIT
	
	      // The exponent value at and above which `toString` returns exponential notation.
	      // JavaScript numbers: 21
	      toExpPos:  21,                         // 0 to EXP_LIMIT
	
	      // The minimum exponent value, beneath which underflow to zero occurs.
	      // JavaScript numbers: -324  (5e-324)
	      minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT
	
	      // The maximum exponent value, above which overflow to Infinity occurs.
	      // JavaScript numbers: 308  (1.7976931348623157e+308)
	      maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT
	
	      // Whether to use cryptographically-secure random number generation, if available.
	      crypto: false                          // true/false
	    },
	
	
	  // ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //
	
	
	    inexact, noConflict, quadrant,
	    external = true,
	
	    decimalError = '[DecimalError] ',
	    invalidArgument = decimalError + 'Invalid argument: ',
	    precisionLimitExceeded = decimalError + 'Precision limit exceeded',
	    cryptoUnavailable = decimalError + 'crypto unavailable',
	
	    mathfloor = Math.floor,
	    mathpow = Math.pow,
	
	    isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i,
	    isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i,
	    isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i,
	    isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i,
	
	    BASE = 1e7,
	    LOG_BASE = 7,
	    MAX_SAFE_INTEGER = 9007199254740991,
	
	    LN10_PRECISION = LN10.length - 1,
	    PI_PRECISION = PI.length - 1,
	
	    // Decimal.prototype object
	    P = {};
	
	
	  // Decimal prototype methods
	
	
	  /*
	   *  absoluteValue             abs
	   *  ceil
	   *  comparedTo                cmp
	   *  cosine                    cos
	   *  cubeRoot                  cbrt
	   *  decimalPlaces             dp
	   *  dividedBy                 div
	   *  dividedToIntegerBy        divToInt
	   *  equals                    eq
	   *  floor
	   *  greaterThan               gt
	   *  greaterThanOrEqualTo      gte
	   *  hyperbolicCosine          cosh
	   *  hyperbolicSine            sinh
	   *  hyperbolicTangent         tanh
	   *  inverseCosine             acos
	   *  inverseHyperbolicCosine   acosh
	   *  inverseHyperbolicSine     asinh
	   *  inverseHyperbolicTangent  atanh
	   *  inverseSine               asin
	   *  inverseTangent            atan
	   *  isFinite
	   *  isInteger                 isInt
	   *  isNaN
	   *  isNegative                isNeg
	   *  isPositive                isPos
	   *  isZero
	   *  lessThan                  lt
	   *  lessThanOrEqualTo         lte
	   *  logarithm                 log
	   *  [maximum]                 [max]
	   *  [minimum]                 [min]
	   *  minus                     sub
	   *  modulo                    mod
	   *  naturalExponential        exp
	   *  naturalLogarithm          ln
	   *  negated                   neg
	   *  plus                      add
	   *  precision                 sd
	   *  round
	   *  sine                      sin
	   *  squareRoot                sqrt
	   *  tangent                   tan
	   *  times                     mul
	   *  toBinary
	   *  toDecimalPlaces           toDP
	   *  toExponential
	   *  toFixed
	   *  toFraction
	   *  toHexadecimal             toHex
	   *  toNearest
	   *  toNumber
	   *  toOctal
	   *  toPower                   pow
	   *  toPrecision
	   *  toSignificantDigits       toSD
	   *  toString
	   *  truncated                 trunc
	   *  valueOf                   toJSON
	   */
	
	
	  /*
	   * Return a new Decimal whose value is the absolute value of this Decimal.
	   *
	   */
	  P.absoluteValue = P.abs = function () {
	    var x = new this.constructor(this);
	    if (x.s < 0) x.s = 1;
	    return finalise(x);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
	   * direction of positive Infinity.
	   *
	   */
	  P.ceil = function () {
	    return finalise(new this.constructor(this), this.e + 1, 2);
	  };
	
	
	  /*
	   * Return
	   *   1    if the value of this Decimal is greater than the value of `y`,
	   *  -1    if the value of this Decimal is less than the value of `y`,
	   *   0    if they have the same value,
	   *   NaN  if the value of either Decimal is NaN.
	   *
	   */
	  P.comparedTo = P.cmp = function (y) {
	    var i, j, xdL, ydL,
	      x = this,
	      xd = x.d,
	      yd = (y = new x.constructor(y)).d,
	      xs = x.s,
	      ys = y.s;
	
	    // Either NaN or ±Infinity?
	    if (!xd || !yd) {
	      return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
	    }
	
	    // Either zero?
	    if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;
	
	    // Signs differ?
	    if (xs !== ys) return xs;
	
	    // Compare exponents.
	    if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;
	
	    xdL = xd.length;
	    ydL = yd.length;
	
	    // Compare digit by digit.
	    for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
	      if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
	    }
	
	    // Compare lengths.
	    return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-1, 1]
	   *
	   * cos(0)         = 1
	   * cos(-0)        = 1
	   * cos(Infinity)  = NaN
	   * cos(-Infinity) = NaN
	   * cos(NaN)       = NaN
	   *
	   */
	  P.cosine = P.cos = function () {
	    var pr, rm,
	      x = this,
	      Ctor = x.constructor;
	
	    if (!x.d) return new Ctor(NaN);
	
	    // cos(0) = cos(-0) = 1
	    if (!x.d[0]) return new Ctor(1);
	
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
	    Ctor.rounding = 1;
	
	    x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
	
	    Ctor.precision = pr;
	    Ctor.rounding = rm;
	
	    return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
	  };
	
	
	  /*
	   *
	   * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   *  cbrt(0)  =  0
	   *  cbrt(-0) = -0
	   *  cbrt(1)  =  1
	   *  cbrt(-1) = -1
	   *  cbrt(N)  =  N
	   *  cbrt(-I) = -I
	   *  cbrt(I)  =  I
	   *
	   * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))
	   *
	   */
	  P.cubeRoot = P.cbrt = function () {
	    var e, m, n, r, rep, s, sd, t, t3, t3plusx,
	      x = this,
	      Ctor = x.constructor;
	
	    if (!x.isFinite() || x.isZero()) return new Ctor(x);
	    external = false;
	
	    // Initial estimate.
	    s = x.s * Math.pow(x.s * x, 1 / 3);
	
	     // Math.cbrt underflow/overflow?
	     // Pass x to Math.pow as integer, then adjust the exponent of the result.
	    if (!s || Math.abs(s) == 1 / 0) {
	      n = digitsToString(x.d);
	      e = x.e;
	
	      // Adjust n exponent so it is a multiple of 3 away from x exponent.
	      if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');
	      s = Math.pow(n, 1 / 3);
	
	      // Rarely, e may be one less than the result exponent value.
	      e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
	
	      if (s == 1 / 0) {
	        n = '5e' + e;
	      } else {
	        n = s.toExponential();
	        n = n.slice(0, n.indexOf('e') + 1) + e;
	      }
	
	      r = new Ctor(n);
	      r.s = x.s;
	    } else {
	      r = new Ctor(s.toString());
	    }
	
	    sd = (e = Ctor.precision) + 3;
	
	    // Halley's method.
	    // TODO? Compare Newton's method.
	    for (;;) {
	      t = r;
	      t3 = t.times(t).times(t);
	      t3plusx = t3.plus(x);
	      r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);
	
	      // TODO? Replace with for-loop and checkRoundingDigits.
	      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
	        n = n.slice(sd - 3, sd + 1);
	
	        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999
	        // , i.e. approaching a rounding boundary, continue the iteration.
	        if (n == '9999' || !rep && n == '4999') {
	
	          // On the first iteration only, check to see if rounding up gives the exact result as the
	          // nines may infinitely repeat.
	          if (!rep) {
	            finalise(t, e + 1, 0);
	
	            if (t.times(t).times(t).eq(x)) {
	              r = t;
	              break;
	            }
	          }
	
	          sd += 4;
	          rep = 1;
	        } else {
	
	          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	          // If not, then there are further digits and m will be truthy.
	          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
	
	            // Truncate to the first rounding digit.
	            finalise(r, e + 1, 1);
	            m = !r.times(r).times(r).eq(x);
	          }
	
	          break;
	        }
	      }
	    }
	
	    external = true;
	
	    return finalise(r, e, Ctor.rounding, m);
	  };
	
	
	  /*
	   * Return the number of decimal places of the value of this Decimal.
	   *
	   */
	  P.decimalPlaces = P.dp = function () {
	    var w,
	      d = this.d,
	      n = NaN;
	
	    if (d) {
	      w = d.length - 1;
	      n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
	
	      // Subtract the number of trailing zeros of the last word.
	      w = d[w];
	      if (w) for (; w % 10 == 0; w /= 10) n--;
	      if (n < 0) n = 0;
	    }
	
	    return n;
	  };
	
	
	  /*
	   *  n / 0 = I
	   *  n / N = N
	   *  n / I = 0
	   *  0 / n = 0
	   *  0 / 0 = N
	   *  0 / N = N
	   *  0 / I = 0
	   *  N / n = N
	   *  N / 0 = N
	   *  N / N = N
	   *  N / I = N
	   *  I / n = I
	   *  I / 0 = I
	   *  I / N = N
	   *  I / I = N
	   *
	   * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   */
	  P.dividedBy = P.div = function (y) {
	    return divide(this, new this.constructor(y));
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the integer part of dividing the value of this Decimal
	   * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   */
	  P.dividedToIntegerBy = P.divToInt = function (y) {
	    var x = this,
	      Ctor = x.constructor;
	    return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
	  };
	
	
	  /*
	   * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.
	   *
	   */
	  P.equals = P.eq = function (y) {
	    return this.cmp(y) === 0;
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the
	   * direction of negative Infinity.
	   *
	   */
	  P.floor = function () {
	    return finalise(new this.constructor(this), this.e + 1, 3);
	  };
	
	
	  /*
	   * Return true if the value of this Decimal is greater than the value of `y`, otherwise return
	   * false.
	   *
	   */
	  P.greaterThan = P.gt = function (y) {
	    return this.cmp(y) > 0;
	  };
	
	
	  /*
	   * Return true if the value of this Decimal is greater than or equal to the value of `y`,
	   * otherwise return false.
	   *
	   */
	  P.greaterThanOrEqualTo = P.gte = function (y) {
	    var k = this.cmp(y);
	    return k == 1 || k === 0;
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this
	   * Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [1, Infinity]
	   *
	   * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...
	   *
	   * cosh(0)         = 1
	   * cosh(-0)        = 1
	   * cosh(Infinity)  = Infinity
	   * cosh(-Infinity) = Infinity
	   * cosh(NaN)       = NaN
	   *
	   *  x        time taken (ms)   result
	   * 1000      9                 9.8503555700852349694e+433
	   * 10000     25                4.4034091128314607936e+4342
	   * 100000    171               1.4033316802130615897e+43429
	   * 1000000   3817              1.5166076984010437725e+434294
	   * 10000000  abandoned after 2 minute wait
	   *
	   * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))
	   *
	   */
	  P.hyperbolicCosine = P.cosh = function () {
	    var k, n, pr, rm, len,
	      x = this,
	      Ctor = x.constructor,
	      one = new Ctor(1);
	
	    if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);
	    if (x.isZero()) return one;
	
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
	    Ctor.rounding = 1;
	    len = x.d.length;
	
	    // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1
	    // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))
	
	    // Estimate the optimum number of times to use the argument reduction.
	    // TODO? Estimation reused from cosine() and may not be optimal here.
	    if (len < 32) {
	      k = Math.ceil(len / 3);
	      n = Math.pow(4, -k).toString();
	    } else {
	      k = 16;
	      n = '2.3283064365386962890625e-10';
	    }
	
	    x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);
	
	    // Reverse argument reduction
	    var cosh2_x,
	      i = k,
	      d8 = new Ctor(8);
	    for (; i--;) {
	      cosh2_x = x.times(x);
	      x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
	    }
	
	    return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this
	   * Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-Infinity, Infinity]
	   *
	   * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...
	   *
	   * sinh(0)         = 0
	   * sinh(-0)        = -0
	   * sinh(Infinity)  = Infinity
	   * sinh(-Infinity) = -Infinity
	   * sinh(NaN)       = NaN
	   *
	   * x        time taken (ms)
	   * 10       2 ms
	   * 100      5 ms
	   * 1000     14 ms
	   * 10000    82 ms
	   * 100000   886 ms            1.4033316802130615897e+43429
	   * 200000   2613 ms
	   * 300000   5407 ms
	   * 400000   8824 ms
	   * 500000   13026 ms          8.7080643612718084129e+217146
	   * 1000000  48543 ms
	   *
	   * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))
	   *
	   */
	  P.hyperbolicSine = P.sinh = function () {
	    var k, pr, rm, len,
	      x = this,
	      Ctor = x.constructor;
	
	    if (!x.isFinite() || x.isZero()) return new Ctor(x);
	
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
	    Ctor.rounding = 1;
	    len = x.d.length;
	
	    if (len < 3) {
	      x = taylorSeries(Ctor, 2, x, x, true);
	    } else {
	
	      // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))
	      // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))
	      // 3 multiplications and 1 addition
	
	      // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))
	      // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))
	      // 4 multiplications and 2 additions
	
	      // Estimate the optimum number of times to use the argument reduction.
	      k = 1.4 * Math.sqrt(len);
	      k = k > 16 ? 16 : k | 0;
	
	      x = x.times(Math.pow(5, -k));
	
	      x = taylorSeries(Ctor, 2, x, x, true);
	
	      // Reverse argument reduction
	      var sinh2_x,
	        d5 = new Ctor(5),
	        d16 = new Ctor(16),
	        d20 = new Ctor(20);
	      for (; k--;) {
	        sinh2_x = x.times(x);
	        x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
	      }
	    }
	
	    Ctor.precision = pr;
	    Ctor.rounding = rm;
	
	    return finalise(x, pr, rm, true);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this
	   * Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-1, 1]
	   *
	   * tanh(x) = sinh(x) / cosh(x)
	   *
	   * tanh(0)         = 0
	   * tanh(-0)        = -0
	   * tanh(Infinity)  = 1
	   * tanh(-Infinity) = -1
	   * tanh(NaN)       = NaN
	   *
	   */
	  P.hyperbolicTangent = P.tanh = function () {
	    var pr, rm,
	      x = this,
	      Ctor = x.constructor;
	
	    if (!x.isFinite()) return new Ctor(x.s);
	    if (x.isZero()) return new Ctor(x);
	
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + 7;
	    Ctor.rounding = 1;
	
	    return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of
	   * this Decimal.
	   *
	   * Domain: [-1, 1]
	   * Range: [0, pi]
	   *
	   * acos(x) = pi/2 - asin(x)
	   *
	   * acos(0)       = pi/2
	   * acos(-0)      = pi/2
	   * acos(1)       = 0
	   * acos(-1)      = pi
	   * acos(1/2)     = pi/3
	   * acos(-1/2)    = 2*pi/3
	   * acos(|x| > 1) = NaN
	   * acos(NaN)     = NaN
	   *
	   */
	  P.inverseCosine = P.acos = function () {
	    var halfPi,
	      x = this,
	      Ctor = x.constructor,
	      k = x.abs().cmp(1),
	      pr = Ctor.precision,
	      rm = Ctor.rounding;
	
	    if (k !== -1) {
	      return k === 0
	        // |x| is 1
	        ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)
	        // |x| > 1 or x is NaN
	        : new Ctor(NaN);
	    }
	
	    if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);
	
	    // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3
	
	    Ctor.precision = pr + 6;
	    Ctor.rounding = 1;
	
	    x = x.asin();
	    halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
	
	    Ctor.precision = pr;
	    Ctor.rounding = rm;
	
	    return halfPi.minus(x);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the
	   * value of this Decimal.
	   *
	   * Domain: [1, Infinity]
	   * Range: [0, Infinity]
	   *
	   * acosh(x) = ln(x + sqrt(x^2 - 1))
	   *
	   * acosh(x < 1)     = NaN
	   * acosh(NaN)       = NaN
	   * acosh(Infinity)  = Infinity
	   * acosh(-Infinity) = NaN
	   * acosh(0)         = NaN
	   * acosh(-0)        = NaN
	   * acosh(1)         = 0
	   * acosh(-1)        = NaN
	   *
	   */
	  P.inverseHyperbolicCosine = P.acosh = function () {
	    var pr, rm,
	      x = this,
	      Ctor = x.constructor;
	
	    if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);
	    if (!x.isFinite()) return new Ctor(x);
	
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
	    Ctor.rounding = 1;
	    external = false;
	
	    x = x.times(x).minus(1).sqrt().plus(x);
	
	    external = true;
	    Ctor.precision = pr;
	    Ctor.rounding = rm;
	
	    return x.ln();
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value
	   * of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-Infinity, Infinity]
	   *
	   * asinh(x) = ln(x + sqrt(x^2 + 1))
	   *
	   * asinh(NaN)       = NaN
	   * asinh(Infinity)  = Infinity
	   * asinh(-Infinity) = -Infinity
	   * asinh(0)         = 0
	   * asinh(-0)        = -0
	   *
	   */
	  P.inverseHyperbolicSine = P.asinh = function () {
	    var pr, rm,
	      x = this,
	      Ctor = x.constructor;
	
	    if (!x.isFinite() || x.isZero()) return new Ctor(x);
	
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
	    Ctor.rounding = 1;
	    external = false;
	
	    x = x.times(x).plus(1).sqrt().plus(x);
	
	    external = true;
	    Ctor.precision = pr;
	    Ctor.rounding = rm;
	
	    return x.ln();
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the
	   * value of this Decimal.
	   *
	   * Domain: [-1, 1]
	   * Range: [-Infinity, Infinity]
	   *
	   * atanh(x) = 0.5 * ln((1 + x) / (1 - x))
	   *
	   * atanh(|x| > 1)   = NaN
	   * atanh(NaN)       = NaN
	   * atanh(Infinity)  = NaN
	   * atanh(-Infinity) = NaN
	   * atanh(0)         = 0
	   * atanh(-0)        = -0
	   * atanh(1)         = Infinity
	   * atanh(-1)        = -Infinity
	   *
	   */
	  P.inverseHyperbolicTangent = P.atanh = function () {
	    var pr, rm, wpr, xsd,
	      x = this,
	      Ctor = x.constructor;
	
	    if (!x.isFinite()) return new Ctor(NaN);
	    if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
	
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    xsd = x.sd();
	
	    if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);
	
	    Ctor.precision = wpr = xsd - x.e;
	
	    x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
	
	    Ctor.precision = pr + 4;
	    Ctor.rounding = 1;
	
	    x = x.ln();
	
	    Ctor.precision = pr;
	    Ctor.rounding = rm;
	
	    return x.times(0.5);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this
	   * Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-pi/2, pi/2]
	   *
	   * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))
	   *
	   * asin(0)       = 0
	   * asin(-0)      = -0
	   * asin(1/2)     = pi/6
	   * asin(-1/2)    = -pi/6
	   * asin(1)       = pi/2
	   * asin(-1)      = -pi/2
	   * asin(|x| > 1) = NaN
	   * asin(NaN)     = NaN
	   *
	   * TODO? Compare performance of Taylor series.
	   *
	   */
	  P.inverseSine = P.asin = function () {
	    var halfPi, k,
	      pr, rm,
	      x = this,
	      Ctor = x.constructor;
	
	    if (x.isZero()) return new Ctor(x);
	
	    k = x.abs().cmp(1);
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	
	    if (k !== -1) {
	
	      // |x| is 1
	      if (k === 0) {
	        halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
	        halfPi.s = x.s;
	        return halfPi;
	      }
	
	      // |x| > 1 or x is NaN
	      return new Ctor(NaN);
	    }
	
	    // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6
	
	    Ctor.precision = pr + 6;
	    Ctor.rounding = 1;
	
	    x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
	
	    Ctor.precision = pr;
	    Ctor.rounding = rm;
	
	    return x.times(2);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value
	   * of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-pi/2, pi/2]
	   *
	   * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
	   *
	   * atan(0)         = 0
	   * atan(-0)        = -0
	   * atan(1)         = pi/4
	   * atan(-1)        = -pi/4
	   * atan(Infinity)  = pi/2
	   * atan(-Infinity) = -pi/2
	   * atan(NaN)       = NaN
	   *
	   */
	  P.inverseTangent = P.atan = function () {
	    var i, j, k, n, px, t, r, wpr, x2,
	      x = this,
	      Ctor = x.constructor,
	      pr = Ctor.precision,
	      rm = Ctor.rounding;
	
	    if (!x.isFinite()) {
	      if (!x.s) return new Ctor(NaN);
	      if (pr + 4 <= PI_PRECISION) {
	        r = getPi(Ctor, pr + 4, rm).times(0.5);
	        r.s = x.s;
	        return r;
	      }
	    } else if (x.isZero()) {
	      return new Ctor(x);
	    } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
	      r = getPi(Ctor, pr + 4, rm).times(0.25);
	      r.s = x.s;
	      return r;
	    }
	
	    Ctor.precision = wpr = pr + 10;
	    Ctor.rounding = 1;
	
	    // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);
	
	    // Argument reduction
	    // Ensure |x| < 0.42
	    // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))
	
	    k = Math.min(28, wpr / LOG_BASE + 2 | 0);
	
	    for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));
	
	    external = false;
	
	    j = Math.ceil(wpr / LOG_BASE);
	    n = 1;
	    x2 = x.times(x);
	    r = new Ctor(x);
	    px = x;
	
	    // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...
	    for (; i !== -1;) {
	      px = px.times(x2);
	      t = r.minus(px.div(n += 2));
	
	      px = px.times(x2);
	      r = t.plus(px.div(n += 2));
	
	      if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);
	    }
	
	    if (k) r = r.times(2 << (k - 1));
	
	    external = true;
	
	    return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
	  };
	
	
	  /*
	   * Return true if the value of this Decimal is a finite number, otherwise return false.
	   *
	   */
	  P.isFinite = function () {
	    return !!this.d;
	  };
	
	
	  /*
	   * Return true if the value of this Decimal is an integer, otherwise return false.
	   *
	   */
	  P.isInteger = P.isInt = function () {
	    return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
	  };
	
	
	  /*
	   * Return true if the value of this Decimal is NaN, otherwise return false.
	   *
	   */
	  P.isNaN = function () {
	    return !this.s;
	  };
	
	
	  /*
	   * Return true if the value of this Decimal is negative, otherwise return false.
	   *
	   */
	  P.isNegative = P.isNeg = function () {
	    return this.s < 0;
	  };
	
	
	  /*
	   * Return true if the value of this Decimal is positive, otherwise return false.
	   *
	   */
	  P.isPositive = P.isPos = function () {
	    return this.s > 0;
	  };
	
	
	  /*
	   * Return true if the value of this Decimal is 0 or -0, otherwise return false.
	   *
	   */
	  P.isZero = function () {
	    return !!this.d && this.d[0] === 0;
	  };
	
	
	  /*
	   * Return true if the value of this Decimal is less than `y`, otherwise return false.
	   *
	   */
	  P.lessThan = P.lt = function (y) {
	    return this.cmp(y) < 0;
	  };
	
	
	  /*
	   * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.
	   *
	   */
	  P.lessThanOrEqualTo = P.lte = function (y) {
	    return this.cmp(y) < 1;
	  };
	
	
	  /*
	   * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * If no base is specified, return log[10](arg).
	   *
	   * log[base](arg) = ln(arg) / ln(base)
	   *
	   * The result will always be correctly rounded if the base of the log is 10, and 'almost always'
	   * otherwise:
	   *
	   * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen
	   * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error
	   * between the result and the correctly rounded result will be one ulp (unit in the last place).
	   *
	   * log[-b](a)       = NaN
	   * log[0](a)        = NaN
	   * log[1](a)        = NaN
	   * log[NaN](a)      = NaN
	   * log[Infinity](a) = NaN
	   * log[b](0)        = -Infinity
	   * log[b](-0)       = -Infinity
	   * log[b](-a)       = NaN
	   * log[b](1)        = 0
	   * log[b](Infinity) = Infinity
	   * log[b](NaN)      = NaN
	   *
	   * [base] {number|string|Decimal} The base of the logarithm.
	   *
	   */
	  P.logarithm = P.log = function (base) {
	    var isBase10, d, denominator, k, inf, num, sd, r,
	      arg = this,
	      Ctor = arg.constructor,
	      pr = Ctor.precision,
	      rm = Ctor.rounding,
	      guard = 5;
	
	    // Default base is 10.
	    if (base == null) {
	      base = new Ctor(10);
	      isBase10 = true;
	    } else {
	      base = new Ctor(base);
	      d = base.d;
	
	      // Return NaN if base is negative, or non-finite, or is 0 or 1.
	      if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);
	
	      isBase10 = base.eq(10);
	    }
	
	    d = arg.d;
	
	    // Is arg negative, non-finite, 0 or 1?
	    if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {
	      return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);
	    }
	
	    // The result will have a non-terminating decimal expansion if base is 10 and arg is not an
	    // integer power of 10.
	    if (isBase10) {
	      if (d.length > 1) {
	        inf = true;
	      } else {
	        for (k = d[0]; k % 10 === 0;) k /= 10;
	        inf = k !== 1;
	      }
	    }
	
	    external = false;
	    sd = pr + guard;
	    num = naturalLogarithm(arg, sd);
	    denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
	
	    // The result will have 5 rounding digits.
	    r = divide(num, denominator, sd, 1);
	
	    // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,
	    // calculate 10 further digits.
	    //
	    // If the result is known to have an infinite decimal expansion, repeat this until it is clear
	    // that the result is above or below the boundary. Otherwise, if after calculating the 10
	    // further digits, the last 14 are nines, round up and assume the result is exact.
	    // Also assume the result is exact if the last 14 are zero.
	    //
	    // Example of a result that will be incorrectly rounded:
	    // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...
	    // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it
	    // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so
	    // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal
	    // place is still 2.6.
	    if (checkRoundingDigits(r.d, k = pr, rm)) {
	
	      do {
	        sd += 10;
	        num = naturalLogarithm(arg, sd);
	        denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
	        r = divide(num, denominator, sd, 1);
	
	        if (!inf) {
	
	          // Check for 14 nines from the 2nd rounding digit, as the first may be 4.
	          if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
	            r = finalise(r, pr + 1, 0);
	          }
	
	          break;
	        }
	      } while (checkRoundingDigits(r.d, k += 10, rm));
	    }
	
	    external = true;
	
	    return finalise(r, pr, rm);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.
	   *
	   * arguments {number|string|Decimal}
	   *
	  P.max = function () {
	    Array.prototype.push.call(arguments, this);
	    return maxOrMin(this.constructor, arguments, 'lt');
	  };
	   */
	
	
	  /*
	   * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.
	   *
	   * arguments {number|string|Decimal}
	   *
	  P.min = function () {
	    Array.prototype.push.call(arguments, this);
	    return maxOrMin(this.constructor, arguments, 'gt');
	  };
	   */
	
	
	  /*
	   *  n - 0 = n
	   *  n - N = N
	   *  n - I = -I
	   *  0 - n = -n
	   *  0 - 0 = 0
	   *  0 - N = N
	   *  0 - I = -I
	   *  N - n = N
	   *  N - 0 = N
	   *  N - N = N
	   *  N - I = N
	   *  I - n = I
	   *  I - 0 = I
	   *  I - N = N
	   *  I - I = N
	   *
	   * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   */
	  P.minus = P.sub = function (y) {
	    var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,
	      x = this,
	      Ctor = x.constructor;
	
	    y = new Ctor(y);
	
	    // If either is not finite...
	    if (!x.d || !y.d) {
	
	      // Return NaN if either is NaN.
	      if (!x.s || !y.s) y = new Ctor(NaN);
	
	      // Return y negated if x is finite and y is ±Infinity.
	      else if (x.d) y.s = -y.s;
	
	      // Return x if y is finite and x is ±Infinity.
	      // Return x if both are ±Infinity with different signs.
	      // Return NaN if both are ±Infinity with the same sign.
	      else y = new Ctor(y.d || x.s !== y.s ? x : NaN);
	
	      return y;
	    }
	
	    // If signs differ...
	    if (x.s != y.s) {
	      y.s = -y.s;
	      return x.plus(y);
	    }
	
	    xd = x.d;
	    yd = y.d;
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	
	    // If either is zero...
	    if (!xd[0] || !yd[0]) {
	
	      // Return y negated if x is zero and y is non-zero.
	      if (yd[0]) y.s = -y.s;
	
	      // Return x if y is zero and x is non-zero.
	      else if (xd[0]) y = new Ctor(x);
	
	      // Return zero if both are zero.
	      // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.
	      else return new Ctor(rm === 3 ? -0 : 0);
	
	      return external ? finalise(y, pr, rm) : y;
	    }
	
	    // x and y are finite, non-zero numbers with the same sign.
	
	    // Calculate base 1e7 exponents.
	    e = mathfloor(y.e / LOG_BASE);
	    xe = mathfloor(x.e / LOG_BASE);
	
	    xd = xd.slice();
	    k = xe - e;
	
	    // If base 1e7 exponents differ...
	    if (k) {
	      xLTy = k < 0;
	
	      if (xLTy) {
	        d = xd;
	        k = -k;
	        len = yd.length;
	      } else {
	        d = yd;
	        e = xe;
	        len = xd.length;
	      }
	
	      // Numbers with massively different exponents would result in a very high number of
	      // zeros needing to be prepended, but this can be avoided while still ensuring correct
	      // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.
	      i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
	
	      if (k > i) {
	        k = i;
	        d.length = 1;
	      }
	
	      // Prepend zeros to equalise exponents.
	      d.reverse();
	      for (i = k; i--;) d.push(0);
	      d.reverse();
	
	    // Base 1e7 exponents equal.
	    } else {
	
	      // Check digits to determine which is the bigger number.
	
	      i = xd.length;
	      len = yd.length;
	      xLTy = i < len;
	      if (xLTy) len = i;
	
	      for (i = 0; i < len; i++) {
	        if (xd[i] != yd[i]) {
	          xLTy = xd[i] < yd[i];
	          break;
	        }
	      }
	
	      k = 0;
	    }
	
	    if (xLTy) {
	      d = xd;
	      xd = yd;
	      yd = d;
	      y.s = -y.s;
	    }
	
	    len = xd.length;
	
	    // Append zeros to `xd` if shorter.
	    // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.
	    for (i = yd.length - len; i > 0; --i) xd[len++] = 0;
	
	    // Subtract yd from xd.
	    for (i = yd.length; i > k;) {
	
	      if (xd[--i] < yd[i]) {
	        for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;
	        --xd[j];
	        xd[i] += BASE;
	      }
	
	      xd[i] -= yd[i];
	    }
	
	    // Remove trailing zeros.
	    for (; xd[--len] === 0;) xd.pop();
	
	    // Remove leading zeros and adjust exponent accordingly.
	    for (; xd[0] === 0; xd.shift()) --e;
	
	    // Zero?
	    if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);
	
	    y.d = xd;
	    y.e = getBase10Exponent(xd, e);
	
	    return external ? finalise(y, pr, rm) : y;
	  };
	
	
	  /*
	   *   n % 0 =  N
	   *   n % N =  N
	   *   n % I =  n
	   *   0 % n =  0
	   *  -0 % n = -0
	   *   0 % 0 =  N
	   *   0 % N =  N
	   *   0 % I =  0
	   *   N % n =  N
	   *   N % 0 =  N
	   *   N % N =  N
	   *   N % I =  N
	   *   I % n =  N
	   *   I % 0 =  N
	   *   I % N =  N
	   *   I % I =  N
	   *
	   * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   * The result depends on the modulo mode.
	   *
	   */
	  P.modulo = P.mod = function (y) {
	    var q,
	      x = this,
	      Ctor = x.constructor;
	
	    y = new Ctor(y);
	
	    // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.
	    if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);
	
	    // Return x if y is ±Infinity or x is ±0.
	    if (!y.d || x.d && !x.d[0]) {
	      return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
	    }
	
	    // Prevent rounding of intermediate calculations.
	    external = false;
	
	    if (Ctor.modulo == 9) {
	
	      // Euclidian division: q = sign(y) * floor(x / abs(y))
	      // result = x - q * y    where  0 <= result < abs(y)
	      q = divide(x, y.abs(), 0, 3, 1);
	      q.s *= y.s;
	    } else {
	      q = divide(x, y, 0, Ctor.modulo, 1);
	    }
	
	    q = q.times(y);
	
	    external = true;
	
	    return x.minus(q);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the natural exponential of the value of this Decimal,
	   * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   */
	  P.naturalExponential = P.exp = function () {
	    return naturalExponential(this);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,
	   * rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   */
	  P.naturalLogarithm = P.ln = function () {
	    return naturalLogarithm(this);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by
	   * -1.
	   *
	   */
	  P.negated = P.neg = function () {
	    var x = new this.constructor(this);
	    x.s = -x.s;
	    return finalise(x);
	  };
	
	
	  /*
	   *  n + 0 = n
	   *  n + N = N
	   *  n + I = I
	   *  0 + n = n
	   *  0 + 0 = 0
	   *  0 + N = N
	   *  0 + I = I
	   *  N + n = N
	   *  N + 0 = N
	   *  N + N = N
	   *  N + I = N
	   *  I + n = I
	   *  I + 0 = I
	   *  I + N = N
	   *  I + I = I
	   *
	   * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   */
	  P.plus = P.add = function (y) {
	    var carry, d, e, i, k, len, pr, rm, xd, yd,
	      x = this,
	      Ctor = x.constructor;
	
	    y = new Ctor(y);
	
	    // If either is not finite...
	    if (!x.d || !y.d) {
	
	      // Return NaN if either is NaN.
	      if (!x.s || !y.s) y = new Ctor(NaN);
	
	      // Return x if y is finite and x is ±Infinity.
	      // Return x if both are ±Infinity with the same sign.
	      // Return NaN if both are ±Infinity with different signs.
	      // Return y if x is finite and y is ±Infinity.
	      else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);
	
	      return y;
	    }
	
	     // If signs differ...
	    if (x.s != y.s) {
	      y.s = -y.s;
	      return x.minus(y);
	    }
	
	    xd = x.d;
	    yd = y.d;
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	
	    // If either is zero...
	    if (!xd[0] || !yd[0]) {
	
	      // Return x if y is zero.
	      // Return y if y is non-zero.
	      if (!yd[0]) y = new Ctor(x);
	
	      return external ? finalise(y, pr, rm) : y;
	    }
	
	    // x and y are finite, non-zero numbers with the same sign.
	
	    // Calculate base 1e7 exponents.
	    k = mathfloor(x.e / LOG_BASE);
	    e = mathfloor(y.e / LOG_BASE);
	
	    xd = xd.slice();
	    i = k - e;
	
	    // If base 1e7 exponents differ...
	    if (i) {
	
	      if (i < 0) {
	        d = xd;
	        i = -i;
	        len = yd.length;
	      } else {
	        d = yd;
	        e = k;
	        len = xd.length;
	      }
	
	      // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.
	      k = Math.ceil(pr / LOG_BASE);
	      len = k > len ? k + 1 : len + 1;
	
	      if (i > len) {
	        i = len;
	        d.length = 1;
	      }
	
	      // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.
	      d.reverse();
	      for (; i--;) d.push(0);
	      d.reverse();
	    }
	
	    len = xd.length;
	    i = yd.length;
	
	    // If yd is longer than xd, swap xd and yd so xd points to the longer array.
	    if (len - i < 0) {
	      i = len;
	      d = yd;
	      yd = xd;
	      xd = d;
	    }
	
	    // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.
	    for (carry = 0; i;) {
	      carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
	      xd[i] %= BASE;
	    }
	
	    if (carry) {
	      xd.unshift(carry);
	      ++e;
	    }
	
	    // Remove trailing zeros.
	    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
	    for (len = xd.length; xd[--len] == 0;) xd.pop();
	
	    y.d = xd;
	    y.e = getBase10Exponent(xd, e);
	
	    return external ? finalise(y, pr, rm) : y;
	  };
	
	
	  /*
	   * Return the number of significant digits of the value of this Decimal.
	   *
	   * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
	   *
	   */
	  P.precision = P.sd = function (z) {
	    var k,
	      x = this;
	
	    if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);
	
	    if (x.d) {
	      k = getPrecision(x.d);
	      if (z && x.e + 1 > k) k = x.e + 1;
	    } else {
	      k = NaN;
	    }
	
	    return k;
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using
	   * rounding mode `rounding`.
	   *
	   */
	  P.round = function () {
	    var x = this,
	      Ctor = x.constructor;
	
	    return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the sine of the value in radians of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-1, 1]
	   *
	   * sin(x) = x - x^3/3! + x^5/5! - ...
	   *
	   * sin(0)         = 0
	   * sin(-0)        = -0
	   * sin(Infinity)  = NaN
	   * sin(-Infinity) = NaN
	   * sin(NaN)       = NaN
	   *
	   */
	  P.sine = P.sin = function () {
	    var pr, rm,
	      x = this,
	      Ctor = x.constructor;
	
	    if (!x.isFinite()) return new Ctor(NaN);
	    if (x.isZero()) return new Ctor(x);
	
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
	    Ctor.rounding = 1;
	
	    x = sine(Ctor, toLessThanHalfPi(Ctor, x));
	
	    Ctor.precision = pr;
	    Ctor.rounding = rm;
	
	    return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   *  sqrt(-n) =  N
	   *  sqrt(N)  =  N
	   *  sqrt(-I) =  N
	   *  sqrt(I)  =  I
	   *  sqrt(0)  =  0
	   *  sqrt(-0) = -0
	   *
	   */
	  P.squareRoot = P.sqrt = function () {
	    var m, n, sd, r, rep, t,
	      x = this,
	      d = x.d,
	      e = x.e,
	      s = x.s,
	      Ctor = x.constructor;
	
	    // Negative/NaN/Infinity/zero?
	    if (s !== 1 || !d || !d[0]) {
	      return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
	    }
	
	    external = false;
	
	    // Initial estimate.
	    s = Math.sqrt(+x);
	
	    // Math.sqrt underflow/overflow?
	    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
	    if (s == 0 || s == 1 / 0) {
	      n = digitsToString(d);
	
	      if ((n.length + e) % 2 == 0) n += '0';
	      s = Math.sqrt(n);
	      e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
	
	      if (s == 1 / 0) {
	        n = '1e' + e;
	      } else {
	        n = s.toExponential();
	        n = n.slice(0, n.indexOf('e') + 1) + e;
	      }
	
	      r = new Ctor(n);
	    } else {
	      r = new Ctor(s.toString());
	    }
	
	    sd = (e = Ctor.precision) + 3;
	
	    // Newton-Raphson iteration.
	    for (;;) {
	      t = r;
	      r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);
	
	      // TODO? Replace with for-loop and checkRoundingDigits.
	      if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
	        n = n.slice(sd - 3, sd + 1);
	
	        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or
	        // 4999, i.e. approaching a rounding boundary, continue the iteration.
	        if (n == '9999' || !rep && n == '4999') {
	
	          // On the first iteration only, check to see if rounding up gives the exact result as the
	          // nines may infinitely repeat.
	          if (!rep) {
	            finalise(t, e + 1, 0);
	
	            if (t.times(t).eq(x)) {
	              r = t;
	              break;
	            }
	          }
	
	          sd += 4;
	          rep = 1;
	        } else {
	
	          // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.
	          // If not, then there are further digits and m will be truthy.
	          if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
	
	            // Truncate to the first rounding digit.
	            finalise(r, e + 1, 1);
	            m = !r.times(r).eq(x);
	          }
	
	          break;
	        }
	      }
	    }
	
	    external = true;
	
	    return finalise(r, e, Ctor.rounding, m);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-Infinity, Infinity]
	   *
	   * tan(0)         = 0
	   * tan(-0)        = -0
	   * tan(Infinity)  = NaN
	   * tan(-Infinity) = NaN
	   * tan(NaN)       = NaN
	   *
	   */
	  P.tangent = P.tan = function () {
	    var pr, rm,
	      x = this,
	      Ctor = x.constructor;
	
	    if (!x.isFinite()) return new Ctor(NaN);
	    if (x.isZero()) return new Ctor(x);
	
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	    Ctor.precision = pr + 10;
	    Ctor.rounding = 1;
	
	    x = x.sin();
	    x.s = 1;
	    x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
	
	    Ctor.precision = pr;
	    Ctor.rounding = rm;
	
	    return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
	  };
	
	
	  /*
	   *  n * 0 = 0
	   *  n * N = N
	   *  n * I = I
	   *  0 * n = 0
	   *  0 * 0 = 0
	   *  0 * N = N
	   *  0 * I = N
	   *  N * n = N
	   *  N * 0 = N
	   *  N * N = N
	   *  N * I = N
	   *  I * n = I
	   *  I * 0 = N
	   *  I * N = N
	   *  I * I = I
	   *
	   * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   */
	  P.times = P.mul = function (y) {
	    var carry, e, i, k, r, rL, t, xdL, ydL,
	      x = this,
	      Ctor = x.constructor,
	      xd = x.d,
	      yd = (y = new Ctor(y)).d;
	
	    y.s *= x.s;
	
	     // If either is NaN, ±Infinity or ±0...
	    if (!xd || !xd[0] || !yd || !yd[0]) {
	
	      return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd
	
	        // Return NaN if either is NaN.
	        // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.
	        ? NaN
	
	        // Return ±Infinity if either is ±Infinity.
	        // Return ±0 if either is ±0.
	        : !xd || !yd ? y.s / 0 : y.s * 0);
	    }
	
	    e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
	    xdL = xd.length;
	    ydL = yd.length;
	
	    // Ensure xd points to the longer array.
	    if (xdL < ydL) {
	      r = xd;
	      xd = yd;
	      yd = r;
	      rL = xdL;
	      xdL = ydL;
	      ydL = rL;
	    }
	
	    // Initialise the result array with zeros.
	    r = [];
	    rL = xdL + ydL;
	    for (i = rL; i--;) r.push(0);
	
	    // Multiply!
	    for (i = ydL; --i >= 0;) {
	      carry = 0;
	      for (k = xdL + i; k > i;) {
	        t = r[k] + yd[i] * xd[k - i - 1] + carry;
	        r[k--] = t % BASE | 0;
	        carry = t / BASE | 0;
	      }
	
	      r[k] = (r[k] + carry) % BASE | 0;
	    }
	
	    // Remove trailing zeros.
	    for (; !r[--rL];) r.pop();
	
	    if (carry) ++e;
	    else r.shift();
	
	    y.d = r;
	    y.e = getBase10Exponent(r, e);
	
	    return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
	  };
	
	
	  /*
	   * Return a string representing the value of this Decimal in base 2, round to `sd` significant
	   * digits using rounding mode `rm`.
	   *
	   * If the optional `sd` argument is present then return binary exponential notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */
	  P.toBinary = function (sd, rm) {
	    return toStringBinary(this, 2, sd, rm);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`
	   * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.
	   *
	   * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */
	  P.toDecimalPlaces = P.toDP = function (dp, rm) {
	    var x = this,
	      Ctor = x.constructor;
	
	    x = new Ctor(x);
	    if (dp === void 0) return x;
	
	    checkInt32(dp, 0, MAX_DIGITS);
	
	    if (rm === void 0) rm = Ctor.rounding;
	    else checkInt32(rm, 0, 8);
	
	    return finalise(x, dp + x.e + 1, rm);
	  };
	
	
	  /*
	   * Return a string representing the value of this Decimal in exponential notation rounded to
	   * `dp` fixed decimal places using rounding mode `rounding`.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */
	  P.toExponential = function (dp, rm) {
	    var str,
	      x = this,
	      Ctor = x.constructor;
	
	    if (dp === void 0) {
	      str = finiteToString(x, true);
	    } else {
	      checkInt32(dp, 0, MAX_DIGITS);
	
	      if (rm === void 0) rm = Ctor.rounding;
	      else checkInt32(rm, 0, 8);
	
	      x = finalise(new Ctor(x), dp + 1, rm);
	      str = finiteToString(x, true, dp + 1);
	    }
	
	    return x.isNeg() && !x.isZero() ? '-' + str : str;
	  };
	
	
	  /*
	   * Return a string representing the value of this Decimal in normal (fixed-point) notation to
	   * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is
	   * omitted.
	   *
	   * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.
	   *
	   * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.
	   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
	   * (-0).toFixed(3) is '0.000'.
	   * (-0.5).toFixed(0) is '-0'.
	   *
	   */
	  P.toFixed = function (dp, rm) {
	    var str, y,
	      x = this,
	      Ctor = x.constructor;
	
	    if (dp === void 0) {
	      str = finiteToString(x);
	    } else {
	      checkInt32(dp, 0, MAX_DIGITS);
	
	      if (rm === void 0) rm = Ctor.rounding;
	      else checkInt32(rm, 0, 8);
	
	      y = finalise(new Ctor(x), dp + x.e + 1, rm);
	      str = finiteToString(y, false, dp + y.e + 1);
	    }
	
	    // To determine whether to add the minus sign look at the value before it was rounded,
	    // i.e. look at `x` rather than `y`.
	    return x.isNeg() && !x.isZero() ? '-' + str : str;
	  };
	
	
	  /*
	   * Return an array representing the value of this Decimal as a simple fraction with an integer
	   * numerator and an integer denominator.
	   *
	   * The denominator will be a positive non-zero value less than or equal to the specified maximum
	   * denominator. If a maximum denominator is not specified, the denominator will be the lowest
	   * value necessary to represent the number exactly.
	   *
	   * [maxD] {number|string|Decimal} Maximum denominator. Integer >= 1 and < Infinity.
	   *
	   */
	  P.toFraction = function (maxD) {
	    var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,
	      x = this,
	      xd = x.d,
	      Ctor = x.constructor;
	
	    if (!xd) return new Ctor(x);
	
	    n1 = d0 = new Ctor(1);
	    d1 = n0 = new Ctor(0);
	
	    d = new Ctor(d1);
	    e = d.e = getPrecision(xd) - x.e - 1;
	    k = e % LOG_BASE;
	    d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
	
	    if (maxD == null) {
	
	      // d is 10**e, the minimum max-denominator needed.
	      maxD = e > 0 ? d : n1;
	    } else {
	      n = new Ctor(maxD);
	      if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);
	      maxD = n.gt(d) ? (e > 0 ? d : n1) : n;
	    }
	
	    external = false;
	    n = new Ctor(digitsToString(xd));
	    pr = Ctor.precision;
	    Ctor.precision = e = xd.length * LOG_BASE * 2;
	
	    for (;;)  {
	      q = divide(n, d, 0, 1, 1);
	      d2 = d0.plus(q.times(d1));
	      if (d2.cmp(maxD) == 1) break;
	      d0 = d1;
	      d1 = d2;
	      d2 = n1;
	      n1 = n0.plus(q.times(d2));
	      n0 = d2;
	      d2 = d;
	      d = n.minus(q.times(d2));
	      n = d2;
	    }
	
	    d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
	    n0 = n0.plus(d2.times(n1));
	    d0 = d0.plus(d2.times(d1));
	    n0.s = n1.s = x.s;
	
	    // Determine which fraction is closer to x, n0/d0 or n1/d1?
	    r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1
	        ? [n1, d1] : [n0, d0];
	
	    Ctor.precision = pr;
	    external = true;
	
	    return r;
	  };
	
	
	  /*
	   * Return a string representing the value of this Decimal in base 16, round to `sd` significant
	   * digits using rounding mode `rm`.
	   *
	   * If the optional `sd` argument is present then return binary exponential notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */
	  P.toHexadecimal = P.toHex = function (sd, rm) {
	    return toStringBinary(this, 16, sd, rm);
	  };
	
	
	
	  /*
	   * Returns a new Decimal whose value is the nearest multiple of the magnitude of `y` to the value
	   * of this Decimal.
	   *
	   * If the value of this Decimal is equidistant from two multiples of `y`, the rounding mode `rm`,
	   * or `Decimal.rounding` if `rm` is omitted, determines the direction of the nearest multiple.
	   *
	   * In the context of this method, rounding mode 4 (ROUND_HALF_UP) is the same as rounding mode 0
	   * (ROUND_UP), and so on.
	   *
	   * The return value will always have the same sign as this Decimal, unless either this Decimal
	   * or `y` is NaN, in which case the return value will be also be NaN.
	   *
	   * The return value is not affected by the value of `precision`.
	   *
	   * y {number|string|Decimal} The magnitude to round to a multiple of.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * 'toNearest() rounding mode not an integer: {rm}'
	   * 'toNearest() rounding mode out of range: {rm}'
	   *
	   */
	  P.toNearest = function (y, rm) {
	    var x = this,
	      Ctor = x.constructor;
	
	    x = new Ctor(x);
	
	    if (y == null) {
	
	      // If x is not finite, return x.
	      if (!x.d) return x;
	
	      y = new Ctor(1);
	      rm = Ctor.rounding;
	    } else {
	      y = new Ctor(y);
	      if (rm !== void 0) checkInt32(rm, 0, 8);
	
	      // If x is not finite, return x if y is not NaN, else NaN.
	      if (!x.d) return y.s ? x : y;
	
	      // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.
	      if (!y.d) {
	        if (y.s) y.s = x.s;
	        return y;
	      }
	    }
	
	    // If y is not zero, calculate the nearest multiple of y to x.
	    if (y.d[0]) {
	      external = false;
	      if (rm < 4) rm = [4, 5, 7, 8][rm];
	      x = divide(x, y, 0, rm, 1).times(y);
	      external = true;
	      finalise(x);
	
	    // If y is zero, return zero with the sign of x.
	    } else {
	      y.s = x.s;
	      x = y;
	    }
	
	    return x;
	  };
	
	
	  /*
	   * Return the value of this Decimal converted to a number primitive.
	   * Zero keeps its sign.
	   *
	   */
	  P.toNumber = function () {
	    return +this;
	  };
	
	
	  /*
	   * Return a string representing the value of this Decimal in base 8, round to `sd` significant
	   * digits using rounding mode `rm`.
	   *
	   * If the optional `sd` argument is present then return binary exponential notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */
	  P.toOctal = function (sd, rm) {
	    return toStringBinary(this, 8, sd, rm);
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded
	   * to `precision` significant digits using rounding mode `rounding`.
	   *
	   * ECMAScript compliant.
	   *
	   *   pow(x, NaN)                           = NaN
	   *   pow(x, ±0)                            = 1
	
	   *   pow(NaN, non-zero)                    = NaN
	   *   pow(abs(x) > 1, +Infinity)            = +Infinity
	   *   pow(abs(x) > 1, -Infinity)            = +0
	   *   pow(abs(x) == 1, ±Infinity)           = NaN
	   *   pow(abs(x) < 1, +Infinity)            = +0
	   *   pow(abs(x) < 1, -Infinity)            = +Infinity
	   *   pow(+Infinity, y > 0)                 = +Infinity
	   *   pow(+Infinity, y < 0)                 = +0
	   *   pow(-Infinity, odd integer > 0)       = -Infinity
	   *   pow(-Infinity, even integer > 0)      = +Infinity
	   *   pow(-Infinity, odd integer < 0)       = -0
	   *   pow(-Infinity, even integer < 0)      = +0
	   *   pow(+0, y > 0)                        = +0
	   *   pow(+0, y < 0)                        = +Infinity
	   *   pow(-0, odd integer > 0)              = -0
	   *   pow(-0, even integer > 0)             = +0
	   *   pow(-0, odd integer < 0)              = -Infinity
	   *   pow(-0, even integer < 0)             = +Infinity
	   *   pow(finite x < 0, finite non-integer) = NaN
	   *
	   * For non-integer or very large exponents pow(x, y) is calculated using
	   *
	   *   x^y = exp(y*ln(x))
	   *
	   * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the
	   * probability of an incorrectly rounded result
	   * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14
	   * i.e. 1 in 250,000,000,000,000
	   *
	   * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).
	   *
	   * y {number|string|Decimal} The power to which to raise this Decimal.
	   *
	   */
	  P.toPower = P.pow = function (y) {
	    var e, k, pr, r, rm, sign, yIsInt,
	      x = this,
	      Ctor = x.constructor,
	      yn = +(y = new Ctor(y));
	
	    // Either ±Infinity, NaN or ±0?
	    if (!x.d || !y.d || !x.d[0] || !y.d[0]) return  new Ctor(mathpow(+x, yn));
	
	    x = new Ctor(x);
	
	    if (x.eq(1)) return x;
	
	    pr = Ctor.precision;
	    rm = Ctor.rounding;
	
	    if (y.eq(1)) return finalise(x, pr, rm);
	
	    e = mathfloor(y.e / LOG_BASE);
	    k = y.d.length - 1;
	    yIsInt = e >= k;
	    sign = x.s;
	
	    if (!yIsInt) {
	      if (sign < 0) return new Ctor(NaN);
	
	    // If y is a small integer use the 'exponentiation by squaring' algorithm.
	    } else if ((k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
	      r = intPow(Ctor, x, k, pr);
	      return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
	    }
	
	    // Result is negative if x is negative and the last digit of integer y is odd.
	    sign = sign < 0 && y.d[Math.max(e, k)] & 1 ? -1 : 1;
	
	    // Estimate result exponent.
	    // x^y = 10^e,  where e = y * log10(x)
	    // log10(x) = log10(x_significand) + x_exponent
	    // log10(x_significand) = ln(x_significand) / ln(10)
	    k = mathpow(+x, yn);
	    e = k == 0 || !isFinite(k)
	      ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))
	      : new Ctor(k + '').e;
	
	    // Estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.
	
	    // Overflow/underflow?
	    if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? sign / 0 : 0);
	
	    external = false;
	    Ctor.rounding = x.s = 1;
	
	    // Estimate the extra guard digits needed to ensure five correct rounding digits from
	    // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):
	    // new Decimal(2.32456).pow('2087987436534566.46411')
	    // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815
	    k = Math.min(12, (e + '').length);
	
	    // r = x^y = exp(y*ln(x))
	    r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);
	
	    // Truncate to the required precision plus five rounding digits.
	    r = finalise(r, pr + 5, 1);
	
	    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate
	    // the result.
	    if (checkRoundingDigits(r.d, pr, rm)) {
	      e = pr + 10;
	
	      // Truncate to the increased precision plus five rounding digits.
	      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);
	
	      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).
	      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
	        r = finalise(r, pr + 1, 0);
	      }
	    }
	
	    r.s = sign;
	    external = true;
	    Ctor.rounding = rm;
	
	    return finalise(r, pr, rm);
	  };
	
	
	  /*
	   * Return a string representing the value of this Decimal rounded to `sd` significant digits
	   * using rounding mode `rounding`.
	   *
	   * Return exponential notation if `sd` is less than the number of digits necessary to represent
	   * the integer part of the value in normal notation.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   */
	  P.toPrecision = function (sd, rm) {
	    var str,
	      x = this,
	      Ctor = x.constructor;
	
	    if (sd === void 0) {
	      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
	    } else {
	      checkInt32(sd, 1, MAX_DIGITS);
	
	      if (rm === void 0) rm = Ctor.rounding;
	      else checkInt32(rm, 0, 8);
	
	      x = finalise(new Ctor(x), sd, rm);
	      str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
	    }
	
	    return x.isNeg() && !x.isZero() ? '-' + str : str;
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`
	   * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if
	   * omitted.
	   *
	   * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.
	   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
	   *
	   * 'toSD() digits out of range: {sd}'
	   * 'toSD() digits not an integer: {sd}'
	   * 'toSD() rounding mode not an integer: {rm}'
	   * 'toSD() rounding mode out of range: {rm}'
	   *
	   */
	  P.toSignificantDigits = P.toSD = function (sd, rm) {
	    var x = this,
	      Ctor = x.constructor;
	
	    if (sd === void 0) {
	      sd = Ctor.precision;
	      rm = Ctor.rounding;
	    } else {
	      checkInt32(sd, 1, MAX_DIGITS);
	
	      if (rm === void 0) rm = Ctor.rounding;
	      else checkInt32(rm, 0, 8);
	    }
	
	    return finalise(new Ctor(x), sd, rm);
	  };
	
	
	  /*
	   * Return a string representing the value of this Decimal.
	   *
	   * Return exponential notation if this Decimal has a positive exponent equal to or greater than
	   * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.
	   *
	   */
	  P.toString = function () {
	    var x = this,
	      Ctor = x.constructor,
	      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
	
	    return x.isNeg() && !x.isZero() ? '-' + str : str;
	  };
	
	
	  /*
	   * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.
	   *
	   */
	  P.truncated = P.trunc = function () {
	    return finalise(new this.constructor(this), this.e + 1, 1);
	  };
	
	
	  /*
	   * Return a string representing the value of this Decimal.
	   * Unlike `toString`, negative zero will include the minus sign.
	   *
	   */
	  P.valueOf = P.toJSON = function () {
	    var x = this,
	      Ctor = x.constructor,
	      str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
	
	    return x.isNeg() ? '-' + str : str;
	  };
	
	
	  /*
	  // Add aliases to match BigDecimal method names.
	  // P.add = P.plus;
	  P.subtract = P.minus;
	  P.multiply = P.times;
	  P.divide = P.div;
	  P.remainder = P.mod;
	  P.compareTo = P.cmp;
	  P.negate = P.neg;
	   */
	
	
	  // Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.
	
	
	  /*
	   *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,
	   *                           finiteToString, naturalExponential, naturalLogarithm
	   *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,
	   *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random
	   *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm
	   *  convertBase              toStringBinary, parseOther
	   *  cos                      P.cos
	   *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,
	   *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,
	   *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,
	   *                           taylorSeries, atan2, parseOther
	   *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,
	   *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,
	   *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,
	   *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,
	   *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,
	   *                           P.truncated, divide, getLn10, getPi, naturalExponential,
	   *                           naturalLogarithm, ceil, floor, round, trunc
	   *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,
	   *                           toStringBinary
	   *  getBase10Exponent        P.minus, P.plus, P.times, parseOther
	   *  getLn10                  P.logarithm, naturalLogarithm
	   *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2
	   *  getPrecision             P.precision, P.toFraction
	   *  getZeroString            digitsToString, finiteToString
	   *  intPow                   P.toPower, parseOther
	   *  isOdd                    toLessThanHalfPi
	   *  maxOrMin                 max, min
	   *  naturalExponential       P.naturalExponential, P.toPower
	   *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,
	   *                           P.toPower, naturalExponential
	   *  nonFiniteToString        finiteToString, toStringBinary
	   *  parseDecimal             Decimal
	   *  parseOther               Decimal
	   *  sin                      P.sin
	   *  taylorSeries             P.cosh, P.sinh, cos, sin
	   *  toLessThanHalfPi         P.cos, P.sin
	   *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal
	   *  truncate                 intPow
	   *
	   *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,
	   *                           naturalLogarithm, config, parseOther, random, Decimal
	   */
	
	
	  function digitsToString(d) {
	    var i, k, ws,
	      indexOfLastWord = d.length - 1,
	      str = '',
	      w = d[0];
	
	    if (indexOfLastWord > 0) {
	      str += w;
	      for (i = 1; i < indexOfLastWord; i++) {
	        ws = d[i] + '';
	        k = LOG_BASE - ws.length;
	        if (k) str += getZeroString(k);
	        str += ws;
	      }
	
	      w = d[i];
	      ws = w + '';
	      k = LOG_BASE - ws.length;
	      if (k) str += getZeroString(k);
	    } else if (w === 0) {
	      return '0';
	    }
	
	    // Remove trailing zeros of last w.
	    for (; w % 10 === 0;) w /= 10;
	
	    return str + w;
	  }
	
	
	  function checkInt32(i, min, max) {
	    if (i !== ~~i || i < min || i > max) {
	      throw Error(invalidArgument + i);
	    }
	  }
	
	
	  /*
	   * Check 5 rounding digits if `repeating` is null, 4 otherwise.
	   * `repeating == null` if caller is `log` or `pow`,
	   * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.
	   */
	  function checkRoundingDigits(d, i, rm, repeating) {
	    var di, k, r, rd;
	
	    // Get the length of the first word of the array d.
	    for (k = d[0]; k >= 10; k /= 10) --i;
	
	    // Is the rounding digit in the first word of d?
	    if (--i < 0) {
	      i += LOG_BASE;
	      di = 0;
	    } else {
	      di = Math.ceil((i + 1) / LOG_BASE);
	      i %= LOG_BASE;
	    }
	
	    // i is the index (0 - 6) of the rounding digit.
	    // E.g. if within the word 3487563 the first rounding digit is 5,
	    // then i = 4, k = 1000, rd = 3487563 % 1000 = 563
	    k = mathpow(10, LOG_BASE - i);
	    rd = d[di] % k | 0;
	
	    if (repeating == null) {
	      if (i < 3) {
	        if (i == 0) rd = rd / 100 | 0;
	        else if (i == 1) rd = rd / 10 | 0;
	        r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;
	      } else {
	        r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&
	          (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||
	            (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
	      }
	    } else {
	      if (i < 4) {
	        if (i == 0) rd = rd / 1000 | 0;
	        else if (i == 1) rd = rd / 100 | 0;
	        else if (i == 2) rd = rd / 10 | 0;
	        r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
	      } else {
	        r = ((repeating || rm < 4) && rd + 1 == k ||
	        (!repeating && rm > 3) && rd + 1 == k / 2) &&
	          (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;
	      }
	    }
	
	    return r;
	  }
	
	
	  // Convert string of `baseIn` to an array of numbers of `baseOut`.
	  // Eg. convertBase('255', 10, 16) returns [15, 15].
	  // Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
	  function convertBase(str, baseIn, baseOut) {
	    var j,
	      arr = [0],
	      arrL,
	      i = 0,
	      strL = str.length;
	
	    for (; i < strL;) {
	      for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;
	      arr[0] += NUMERALS.indexOf(str.charAt(i++));
	      for (j = 0; j < arr.length; j++) {
	        if (arr[j] > baseOut - 1) {
	          if (arr[j + 1] === void 0) arr[j + 1] = 0;
	          arr[j + 1] += arr[j] / baseOut | 0;
	          arr[j] %= baseOut;
	        }
	      }
	    }
	
	    return arr.reverse();
	  }
	
	
	  /*
	   * cos(x) = 1 - x^2/2! + x^4/4! - ...
	   * |x| < pi/2
	   *
	   */
	  function cosine(Ctor, x) {
	    var k, y,
	      len = x.d.length;
	
	    // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1
	    // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1
	
	    // Estimate the optimum number of times to use the argument reduction.
	    if (len < 32) {
	      k = Math.ceil(len / 3);
	      y = Math.pow(4, -k).toString();
	    } else {
	      k = 16;
	      y = '2.3283064365386962890625e-10';
	    }
	
	    Ctor.precision += k;
	
	    x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));
	
	    // Reverse argument reduction
	    for (var i = k; i--;) {
	      var cos2x = x.times(x);
	      x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
	    }
	
	    Ctor.precision -= k;
	
	    return x;
	  }
	
	
	  /*
	   * Perform division in the specified base.
	   */
	  var divide = (function () {
	
	    // Assumes non-zero x and k, and hence non-zero result.
	    function multiplyInteger(x, k, base) {
	      var temp,
	        carry = 0,
	        i = x.length;
	
	      for (x = x.slice(); i--;) {
	        temp = x[i] * k + carry;
	        x[i] = temp % base | 0;
	        carry = temp / base | 0;
	      }
	
	      if (carry) x.unshift(carry);
	
	      return x;
	    }
	
	    function compare(a, b, aL, bL) {
	      var i, r;
	
	      if (aL != bL) {
	        r = aL > bL ? 1 : -1;
	      } else {
	        for (i = r = 0; i < aL; i++) {
	          if (a[i] != b[i]) {
	            r = a[i] > b[i] ? 1 : -1;
	            break;
	          }
	        }
	      }
	
	      return r;
	    }
	
	    function subtract(a, b, aL, base) {
	      var i = 0;
	
	      // Subtract b from a.
	      for (; aL--;) {
	        a[aL] -= i;
	        i = a[aL] < b[aL] ? 1 : 0;
	        a[aL] = i * base + a[aL] - b[aL];
	      }
	
	      // Remove leading zeros.
	      for (; !a[0] && a.length > 1;) a.shift();
	    }
	
	    return function (x, y, pr, rm, dp, base) {
	      var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,
	        yL, yz,
	        Ctor = x.constructor,
	        sign = x.s == y.s ? 1 : -1,
	        xd = x.d,
	        yd = y.d;
	
	      // Either NaN, Infinity or 0?
	      if (!xd || !xd[0] || !yd || !yd[0]) {
	
	        return new Ctor(// Return NaN if either NaN, or both Infinity or 0.
	          !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :
	
	          // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.
	          xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);
	      }
	
	      if (base) {
	        logBase = 1;
	        e = x.e - y.e;
	      } else {
	        base = BASE;
	        logBase = LOG_BASE;
	        e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
	      }
	
	      yL = yd.length;
	      xL = xd.length;
	      q = new Ctor(sign);
	      qd = q.d = [];
	
	      // Result exponent may be one less than e.
	      // The digit array of a Decimal from toStringBinary may have trailing zeros.
	      for (i = 0; yd[i] == (xd[i] || 0); i++);
	
	      if (yd[i] > (xd[i] || 0)) e--;
	
	      if (pr == null) {
	        sd = pr = Ctor.precision;
	        rm = Ctor.rounding;
	      } else if (dp) {
	        sd = pr + (x.e - y.e) + 1;
	      } else {
	        sd = pr;
	      }
	
	      if (sd < 0) {
	        qd.push(1);
	        more = true;
	      } else {
	
	        // Convert precision in number of base 10 digits to base 1e7 digits.
	        sd = sd / logBase + 2 | 0;
	        i = 0;
	
	        // divisor < 1e7
	        if (yL == 1) {
	          k = 0;
	          yd = yd[0];
	          sd++;
	
	          // k is the carry.
	          for (; (i < xL || k) && sd--; i++) {
	            t = k * base + (xd[i] || 0);
	            qd[i] = t / yd | 0;
	            k = t % yd | 0;
	          }
	
	          more = k || i < xL;
	
	        // divisor >= 1e7
	        } else {
	
	          // Normalise xd and yd so highest order digit of yd is >= base/2
	          k = base / (yd[0] + 1) | 0;
	
	          if (k > 1) {
	            yd = multiplyInteger(yd, k, base);
	            xd = multiplyInteger(xd, k, base);
	            yL = yd.length;
	            xL = xd.length;
	          }
	
	          xi = yL;
	          rem = xd.slice(0, yL);
	          remL = rem.length;
	
	          // Add zeros to make remainder as long as divisor.
	          for (; remL < yL;) rem[remL++] = 0;
	
	          yz = yd.slice();
	          yz.unshift(0);
	          yd0 = yd[0];
	
	          if (yd[1] >= base / 2) ++yd0;
	
	          do {
	            k = 0;
	
	            // Compare divisor and remainder.
	            cmp = compare(yd, rem, yL, remL);
	
	            // If divisor < remainder.
	            if (cmp < 0) {
	
	              // Calculate trial digit, k.
	              rem0 = rem[0];
	              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
	
	              // k will be how many times the divisor goes into the current remainder.
	              k = rem0 / yd0 | 0;
	
	              //  Algorithm:
	              //  1. product = divisor * trial digit (k)
	              //  2. if product > remainder: product -= divisor, k--
	              //  3. remainder -= product
	              //  4. if product was < remainder at 2:
	              //    5. compare new remainder and divisor
	              //    6. If remainder > divisor: remainder -= divisor, k++
	
	              if (k > 1) {
	                if (k >= base) k = base - 1;
	
	                // product = divisor * trial digit.
	                prod = multiplyInteger(yd, k, base);
	                prodL = prod.length;
	                remL = rem.length;
	
	                // Compare product and remainder.
	                cmp = compare(prod, rem, prodL, remL);
	
	                // product > remainder.
	                if (cmp == 1) {
	                  k--;
	
	                  // Subtract divisor from product.
	                  subtract(prod, yL < prodL ? yz : yd, prodL, base);
	                }
	              } else {
	
	                // cmp is -1.
	                // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1
	                // to avoid it. If k is 1 there is a need to compare yd and rem again below.
	                if (k == 0) cmp = k = 1;
	                prod = yd.slice();
	              }
	
	              prodL = prod.length;
	              if (prodL < remL) prod.unshift(0);
	
	              // Subtract product from remainder.
	              subtract(rem, prod, remL, base);
	
	              // If product was < previous remainder.
	              if (cmp == -1) {
	                remL = rem.length;
	
	                // Compare divisor and new remainder.
	                cmp = compare(yd, rem, yL, remL);
	
	                // If divisor < new remainder, subtract divisor from remainder.
	                if (cmp < 1) {
	                  k++;
	
	                  // Subtract divisor from remainder.
	                  subtract(rem, yL < remL ? yz : yd, remL, base);
	                }
	              }
	
	              remL = rem.length;
	            } else if (cmp === 0) {
	              k++;
	              rem = [0];
	            }    // if cmp === 1, k will be 0
	
	            // Add the next digit, k, to the result array.
	            qd[i++] = k;
	
	            // Update the remainder.
	            if (cmp && rem[0]) {
	              rem[remL++] = xd[xi] || 0;
	            } else {
	              rem = [xd[xi]];
	              remL = 1;
	            }
	
	          } while ((xi++ < xL || rem[0] !== void 0) && sd--);
	
	          more = rem[0] !== void 0;
	        }
	
	        // Leading zero?
	        if (!qd[0]) qd.shift();
	      }
	
	      // logBase is 1 when divide is being used for base conversion.
	      if (logBase == 1) {
	        q.e = e;
	        inexact = more;
	      } else {
	
	        // To calculate q.e, first get the number of digits of qd[0].
	        for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;
	        q.e = i + e * logBase - 1;
	
	        finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
	      }
	
	      return q;
	    };
	  })();
	
	
	  /*
	   * Round `x` to `sd` significant digits using rounding mode `rm`.
	   * Check for over/under-flow.
	   */
	   function finalise(x, sd, rm, isTruncated) {
	    var digits, i, j, k, rd, roundUp, w, xd, xdi,
	      Ctor = x.constructor;
	
	    // Don't round if sd is null or undefined.
	    out: if (sd != null) {
	      xd = x.d;
	
	      // Infinity/NaN.
	      if (!xd) return x;
	
	      // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.
	      // w: the word of xd containing rd, a base 1e7 number.
	      // xdi: the index of w within xd.
	      // digits: the number of digits of w.
	      // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if
	      // they had leading zeros)
	      // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).
	
	      // Get the length of the first word of the digits array xd.
	      for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;
	      i = sd - digits;
	
	      // Is the rounding digit in the first word of xd?
	      if (i < 0) {
	        i += LOG_BASE;
	        j = sd;
	        w = xd[xdi = 0];
	
	        // Get the rounding digit at index j of w.
	        rd = w / mathpow(10, digits - j - 1) % 10 | 0;
	      } else {
	        xdi = Math.ceil((i + 1) / LOG_BASE);
	        k = xd.length;
	        if (xdi >= k) {
	          if (isTruncated) {
	
	            // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.
	            for (; k++ <= xdi;) xd.push(0);
	            w = rd = 0;
	            digits = 1;
	            i %= LOG_BASE;
	            j = i - LOG_BASE + 1;
	          } else {
	            break out;
	          }
	        } else {
	          w = k = xd[xdi];
	
	          // Get the number of digits of w.
	          for (digits = 1; k >= 10; k /= 10) digits++;
	
	          // Get the index of rd within w.
	          i %= LOG_BASE;
	
	          // Get the index of rd within w, adjusted for leading zeros.
	          // The number of leading zeros of w is given by LOG_BASE - digits.
	          j = i - LOG_BASE + digits;
	
	          // Get the rounding digit at index j of w.
	          rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
	        }
	      }
	
	      // Are there any non-zero digits after the rounding digit?
	      isTruncated = isTruncated || sd < 0 ||
	        xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));
	
	      // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right
	      // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression
	      // will give 714.
	
	      roundUp = rm < 4
	        ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
	        : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&
	
	          // Check whether the digit to the left of the rounding digit is odd.
	          ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||
	            rm == (x.s < 0 ? 8 : 7));
	
	      if (sd < 1 || !xd[0]) {
	        xd.length = 0;
	        if (roundUp) {
	
	          // Convert sd to decimal places.
	          sd -= x.e + 1;
	
	          // 1, 0.1, 0.01, 0.001, 0.0001 etc.
	          xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
	          x.e = -sd || 0;
	        } else {
	
	          // Zero.
	          xd[0] = x.e = 0;
	        }
	
	        return x;
	      }
	
	      // Remove excess digits.
	      if (i == 0) {
	        xd.length = xdi;
	        k = 1;
	        xdi--;
	      } else {
	        xd.length = xdi + 1;
	        k = mathpow(10, LOG_BASE - i);
	
	        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
	        // j > 0 means i > number of leading zeros of w.
	        xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
	      }
	
	      if (roundUp) {
	        for (;;) {
	
	          // Is the digit to be rounded up in the first word of xd?
	          if (xdi == 0) {
	
	            // i will be the length of xd[0] before k is added.
	            for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;
	            j = xd[0] += k;
	            for (k = 1; j >= 10; j /= 10) k++;
	
	            // if i != k the length has increased.
	            if (i != k) {
	              x.e++;
	              if (xd[0] == BASE) xd[0] = 1;
	            }
	
	            break;
	          } else {
	            xd[xdi] += k;
	            if (xd[xdi] != BASE) break;
	            xd[xdi--] = 0;
	            k = 1;
	          }
	        }
	      }
	
	      // Remove trailing zeros.
	      for (i = xd.length; xd[--i] === 0;) xd.pop();
	    }
	
	    if (external) {
	
	      // Overflow?
	      if (x.e > Ctor.maxE) {
	
	        // Infinity.
	        x.d = null;
	        x.e = NaN;
	
	      // Underflow?
	      } else if (x.e < Ctor.minE) {
	
	        // Zero.
	        x.e = 0;
	        x.d = [0];
	        // Ctor.underflow = true;
	      } // else Ctor.underflow = false;
	    }
	
	    return x;
	  }
	
	
	  function finiteToString(x, isExp, sd) {
	    if (!x.isFinite()) return nonFiniteToString(x);
	    var k,
	      e = x.e,
	      str = digitsToString(x.d),
	      len = str.length;
	
	    if (isExp) {
	      if (sd && (k = sd - len) > 0) {
	        str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);
	      } else if (len > 1) {
	        str = str.charAt(0) + '.' + str.slice(1);
	      }
	
	      str = str + (x.e < 0 ? 'e' : 'e+') + x.e;
	    } else if (e < 0) {
	      str = '0.' + getZeroString(-e - 1) + str;
	      if (sd && (k = sd - len) > 0) str += getZeroString(k);
	    } else if (e >= len) {
	      str += getZeroString(e + 1 - len);
	      if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);
	    } else {
	      if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);
	      if (sd && (k = sd - len) > 0) {
	        if (e + 1 === len) str += '.';
	        str += getZeroString(k);
	      }
	    }
	
	    return str;
	  }
	
	
	  // Calculate the base 10 exponent from the base 1e7 exponent.
	  function getBase10Exponent(digits, e) {
	    var w = digits[0];
	
	    // Add the number of digits of the first word of the digits array.
	    for ( e *= LOG_BASE; w >= 10; w /= 10) e++;
	    return e;
	  }
	
	
	  function getLn10(Ctor, sd, pr) {
	    if (sd > LN10_PRECISION) {
	
	      // Reset global state in case the exception is caught.
	      external = true;
	      if (pr) Ctor.precision = pr;
	      throw Error(precisionLimitExceeded);
	    }
	    return finalise(new Ctor(LN10), sd, 1, true);
	  }
	
	
	  function getPi(Ctor, sd, rm) {
	    if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);
	    return finalise(new Ctor(PI), sd, rm, true);
	  }
	
	
	  function getPrecision(digits) {
	    var w = digits.length - 1,
	      len = w * LOG_BASE + 1;
	
	    w = digits[w];
	
	    // If non-zero...
	    if (w) {
	
	      // Subtract the number of trailing zeros of the last word.
	      for (; w % 10 == 0; w /= 10) len--;
	
	      // Add the number of digits of the first word.
	      for (w = digits[0]; w >= 10; w /= 10) len++;
	    }
	
	    return len;
	  }
	
	
	  function getZeroString(k) {
	    var zs = '';
	    for (; k--;) zs += '0';
	    return zs;
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an
	   * integer of type number.
	   *
	   * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.
	   *
	   */
	  function intPow(Ctor, x, n, pr) {
	    var isTruncated,
	      r = new Ctor(1),
	
	      // Max n of 9007199254740991 takes 53 loop iterations.
	      // Maximum digits array length; leaves [28, 34] guard digits.
	      k = Math.ceil(pr / LOG_BASE + 4);
	
	    external = false;
	
	    for (;;) {
	      if (n % 2) {
	        r = r.times(x);
	        if (truncate(r.d, k)) isTruncated = true;
	      }
	
	      n = mathfloor(n / 2);
	      if (n === 0) {
	
	        // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.
	        n = r.d.length - 1;
	        if (isTruncated && r.d[n] === 0) ++r.d[n];
	        break;
	      }
	
	      x = x.times(x);
	      truncate(x.d, k);
	    }
	
	    external = true;
	
	    return r;
	  }
	
	
	  function isOdd(n) {
	    return n.d[n.d.length - 1] & 1;
	  }
	
	
	  /*
	   * Handle `max` and `min`. `ltgt` is 'lt' or 'gt'.
	   */
	  function maxOrMin(Ctor, args, ltgt) {
	    var y,
	      x = new Ctor(args[0]),
	      i = 0;
	
	    for (; ++i < args.length;) {
	      y = new Ctor(args[i]);
	      if (!y.s) {
	        x = y;
	        break;
	      } else if (x[ltgt](y)) {
	        x = y;
	      }
	    }
	
	    return x;
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant
	   * digits.
	   *
	   * Taylor/Maclaurin series.
	   *
	   * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...
	   *
	   * Argument reduction:
	   *   Repeat x = x / 32, k += 5, until |x| < 0.1
	   *   exp(x) = exp(x / 2^k)^(2^k)
	   *
	   * Previously, the argument was initially reduced by
	   * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)
	   * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was
	   * found to be slower than just dividing repeatedly by 32 as above.
	   *
	   * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000
	   * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000
	   * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)
	   *
	   *  exp(Infinity)  = Infinity
	   *  exp(-Infinity) = 0
	   *  exp(NaN)       = NaN
	   *  exp(±0)        = 1
	   *
	   *  exp(x) is non-terminating for any finite, non-zero x.
	   *
	   *  The result will always be correctly rounded.
	   *
	   */
	  function naturalExponential(x, sd) {
	    var denominator, guard, j, pow, sum, t, wpr,
	      rep = 0,
	      i = 0,
	      k = 0,
	      Ctor = x.constructor,
	      rm = Ctor.rounding,
	      pr = Ctor.precision;
	
	    // 0/NaN/Infinity?
	    if (!x.d || !x.d[0] || x.e > 17) {
	
	      return new Ctor(x.d
	        ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0
	        : x.s ? x.s < 0 ? 0 : x : 0 / 0);
	    }
	
	    if (sd == null) {
	      external = false;
	      wpr = pr;
	    } else {
	      wpr = sd;
	    }
	
	    t = new Ctor(0.03125);
	
	    // while abs(x) >= 0.1
	    while (x.e > -2) {
	
	      // x = x / 2^5
	      x = x.times(t);
	      k += 5;
	    }
	
	    // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision
	    // necessary to ensure the first 4 rounding digits are correct.
	    guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
	    wpr += guard;
	    denominator = pow = sum = new Ctor(1);
	    Ctor.precision = wpr;
	
	    for (;;) {
	      pow = finalise(pow.times(x), wpr, 1);
	      denominator = denominator.times(++i);
	      t = sum.plus(divide(pow, denominator, wpr, 1));
	
	      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
	        j = k;
	        while (j--) sum = finalise(sum.times(sum), wpr, 1);
	
	        // Check to see if the first 4 rounding digits are [49]999.
	        // If so, repeat the summation with a higher precision, otherwise
	        // e.g. with precision: 18, rounding: 1
	        // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)
	        // `wpr - guard` is the index of first rounding digit.
	        if (sd == null) {
	
	          if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
	            Ctor.precision = wpr += 10;
	            denominator = pow = t = new Ctor(1);
	            i = 0;
	            rep++;
	          } else {
	            return finalise(sum, Ctor.precision = pr, rm, external = true);
	          }
	        } else {
	          Ctor.precision = pr;
	          return sum;
	        }
	      }
	
	      sum = t;
	    }
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant
	   * digits.
	   *
	   *  ln(-n)        = NaN
	   *  ln(0)         = -Infinity
	   *  ln(-0)        = -Infinity
	   *  ln(1)         = 0
	   *  ln(Infinity)  = Infinity
	   *  ln(-Infinity) = NaN
	   *  ln(NaN)       = NaN
	   *
	   *  ln(n) (n != 1) is non-terminating.
	   *
	   */
	  function naturalLogarithm(y, sd) {
	    var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,
	      n = 1,
	      guard = 10,
	      x = y,
	      xd = x.d,
	      Ctor = x.constructor,
	      rm = Ctor.rounding,
	      pr = Ctor.precision;
	
	    // Is x negative or Infinity, NaN, 0 or 1?
	    if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
	      return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
	    }
	
	    if (sd == null) {
	      external = false;
	      wpr = pr;
	    } else {
	      wpr = sd;
	    }
	
	    Ctor.precision = wpr += guard;
	    c = digitsToString(xd);
	    c0 = c.charAt(0);
	
	    if (Math.abs(e = x.e) < 1.5e15) {
	
	      // Argument reduction.
	      // The series converges faster the closer the argument is to 1, so using
	      // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b
	      // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,
	      // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can
	      // later be divided by this number, then separate out the power of 10 using
	      // ln(a*10^b) = ln(a) + b*ln(10).
	
	      // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).
	      //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {
	      // max n is 6 (gives 0.7 - 1.3)
	      while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
	        x = x.times(y);
	        c = digitsToString(x.d);
	        c0 = c.charAt(0);
	        n++;
	      }
	
	      e = x.e;
	
	      if (c0 > 1) {
	        x = new Ctor('0.' + c);
	        e++;
	      } else {
	        x = new Ctor(c0 + '.' + c.slice(1));
	      }
	    } else {
	
	      // The argument reduction method above may result in overflow if the argument y is a massive
	      // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this
	      // function using ln(x*10^e) = ln(x) + e*ln(10).
	      t = getLn10(Ctor, wpr + 2, pr).times(e + '');
	      x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);
	      Ctor.precision = pr;
	
	      return sd == null ? finalise(x, pr, rm, external = true) : x;
	    }
	
	    // x1 is x reduced to a value near 1.
	    x1 = x;
	
	    // Taylor series.
	    // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)
	    // where x = (y - 1)/(y + 1)    (|x| < 1)
	    sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
	    x2 = finalise(x.times(x), wpr, 1);
	    denominator = 3;
	
	    for (;;) {
	      numerator = finalise(numerator.times(x2), wpr, 1);
	      t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));
	
	      if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
	        sum = sum.times(2);
	
	        // Reverse the argument reduction. Check that e is not 0 because, besides preventing an
	        // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.
	        if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));
	        sum = divide(sum, new Ctor(n), wpr, 1);
	
	        // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has
	        // been repeated previously) and the first 4 rounding digits 9999?
	        // If so, restart the summation with a higher precision, otherwise
	        // e.g. with precision: 12, rounding: 1
	        // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.
	        // `wpr - guard` is the index of first rounding digit.
	        if (sd == null) {
	          if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {
	            Ctor.precision = wpr += guard;
	            t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
	            x2 = finalise(x.times(x), wpr, 1);
	            denominator = rep = 1;
	          } else {
	            return finalise(sum, Ctor.precision = pr, rm, external = true);
	          }
	        } else {
	          Ctor.precision = pr;
	          return sum;
	        }
	      }
	
	      sum = t;
	      denominator += 2;
	    }
	  }
	
	
	  // ±Infinity, NaN.
	  function nonFiniteToString(x) {
	    // Unsigned.
	    return String(x.s * x.s / 0);
	  }
	
	
	  /*
	   * Parse the value of a new Decimal `x` from string `str`.
	   */
	  function parseDecimal(x, str) {
	    var e, i, len;
	
	    // Decimal point?
	    if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
	
	    // Exponential form?
	    if ((i = str.search(/e/i)) > 0) {
	
	      // Determine exponent.
	      if (e < 0) e = i;
	      e += +str.slice(i + 1);
	      str = str.substring(0, i);
	    } else if (e < 0) {
	
	      // Integer.
	      e = str.length;
	    }
	
	    // Determine leading zeros.
	    for (i = 0; str.charCodeAt(i) === 48; i++);
	
	    // Determine trailing zeros.
	    for (len = str.length; str.charCodeAt(len - 1) === 48; --len);
	    str = str.slice(i, len);
	
	    if (str) {
	      len -= i;
	      x.e = e = e - i - 1;
	      x.d = [];
	
	      // Transform base
	
	      // e is the base 10 exponent.
	      // i is where to slice str to get the first word of the digits array.
	      i = (e + 1) % LOG_BASE;
	      if (e < 0) i += LOG_BASE;
	
	      if (i < len) {
	        if (i) x.d.push(+str.slice(0, i));
	        for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));
	        str = str.slice(i);
	        i = LOG_BASE - str.length;
	      } else {
	        i -= len;
	      }
	
	      for (; i--;) str += '0';
	      x.d.push(+str);
	
	      if (external) {
	
	        // Overflow?
	        if (x.e > x.constructor.maxE) {
	
	          // Infinity.
	          x.d = null;
	          x.e = NaN;
	
	        // Underflow?
	        } else if (x.e < x.constructor.minE) {
	
	          // Zero.
	          x.e = 0;
	          x.d = [0];
	          // x.constructor.underflow = true;
	        } // else x.constructor.underflow = false;
	      }
	    } else {
	
	      // Zero.
	      x.e = 0;
	      x.d = [0];
	    }
	
	    return x;
	  }
	
	
	  /*
	   * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.
	   */
	  function parseOther(x, str) {
	    var base, Ctor, divisor, i, isFloat, len, p, xd, xe;
	
	    if (str === 'Infinity' || str === 'NaN') {
	      if (!+str) x.s = NaN;
	      x.e = NaN;
	      x.d = null;
	      return x;
	    }
	
	    if (isHex.test(str))  {
	      base = 16;
	      str = str.toLowerCase();
	    } else if (isBinary.test(str))  {
	      base = 2;
	    } else if (isOctal.test(str))  {
	      base = 8;
	    } else {
	      throw Error(invalidArgument + str);
	    }
	
	    // Is there a binary exponent part?
	    i = str.search(/p/i);
	
	    if (i > 0) {
	      p = +str.slice(i + 1);
	      str = str.substring(2, i);
	    } else {
	      str = str.slice(2);
	    }
	
	    // Convert `str` as an integer then divide the result by `base` raised to a power such that the
	    // fraction part will be restored.
	    i = str.indexOf('.');
	    isFloat = i >= 0;
	    Ctor = x.constructor;
	
	    if (isFloat) {
	      str = str.replace('.', '');
	      len = str.length;
	      i = len - i;
	
	      // log[10](16) = 1.2041... , log[10](88) = 1.9444....
	      divisor = intPow(Ctor, new Ctor(base), i, i * 2);
	    }
	
	    xd = convertBase(str, base, BASE);
	    xe = xd.length - 1;
	
	    // Remove trailing zeros.
	    for (i = xe; xd[i] === 0; --i) xd.pop();
	    if (i < 0) return new Ctor(x.s * 0);
	    x.e = getBase10Exponent(xd, xe);
	    x.d = xd;
	    external = false;
	
	    // At what precision to perform the division to ensure exact conversion?
	    // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)
	    // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412
	    // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.
	    // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount
	    // Therefore using 4 * the number of digits of str will always be enough.
	    if (isFloat) x = divide(x, divisor, len * 4);
	
	    // Multiply by the binary exponent part if present.
	    if (p) x = x.times(Math.abs(p) < 54 ? Math.pow(2, p) : Decimal.pow(2, p));
	    external = true;
	
	    return x;
	  }
	
	
	  /*
	   * sin(x) = x - x^3/3! + x^5/5! - ...
	   * |x| < pi/2
	   *
	   */
	  function sine(Ctor, x) {
	    var k,
	      len = x.d.length;
	
	    if (len < 3) return taylorSeries(Ctor, 2, x, x);
	
	    // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)
	    // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)
	    // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))
	
	    // Estimate the optimum number of times to use the argument reduction.
	    k = 1.4 * Math.sqrt(len);
	    k = k > 16 ? 16 : k | 0;
	
	    // Max k before Math.pow precision loss is 22
	    x = x.times(Math.pow(5, -k));
	    x = taylorSeries(Ctor, 2, x, x);
	
	    // Reverse argument reduction
	    var sin2_x,
	      d5 = new Ctor(5),
	      d16 = new Ctor(16),
	      d20 = new Ctor(20);
	    for (; k--;) {
	      sin2_x = x.times(x);
	      x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
	    }
	
	    return x;
	  }
	
	
	  // Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.
	  function taylorSeries(Ctor, n, x, y, isHyperbolic) {
	    var j, t, u, x2,
	      i = 1,
	      pr = Ctor.precision,
	      k = Math.ceil(pr / LOG_BASE);
	
	    external = false;
	    x2 = x.times(x);
	    u = new Ctor(y);
	
	    for (;;) {
	      t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
	      u = isHyperbolic ? y.plus(t) : y.minus(t);
	      y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
	      t = u.plus(y);
	
	      if (t.d[k] !== void 0) {
	        for (j = k; t.d[j] === u.d[j] && j--;);
	        if (j == -1) break;
	      }
	
	      j = u;
	      u = y;
	      y = t;
	      t = j;
	      i++;
	    }
	
	    external = true;
	    t.d.length = k + 1;
	
	    return t;
	  }
	
	
	  // Return the absolute value of `x` reduced to less than or equal to half pi.
	  function toLessThanHalfPi(Ctor, x) {
	    var t,
	      isNeg = x.s < 0,
	      pi = getPi(Ctor, Ctor.precision, 1),
	      halfPi = pi.times(0.5);
	
	    x = x.abs();
	
	    if (x.lte(halfPi)) {
	      quadrant = isNeg ? 4 : 1;
	      return x;
	    }
	
	    t = x.divToInt(pi);
	
	    if (t.isZero()) {
	      quadrant = isNeg ? 3 : 2;
	    } else {
	      x = x.minus(t.times(pi));
	
	      // 0 <= x < pi
	      if (x.lte(halfPi)) {
	        quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);
	        return x;
	      }
	
	      quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);
	    }
	
	    return x.minus(pi).abs();
	  }
	
	
	  /*
	   * Return the value of Decimal `x` as a string in base `baseOut`.
	   *
	   * If the optional `sd` argument is present include a binary exponent suffix.
	   */
	  function toStringBinary(x, baseOut, sd, rm) {
	    var base, e, i, k, len, roundUp, str, xd, y,
	      Ctor = x.constructor,
	      isExp = sd !== void 0;
	
	    if (isExp) {
	      checkInt32(sd, 1, MAX_DIGITS);
	      if (rm === void 0) rm = Ctor.rounding;
	      else checkInt32(rm, 0, 8);
	    } else {
	      sd = Ctor.precision;
	      rm = Ctor.rounding;
	    }
	
	    if (!x.isFinite()) {
	      str = nonFiniteToString(x);
	    } else {
	      str = finiteToString(x);
	      i = str.indexOf('.');
	
	      // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:
	      // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))
	      // minBinaryExponent = floor(decimalExponent * log[2](10))
	      // log[2](10) = 3.321928094887362347870319429489390175864
	
	      if (isExp) {
	        base = 2;
	        if (baseOut == 16) {
	          sd = sd * 4 - 3;
	        } else if (baseOut == 8) {
	          sd = sd * 3 - 2;
	        }
	      } else {
	        base = baseOut;
	      }
	
	      // Convert the number as an integer then divide the result by its base raised to a power such
	      // that the fraction part will be restored.
	
	      // Non-integer.
	      if (i >= 0) {
	        str = str.replace('.', '');
	        y = new Ctor(1);
	        y.e = str.length - i;
	        y.d = convertBase(finiteToString(y), 10, base);
	        y.e = y.d.length;
	      }
	
	      xd = convertBase(str, 10, base);
	      e = len = xd.length;
	
	      // Remove trailing zeros.
	      for (; xd[--len] == 0;) xd.pop();
	
	      if (!xd[0]) {
	        str = isExp ? '0p+0' : '0';
	      } else {
	        if (i < 0) {
	          e--;
	        } else {
	          x = new Ctor(x);
	          x.d = xd;
	          x.e = e;
	          x = divide(x, y, sd, rm, 0, base);
	          xd = x.d;
	          e = x.e;
	          roundUp = inexact;
	        }
	
	        // The rounding digit, i.e. the digit after the digit that may be rounded up.
	        i = xd[sd];
	        k = base / 2;
	        roundUp = roundUp || xd[sd + 1] !== void 0;
	
	        roundUp = rm < 4
	          ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))
	          : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||
	            rm === (x.s < 0 ? 8 : 7));
	
	        xd.length = sd;
	
	        if (roundUp) {
	
	          // Rounding up may mean the previous digit has to be rounded up and so on.
	          for (; ++xd[--sd] > base - 1;) {
	            xd[sd] = 0;
	            if (!sd) {
	              ++e;
	              xd.unshift(1);
	            }
	          }
	        }
	
	        // Determine trailing zeros.
	        for (len = xd.length; !xd[len - 1]; --len);
	
	        // E.g. [4, 11, 15] becomes 4bf.
	        for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);
	
	        // Add binary exponent suffix?
	        if (isExp) {
	          if (len > 1) {
	            if (baseOut == 16 || baseOut == 8) {
	              i = baseOut == 16 ? 4 : 3;
	              for (--len; len % i; len++) str += '0';
	              xd = convertBase(str, base, baseOut);
	              for (len = xd.length; !xd[len - 1]; --len);
	
	              // xd[0] will always be be 1
	              for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);
	            } else {
	              str = str.charAt(0) + '.' + str.slice(1);
	            }
	          }
	
	          str =  str + (e < 0 ? 'p' : 'p+') + e;
	        } else if (e < 0) {
	          for (; ++e;) str = '0' + str;
	          str = '0.' + str;
	        } else {
	          if (++e > len) for (e -= len; e-- ;) str += '0';
	          else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
	        }
	      }
	
	      str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;
	    }
	
	    return x.s < 0 ? '-' + str : str;
	  }
	
	
	  // Does not strip trailing zeros.
	  function truncate(arr, len) {
	    if (arr.length > len) {
	      arr.length = len;
	      return true;
	    }
	  }
	
	
	  // Decimal methods
	
	
	  /*
	   *  abs
	   *  acos
	   *  acosh
	   *  add
	   *  asin
	   *  asinh
	   *  atan
	   *  atanh
	   *  atan2
	   *  cbrt
	   *  ceil
	   *  clone
	   *  config
	   *  cos
	   *  cosh
	   *  div
	   *  exp
	   *  floor
	   *  hypot
	   *  ln
	   *  log
	   *  log2
	   *  log10
	   *  max
	   *  min
	   *  mod
	   *  mul
	   *  pow
	   *  random
	   *  round
	   *  set
	   *  sign
	   *  sin
	   *  sinh
	   *  sqrt
	   *  sub
	   *  tan
	   *  tanh
	   *  trunc
	   */
	
	
	  /*
	   * Return a new Decimal whose value is the absolute value of `x`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function abs(x) {
	    return new this(x).abs();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the arccosine in radians of `x`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function acos(x) {
	    return new this(x).acos();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function acosh(x) {
	    return new this(x).acosh();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */
	  function add(x, y) {
	    return new this(x).plus(y);
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function asin(x) {
	    return new this(x).asin();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function asinh(x) {
	    return new this(x).asinh();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function atan(x) {
	    return new this(x).atan();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to
	   * `precision` significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function atanh(x) {
	    return new this(x).atanh();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi
	   * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   * Domain: [-Infinity, Infinity]
	   * Range: [-pi, pi]
	   *
	   * y {number|string|Decimal} The y-coordinate.
	   * x {number|string|Decimal} The x-coordinate.
	   *
	   * atan2(±0, -0)               = ±pi
	   * atan2(±0, +0)               = ±0
	   * atan2(±0, -x)               = ±pi for x > 0
	   * atan2(±0, x)                = ±0 for x > 0
	   * atan2(-y, ±0)               = -pi/2 for y > 0
	   * atan2(y, ±0)                = pi/2 for y > 0
	   * atan2(±y, -Infinity)        = ±pi for finite y > 0
	   * atan2(±y, +Infinity)        = ±0 for finite y > 0
	   * atan2(±Infinity, x)         = ±pi/2 for finite x
	   * atan2(±Infinity, -Infinity) = ±3*pi/4
	   * atan2(±Infinity, +Infinity) = ±pi/4
	   * atan2(NaN, x) = NaN
	   * atan2(y, NaN) = NaN
	   *
	   */
	  function atan2(y, x) {
	    y = new this(y);
	    x = new this(x);
	    var r,
	      pr = this.precision,
	      rm = this.rounding,
	      wpr = pr + 4;
	
	    // Either NaN
	    if (!y.s || !x.s) {
	      r = new this(NaN);
	
	    // Both ±Infinity
	    } else if (!y.d && !x.d) {
	      r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
	      r.s = y.s;
	
	    // x is ±Infinity or y is ±0
	    } else if (!x.d || y.isZero()) {
	      r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
	      r.s = y.s;
	
	    // y is ±Infinity or x is ±0
	    } else if (!y.d || x.isZero()) {
	      r = getPi(this, wpr, 1).times(0.5);
	      r.s = y.s;
	
	    // Both non-zero and finite
	    } else if (x.s < 0) {
	      this.precision = wpr;
	      this.rounding = 1;
	      r = this.atan(divide(y, x, wpr, 1));
	      x = getPi(this, wpr, 1);
	      this.precision = pr;
	      this.rounding = rm;
	      r = y.s < 0 ? r.minus(x) : r.plus(x);
	    } else {
	      r = this.atan(divide(y, x, wpr, 1));
	    }
	
	    return r;
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function cbrt(x) {
	    return new this(x).cbrt();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function ceil(x) {
	    return finalise(x = new this(x), x.e + 1, 2);
	  }
	
	
	  /*
	   * Configure global settings for a Decimal constructor.
	   *
	   * `obj` is an object with one or more of the following properties,
	   *
	   *   precision  {number}
	   *   rounding   {number}
	   *   toExpNeg   {number}
	   *   toExpPos   {number}
	   *   maxE       {number}
	   *   minE       {number}
	   *   modulo     {number}
	   *   crypto     {boolean|number}
	   *
	   * E.g. Decimal.config({ precision: 20, rounding: 4 })
	   *
	   */
	  function config(obj) {
	    if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');
	    var i, p, v,
	      ps = [
	        'precision', 1, MAX_DIGITS,
	        'rounding', 0, 8,
	        'toExpNeg', -EXP_LIMIT, 0,
	        'toExpPos', 0, EXP_LIMIT,
	        'maxE', 0, EXP_LIMIT,
	        'minE', -EXP_LIMIT, 0,
	        'modulo', 0, 9
	      ];
	
	    for (i = 0; i < ps.length; i += 3) {
	      if ((v = obj[p = ps[i]]) !== void 0) {
	        if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
	        else throw Error(invalidArgument + p + ': ' + v);
	      }
	    }
	
	    if ((v = obj[p = 'crypto']) !== void 0) {
	      if (v === true || v === false || v === 0 || v === 1) {
	        if (v) {
	          if (typeof crypto != 'undefined' && crypto &&
	            (crypto.getRandomValues || crypto.randomBytes)) {
	            this[p] = true;
	          } else {
	            throw Error(cryptoUnavailable);
	          }
	        } else {
	          this[p] = false;
	        }
	      } else {
	        throw Error(invalidArgument + p + ': ' + v);
	      }
	    }
	
	    return this;
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function cos(x) {
	    return new this(x).cos();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function cosh(x) {
	    return new this(x).cosh();
	  }
	
	
	  /*
	   * Create and return a Decimal constructor with the same configuration properties as this Decimal
	   * constructor.
	   *
	   */
	  function clone(obj) {
	    var i, p, ps;
	
	    /*
	     * The Decimal constructor and exported function.
	     * Return a new Decimal instance.
	     *
	     * v {number|string|Decimal} A numeric value.
	     *
	     */
	    function Decimal(v) {
	      var e, i, t,
	        x = this;
	
	      // Decimal called without new.
	      if (!(x instanceof Decimal)) return new Decimal(v);
	
	      // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
	      // which points to Object.
	      x.constructor = Decimal;
	
	      // Duplicate.
	      if (v instanceof Decimal) {
	        x.s = v.s;
	        x.e = v.e;
	        x.d = (v = v.d) ? v.slice() : v;
	        return;
	      }
	
	      t = typeof v;
	
	      if (t === 'number') {
	        if (v === 0) {
	          x.s = 1 / v < 0 ? -1 : 1;
	          x.e = 0;
	          x.d = [0];
	          return;
	        }
	
	        if (v < 0) {
	          v = -v;
	          x.s = -1;
	        } else {
	          x.s = 1;
	        }
	
	        // Fast path for small integers.
	        if (v === ~~v && v < 1e7) {
	          for (e = 0, i = v; i >= 10; i /= 10) e++;
	          x.e = e;
	          x.d = [v];
	          return;
	
	        // Infinity, NaN.
	        } else if (v * 0 !== 0) {
	          if (!v) x.s = NaN;
	          x.e = NaN;
	          x.d = null;
	          return;
	        }
	
	        return parseDecimal(x, v.toString());
	
	      } else if (t !== 'string') {
	        throw Error(invalidArgument + v);
	      }
	
	      // Minus sign?
	      if (v.charCodeAt(0) === 45) {
	        v = v.slice(1);
	        x.s = -1;
	      } else {
	        x.s = 1;
	      }
	
	      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
	    }
	
	    Decimal.prototype = P;
	
	    Decimal.ROUND_UP = 0;
	    Decimal.ROUND_DOWN = 1;
	    Decimal.ROUND_CEIL = 2;
	    Decimal.ROUND_FLOOR = 3;
	    Decimal.ROUND_HALF_UP = 4;
	    Decimal.ROUND_HALF_DOWN = 5;
	    Decimal.ROUND_HALF_EVEN = 6;
	    Decimal.ROUND_HALF_CEIL = 7;
	    Decimal.ROUND_HALF_FLOOR = 8;
	    Decimal.EUCLID = 9;
	
	    Decimal.config = Decimal.set = config;
	    Decimal.clone = clone;
	
	    Decimal.abs = abs;
	    Decimal.acos = acos;
	    Decimal.acosh = acosh;        // ES6
	    Decimal.add = add;
	    Decimal.asin = asin;
	    Decimal.asinh = asinh;        // ES6
	    Decimal.atan = atan;
	    Decimal.atanh = atanh;        // ES6
	    Decimal.atan2 = atan2;
	    Decimal.cbrt = cbrt;          // ES6
	    Decimal.ceil = ceil;
	    Decimal.cos = cos;
	    Decimal.cosh = cosh;          // ES6
	    Decimal.div = div;
	    Decimal.exp = exp;
	    Decimal.floor = floor;
	    Decimal.hypot = hypot;        // ES6
	    Decimal.ln = ln;
	    Decimal.log = log;
	    Decimal.log10 = log10;        // ES6
	    Decimal.log2 = log2;          // ES6
	    Decimal.max = max;
	    Decimal.min = min;
	    Decimal.mod = mod;
	    Decimal.mul = mul;
	    Decimal.pow = pow;
	    Decimal.random = random;
	    Decimal.round = round;
	    Decimal.sign = sign;          // ES6
	    Decimal.sin = sin;
	    Decimal.sinh = sinh;          // ES6
	    Decimal.sqrt = sqrt;
	    Decimal.sub = sub;
	    Decimal.tan = tan;
	    Decimal.tanh = tanh;          // ES6
	    Decimal.trunc = trunc;        // ES6
	
	    if (obj === void 0) obj = {};
	    if (obj) {
	      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];
	      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
	    }
	
	    Decimal.config(obj);
	
	    return Decimal;
	  }
	
	
	  /*
	   * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */
	  function div(x, y) {
	    return new this(x).div(y);
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} The power to which to raise the base of the natural log.
	   *
	   */
	  function exp(x) {
	    return new this(x).exp();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function floor(x) {
	    return finalise(x = new this(x), x.e + 1, 3);
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,
	   * rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)
	   *
	   */
	  function hypot() {
	    var i, n,
	      t = new this(0);
	
	    external = false;
	
	    for (i = 0; i < arguments.length;) {
	      n = new this(arguments[i++]);
	      if (!n.d) {
	        if (n.s) {
	          external = true;
	          return new this(1 / 0);
	        }
	        t = n;
	      } else if (t.d) {
	        t = t.plus(n.times(n));
	      }
	    }
	
	    external = true;
	
	    return t.sqrt();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function ln(x) {
	    return new this(x).ln();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base
	   * is specified, rounded to `precision` significant digits using rounding mode `rounding`.
	   *
	   * log[y](x)
	   *
	   * x {number|string|Decimal} The argument of the logarithm.
	   * y {number|string|Decimal} The base of the logarithm.
	   *
	   */
	  function log(x, y) {
	    return new this(x).log(y);
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function log2(x) {
	    return new this(x).log(2);
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function log10(x) {
	    return new this(x).log(10);
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the maximum of the arguments.
	   *
	   * arguments {number|string|Decimal}
	   *
	   */
	  function max() {
	    return maxOrMin(this, arguments, 'lt');
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the minimum of the arguments.
	   *
	   * arguments {number|string|Decimal}
	   *
	   */
	  function min() {
	    return maxOrMin(this, arguments, 'gt');
	  }
	
	
	  /*
	   * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits
	   * using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */
	  function mod(x, y) {
	    return new this(x).mod(y);
	  }
	
	
	  /*
	   * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */
	  function mul(x, y) {
	    return new this(x).mul(y);
	  }
	
	
	  /*
	   * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} The base.
	   * y {number|string|Decimal} The exponent.
	   *
	   */
	  function pow(x, y) {
	    return new this(x).pow(y);
	  }
	
	
	  /*
	   * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with
	   * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros
	   * are produced).
	   *
	   * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.
	   *
	   */
	  function random(sd) {
	    var d, e, k, n,
	      i = 0,
	      r = new this(1),
	      rd = [];
	
	    if (sd === void 0) sd = this.precision;
	    else checkInt32(sd, 1, MAX_DIGITS);
	
	    k = Math.ceil(sd / LOG_BASE);
	
	    if (!this.crypto) {
	      for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;
	
	    // Browsers supporting crypto.getRandomValues.
	    } else if (crypto.getRandomValues) {
	      d = crypto.getRandomValues(new Uint32Array(k));
	
	      for (; i < k;) {
	        n = d[i];
	
	        // 0 <= n < 4294967296
	        // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).
	        if (n >= 4.29e9) {
	          d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
	        } else {
	
	          // 0 <= n <= 4289999999
	          // 0 <= (n % 1e7) <= 9999999
	          rd[i++] = n % 1e7;
	        }
	      }
	
	    // Node.js supporting crypto.randomBytes.
	    } else if (crypto.randomBytes) {
	
	      // buffer
	      d = crypto.randomBytes(k *= 4);
	
	      for (; i < k;) {
	
	        // 0 <= n < 2147483648
	        n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);
	
	        // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).
	        if (n >= 2.14e9) {
	          crypto.randomBytes(4).copy(d, i);
	        } else {
	
	          // 0 <= n <= 2139999999
	          // 0 <= (n % 1e7) <= 9999999
	          rd.push(n % 1e7);
	          i += 4;
	        }
	      }
	
	      i = k / 4;
	    } else {
	      throw Error(cryptoUnavailable);
	    }
	
	    k = rd[--i];
	    sd %= LOG_BASE;
	
	    // Convert trailing digits to zeros according to sd.
	    if (k && sd) {
	      n = mathpow(10, LOG_BASE - sd);
	      rd[i] = (k / n | 0) * n;
	    }
	
	    // Remove trailing words which are zero.
	    for (; rd[i] === 0; i--) rd.pop();
	
	    // Zero?
	    if (i < 0) {
	      e = 0;
	      rd = [0];
	    } else {
	      e = -1;
	
	      // Remove leading words which are zero and adjust exponent accordingly.
	      for (; rd[0] === 0; e -= LOG_BASE) rd.shift();
	
	      // Count the digits of the first word of rd to determine leading zeros.
	      for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;
	
	      // Adjust the exponent for leading zeros of the first word of rd.
	      if (k < LOG_BASE) e -= LOG_BASE - k;
	    }
	
	    r.e = e;
	    r.d = rd;
	
	    return r;
	  }
	
	
	  /*
	   * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.
	   *
	   * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function round(x) {
	    return finalise(x = new this(x), x.e + 1, this.rounding);
	  }
	
	
	  /*
	   * Return
	   *   1    if x > 0,
	   *  -1    if x < 0,
	   *   0    if x is 0,
	   *  -0    if x is -0,
	   *   NaN  otherwise
	   *
	   */
	  function sign(x) {
	    x = new this(x);
	    return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits
	   * using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function sin(x) {
	    return new this(x).sin();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function sinh(x) {
	    return new this(x).sinh();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function sqrt(x) {
	    return new this(x).sqrt();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits
	   * using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal}
	   * y {number|string|Decimal}
	   *
	   */
	  function sub(x, y) {
	    return new this(x).sub(y);
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant
	   * digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function tan(x) {
	    return new this(x).tan();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`
	   * significant digits using rounding mode `rounding`.
	   *
	   * x {number|string|Decimal} A value in radians.
	   *
	   */
	  function tanh(x) {
	    return new this(x).tanh();
	  }
	
	
	  /*
	   * Return a new Decimal whose value is `x` truncated to an integer.
	   *
	   * x {number|string|Decimal}
	   *
	   */
	  function trunc(x) {
	    return finalise(x = new this(x), x.e + 1, 1);
	  }
	
	
	  // Create and configure initial Decimal constructor.
	  Decimal = clone(Decimal);
	
	  // Create the internal constants from their string values.
	  LN10 = new Decimal(LN10);
	  PI = new Decimal(PI);
	
	
	  // Export.
	
	
	  // AMD.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	      return Decimal;
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	
	  // Node and other environments that support module.exports.
	  } else if (typeof module != 'undefined' && module.exports) {
	    module.exports = Decimal.default = Decimal.Decimal = Decimal;
	
	  // Browser.
	  } else {
	    if (!globalScope) {
	      globalScope = typeof self != 'undefined' && self && self.self == self
	        ? self : Function('return this')();
	    }
	
	    noConflict = globalScope.Decimal;
	    Decimal.noConflict = function () {
	      globalScope.Decimal = noConflict;
	      return Decimal;
	    };
	
	    globalScope.Decimal = Decimal;
	  }
	})(this);


/***/ }),
/* 69 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Create a BigNumber, which can store numbers with arbitrary precision.
	   * When a matrix is provided, all elements will be converted to BigNumber.
	   *
	   * Syntax:
	   *
	   *    math.bignumber(x)
	   *
	   * Examples:
	   *
	   *    0.1 + 0.2;                                  // returns number 0.30000000000000004
	   *    math.bignumber(0.1) + math.bignumber(0.2);  // returns BigNumber 0.3
	   *
	   *
	   *    7.2e500;                                    // returns number Infinity
	   *    math.bignumber('7.2e500');                  // returns BigNumber 7.2e500
	   *
	   * See also:
	   *
	   *    boolean, complex, index, matrix, string, unit
	   *
	   * @param {number | string | Fraction | BigNumber | Array | Matrix | boolean | null} [value]  Value for the big number,
	   *                                                    0 by default.
	   * @returns {BigNumber} The created bignumber
	   */
	  var bignumber = typed('bignumber', {
	    '': function () {
	      return new type.BigNumber(0);
	    },
	
	    'number': function (x) {
	      // convert to string to prevent errors in case of >15 digits
	      return new type.BigNumber(x + '');
	    },
	
	    'string': function (x) {
	      return new type.BigNumber(x);
	    },
	
	    'BigNumber': function (x) {
	      // we assume a BigNumber is immutable
	      return x;
	    },
	
	    'Fraction': function (x) {
	      return new type.BigNumber(x.n).div(x.d);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, bignumber);
	    }
	  });
	
	  bignumber.toTex = {
	    0: '0',
	    1: '\\left(${args[0]}\\right)'
	  };
	
	  return bignumber;
	}
	
	exports.name = 'bignumber';
	exports.factory = factory;


/***/ }),
/* 70 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Execute the callback function element wise for each element in array and any
	 * nested array
	 * Returns an array with the results
	 * @param {Array | Matrix} array
	 * @param {Function} callback   The callback is called with two parameters:
	 *                              value1 and value2, which contain the current
	 *                              element of both arrays.
	 * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	 *
	 * @return {Array | Matrix} res
	 */
	module.exports = function deepMap(array, callback, skipZeros) {
	  if (array && (typeof array.map === 'function')) {
	    // TODO: replace array.map with a for loop to improve performance
	    return array.map(function (x) {
	      return deepMap(x, callback, skipZeros);
	    });
	  }
	  else {
	    return callback(array);
	  }
	};


/***/ }),
/* 71 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Create a boolean or convert a string or number to a boolean.
	   * In case of a number, `true` is returned for non-zero numbers, and `false` in
	   * case of zero.
	   * Strings can be `'true'` or `'false'`, or can contain a number.
	   * When value is a matrix, all elements will be converted to boolean.
	   *
	   * Syntax:
	   *
	   *    math.boolean(x)
	   *
	   * Examples:
	   *
	   *    math.boolean(0);     // returns false
	   *    math.boolean(1);     // returns true
	   *    math.boolean(-3);     // returns true
	   *    math.boolean('true');     // returns true
	   *    math.boolean('false');     // returns false
	   *    math.boolean([1, 0, 1, 1]);     // returns [true, false, true, true]
	   *
	   * See also:
	   *
	   *    bignumber, complex, index, matrix, string, unit
	   *
	   * @param {string | number | boolean | Array | Matrix | null} value  A value of any type
	   * @return {boolean | Array | Matrix} The boolean value
	   */
	  var bool = typed('bool', {
	    '': function () {
	      return false;
	    },
	
	    'boolean': function (x) {
	      return x;
	    },
	
	    'number': function (x) {
	      return !!x;
	    },
	
	    'BigNumber': function (x) {
	      return !x.isZero();
	    },
	
	    'string': function (x) {
	      // try case insensitive
	      var lcase = x.toLowerCase();
	      if (lcase === 'true') {
	        return true;
	      }
	      else if (lcase === 'false') {
	        return false;
	      }
	
	      // test whether value is a valid number
	      var num = Number(x);
	      if (x != '' && !isNaN(num)) {
	        return !!num;
	      }
	
	      throw new Error('Cannot convert "' + x + '" to a boolean');
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, bool);
	    }
	  });
	
	  return bool;
	}
	
	exports.name = 'boolean';
	exports.factory = factory;


/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  // type
	  __webpack_require__(73),
	
	  // construction function
	  __webpack_require__(76)
	];


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var format = __webpack_require__(74).format;
	var lazy = __webpack_require__(55).lazy;
	
	function factory (type, config, load, typed, math) {
	  /**
	   * @constructor Chain
	   * Wrap any value in a chain, allowing to perform chained operations on
	   * the value.
	   *
	   * All methods available in the math.js library can be called upon the chain,
	   * and then will be evaluated with the value itself as first argument.
	   * The chain can be closed by executing chain.done(), which will return
	   * the final value.
	   *
	   * The Chain has a number of special functions:
	   * - done()             Finalize the chained operation and return the
	   *                      chain's value.
	   * - valueOf()          The same as done()
	   * - toString()         Returns a string representation of the chain's value.
	   *
	   * @param {*} [value]
	   */
	  function Chain (value) {
	    if (!(this instanceof Chain)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    if (value && value.isChain) {
	      this.value = value.value;
	    }
	    else {
	      this.value = value;
	    }
	  }
	
	  /**
	   * Attach type information
	   */
	  Chain.prototype.type = 'Chain';
	  Chain.prototype.isChain = true;
	
	  /**
	   * Close the chain. Returns the final value.
	   * Does the same as method valueOf()
	   * @returns {*} value
	   */
	  Chain.prototype.done = function () {
	    return this.value;
	  };
	
	  /**
	   * Close the chain. Returns the final value.
	   * Does the same as method done()
	   * @returns {*} value
	   */
	  Chain.prototype.valueOf = function () {
	    return this.value;
	  };
	
	  /**
	   * Get a string representation of the value in the chain
	   * @returns {string}
	   */
	  Chain.prototype.toString = function () {
	    return format(this.value);
	  };
	
	  /**
	   * Create a proxy method for the chain
	   * @param {string} name
	   * @param {Function} fn      The function to be proxied
	   *                           If fn is no function, it is silently ignored.
	   * @private
	   */
	  function createProxy(name, fn) {
	    if (typeof fn === 'function') {
	      Chain.prototype[name] = chainify(fn);
	    }
	  }
	
	  /**
	   * Create a proxy method for the chain
	   * @param {string} name
	   * @param {function} resolver   The function resolving with the
	   *                              function to be proxied
	   * @private
	   */
	  function createLazyProxy(name, resolver) {
	    lazy(Chain.prototype, name, function outerResolver() {
	      var fn = resolver();
	      if (typeof fn === 'function') {
	        return chainify(fn);
	      }
	
	      return undefined; // if not a function, ignore
	    });
	  }
	
	  /**
	   * Make a function chainable
	   * @param {function} fn
	   * @return {Function} chain function
	   * @private
	   */
	  function chainify (fn) {
	    return function () {
	      var args = [this.value];  // `this` will be the context of a Chain instance
	      for (var i = 0; i < arguments.length; i++) {
	        args[i + 1] = arguments[i];
	      }
	
	      return new Chain(fn.apply(fn, args));
	    }
	  }
	
	  /**
	   * Create a proxy for a single method, or an object with multiple methods.
	   * Example usage:
	   *
	   *   Chain.createProxy('add', function add (x, y) {...});
	   *   Chain.createProxy({
	   *     add:      function add (x, y) {...},
	   *     subtract: function subtract (x, y) {...}
	   *   }
	   *
	   * @param {string | Object} arg0   A name (string), or an object with
	   *                                 functions
	   * @param {*} [arg1]               A function, when arg0 is a name
	   */
	  Chain.createProxy = function (arg0, arg1) {
	    if (typeof arg0 === 'string') {
	      // createProxy(name, value)
	      createProxy(arg0, arg1);
	    }
	    else {
	      // createProxy(values)
	      for (var prop in arg0) {
	        if (arg0.hasOwnProperty(prop)) {
	          createProxy(prop, arg0[prop]);
	        }
	      }
	    }
	  };
	
	  // create proxy for everything that is in math.js
	  Chain.createProxy(math);
	
	  // register on the import event, automatically add a proxy for every imported function.
	  math.on('import', function (name, resolver, path) {
	    if (path === undefined) {
	      // an imported function (not a data type or something special)
	      createLazyProxy(name, resolver);
	    }
	  });
	
	  return Chain;
	}
	
	exports.name = 'Chain';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true;  // require providing the math namespace as 5th argument
	exports.lazy = false; // we need to register a listener on the import events, so no lazy loading


/***/ }),
/* 74 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var formatNumber = __webpack_require__(58).format;
	var formatBigNumber = __webpack_require__(75).format;
	
	/**
	 * Test whether value is a string
	 * @param {*} value
	 * @return {boolean} isString
	 */
	exports.isString = function(value) {
	  return typeof value === 'string';
	};
	
	/**
	 * Check if a text ends with a certain string.
	 * @param {string} text
	 * @param {string} search
	 */
	exports.endsWith = function(text, search) {
	  var start = text.length - search.length;
	  var end = text.length;
	  return (text.substring(start, end) === search);
	};
	
	/**
	 * Format a value of any type into a string.
	 *
	 * Usage:
	 *     math.format(value)
	 *     math.format(value, precision)
	 *
	 * When value is a function:
	 *
	 * - When the function has a property `syntax`, it returns this
	 *   syntax description.
	 * - In other cases, a string `'function'` is returned.
	 *
	 * When `value` is an Object:
	 *
	 * - When the object contains a property `format` being a function, this
	 *   function is invoked as `value.format(options)` and the result is returned.
	 * - When the object has its own `toString` method, this method is invoked
	 *   and the result is returned.
	 * - In other cases the function will loop over all object properties and
	 *   return JSON object notation like '{"a": 2, "b": 3}'.
	 *
	 * Example usage:
	 *     math.format(2/7);                // '0.2857142857142857'
	 *     math.format(math.pi, 3);         // '3.14'
	 *     math.format(new Complex(2, 3));  // '2 + 3i'
	 *     math.format('hello');            // '"hello"'
	 *
	 * @param {*} value             Value to be stringified
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @return {string} str
	 */
	exports.format = function(value, options) {
	  if (typeof value === 'number') {
	    return formatNumber(value, options);
	  }
	
	  if (value && value.isBigNumber === true) {
	    return formatBigNumber(value, options);
	  }
	
	  if (value && value.isFraction === true) {
	    if (!options || options.fraction !== 'decimal') {
	      // output as ratio, like '1/3'
	      return (value.s * value.n) + '/' + value.d;
	    }
	    else {
	      // output as decimal, like '0.(3)'
	      return value.toString();
	    }
	  }
	
	  if (Array.isArray(value)) {
	    return formatArray(value, options);
	  }
	
	  if (exports.isString(value)) {
	    return '"' + value + '"';
	  }
	
	  if (typeof value === 'function') {
	    return value.syntax ? String(value.syntax) : 'function';
	  }
	
	  if (value && typeof value === 'object') {
	    if (typeof value.format === 'function') {
	      return value.format(options);
	    }
	    else if (value && value.toString() !== {}.toString()) {
	      // this object has a non-native toString method, use that one
	      return value.toString();
	    }
	    else {
	      var entries = [];
	
	      for (var key in value) {
	        if (value.hasOwnProperty(key)) {
	          entries.push('"' + key + '": ' + exports.format(value[key], options));
	        }
	      }
	
	      return '{' + entries.join(', ') + '}';
	    }
	  }
	
	  return String(value);
	};
	
	/**
	 * Stringify a value into a string enclosed in double quotes.
	 * Double quotes inside the value are escaped.
	 * @param {*} value
	 * @return {string}
	 */
	exports.stringify = function (value) {
	  var str = String(value).replace(/([^\\]|^)"/g, function (full, before) {
	    return before + '\\"';
	  });
	
	  return '"' + str + '"';
	}
	
	/**
	 * Recursively format an n-dimensional matrix
	 * Example output: "[[1, 2], [3, 4]]"
	 * @param {Array} array
	 * @param {Object | number | Function} [options]  Formatting options. See
	 *                                                lib/utils/number:format for a
	 *                                                description of the available
	 *                                                options.
	 * @returns {string} str
	 */
	function formatArray (array, options) {
	  if (Array.isArray(array)) {
	    var str = '[';
	    var len = array.length;
	    for (var i = 0; i < len; i++) {
	      if (i != 0) {
	        str += ', ';
	      }
	      str += formatArray(array[i], options);
	    }
	    str += ']';
	    return str;
	  }
	  else {
	    return exports.format(array, options);
	  }
	}


/***/ }),
/* 75 */
/***/ (function(module, exports) {

	/**
	 * Convert a BigNumber to a formatted string representation.
	 *
	 * Syntax:
	 *
	 *    format(value)
	 *    format(value, options)
	 *    format(value, precision)
	 *    format(value, fn)
	 *
	 * Where:
	 *
	 *    {number} value   The value to be formatted
	 *    {Object} options An object with formatting options. Available options:
	 *                     {string} notation
	 *                         Number notation. Choose from:
	 *                         'fixed'          Always use regular number notation.
	 *                                          For example '123.40' and '14000000'
	 *                         'exponential'    Always use exponential notation.
	 *                                          For example '1.234e+2' and '1.4e+7'
	 *                         'auto' (default) Regular number notation for numbers
	 *                                          having an absolute value between
	 *                                          `lower` and `upper` bounds, and uses
	 *                                          exponential notation elsewhere.
	 *                                          Lower bound is included, upper bound
	 *                                          is excluded.
	 *                                          For example '123.4' and '1.4e7'.
	 *                     {number} precision   A number between 0 and 16 to round
	 *                                          the digits of the number.
	 *                                          In case of notations 'exponential' and
	 *                                          'auto', `precision` defines the total
	 *                                          number of significant digits returned
	 *                                          and is undefined by default.
	 *                                          In case of notation 'fixed',
	 *                                          `precision` defines the number of
	 *                                          significant digits after the decimal
	 *                                          point, and is 0 by default.
	 *                     {Object} exponential An object containing two parameters,
	 *                                          {number} lower and {number} upper,
	 *                                          used by notation 'auto' to determine
	 *                                          when to return exponential notation.
	 *                                          Default values are `lower=1e-3` and
	 *                                          `upper=1e5`.
	 *                                          Only applicable for notation `auto`.
	 *    {Function} fn    A custom formatting function. Can be used to override the
	 *                     built-in notations. Function `fn` is called with `value` as
	 *                     parameter and must return a string. Is useful for example to
	 *                     format all values inside a matrix in a particular way.
	 *
	 * Examples:
	 *
	 *    format(6.4);                                        // '6.4'
	 *    format(1240000);                                    // '1.24e6'
	 *    format(1/3);                                        // '0.3333333333333333'
	 *    format(1/3, 3);                                     // '0.333'
	 *    format(21385, 2);                                   // '21000'
	 *    format(12.071, {notation: 'fixed'});                // '12'
	 *    format(2.3,    {notation: 'fixed', precision: 2});  // '2.30'
	 *    format(52.8,   {notation: 'exponential'});          // '5.28e+1'
	 *
	 * @param {BigNumber} value
	 * @param {Object | Function | number} [options]
	 * @return {string} str The formatted value
	 */
	exports.format = function (value, options) {
	  if (typeof options === 'function') {
	    // handle format(value, fn)
	    return options(value);
	  }
	
	  // handle special cases
	  if (!value.isFinite()) {
	    return value.isNaN() ? 'NaN' : (value.gt(0) ? 'Infinity' : '-Infinity');
	  }
	
	  // default values for options
	  var notation = 'auto';
	  var precision = undefined;
	
	  if (options !== undefined) {
	    // determine notation from options
	    if (options.notation) {
	      notation = options.notation;
	    }
	
	    // determine precision from options
	    if (typeof options === 'number') {
	      precision = options;
	    }
	    else if (options.precision) {
	      precision = options.precision;
	    }
	  }
	
	  // handle the various notations
	  switch (notation) {
	    case 'fixed':
	      return exports.toFixed(value, precision);
	
	    case 'exponential':
	      return exports.toExponential(value, precision);
	
	    case 'auto':
	      // determine lower and upper bound for exponential notation.
	      // TODO: implement support for upper and lower to be BigNumbers themselves
	      var lower = 1e-3;
	      var upper = 1e5;
	      if (options && options.exponential) {
	        if (options.exponential.lower !== undefined) {
	          lower = options.exponential.lower;
	        }
	        if (options.exponential.upper !== undefined) {
	          upper = options.exponential.upper;
	        }
	      }
	
	      // adjust the configuration of the BigNumber constructor (yeah, this is quite tricky...)
	      var oldConfig = {
	        toExpNeg: value.constructor.toExpNeg,
	        toExpPos: value.constructor.toExpPos
	      };
	
	      value.constructor.config({
	        toExpNeg: Math.round(Math.log(lower) / Math.LN10),
	        toExpPos: Math.round(Math.log(upper) / Math.LN10)
	      });
	
	      // handle special case zero
	      if (value.isZero()) return '0';
	
	      // determine whether or not to output exponential notation
	      var str;
	      var abs = value.abs();
	      if (abs.gte(lower) && abs.lt(upper)) {
	        // normal number notation
	        str = value.toSignificantDigits(precision).toFixed();
	      }
	      else {
	        // exponential notation
	        str = exports.toExponential(value, precision);
	      }
	
	      // remove trailing zeros after the decimal point
	      return str.replace(/((\.\d*?)(0+))($|e)/, function () {
	        var digits = arguments[2];
	        var e = arguments[4];
	        return (digits !== '.') ? digits + e : e;
	      });
	
	    default:
	      throw new Error('Unknown notation "' + notation + '". ' +
	          'Choose "auto", "exponential", or "fixed".');
	  }
	};
	
	/**
	 * Format a number in exponential notation. Like '1.23e+5', '2.3e+0', '3.500e-3'
	 * @param {BigNumber} value
	 * @param {number} [precision]  Number of digits in formatted output.
	 *                              If not provided, the maximum available digits
	 *                              is used.
	 * @returns {string} str
	 */
	exports.toExponential = function (value, precision) {
	  if (precision !== undefined) {
	    return value.toExponential(precision - 1); // Note the offset of one
	  }
	  else {
	    return value.toExponential();
	  }
	};
	
	/**
	 * Format a number with fixed notation.
	 * @param {BigNumber} value
	 * @param {number} [precision=0]        Optional number of decimals after the
	 *                                      decimal point. Zero by default.
	 */
	exports.toFixed = function (value, precision) {
	  return value.toFixed(precision || 0);
	  // Note: the (precision || 0) is needed as the toFixed of BigNumber has an
	  // undefined default precision instead of 0.
	};


/***/ }),
/* 76 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  /**
	   * Wrap any value in a chain, allowing to perform chained operations on
	   * the value.
	   *
	   * All methods available in the math.js library can be called upon the chain,
	   * and then will be evaluated with the value itself as first argument.
	   * The chain can be closed by executing `chain.done()`, which returns
	   * the final value.
	   *
	   * The chain has a number of special functions:
	   *
	   * - `done()`     Finalize the chain and return the chain's value.
	   * - `valueOf()`  The same as `done()`
	   * - `toString()` Executes `math.format()` onto the chain's value, returning
	   *                a string representation of the value.
	   *
	   * Syntax:
	   *
	   *    math.chain(value)
	   *
	   * Examples:
	   *
	   *     math.chain(3)
	   *         .add(4)
	   *         .subtract(2)
	   *         .done();     // 5
	   *
	   *     math.chain( [[1, 2], [3, 4]] )
	   *         .subset(math.index(0, 0), 8)
	   *         .multiply(3)
	   *         .done();     // [[24, 6], [9, 12]]
	   *
	   * @param {*} [value]   A value of any type on which to start a chained operation.
	   * @return {math.type.Chain} The created chain
	   */
	  return typed('chain', {
	    '': function() {
	      return new type.Chain();
	    },
	
	    'any': function(value) {
	      return new type.Chain(value);
	    }
	  });
	}
	
	exports.name = 'chain';
	exports.factory = factory;


/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  // type
	  __webpack_require__(78),
	
	  // construction function
	  __webpack_require__(82)
	];


/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

	var Complex = __webpack_require__(79);
	var format = __webpack_require__(58).format;
	var isNumber = __webpack_require__(58).isNumber;
	
	function factory (type, config, load, typed, math) {
	
	  /**
	   * Attach type information
	   */
	  Complex.prototype.type = 'Complex';
	  Complex.prototype.isComplex = true;
	
	
	  /**
	   * Get a JSON representation of the complex number
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Complex", "re": 2, "im": 3}`
	   */
	  Complex.prototype.toJSON = function () {
	    return {
	      mathjs: 'Complex',
	      re: this.re,
	      im: this.im
	    };
	  };
	
	  /*
	   * Return the value of the complex number in polar notation
	   * The angle phi will be set in the interval of [-pi, pi].
	   * @return {{r: number, phi: number}} Returns and object with properties r and phi.
	   */
	  Complex.prototype.toPolar = function () {
	    return {
	      r: this.abs(),
	      phi: this.arg()
	    };
	  };
	
	  /**
	   * Get a string representation of the complex number,
	   * with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @return {string} str
	   */
	  Complex.prototype.format = function (options) {
	    var str = '';
	    var im = this.im;
	    var re = this.re;
	    var strRe = format(this.re, options);
	    var strIm = format(this.im, options);
	
	    // round either re or im when smaller than the configured precision
	    var precision = isNumber(options) ? options : options ? options.precision : null;
	    if (precision !== null) {
	      var epsilon = Math.pow(10, -precision);
	      if (Math.abs(re / im) < epsilon) {
	        re = 0;
	      }
	      if (Math.abs(im / re) < epsilon) {
	        im = 0;
	      }
	    }
	
	    if (im == 0) {
	      // real value
	      str = strRe;
	    } else if (re == 0) {
	      // purely complex value
	      if (im == 1) {
	        str = 'i';
	      } else if (im == -1) {
	        str = '-i';
	      } else {
	        str = strIm + 'i';
	      }
	    } else {
	      // complex value
	      if (im < 0) {
	        if (im == -1) {
	          str = strRe + ' - i';
	        } else {
	          str = strRe + ' - ' + (/[\d-.]/.test(strIm.charAt(0)) ? strIm.substring(1) : strIm) + 'i';
	        }
	      } else {
	        if (im == 1) {
	          str = strRe + ' + i';
	        } else {
	          str = strRe + ' + ' + strIm + 'i';
	        }
	      }
	    }
	    return str;
	  };
	
	  /**
	   * Create a complex number from polar coordinates
	   *
	   * Usage:
	   *
	   *     Complex.fromPolar(r: number, phi: number) : Complex
	   *     Complex.fromPolar({r: number, phi: number}) : Complex
	   *
	   * @param {*} args...
	   * @return {Complex}
	   */
	  Complex.fromPolar = function (args) {
	    switch (arguments.length) {
	      case 1:
	        var arg = arguments[0];
	        if (typeof arg === 'object') {
	          return Complex(arg);
	        }
	        throw new TypeError('Input has to be an object with r and phi keys.');
	
	      case 2:
	        var r = arguments[0],
	            phi = arguments[1];
	        if (isNumber(r)) {
	          if (phi && phi.isUnit && phi.hasBase('ANGLE')) {
	            // convert unit to a number in radians
	            phi = phi.toNumber('rad');
	          }
	
	          if (isNumber(phi)) {
	            return new Complex({r: r, phi: phi});
	          }
	
	          throw new TypeError('Phi is not a number nor an angle unit.');
	        } else {
	          throw new TypeError('Radius r is not a number.');
	        }
	
	      default:
	        throw new SyntaxError('Wrong number of arguments in function fromPolar');
	    }
	  };
	
	
	  Complex.prototype.valueOf = Complex.prototype.toString;
	
	  /**
	   * Create a Complex number from a JSON object
	   * @param {Object} json  A JSON Object structured as
	   *                       {"mathjs": "Complex", "re": 2, "im": 3}
	   *                       All properties are optional, default values
	   *                       for `re` and `im` are 0.
	   * @return {Complex} Returns a new Complex number
	   */
	  Complex.fromJSON = function (json) {
	    return new Complex(json);
	  };
	
	  // apply the current epsilon
	  Complex.EPSILON = config.epsilon;
	
	  // listen for changed in the configuration, automatically apply changed epsilon
	  math.on('config', function (curr, prev) {
	    if (curr.epsilon !== prev.epsilon) {
	      Complex.EPSILON = curr.epsilon;
	    }
	  });
	
	  return Complex;
	}
	
	exports.name = 'Complex';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true; // request access to the math namespace


/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**
	 * @license Complex.js v2.0.1 11/02/2016
	 *
	 * Copyright (c) 2016, Robert Eisele (robert@xarg.org)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 **/
	
	/**
	 *
	 * This class allows the manipilation of complex numbers.
	 * You can pass a complex number in different formats. Either as object, double, string or two integer parameters.
	 *
	 * Object form
	 * { re: <real>, im: <imaginary> }
	 * { arg: <angle>, abs: <radius> }
	 * { phi: <angle>, r: <radius> }
	 *
	 * Double form
	 * 99.3 - Single double value
	 *
	 * String form
	 * "23.1337" - Simple real number
	 * "15+3i" - a simple complex number
	 * "3-i" - a simple complex number
	 *
	 * Example:
	 *
	 * var c = new Complex("99.3+8i");
	 * c.mul({r: 3, i: 9}).div(4.9).sub(3, 2);
	 *
	 */
	
	(function(root) {
	
	  "use strict";
	
	  var P = {'re': 0, 'im': 0};
	
	  Math.cosh = Math.cosh || function(x) {
	    return (Math.exp(x) + Math.exp(-x)) * 0.5;
	  };
	
	  Math.sinh = Math.sinh || function(x) {
	    return (Math.exp(x) - Math.exp(-x)) * 0.5;
	  };
	
	  var parser_exit = function() {
	    throw SyntaxError("Invalid Param");
	  };
	
	  /**
	   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows
	   *
	   * @param {number} a
	   * @param {number} b
	   * @returns {number}
	   */
	  function logHypot(a, b) {
	
	    var _a = Math.abs(a);
	    var _b = Math.abs(b);
	
	    if (a === 0) {
	      return Math.log(_b);
	    }
	
	    if (b === 0) {
	      return Math.log(_a);
	    }
	
	    if (_a < 3000 && _b < 3000) {
	      return Math.log(a * a + b * b) * 0.5;
	    }
	
	    /* I got 4 ideas to compute this property without overflow:
	     *
	     * Testing 1000000 times with random samples for a,b ∈ [1, 1000000000] against a big decimal library to get an error estimate
	     *
	     * 1. Only eliminate the square root: (OVERALL ERROR: 3.9122483030951116e-11)
	
	     Math.log(a * a + b * b) / 2
	
	     *
	     *
	     * 2. Try to use the non-overflowing pythagoras: (OVERALL ERROR: 8.889760039210159e-10)
	
	     var fn = function(a, b) {
	     a = Math.abs(a);
	     b = Math.abs(b);
	     var t = Math.min(a, b);
	     a = Math.max(a, b);
	     t = t / a;
	
	     return Math.log(a) + Math.log(1 + t * t) / 2;
	     };
	
	     * 3. Abuse the identity cos(atan(y/x) = x / sqrt(x^2+y^2): (OVERALL ERROR: 3.4780178737037204e-10)
	
	     Math.log(a / Math.cos(Math.atan2(b, a)))
	
	     * 4. Use 3. and apply log rules: (OVERALL ERROR: 1.2014087502620896e-9)
	
	     Math.log(a) - Math.log(Math.cos(Math.atan2(b, a)))
	
	     */
	
	    return Math.log(a / Math.cos(Math.atan2(b, a)));
	  }
	
	  var parse = function(a, b) {
	
	    if (a === undefined || a === null) {
	      P["re"] =
	      P["im"] = 0;
	    } else if (b !== undefined) {
	      P["re"] = a;
	      P["im"] = b;
	    } else switch (typeof a) {
	
	      case "object":
	
	        if ("im" in a && "re" in a) {
	          P["re"] = a["re"];
	          P["im"] = a["im"];
	        } else if ("abs" in a && "arg" in a) {
	          P["re"] = a["abs"] * Math.cos(a["arg"]);
	          P["im"] = a["abs"] * Math.sin(a["arg"]);
	        } else if ("r" in a && "phi" in a) {
	          P["re"] = a["r"] * Math.cos(a["phi"]);
	          P["im"] = a["r"] * Math.sin(a["phi"]);
	        } else {
	          parser_exit();
	        }
	        break;
	
	      case "string":
	
	        P["im"] = /* void */
	        P["re"] = 0;
	
	        var tokens = a.match(/\d+\.?\d*e[+-]?\d+|\d+\.?\d*|\.\d+|./g);
	        var plus = 1;
	        var minus = 0;
	
	        if (tokens === null) {
	          parser_exit();
	        }
	
	        for (var i = 0; i < tokens.length; i++) {
	
	          var c = tokens[i];
	
	          if (c === ' ' || c === '\t' || c === '\n') {
	            /* void */
	          } else if (c === '+') {
	            plus++;
	          } else if (c === '-') {
	            minus++;
	          } else if (c === 'i' || c === 'I') {
	
	            if (plus + minus === 0) {
	              parser_exit();
	            }
	
	            if (tokens[i + 1] !== ' ' && !isNaN(tokens[i + 1])) {
	              P["im"]+= parseFloat((minus % 2 ? "-" : "") + tokens[i + 1]);
	              i++;
	            } else {
	              P["im"]+= parseFloat((minus % 2 ? "-" : "") + "1");
	            }
	            plus = minus = 0;
	
	          } else {
	
	            if (plus + minus === 0 || isNaN(c)) {
	              parser_exit();
	            }
	
	            if (tokens[i + 1] === 'i' || tokens[i + 1] === 'I') {
	              P["im"]+= parseFloat((minus % 2 ? "-" : "") + c);
	              i++;
	            } else {
	              P["re"]+= parseFloat((minus % 2 ? "-" : "") + c);
	            }
	            plus = minus = 0;
	          }
	        }
	
	        // Still something on the stack
	        if (plus + minus > 0) {
	          parser_exit();
	        }
	        break;
	
	      case "number":
	        P["im"] = 0;
	        P["re"] = a;
	        break;
	
	      default:
	        parser_exit();
	    }
	
	    if (isNaN(P["re"]) || isNaN(P["im"])) {
	      // If a calculation is NaN, we treat it as NaN and don't throw
	      //parser_exit();
	    }
	  };
	
	  /**
	   * @constructor
	   * @returns {Complex}
	   */
	  function Complex(a, b) {
	
	    if (!(this instanceof Complex)) {
	      return new Complex(a, b);
	    }
	
	    parse(a, b); // mutates P
	
	    this["re"] = P["re"];
	    this["im"] = P["im"];
	  }
	
	  Complex.prototype = {
	
	    "re": 0,
	    "im": 0,
	
	    /**
	     * Calculates the sign of a complex number
	     *
	     * @returns {Complex}
	     */
	    "sign": function() {
	
	      var abs = this["abs"]();
	
	      return new Complex(
	              this["re"] / abs,
	              this["im"] / abs);
	    },
	
	    /**
	     * Adds two complex numbers
	     *
	     * @returns {Complex}
	     */
	    "add": function(a, b) {
	
	      parse(a, b); // mutates P
	
	      return new Complex(
	              this["re"] + P["re"],
	              this["im"] + P["im"]);
	    },
	
	    /**
	     * Subtracts two complex numbers
	     *
	     * @returns {Complex}
	     */
	    "sub": function(a, b) {
	
	      parse(a, b); // mutates P
	
	      return new Complex(
	              this["re"] - P["re"],
	              this["im"] - P["im"]);
	    },
	
	    /**
	     * Multiplies two complex numbers
	     *
	     * @returns {Complex}
	     */
	    "mul": function(a, b) {
	
	      parse(a, b); // mutates P
	
	      // Besides the addition/subtraction, this helps having a solution for rational Infinity
	      if (P['im'] === 0 && this['im'] === 0) {
	        return new Complex(this['re'] * P['re'], 0);
	      }
	
	      return new Complex(
	              this["re"] * P["re"] - this["im"] * P["im"],
	              this["re"] * P["im"] + this["im"] * P["re"]);
	    },
	
	    /**
	     * Divides two complex numbers
	     *
	     * @returns {Complex}
	     */
	    "div": function(a, b) {
	
	      parse(a, b); // mutates P
	
	      a = this["re"];
	      b = this["im"];
	
	      var c = P["re"];
	      var d = P["im"];
	      var t, x;
	
	      // Divisor is zero
	      if (0 === c && 0 === d) {
	        return new Complex(
	                (a !== 0) ? (a / 0) : 0,
	                (b !== 0) ? (b / 0) : 0);
	      }
	
	      // Divisor is rational
	      if (0 === d) {
	        return new Complex(a / c, b / c);
	      }
	
	      if (Math.abs(c) < Math.abs(d)) {
	
	        x = c / d;
	        t = c * x + d;
	
	        return new Complex(
	                (a * x + b) / t,
	                (b * x - a) / t);
	
	      } else {
	
	        x = d / c;
	        t = d * x + c;
	
	        return new Complex(
	                (a + b * x) / t,
	                (b - a * x) / t);
	      }
	    },
	
	    /**
	     * Calculate the power of two complex numbers
	     *
	     * @returns {Complex}
	     */
	    "pow": function(a, b) {
	
	      parse(a, b); // mutates P
	
	      a = this["re"];
	      b = this["im"];
	
	      if (a === 0 && b === 0) {
	        return new Complex(0, 0);
	      }
	
	      var arg = Math.atan2(b, a);
	      var loh = logHypot(a, b);
	
	      if (P["im"] === 0) {
	
	        if (b === 0 && a >= 0) {
	
	          return new Complex(Math.pow(a, P["re"]), 0);
	
	        } else if (a === 0) {
	
	          switch (P["re"] % 4) {
	            case 0:
	              return new Complex(Math.pow(b, P["re"]), 0);
	            case 1:
	              return new Complex(0, Math.pow(b, P["re"]));
	            case 2:
	              return new Complex(-Math.pow(b, P["re"]), 0);
	            case 3:
	              return new Complex(0, -Math.pow(b, P["re"]));
	          }
	        }
	      }
	
	      /* I couldn"t find a good formula, so here is a derivation and optimization
	       *
	       * z_1^z_2 = (a + bi)^(c + di)
	       *         = exp((c + di) * log(a + bi)
	       *         = pow(a^2 + b^2, (c + di) / 2) * exp(i(c + di)atan2(b, a))
	       * =>...
	       * Re = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * cos(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
	       * Im = (pow(a^2 + b^2, c / 2) * exp(-d * atan2(b, a))) * sin(d * log(a^2 + b^2) / 2 + c * atan2(b, a))
	       *
	       * =>...
	       * Re = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * cos(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
	       * Im = exp(c * log(sqrt(a^2 + b^2)) - d * atan2(b, a)) * sin(d * log(sqrt(a^2 + b^2)) + c * atan2(b, a))
	       *
	       * =>
	       * Re = exp(c * logsq2 - d * arg(z_1)) * cos(d * logsq2 + c * arg(z_1))
	       * Im = exp(c * logsq2 - d * arg(z_1)) * sin(d * logsq2 + c * arg(z_1))
	       *
	       */
	
	      a = Math.exp(P["re"] * loh - P["im"] * arg);
	      b = P["im"] * loh + P["re"] * arg;
	      return new Complex(
	              a * Math.cos(b),
	              a * Math.sin(b));
	    },
	
	    /**
	     * Calculate the complex square root
	     *
	     * @returns {Complex}
	     */
	    "sqrt": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	      var r = this["abs"]();
	
	      var re, im;
	
	      if (a >= 0 && b === 0) {
	        return new Complex(Math.sqrt(a), 0);
	      }
	
	      if (a >= 0) {
	        re = 0.5 * Math.sqrt(2.0 * (r + a));
	      } else {
	        re = Math.abs(b) / Math.sqrt(2 * (r - a));
	      }
	
	      if (a <= 0) {
	        im = 0.5 * Math.sqrt(2.0 * (r - a));
	      } else {
	        im = Math.abs(b) / Math.sqrt(2 * (r + a));
	      }
	
	      return new Complex(re, b >= 0 ? im : -im);
	    },
	
	    /**
	     * Calculate the complex exponent
	     *
	     * @returns {Complex}
	     */
	    "exp": function() {
	
	      var tmp = Math.exp(this["re"]);
	
	      if (this["im"] === 0) {
	        //return new Complex(tmp, 0);
	      }
	      return new Complex(
	              tmp * Math.cos(this["im"]),
	              tmp * Math.sin(this["im"]));
	    },
	
	    /**
	     * Calculate the natural log
	     *
	     * @returns {Complex}
	     */
	    "log": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	      
	      if (b === 0 && a > 0) {
	        //return new Complex(Math.log(a), 0);
	      }
	
	      return new Complex(
	              logHypot(a, b),
	              Math.atan2(b, a));
	    },
	
	    /**
	     * Calculate the magniture of the complex number
	     *
	     * @returns {number}
	     */
	    "abs": function() {
	
	      var a = Math.abs(this["re"]);
	      var b = Math.abs(this["im"]);
	
	      if (a < 3000 && b < 3000) {
	        return Math.sqrt(a * a + b * b);
	      }
	
	      if (a < b) {
	        a = b;
	        b = this["re"] / this["im"];
	      } else {
	        b = this["im"] / this["re"];
	      }
	      return a * Math.sqrt(1 + b * b);
	    },
	
	    /**
	     * Calculate the angle of the complex number
	     *
	     * @returns {number}
	     */
	    "arg": function() {
	
	      return Math.atan2(this["im"], this["re"]);
	    },
	
	    /**
	     * Calculate the sine of the complex number
	     *
	     * @returns {Complex}
	     */
	    "sin": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      return new Complex(
	              Math.sin(a) * Math.cosh(b),
	              Math.cos(a) * Math.sinh(b));
	    },
	
	    /**
	     * Calculate the cosine
	     *
	     * @returns {Complex}
	     */
	    "cos": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      return new Complex(
	              Math.cos(a) * Math.cosh(b),
	             -Math.sin(a) * Math.sinh(b));
	    },
	
	    /**
	     * Calculate the tangent
	     *
	     * @returns {Complex}
	     */
	    "tan": function() {
	
	      var a = 2 * this["re"];
	      var b = 2 * this["im"];
	      var d = Math.cos(a) + Math.cosh(b);
	
	      return new Complex(
	              Math.sin(a) / d,
	              Math.sinh(b) / d);
	    },
	
	    /**
	     * Calculate the cotangent
	     *
	     * @returns {Complex}
	     */
	    "cot": function() {
	
	      var a = 2 * this["re"];
	      var b = 2 * this["im"];
	      var d = Math.cos(a) - Math.cosh(b);
	
	      return new Complex(
	             -Math.sin(a) / d,
	              Math.sinh(b) / d);
	    },
	
	    /**
	     * Calculate the secant
	     *
	     * @returns {Complex}
	     */
	    "sec": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	      var d = 0.5 * Math.cosh(2 * b) + 0.5 * Math.cos(2 * a);
	
	      return new Complex(
	              Math.cos(a) * Math.cosh(b) / d,
	              Math.sin(a) * Math.sinh(b) / d);
	    },
	
	    /**
	     * Calculate the cosecans
	     *
	     * @returns {Complex}
	     */
	    "csc": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	      var d = 0.5 * Math.cosh(2 * b) - 0.5 * Math.cos(2 * a);
	
	      return new Complex(
	              Math.sin(a) * Math.cosh(b) / d,
	             -Math.cos(a) * Math.sinh(b) / d);
	    },
	
	    /**
	     * Calculate the complex arcus sinus
	     *
	     * @returns {Complex}
	     */
	    "asin": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      var t1 = new Complex(
	               b * b - a * a + 1,
	              -2 * a * b)['sqrt']();
	
	      var t2 = new Complex(
	              t1['re'] - b,
	              t1['im'] + a)['log']();
	
	      return new Complex(t2['im'], -t2['re']);
	    },
	
	    /**
	     * Calculate the complex arcus cosinus
	     *
	     * @returns {Complex}
	     */
	    "acos": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      var t1 = new Complex(
	               b * b - a * a + 1,
	              -2 * a * b)['sqrt']();
	
	      var t2 = new Complex(
	              t1["re"] - b,
	              t1["im"] + a)['log']();
	
	      return new Complex(Math.PI / 2 - t2["im"], t2["re"]);
	    },
	
	    /**
	     * Calculate the complex arcus tangent
	     *
	     * @returns {Complex}
	     */
	    "atan": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      if (a === 0) {
	
	        if (b === 1) {
	          return new Complex(0, Infinity);
	        }
	
	        if (b === -1) {
	          return new Complex(0, -Infinity);
	        }
	      }
	
	      var d = a * a + (1.0 - b) * (1.0 - b);
	
	      var t1 = new Complex(
	              (1 - b * b - a * a) / d,
	              -2 * a / d).log();
	
	      return new Complex(-0.5 * t1["im"], 0.5 * t1["re"]);
	    },
	
	    /**
	     * Calculate the complex arcus cotangent
	     *
	     * @returns {Complex}
	     */
	    "acot": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      if (b === 0) {
	        return new Complex(Math.atan2(1, a), 0);
	      }
	
	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                     -b / d).atan()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ?-b / 0 : 0).atan();
	    },
	
	    /**
	     * Calculate the complex arcus secant
	     *
	     * @returns {Complex}
	     */
	    "asec": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      if (a === 0 && b === 0) {
	        return new Complex(0, Infinity);
	      }
	
	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).acos()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ?-b / 0 : 0).acos();
	    },
	
	    /**
	     * Calculate the complex arcus cosecans
	     *
	     * @returns {Complex}
	     */
	    "acsc": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      if (a === 0 && b === 0) {
	        return new Complex(Math.PI / 2, Infinity);
	      }
	
	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                     -b / d).asin()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ?-b / 0 : 0).asin();
	    },
	
	    /**
	     * Calculate the complex sinh
	     *
	     * @returns {Complex}
	     */
	    "sinh": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      return new Complex(
	              Math.sinh(a) * Math.cos(b),
	              Math.cosh(a) * Math.sin(b));
	    },
	
	    /**
	     * Calculate the complex cosh
	     *
	     * @returns {Complex}
	     */
	    "cosh": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      return new Complex(
	              Math.cosh(a) * Math.cos(b),
	              Math.sinh(a) * Math.sin(b));
	    },
	
	    /**
	     * Calculate the complex tanh
	     *
	     * @returns {Complex}
	     */
	    "tanh": function() {
	
	      var a = 2 * this["re"];
	      var b = 2 * this["im"];
	      var d = Math.cosh(a) + Math.cos(b);
	
	      return new Complex(
	              Math.sinh(a) / d,
	              Math.sin(b) / d);
	    },
	
	    /**
	     * Calculate the complex coth
	     *
	     * @returns {Complex}
	     */
	    "coth": function() {
	
	      var a = 2 * this["re"];
	      var b = 2 * this["im"];
	      var d = Math.cosh(a) - Math.cos(b);
	
	      return new Complex(
	              Math.sinh(a) / d,
	             -Math.sin(b) / d);
	    },
	
	    /**
	     * Calculate the complex coth
	     *
	     * @returns {Complex}
	     */
	    "csch": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	      var d = Math.cos(2 * b) - Math.cosh(2 * a);
	
	      return new Complex(
	           -2 * Math.sinh(a) * Math.cos(b) / d, 
	            2 * Math.cosh(a) * Math.sin(b) / d);
	    },
	
	    /**
	     * Calculate the complex sech
	     *
	     * @returns {Complex}
	     */
	    "sech": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	      var d = Math.cos(2 * b) + Math.cosh(2 * a);
	
	      return new Complex(
	              2 * Math.cosh(a) * Math.cos(b) / d, 
	             -2 * Math.sinh(a) * Math.sin(b) / d);
	    },
	
	    /**
	     * Calculate the complex asinh
	     *
	     * @returns {Complex}
	     */
	    "asinh": function() {
	
	      var tmp = this["im"];
	      this["im"] = -this["re"];
	      this["re"] = tmp;
	      var res = this["asin"]();
	
	      this["re"] = -this["im"];
	      this["im"] = tmp;
	      tmp = res["re"];
	
	      res["re"] = -res["im"];
	      res["im"] = tmp;
	      return res;
	    },
	
	    /**
	     * Calculate the complex asinh
	     *
	     * @returns {Complex}
	     */
	    "acosh": function() {
	
	      var tmp;
	      var res = this["acos"]();
	      if (res["im"] <= 0) {
	        tmp = res["re"];
	        res["re"] = -res["im"];
	        res["im"] = tmp;
	      } else {
	        tmp = res["im"];
	        res["im"] = -res["re"];
	        res["re"] = tmp;
	      }
	      return res;
	    },
	
	    /**
	     * Calculate the complex atanh
	     *
	     * @returns {Complex}
	     */
	    "atanh": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      var noIM = a > 1 && b === 0;
	      var oneMinus = 1 - a;
	      var onePlus = 1 + a;
	      var d = oneMinus * oneMinus + b * b;
	
	      var x = (d !== 0)
	              ? new Complex(
	                      (onePlus * oneMinus - b * b) / d,
	                      (b * oneMinus + onePlus * b) / d)
	              : new Complex(
	                      (a !== -1) ? (a / 0) : 0,
	                      (b !== 0) ? (b / 0) : 0);
	
	      var temp = x["re"];
	      x["re"] = logHypot(x["re"], x["im"]) / 2;
	      x["im"] = Math.atan2(x["im"], temp) / 2;
	      if (noIM) {
	        x["im"] = -x["im"];
	      }
	      return x;
	    },
	
	    /**
	     * Calculate the complex acoth
	     *
	     * @returns {Complex}
	     */
	    "acoth": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      if (a === 0 && b === 0) {
	
	        return new Complex(0, Math.PI / 2);
	      }
	
	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                     -b / d).atanh()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ?-b / 0 : 0).atanh();
	    },
	
	    /**
	     * Calculate the complex acsch
	     *
	     * @returns {Complex}
	     */
	    "acsch": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      if (b === 0) {
	
	        return new Complex(
	                (a !== 0)
	                ? Math.log(a + Math.sqrt(a * a + 1))
	                : Infinity, 0);
	      }
	
	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                      -b / d).asinh()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ?-b / 0 : 0).asinh();
	    },
	
	    /**
	     * Calculate the complex asech
	     *
	     * @returns {Complex}
	     */
	    "asech": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      if (a === 0 && b === 0) {
	        return new Complex(Infinity, 0);
	      }
	
	      var d = a * a + b * b;
	      return (d !== 0)
	              ? new Complex(
	                      a / d,
	                     -b / d).acosh()
	              : new Complex(
	                      (a !== 0) ? a / 0 : 0,
	                      (b !== 0) ?-b / 0 : 0).acosh();
	    },
	
	    /**
	     * Calculate the complex inverse 1/z
	     *
	     * @returns {Complex}
	     */
	    "inverse": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	
	      var d = a * a + b * b;
	
	      return new Complex(
	              a !== 0 ? a / d : 0,
	              b !== 0 ?-b / d : 0);
	    },
	
	    /**
	     * Returns the complex conjugate
	     *
	     * @returns {Complex}
	     */
	    "conjugate": function() {
	
	      return new Complex(this["re"], -this["im"]);
	    },
	
	    /**
	     * Gets the negated complex number
	     *
	     * @returns {Complex}
	     */
	    "neg": function() {
	
	      return new Complex(-this["re"], -this["im"]);
	    },
	
	    /**
	     * Ceils the actual complex number
	     *
	     * @returns {Complex}
	     */
	    "ceil": function(places) {
	
	      places = Math.pow(10, places || 0);
	
	      return new Complex(
	              Math.ceil(this["re"] * places) / places,
	              Math.ceil(this["im"] * places) / places);
	    },
	
	    /**
	     * Floors the actual complex number
	     *
	     * @returns {Complex}
	     */
	    "floor": function(places) {
	
	      places = Math.pow(10, places || 0);
	
	      return new Complex(
	              Math.floor(this["re"] * places) / places,
	              Math.floor(this["im"] * places) / places);
	    },
	
	    /**
	     * Ceils the actual complex number
	     *
	     * @returns {Complex}
	     */
	    "round": function(places) {
	
	      places = Math.pow(10, places || 0);
	
	      return new Complex(
	              Math.round(this["re"] * places) / places,
	              Math.round(this["im"] * places) / places);
	    },
	
	    /**
	     * Compares two complex numbers
	     *
	     * @returns {boolean}
	     */
	    "equals": function(a, b) {
	
	      parse(a, b); // mutates P
	
	      return Math.abs(P["re"] - this["re"]) <= Complex["EPSILON"] &&
	             Math.abs(P["im"] - this["im"]) <= Complex["EPSILON"];
	    },
	
	    /**
	     * Clones the actual object
	     *
	     * @returns {Complex}
	     */
	    "clone": function() {
	
	      return new Complex(this["re"], this["im"]);
	    },
	
	    /**
	     * Gets a string of the actual complex number
	     *
	     * @returns {string}
	     */
	    "toString": function() {
	
	      var a = this["re"];
	      var b = this["im"];
	      var ret = "";
	
	      if (isNaN(a) || isNaN(b)) {
	        return "NaN";
	      }
	
	      if (a !== 0) {
	        ret+= a;
	      }
	
	      if (b !== 0) {
	
	        if (a !== 0) {
	          ret+= b < 0 ? " - " : " + ";
	        } else if (b < 0) {
	          ret+= "-";
	        }
	
	        b = Math.abs(b);
	
	        if (1 !== b) {
	          ret+= b;
	        }
	        ret+= "i";
	      }
	
	      if (!ret)
	        return "0";
	
	      return ret;
	    },
	
	    /**
	     * Returns the actual number as a vector
	     *
	     * @returns {Array}
	     */
	    "toVector": function() {
	
	      return [this["re"], this["im"]];
	    },
	
	    /**
	     * Returns the actual real value of the current object
	     *
	     * @returns {number|null}
	     */
	    "valueOf": function() {
	
	      if (this["im"] === 0) {
	        return this["re"];
	      }
	      return null;
	    },
	
	    /**
	     * Checks if the given complex number is not a number
	     *
	     * @returns {boolean}
	     */
	    isNaN: function() {
	      return isNaN(this['re']) || isNaN(this['im']);
	    }
	  };
	
	  Complex["ZERO"] = new Complex(0, 0);
	  Complex["ONE"] = new Complex(1, 0);
	  Complex["I"] = new Complex(0, 1);
	  Complex["PI"] = new Complex(Math.PI, 0);
	  Complex["E"] = new Complex(Math.E, 0);
	  Complex['EPSILON'] = 1e-16;
	
	  if ("function" === "function" && __webpack_require__(81)["amd"]) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return Complex;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (true) {
	    module["exports"] = Complex;
	  } else {
	    root["Complex"] = Complex;
	  }
	  
	})(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(80)(module)))

/***/ }),
/* 80 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 81 */
/***/ (function(module, exports) {

	module.exports = function() { throw new Error("define cannot be used indirect"); };


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  /**
	   * Create a complex value or convert a value to a complex value.
	   *
	   * Syntax:
	   *
	   *     math.complex()                           // creates a complex value with zero
	   *                                              // as real and imaginary part.
	   *     math.complex(re : number, im : string)   // creates a complex value with provided
	   *                                              // values for real and imaginary part.
	   *     math.complex(re : number)                // creates a complex value with provided
	   *                                              // real value and zero imaginary part.
	   *     math.complex(complex : Complex)          // clones the provided complex value.
	   *     math.complex(arg : string)               // parses a string into a complex value.
	   *     math.complex(array : Array)              // converts the elements of the array
	   *                                              // or matrix element wise into a
	   *                                              // complex value.
	   *     math.complex({re: number, im: number})   // creates a complex value with provided
	   *                                              // values for real an imaginary part.
	   *     math.complex({r: number, phi: number})   // creates a complex value with provided
	   *                                              // polar coordinates
	   *
	   * Examples:
	   *
	   *    var a = math.complex(3, -4);     // a = Complex 3 - 4i
	   *    a.re = 5;                        // a = Complex 5 - 4i
	   *    var i = a.im;                    // Number -4;
	   *    var b = math.complex('2 + 6i');  // Complex 2 + 6i
	   *    var c = math.complex();          // Complex 0 + 0i
	   *    var d = math.add(a, b);          // Complex 5 + 2i
	   *
	   * See also:
	   *
	   *    bignumber, boolean, index, matrix, number, string, unit
	   *
	   * @param {* | Array | Matrix} [args]
	   *            Arguments specifying the real and imaginary part of the complex number
	   * @return {Complex | Array | Matrix} Returns a complex value
	   */
	  var complex = typed('complex', {
	    '': function () {
	      return type.Complex.ZERO;
	    },
	
	    'number': function (x) {
	      return new type.Complex(x, 0);
	    },
	
	    'number, number': function (re, im) {
	      return new type.Complex(re, im);
	    },
	
	    // TODO: this signature should be redundant
	    'BigNumber, BigNumber': function (re, im) {
	      return new type.Complex(re.toNumber(), im.toNumber());
	    },
	
	    'Complex': function (x) {
	      return x.clone();
	    },
	
	    'string': function (x) {
	      return type.Complex(x); // for example '2 + 3i'
	    },
	
	    'Object': function (x) {
	      if('re' in x && 'im' in x) {
	        return new type.Complex(x.re, x.im);
	      }
	
	      if ('r' in x && 'phi' in x) {
	        return new type.Complex(x);
	      }
	
	      throw new Error('Expected object with either properties re and im, or properties r and phi.');
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, complex);
	    }
	  });
	
	  complex.toTex = {
	    0: '0',
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(\\left(${args[0]}\\right)+'
	      + latex.symbols['i'] + '\\cdot\\left(${args[1]}\\right)\\right)'
	  };
	
	  return complex;
	}
	
	exports.name = 'complex';
	exports.factory = factory;


/***/ }),
/* 83 */
/***/ (function(module, exports) {

	'use strict';
	
	exports.symbols = {
	  // GREEK LETTERS
	  Alpha: 'A',     alpha: '\\alpha',
	  Beta: 'B',      beta: '\\beta',
	  Gamma: '\\Gamma',    gamma: '\\gamma',
	  Delta: '\\Delta',    delta: '\\delta',
	  Epsilon: 'E',   epsilon: '\\epsilon',  varepsilon: '\\varepsilon',
	  Zeta: 'Z',      zeta: '\\zeta',
	  Eta: 'H',       eta: '\\eta',
	  Theta: '\\Theta',    theta: '\\theta',    vartheta: '\\vartheta',
	  Iota: 'I',      iota: '\\iota',
	  Kappa: 'K',     kappa: '\\kappa',    varkappa: '\\varkappa',
	  Lambda: '\\Lambda',   lambda: '\\lambda',
	  Mu: 'M',        mu: '\\mu',
	  Nu: 'N',        nu: '\\nu',
	  Xi: '\\Xi',       xi: '\\xi',
	  Omicron: 'O',   omicron: 'o',
	  Pi: '\\Pi',       pi: '\\pi',       varpi: '\\varpi',
	  Rho: 'P',       rho: '\\rho',      varrho: '\\varrho',
	  Sigma: '\\Sigma',    sigma: '\\sigma',    varsigma: '\\varsigma',
	  Tau: 'T',       tau: '\\tau',
	  Upsilon: '\\Upsilon',  upsilon: '\\upsilon',
	  Phi: '\\Phi',      phi: '\\phi',      varphi: '\\varphi',
	  Chi: 'X',       chi: '\\chi',
	  Psi: '\\Psi',      psi: '\\psi',
	  Omega: '\\Omega',    omega: '\\omega',
	  //logic
	  'true': '\\mathrm{True}',
	  'false': '\\mathrm{False}',
	  //other
	  i: 'i', //TODO use \i ??
	  inf: '\\infty',
	  Inf: '\\infty',
	  infinity: '\\infty',
	  Infinity: '\\infty',
	  oo: '\\infty',
	  lim: '\\lim',
	  'undefined': '\\mathbf{?}'
	};
	
	exports.operators = {
	  'transpose': '^\\top',
	  'factorial': '!',
	  'pow': '^',
	  'dotPow': '.^\\wedge', //TODO find ideal solution
	  'unaryPlus': '+',
	  'unaryMinus': '-',
	  'bitNot': '~', //TODO find ideal solution
	  'not': '\\neg',
	  'multiply': '\\cdot',
	  'divide': '\\frac', //TODO how to handle that properly?
	  'dotMultiply': '.\\cdot', //TODO find ideal solution
	  'dotDivide': '.:', //TODO find ideal solution
	  'mod': '\\mod',
	  'add': '+',
	  'subtract': '-',
	  'to': '\\rightarrow',
	  'leftShift': '<<',
	  'rightArithShift': '>>',
	  'rightLogShift': '>>>',
	  'equal': '=',
	  'unequal': '\\neq',
	  'smaller': '<',
	  'larger': '>',
	  'smallerEq': '\\leq',
	  'largerEq': '\\geq',
	  'bitAnd': '\\&',
	  'bitXor': '\\underline{|}',
	  'bitOr': '|',
	  'and': '\\wedge',
	  'xor': '\\veebar',
	  'or': '\\vee'
	};
	
	exports.defaultTemplate = '\\mathrm{${name}}\\left(${args}\\right)';
	
	var units = {
	  deg: '^\\circ'
	};
	
	//@param {string} name
	//@param {boolean} isUnit
	exports.toSymbol = function (name, isUnit) {
	  isUnit = typeof isUnit === 'undefined' ? false : isUnit;
	  if (isUnit) {
	    if (units.hasOwnProperty(name)) {
	      return units[name];
	    }
	    return '\\mathrm{' + name + '}';
	  }
	
	  if (exports.symbols.hasOwnProperty(name)) {
	    return exports.symbols[name];
	  }
	  else if (name.indexOf('_') !== -1) {
	    //symbol with index (eg. alpha_1)
	    var index = name.indexOf('_');
	    return exports.toSymbol(name.substring(0, index)) + '_{'
	      + exports.toSymbol(name.substring(index + 1)) + '}';
	  }
	  return name;
	};


/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  // type
	  __webpack_require__(85),
	
	  // construction function
	  __webpack_require__(87)
	];


/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

	var Fraction = __webpack_require__(86);
	
	/**
	 * Attach type information
	 */
	Fraction.prototype.type = 'Fraction';
	Fraction.prototype.isFraction = true;
	
	/**
	 * Get a JSON representation of a Fraction containing type information
	 * @returns {Object} Returns a JSON object structured as:
	 *                   `{"mathjs": "Fraction", "n": 3, "d": 8}`
	 */
	Fraction.prototype.toJSON = function () {
	  return {
	    mathjs: 'Fraction',
	    n: this.s * this.n,
	    d: this.d
	  };
	};
	
	/**
	 * Instantiate a Fraction from a JSON object
	 * @param {Object} json  a JSON object structured as:
	 *                       `{"mathjs": "Fraction", "n": 3, "d": 8}`
	 * @return {BigNumber}
	 */
	Fraction.fromJSON = function (json) {
	  return new Fraction(json);
	};
	
	
	function factory (type, config, load, typed) {
	  return Fraction;
	}
	
	exports.name = 'Fraction';
	exports.path = 'type';
	exports.factory = factory;


/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module) {/**
	 * @license Fraction.js v4.0.0 09/09/2015
	 * http://www.xarg.org/2014/03/rational-numbers-in-javascript/
	 *
	 * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
	 * Dual licensed under the MIT or GPL Version 2 licenses.
	 **/
	
	
	/**
	 *
	 * This class offers the possibility to calculate fractions.
	 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
	 *
	 * Array/Object form
	 * [ 0 => <nominator>, 1 => <denominator> ]
	 * [ n => <nominator>, d => <denominator> ]
	 *
	 * Integer form
	 * - Single integer value
	 *
	 * Double form
	 * - Single double value
	 *
	 * String form
	 * 123.456 - a simple double
	 * 123/456 - a string fraction
	 * 123.'456' - a double with repeating decimal places
	 * 123.(456) - synonym
	 * 123.45'6' - a double with repeating last place
	 * 123.45(6) - synonym
	 *
	 * Example:
	 *
	 * var f = new Fraction("9.4'31'");
	 * f.mul([-4, 3]).div(4.9);
	 *
	 */
	
	(function(root) {
	
	  "use strict";
	
	  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough.
	  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
	  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
	  var MAX_CYCLE_LEN = 2000;
	
	  // Parsed data to avoid calling "new" all the time
	  var P = {
	    "s": 1,
	    "n": 0,
	    "d": 1
	  };
	
	  function createError(name) {
	      var errorConstructor = function() {
	        var temp = Error.apply(this, arguments);
	        temp.name = this.name = name;
	        this.stack = temp.stack;
	        this.message = temp.message;
	      }
	
	      var IntermediateInheritor = function() {};
	      IntermediateInheritor.prototype = Error.prototype;
	      errorConstructor.prototype = new IntermediateInheritor();
	
	      return errorConstructor;
	  }
	
	  var DivisionByZero = Fraction['DivisionByZero'] = createError('DivisionByZero');
	  var InvalidParameter = Fraction['InvalidParameter'] = createError('InvalidParameter');
	
	  function assign(n, s) {
	
	    if (isNaN(n = parseInt(n, 10))) {
	      throwInvalidParam();
	    }
	    return n * s;
	  }
	
	  function throwInvalidParam() {
	    throw new InvalidParameter();
	  }
	
	  var parse = function(p1, p2) {
	
	    var n = 0, d = 1, s = 1;
	    var v = 0, w = 0, x = 0, y = 1, z = 1;
	
	    var A = 0, B = 1;
	    var C = 1, D = 1;
	
	    var N = 10000000;
	    var M;
	
	    if (p1 === undefined || p1 === null) {
	      /* void */
	    } else if (p2 !== undefined) {
	      n = p1;
	      d = p2;
	      s = n * d;
	    } else
	      switch (typeof p1) {
	
	        case "object":
	        {
	          if ("d" in p1 && "n" in p1) {
	            n = p1["n"];
	            d = p1["d"];
	            if ("s" in p1)
	              n*= p1["s"];
	          } else if (0 in p1) {
	            n = p1[0];
	            if (1 in p1)
	              d = p1[1];
	          } else {
	            throwInvalidParam();
	          }
	          s = n * d;
	          break;
	        }
	        case "number":
	        {
	          if (p1 < 0) {
	            s = p1;
	            p1 = -p1;
	          }
	
	          if (p1 % 1 === 0) {
	            n = p1;
	          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow
	
	            if (p1 >= 1) {
	              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
	              p1/= z;
	            }
	
	            // Using Farey Sequences
	            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/
	
	            while (B <= N && D <= N) {
	              M = (A + C) / (B + D);
	
	              if (p1 === M) {
	                if (B + D <= N) {
	                  n = A + C;
	                  d = B + D;
	                } else if (D > B) {
	                  n = C;
	                  d = D;
	                } else {
	                  n = A;
	                  d = B;
	                }
	                break;
	
	              } else {
	
	                if (p1 > M) {
	                  A+= C;
	                  B+= D;
	                } else {
	                  C+= A;
	                  D+= B;
	                }
	
	                if (B > N) {
	                  n = C;
	                  d = D;
	                } else {
	                  n = A;
	                  d = B;
	                }
	              }
	            }
	            n*= z;
	          } else if (isNaN(p1) || isNaN(p2)) {
	            d = n = NaN;
	          }
	          break;
	        }
	        case "string":
	        {
	          B = p1.match(/\d+|./g);
	
	          if (B[A] === '-') {// Check for minus sign at the beginning
	            s = -1;
	            A++;
	          } else if (B[A] === '+') {// Check for plus sign at the beginning
	            A++;
	          }
	
	          if (B.length === A + 1) { // Check if it's just a simple number "1234"
	            w = assign(B[A++], s);
	          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number
	
	            if (B[A] !== '.') { // Handle 0.5 and .5
	              v = assign(B[A++], s);
	            }
	            A++;
	
	            // Check for decimal places
	            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
	              w = assign(B[A], s);
	              y = Math.pow(10, B[A].length);
	              A++;
	            }
	
	            // Check for repeating places
	            if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
	              x = assign(B[A + 1], s);
	              z = Math.pow(10, B[A + 1].length) - 1;
	              A+= 3;
	            }
	
	          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
	            w = assign(B[A], s);
	            y = assign(B[A + 2], 1);
	            A+= 3;
	          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
	            v = assign(B[A], s);
	            w = assign(B[A + 2], s);
	            y = assign(B[A + 4], 1);
	            A+= 5;
	          }
	
	          if (B.length <= A) { // Check for more tokens on the stack
	            d = y * z;
	            s = /* void */
	                    n = x + d * v + z * w;
	            break;
	          }
	
	          /* Fall through on error */
	        }
	        default:
	          throwInvalidParam();
	      }
	
	    if (d === 0) {
	      throw new DivisionByZero();
	    }
	
	    P["s"] = s < 0 ? -1 : 1;
	    P["n"] = Math.abs(n);
	    P["d"] = Math.abs(d);
	  };
	
	  var modpow = function(b, e, m) {
	
	    for (var r = 1; e > 0; b = (b * b) % m, e >>= 1) {
	
	      if (e & 1) {
	        r = (r * b) % m;
	      }
	    }
	    return r;
	  };
	
	  var cycleLen = function(n, d) {
	
	    for (; d % 2 === 0;
	            d/= 2) {}
	
	    for (; d % 5 === 0;
	            d/= 5) {}
	
	    if (d === 1) // Catch non-cyclic numbers
	      return 0;
	
	    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
	    // 10^(d-1) % d == 1
	    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone,
	    // as we want to translate the numbers to strings.
	
	    var rem = 10 % d;
	
	    for (var t = 1; rem !== 1; t++) {
	      rem = rem * 10 % d;
	
	      if (t > MAX_CYCLE_LEN)
	        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
	    }
	    return t;
	  };
	
	  var cycleStart = function(n, d, len) {
	
	    var rem1 = 1;
	    var rem2 = modpow(10, len, d);
	
	    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
	      // Solve 10^s == 10^(s+t) (mod d)
	
	      if (rem1 === rem2)
	        return t;
	
	      rem1 = rem1 * 10 % d;
	      rem2 = rem2 * 10 % d;
	    }
	    return 0;
	  };
	
	  var gcd = function(a, b) {
	
	    if (!a) return b;
	    if (!b) return a;
	
	    while (1) {
	      a%= b;
	      if (!a) return b;
	      b%= a;
	      if (!b) return a;
	    }
	  };
	
	  /**
	   * Module constructor
	   *
	   * @constructor
	   * @param {number|Fraction} a
	   * @param {number=} b
	   */
	  function Fraction(a, b) {
	
	    if (!(this instanceof Fraction)) {
	      return new Fraction(a, b);
	    }
	
	    parse(a, b);
	
	    if (Fraction['REDUCE']) {
	      a = gcd(P["d"], P["n"]); // Abuse a
	    } else {
	      a = 1;
	    }
	
	    this["s"] = P["s"];
	    this["n"] = P["n"] / a;
	    this["d"] = P["d"] / a;
	  }
	
	  /**
	   * Boolean global variable to be able to disable automatic reduction of the fraction
	   *
	   */
	  Fraction['REDUCE'] = 1;
	
	  Fraction.prototype = {
	
	    "s": 1,
	    "n": 0,
	    "d": 1,
	
	    /**
	     * Calculates the absolute value
	     *
	     * Ex: new Fraction(-4).abs() => 4
	     **/
	    "abs": function() {
	
	      return new Fraction(this["n"], this["d"]);
	    },
	
	    /**
	     * Inverts the sign of the current fraction
	     *
	     * Ex: new Fraction(-4).neg() => 4
	     **/
	    "neg": function() {
	
	      return new Fraction(-this["s"] * this["n"], this["d"]);
	    },
	
	    /**
	     * Adds two rational numbers
	     *
	     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
	     **/
	    "add": function(a, b) {
	
	      parse(a, b);
	      return new Fraction(
	              this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
	              this["d"] * P["d"]
	              );
	    },
	
	    /**
	     * Subtracts two rational numbers
	     *
	     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
	     **/
	    "sub": function(a, b) {
	
	      parse(a, b);
	      return new Fraction(
	              this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
	              this["d"] * P["d"]
	              );
	    },
	
	    /**
	     * Multiplies two rational numbers
	     *
	     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
	     **/
	    "mul": function(a, b) {
	
	      parse(a, b);
	      return new Fraction(
	              this["s"] * P["s"] * this["n"] * P["n"],
	              this["d"] * P["d"]
	              );
	    },
	
	    /**
	     * Divides two rational numbers
	     *
	     * Ex: new Fraction("-17.(345)").inverse().div(3)
	     **/
	    "div": function(a, b) {
	
	      parse(a, b);
	      return new Fraction(
	              this["s"] * P["s"] * this["n"] * P["d"],
	              this["d"] * P["n"]
	              );
	    },
	
	    /**
	     * Clones the actual object
	     *
	     * Ex: new Fraction("-17.(345)").clone()
	     **/
	    "clone": function() {
	      return new Fraction(this);
	    },
	
	    /**
	     * Calculates the modulo of two rational numbers - a more precise fmod
	     *
	     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
	     **/
	    "mod": function(a, b) {
	
	      if (isNaN(this['n']) || isNaN(this['d'])) {
	        return new Fraction(NaN);
	      }
	
	      if (a === undefined) {
	        return new Fraction(this["s"] * this["n"] % this["d"], 1);
	      }
	
	      parse(a, b);
	      if (0 === P["n"] && 0 === this["d"]) {
	        Fraction(0, 0); // Throw DivisionByZero
	      }
	
	      /*
	       * First silly attempt, kinda slow
	       *
	       return that["sub"]({
	       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
	       "d": num["d"],
	       "s": this["s"]
	       });*/
	
	      /*
	       * New attempt: a1 / b1 = a2 / b2 * q + r
	       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
	       * => (b2 * a1 % a2 * b1) / (b1 * b2)
	       */
	      return new Fraction(
	              (this["s"] * P["d"] * this["n"]) % (P["n"] * this["d"]),
	              P["d"] * this["d"]
	              );
	    },
	
	    /**
	     * Calculates the fractional gcd of two rational numbers
	     *
	     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
	     */
	    "gcd": function(a, b) {
	
	      parse(a, b);
	
	      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)
	
	      return new Fraction(gcd(P["n"], this["n"]), P["d"] * this["d"] / gcd(P["d"], this["d"]));
	    },
	
	    /**
	     * Calculates the fractional lcm of two rational numbers
	     *
	     * Ex: new Fraction(5,8).lcm(3,7) => 15
	     */
	    "lcm": function(a, b) {
	
	      parse(a, b);
	
	      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)
	
	      if (P["n"] === 0 && this["n"] === 0) {
	        return new Fraction;
	      }
	      return new Fraction(P["n"] * this["n"] / gcd(P["n"], this["n"]), gcd(P["d"], this["d"]));
	    },
	
	    /**
	     * Calculates the ceil of a rational number
	     *
	     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
	     **/
	    "ceil": function(places) {
	
	      places = Math.pow(10, places || 0);
	
	      if (isNaN(this["n"]) || isNaN(this["d"])) {
	        return new Fraction(NaN);
	      }
	      return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
	    },
	
	    /**
	     * Calculates the floor of a rational number
	     *
	     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
	     **/
	    "floor": function(places) {
	
	      places = Math.pow(10, places || 0);
	
	      if (isNaN(this["n"]) || isNaN(this["d"])) {
	        return new Fraction(NaN);
	      }
	      return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
	    },
	
	    /**
	     * Rounds a rational numbers
	     *
	     * Ex: new Fraction('4.(3)').round() => (4 / 1)
	     **/
	    "round": function(places) {
	
	      places = Math.pow(10, places || 0);
	
	      if (isNaN(this["n"]) || isNaN(this["d"])) {
	        return new Fraction(NaN);
	      }
	      return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
	    },
	
	    /**
	     * Gets the inverse of the fraction, means numerator and denumerator are exchanged
	     *
	     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
	     **/
	    "inverse": function() {
	
	      return new Fraction(this["s"] * this["d"], this["n"]);
	    },
	
	    /**
	     * Calculates the fraction to some integer exponent
	     *
	     * Ex: new Fraction(-1,2).pow(-3) => -8
	     */
	    "pow": function(m) {
	
	      if (m < 0) {
	        return new Fraction(Math.pow(this['s'] * this["d"],-m), Math.pow(this["n"],-m));
	      } else {
	        return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
	      }
	    },
	
	    /**
	     * Check if two rational numbers are the same
	     *
	     * Ex: new Fraction(19.6).equals([98, 5]);
	     **/
	    "equals": function(a, b) {
	
	      parse(a, b);
	      return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
	    },
	
	    /**
	     * Check if two rational numbers are the same
	     *
	     * Ex: new Fraction(19.6).equals([98, 5]);
	     **/
	    "compare": function(a, b) {
	
	      parse(a, b);
	      var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
	      return (0 < t) - (t < 0);
	    },
	
	    /**
	     * Check if two rational numbers are divisible
	     *
	     * Ex: new Fraction(19.6).divisible(1.5);
	     */
	    "divisible": function(a, b) {
	
	      parse(a, b);
	      return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
	    },
	
	    /**
	     * Returns a decimal representation of the fraction
	     *
	     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
	     **/
	    'valueOf': function() {
	
	      return this["s"] * this["n"] / this["d"];
	    },
	
	    /**
	     * Returns a string-fraction representation of a Fraction object
	     *
	     * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
	     **/
	    'toFraction': function(excludeWhole) {
	
	      var whole, str = "";
	      var n = this["n"];
	      var d = this["d"];
	      if (this["s"] < 0) {
	        str+= '-';
	      }
	
	      if (d === 1) {
	        str+= n;
	      } else {
	
	        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
	          str+= whole;
	          str+= " ";
	          n%= d;
	        }
	
	        str+= n;
	        str+= '/';
	        str+= d;
	      }
	      return str;
	    },
	
	    /**
	     * Returns a latex representation of a Fraction object
	     *
	     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
	     **/
	    'toLatex': function(excludeWhole) {
	
	      var whole, str = "";
	      var n = this["n"];
	      var d = this["d"];
	      if (this["s"] < 0) {
	        str+= '-';
	      }
	
	      if (d === 1) {
	        str+= n;
	      } else {
	
	        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
	          str+= whole;
	          n%= d;
	        }
	
	        str+= "\\frac{";
	        str+= n;
	        str+= '}{';
	        str+= d;
	        str+= '}';
	      }
	      return str;
	    },
	
	    /**
	     * Returns an array of continued fraction elements
	     *
	     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
	     */
	    'toContinued': function() {
	
	      var t;
	      var a = this['n'];
	      var b = this['d'];
	      var res = [];
	
	      do {
	        res.push(Math.floor(a / b));
	        t = a % b;
	        a = b;
	        b = t;
	      } while (a !== 1);
	
	      return res;
	    },
	
	    /**
	     * Creates a string representation of a fraction with all digits
	     *
	     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
	     **/
	    'toString': function() {
	
	      var g;
	      var N = this["n"];
	      var D = this["d"];
	
	      if (isNaN(N) || isNaN(D)) {
	        return "NaN";
	      }
	
	      if (!Fraction['REDUCE']) {
	        g = gcd(N, D);
	        N/= g;
	        D/= g;
	      }
	
	      var p = String(N).split(""); // Numerator chars
	      var t = 0; // Tmp var
	
	      var ret = [~this["s"] ? "" : "-", "", ""]; // Return array, [0] is zero sign, [1] before comma, [2] after
	      var zeros = ""; // Collection variable for zeros
	
	      var cycLen = cycleLen(N, D); // Cycle length
	      var cycOff = cycleStart(N, D, cycLen); // Cycle start
	
	      var j = -1;
	      var n = 1; // str index
	
	      // rough estimate to fill zeros
	      var length = 15 + cycLen + cycOff + p.length; // 15 = decimal places when no repitation
	
	      for (var i = 0; i < length; i++, t*= 10) {
	
	        if (i < p.length) {
	          t+= Number(p[i]);
	        } else {
	          n = 2;
	          j++; // Start now => after comma
	        }
	
	        if (cycLen > 0) { // If we have a repeating part
	          if (j === cycOff) {
	            ret[n]+= zeros + "(";
	            zeros = "";
	          } else if (j === cycLen + cycOff) {
	            ret[n]+= zeros + ")";
	            break;
	          }
	        }
	
	        if (t >= D) {
	          ret[n]+= zeros + ((t / D) | 0); // Flush zeros, Add current digit
	          zeros = "";
	          t = t % D;
	        } else if (n > 1) { // Add zeros to the zero buffer
	          zeros+= "0";
	        } else if (ret[n]) { // If before comma, add zero only if already something was added
	          ret[n]+= "0";
	        }
	      }
	
	      // If it's empty, it's a leading zero only
	      ret[0]+= ret[1] || "0";
	
	      // If there is something after the comma, add the comma sign
	      if (ret[2]) {
	        return ret[0] + "." + ret[2];
	      }
	      return ret[0];
	    }
	  };
	
	  if ("function" === "function" && __webpack_require__(81)["amd"]) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return Fraction;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (true) {
	    module["exports"] = Fraction;
	  } else {
	    root['Fraction'] = Fraction;
	  }
	
	})(this);
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(80)(module)))

/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Create a fraction convert a value to a fraction.
	   *
	   * Syntax:
	   *     math.fraction(numerator, denominator)
	   *     math.fraction({n: numerator, d: denominator})
	   *     math.fraction(matrix: Array | Matrix)         Turn all matrix entries
	   *                                                   into fractions
	   *
	   * Examples:
	   *
	   *     math.fraction(1, 3);
	   *     math.fraction('2/3');
	   *     math.fraction({n: 2, d: 3});
	   *     math.fraction([0.2, 0.25, 1.25]);
	   *
	   * See also:
	   *
	   *    bignumber, number, string, unit
	   *
	   * @param {number | string | Fraction | BigNumber | Array | Matrix} [args]
	   *            Arguments specifying the numerator and denominator of
	   *            the fraction
	   * @return {Fraction | Array | Matrix} Returns a fraction
	   */
	  var fraction = typed('fraction', {
	    'number': function (x) {
	      if (!isFinite(x) || isNaN(x)) {
	        throw new Error(x + ' cannot be represented as a fraction');
	      }
	
	      return new type.Fraction(x);
	    },
	
	    'string': function (x) {
	      return new type.Fraction(x);
	    },
	
	    'number, number': function (numerator, denominator) {
	      return new type.Fraction(numerator, denominator);
	    },
	
	    'BigNumber': function (x) {
	      return new type.Fraction(x.toString());
	    },
	
	    'Fraction': function (x) {
	      return x; // fractions are immutable
	    },
	
	    'Object': function (x) {
	      return new type.Fraction(x);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, fraction);
	    }
	  });
	
	  return fraction;
	}
	
	exports.name = 'fraction';
	exports.factory = factory;


/***/ }),
/* 88 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  // types
	  __webpack_require__(89),
	  __webpack_require__(97),
	  __webpack_require__(99),
	  __webpack_require__(102),
	  __webpack_require__(111),
	  __webpack_require__(117),
	  __webpack_require__(118),
	  __webpack_require__(119),
	
	  // construction functions
	  __webpack_require__(120),
	  __webpack_require__(104),
	  __webpack_require__(121)
	];


/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(90);
	
	var string = util.string;
	
	var isString = string.isString;
	
	function factory (type, config, load, typed) {
	  /**
	   * @constructor Matrix
	   *
	   * A Matrix is a wrapper around an Array. A matrix can hold a multi dimensional
	   * array. A matrix can be constructed as:
	   *     var matrix = math.matrix(data)
	   *
	   * Matrix contains the functions to resize, get and set values, get the size,
	   * clone the matrix and to convert the matrix to a vector, array, or scalar.
	   * Furthermore, one can iterate over the matrix using map and forEach.
	   * The internal Array of the Matrix can be accessed using the function valueOf.
	   *
	   * Example usage:
	   *     var matrix = math.matrix([[1, 2], [3, 4]]);
	   *     matix.size();              // [2, 2]
	   *     matrix.resize([3, 2], 5);
	   *     matrix.valueOf();          // [[1, 2], [3, 4], [5, 5]]
	   *     matrix.subset([1,2])       // 3 (indexes are zero-based)
	   *
	   */
	  function Matrix() {
	    if (!(this instanceof Matrix)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	  }
	
	  /**
	   * Attach type information
	   */
	  Matrix.prototype.type = 'Matrix';
	  Matrix.prototype.isMatrix = true;
	
	  /**
	   * Get the Matrix storage constructor for the given format.
	   *
	   * @param {string} format       The Matrix storage format.
	   *
	   * @return {Function}           The Matrix storage constructor.
	   */
	  Matrix.storage = function (format) {
	    // check storage format is a string
	    if (!isString(format)) {
	      throw new TypeError('format must be a string value');
	    }
	
	    // get storage format constructor
	    var constructor = Matrix._storage[format];
	    if (!constructor) {
	      throw new SyntaxError('Unsupported matrix storage format: ' + format);
	    }
	
	    // return storage constructor
	    return constructor;
	  };
	
	  // a map with all constructors for all storage types
	  Matrix._storage = {};
	
	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     var format = matrix.storage()                   // retrieve storage format
	   *
	   * @return {string}           The storage format.
	   */
	  Matrix.prototype.storage = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke storage on a Matrix interface');
	  };
	  
	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     var format = matrix.datatype()                   // retrieve matrix datatype
	   *
	   * @return {string}           The datatype.
	   */
	  Matrix.prototype.datatype = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke datatype on a Matrix interface');
	  };
	
	  /**
	   * Create a new Matrix With the type of the current matrix instance
	   * @param {Array | Object} data
	   * @param {string} [datatype]
	   */
	  Matrix.prototype.create = function (data, datatype) {
	    throw new Error('Cannot invoke create on a Matrix interface');
	  };
	
	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     var subset = matrix.subset(index)               // retrieve subset
	   *     var value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | Matrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  Matrix.prototype.subset = function (index, replacement, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke subset on a Matrix interface');
	  };
	
	  /**
	   * Get a single element from the matrix.
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  Matrix.prototype.get = function (index) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke get on a Matrix interface');
	  };
	
	  /**
	   * Replace a single element in the matrix.
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {Matrix} self
	   */
	  Matrix.prototype.set = function (index, value, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke set on a Matrix interface');
	  };
	
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when 
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  Matrix.prototype.resize = function (size, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke resize on a Matrix interface');
	  };
	
	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */
	  Matrix.prototype.reshape = function (size, defaultValue) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke reshape on a Matrix interface');
	  };
	
	  /**
	   * Create a clone of the matrix
	   * @return {Matrix} clone
	   */
	  Matrix.prototype.clone = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke clone on a Matrix interface');
	  };
	
	  /**
	   * Retrieve the size of the matrix.
	   * @returns {number[]} size
	   */
	  Matrix.prototype.size = function() {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke size on a Matrix interface');
	  };
	
	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {Matrix} matrix
	   */
	  Matrix.prototype.map = function (callback, skipZeros) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke map on a Matrix interface');
	  };
	
	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */
	  Matrix.prototype.forEach = function (callback) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke forEach on a Matrix interface');
	  };
	
	  /**
	   * Create an Array with a copy of the data of the Matrix
	   * @returns {Array} array
	   */
	  Matrix.prototype.toArray = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toArray on a Matrix interface');
	  };
	
	  /**
	   * Get the primitive value of the Matrix: a multidimensional array
	   * @returns {Array} array
	   */
	  Matrix.prototype.valueOf = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke valueOf on a Matrix interface');
	  };
	
	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  Matrix.prototype.format = function (options) {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke format on a Matrix interface');
	  };
	
	  /**
	   * Get a string representation of the matrix
	   * @returns {string} str
	   */
	  Matrix.prototype.toString = function () {
	    // must be implemented by each of the Matrix implementations
	    throw new Error('Cannot invoke toString on a Matrix interface');
	  };
	   
	  // exports
	  return Matrix;
	}
	
	exports.name = 'Matrix';
	exports.path = 'type';
	exports.factory = factory;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.array = __webpack_require__(91);
	exports['boolean'] = __webpack_require__(95);
	exports['function'] = __webpack_require__(96);
	exports.number = __webpack_require__(58);
	exports.object = __webpack_require__(55);
	exports.string = __webpack_require__(74);
	exports.types = __webpack_require__(92);
	exports.emitter = __webpack_require__(59);


/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var number = __webpack_require__(58);
	var string = __webpack_require__(74);
	var object = __webpack_require__(55);
	var types = __webpack_require__(92);
	
	var DimensionError = __webpack_require__(93);
	var IndexError = __webpack_require__(94);
	
	/**
	 * Calculate the size of a multi dimensional array.
	 * This function checks the size of the first entry, it does not validate
	 * whether all dimensions match. (use function `validate` for that)
	 * @param {Array} x
	 * @Return {Number[]} size
	 */
	exports.size = function (x) {
	  var s = [];
	
	  while (Array.isArray(x)) {
	    s.push(x.length);
	    x = x[0];
	  }
	
	  return s;
	};
	
	/**
	 * Recursively validate whether each element in a multi dimensional array
	 * has a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @param {number} dim   Current dimension
	 * @throws DimensionError
	 * @private
	 */
	function _validate(array, size, dim) {
	  var i;
	  var len = array.length;
	
	  if (len != size[dim]) {
	    throw new DimensionError(len, size[dim]);
	  }
	
	  if (dim < size.length - 1) {
	    // recursively validate each child array
	    var dimNext = dim + 1;
	    for (i = 0; i < len; i++) {
	      var child = array[i];
	      if (!Array.isArray(child)) {
	        throw new DimensionError(size.length - 1, size.length, '<');
	      }
	      _validate(array[i], size, dimNext);
	    }
	  }
	  else {
	    // last dimension. none of the childs may be an array
	    for (i = 0; i < len; i++) {
	      if (Array.isArray(array[i])) {
	        throw new DimensionError(size.length + 1, size.length, '>');
	      }
	    }
	  }
	}
	
	/**
	 * Validate whether each element in a multi dimensional array has
	 * a size corresponding to the provided size array.
	 * @param {Array} array    Array to be validated
	 * @param {number[]} size  Array with the size of each dimension
	 * @throws DimensionError
	 */
	exports.validate = function(array, size) {
	  var isScalar = (size.length == 0);
	  if (isScalar) {
	    // scalar
	    if (Array.isArray(array)) {
	      throw new DimensionError(array.length, 0);
	    }
	  }
	  else {
	    // array
	    _validate(array, size, 0);
	  }
	};
	
	/**
	 * Test whether index is an integer number with index >= 0 and index < length
	 * when length is provided
	 * @param {number} index    Zero-based index
	 * @param {number} [length] Length of the array
	 */
	exports.validateIndex = function(index, length) {
	  if (!number.isNumber(index) || !number.isInteger(index)) {
	    throw new TypeError('Index must be an integer (value: ' + index + ')');
	  }
	  if (index < 0 || (typeof length === 'number' && index >= length)) {
	    throw new IndexError(index, length);
	  }
	};
	
	// a constant used to specify an undefined defaultValue
	exports.UNINITIALIZED = {};
	
	/**
	 * Resize a multi dimensional array. The resized array is returned.
	 * @param {Array} array         Array to be resized
	 * @param {Array.<number>} size Array with the size of each dimension
	 * @param {*} [defaultValue=0]  Value to be filled in in new entries,
	 *                              zero by default. To leave new entries undefined,
	 *                              specify array.UNINITIALIZED as defaultValue
	 * @return {Array} array         The resized array
	 */
	exports.resize = function(array, size, defaultValue) {
	  // TODO: add support for scalars, having size=[] ?
	
	  // check the type of the arguments
	  if (!Array.isArray(array) || !Array.isArray(size)) {
	    throw new TypeError('Array expected');
	  }
	  if (size.length === 0) {
	    throw new Error('Resizing to scalar is not supported');
	  }
	
	  // check whether size contains positive integers
	  size.forEach(function (value) {
	    if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
	      throw new TypeError('Invalid size, must contain positive integers ' +
	          '(size: ' + string.format(size) + ')');
	    }
	  });
	
	  // recursively resize the array
	  var _defaultValue = (defaultValue !== undefined) ? defaultValue : 0;
	  _resize(array, size, 0, _defaultValue);
	
	  return array;
	};
	
	/**
	 * Recursively resize a multi dimensional array
	 * @param {Array} array         Array to be resized
	 * @param {number[]} size       Array with the size of each dimension
	 * @param {number} dim          Current dimension
	 * @param {*} [defaultValue]    Value to be filled in in new entries,
	 *                              undefined by default.
	 * @private
	 */
	function _resize (array, size, dim, defaultValue) {
	  var i;
	  var elem;
	  var oldLen = array.length;
	  var newLen = size[dim];
	  var minLen = Math.min(oldLen, newLen);
	
	  // apply new length
	  array.length = newLen;
	
	  if (dim < size.length - 1) {
	    // non-last dimension
	    var dimNext = dim + 1;
	
	    // resize existing child arrays
	    for (i = 0; i < minLen; i++) {
	      // resize child array
	      elem = array[i];
	      if (!Array.isArray(elem)) {
	        elem = [elem]; // add a dimension
	        array[i] = elem;
	      }
	      _resize(elem, size, dimNext, defaultValue);
	    }
	
	    // create new child arrays
	    for (i = minLen; i < newLen; i++) {
	      // get child array
	      elem = [];
	      array[i] = elem;
	
	      // resize new child array
	      _resize(elem, size, dimNext, defaultValue);
	    }
	  }
	  else {
	    // last dimension
	
	    // remove dimensions of existing values
	    for (i = 0; i < minLen; i++) {
	      while (Array.isArray(array[i])) {
	        array[i] = array[i][0];
	      }
	    }
	
	    if(defaultValue !== exports.UNINITIALIZED) {
	      // fill new elements with the default value
	      for (i = minLen; i < newLen; i++) {
	        array[i] = defaultValue;
	      }
	    }
	  }
	}
	
	/**
	 * Re-shape a multi dimensional array to fit the specified dimensions
	 * @param {Array} array           Array to be reshaped
	 * @param {Array.<number>} sizes  List of sizes for each dimension
	 * @returns {Array}               Array whose data has been formatted to fit the
	 *                                specified dimensions
	 *
	 * @throws {DimensionError}       If the product of the new dimension sizes does
	 *                                not equal that of the old ones
	 */
	exports.reshape = function(array, sizes) {
	  var flatArray = exports.flatten(array);
	  var newArray;
	
	  var product = function (arr) {
	    return arr.reduce(function (prev, curr) {
	      return prev * curr;
	    });
	  };
	
	  if (!Array.isArray(array) || !Array.isArray(sizes)) {
	    throw new TypeError('Array expected');
	  }
	
	  if (sizes.length === 0) {
	    throw new DimensionError(0, product(exports.size(array)), '!=');
	  }
	
	  try {
	    newArray  = _reshape(flatArray, sizes);
	  } catch (e) {
	    if (e instanceof DimensionError) {
	      throw new DimensionError(
	        product(sizes),
	        product(exports.size(array)),
	        '!='
	      );
	    }
	    throw e;
	  }
	
	  if (flatArray.length > 0) {
	    throw new DimensionError(
	      product(sizes),
	      product(exports.size(array)),
	      '!='
	    );
	  }
	
	  return newArray;
	};
	
	/**
	 * Recursively re-shape a multi dimensional array to fit the specified dimensions
	 * @param {Array} array           Array to be reshaped
	 * @param {Array.<number>} sizes  List of sizes for each dimension
	 * @returns {Array}               Array whose data has been formatted to fit the
	 *                                specified dimensions
	 *
	 * @throws {DimensionError}       If the product of the new dimension sizes does
	 *                                not equal that of the old ones
	 */
	function _reshape(array, sizes) {
	  var accumulator = [];
	  var i;
	
	  if (sizes.length === 0) {
	    if (array.length === 0) {
	      throw new DimensionError(null, null, '!=');
	    }
	    return array.shift();
	  }
	  for (i = 0; i < sizes[0]; i += 1) {
	    accumulator.push(_reshape(array, sizes.slice(1)));
	  }
	  return accumulator;
	}
	
	
	/**
	 * Squeeze a multi dimensional array
	 * @param {Array} array
	 * @param {Array} [size]
	 * @returns {Array} returns the array itself
	 */
	exports.squeeze = function(array, size) {
	  var s = size || exports.size(array);
	
	  // squeeze outer dimensions
	  while (Array.isArray(array) && array.length === 1) {
	    array = array[0];
	    s.shift();
	  }
	
	  // find the first dimension to be squeezed
	  var dims = s.length;
	  while (s[dims - 1] === 1) {
	    dims--;
	  }
	
	  // squeeze inner dimensions
	  if (dims < s.length) {
	    array = _squeeze(array, dims, 0);
	    s.length = dims;
	  }
	
	  return array;
	};
	
	/**
	 * Recursively squeeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */
	function _squeeze (array, dims, dim) {
	  var i, ii;
	
	  if (dim < dims) {
	    var next = dim + 1;
	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _squeeze(array[i], dims, next);
	    }
	  }
	  else {
	    while (Array.isArray(array)) {
	      array = array[0];
	    }
	  }
	
	  return array;
	}
	
	/**
	 * Unsqueeze a multi dimensional array: add dimensions when missing
	 * 
	 * Paramter `size` will be mutated to match the new, unqueezed matrix size.
	 * 
	 * @param {Array} array
	 * @param {number} dims     Desired number of dimensions of the array
	 * @param {number} [outer]  Number of outer dimensions to be added
	 * @param {Array} [size]    Current size of array.
	 * @returns {Array} returns the array itself
	 * @private
	 */
	exports.unsqueeze = function(array, dims, outer, size) {
	  var s = size || exports.size(array);
	
	  // unsqueeze outer dimensions
	  if (outer) {
	    for (var i = 0; i < outer; i++) {
	      array = [array];
	      s.unshift(1);
	    }
	  }
	
	  // unsqueeze inner dimensions
	  array = _unsqueeze(array, dims, 0);
	  while (s.length < dims) {
	    s.push(1);
	  }
	
	  return array;
	};
	
	/**
	 * Recursively unsqueeze a multi dimensional array
	 * @param {Array} array
	 * @param {number} dims Required number of dimensions
	 * @param {number} dim  Current dimension
	 * @returns {Array | *} Returns the squeezed array
	 * @private
	 */
	function _unsqueeze (array, dims, dim) {
	  var i, ii;
	
	  if (Array.isArray(array)) {
	    var next = dim + 1;
	    for (i = 0, ii = array.length; i < ii; i++) {
	      array[i] = _unsqueeze(array[i], dims, next);
	    }
	  }
	  else {
	    for (var d = dim; d < dims; d++) {
	      array = [array];
	    }
	  }
	
	  return array;
	}
	/**
	 * Flatten a multi dimensional array, put all elements in a one dimensional
	 * array
	 * @param {Array} array   A multi dimensional array
	 * @return {Array}        The flattened array (1 dimensional)
	 */
	exports.flatten = function(array) {
	  if (!Array.isArray(array)) {
	    //if not an array, return as is
	    return array;
	  }
	  var flat = [];
	
	  array.forEach(function callback(value) {
	    if (Array.isArray(value)) {
	      value.forEach(callback);  //traverse through sub-arrays recursively
	    }
	    else {
	      flat.push(value);
	    }
	  });
	
	  return flat;
	};
	
	/**
	 * Test whether an object is an array
	 * @param {*} value
	 * @return {boolean} isArray
	 */
	exports.isArray = Array.isArray;


/***/ }),
/* 92 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Determine the type of a variable
	 *
	 *     type(x)
	 *
	 * The following types are recognized:
	 *
	 *     'undefined'
	 *     'null'
	 *     'boolean'
	 *     'number'
	 *     'string'
	 *     'Array'
	 *     'Function'
	 *     'Date'
	 *     'RegExp'
	 *     'Object'
	 *
	 * @param {*} x
	 * @return {string} Returns the name of the type. Primitive types are lower case,
	 *                  non-primitive types are upper-camel-case.
	 *                  For example 'number', 'string', 'Array', 'Date'.
	 */
	exports.type = function(x) {
	  var type = typeof x;
	
	  if (type === 'object') {
	    if (x === null)           return 'null';
	    if (x instanceof Boolean) return 'boolean';
	    if (x instanceof Number)  return 'number';
	    if (x instanceof String)  return 'string';
	    if (Array.isArray(x))     return 'Array';
	    if (x instanceof Date)    return 'Date';
	    if (x instanceof RegExp)  return 'RegExp';
	
	    return 'Object';
	  }
	
	  if (type === 'function')    return 'Function';
	
	  return type;
	};
	
	/**
	 * Test whether a value is a scalar
	 * @param x
	 * @return {boolean} Returns true when x is a scalar, returns false when
	 *                   x is a Matrix or Array.
	 */
	exports.isScalar = function (x) {
	  return !((x && x.isMatrix) || Array.isArray(x));
	};


/***/ }),
/* 93 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Create a range error with the message:
	 *     'Dimension mismatch (<actual size> != <expected size>)'
	 * @param {number | number[]} actual        The actual size
	 * @param {number | number[]} expected      The expected size
	 * @param {string} [relation='!=']          Optional relation between actual
	 *                                          and expected size: '!=', '<', etc.
	 * @extends RangeError
	 */
	function DimensionError(actual, expected, relation) {
	  if (!(this instanceof DimensionError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }
	
	  this.actual   = actual;
	  this.expected = expected;
	  this.relation = relation;
	
	  this.message = 'Dimension mismatch (' +
	      (Array.isArray(actual) ? ('[' + actual.join(', ') + ']') : actual) +
	      ' ' + (this.relation || '!=') + ' ' +
	      (Array.isArray(expected) ? ('[' + expected.join(', ') + ']') : expected) +
	      ')';
	
	  this.stack = (new Error()).stack;
	}
	
	DimensionError.prototype = new RangeError();
	DimensionError.prototype.constructor = RangeError;
	DimensionError.prototype.name = 'DimensionError';
	DimensionError.prototype.isDimensionError = true;
	
	module.exports = DimensionError;


/***/ }),
/* 94 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Create a range error with the message:
	 *     'Index out of range (index < min)'
	 *     'Index out of range (index < max)'
	 *
	 * @param {number} index     The actual index
	 * @param {number} [min=0]   Minimum index (included)
	 * @param {number} [max]     Maximum index (excluded)
	 * @extends RangeError
	 */
	function IndexError(index, min, max) {
	  if (!(this instanceof IndexError)) {
	    throw new SyntaxError('Constructor must be called with the new operator');
	  }
	
	  this.index = index;
	  if (arguments.length < 3) {
	    this.min = 0;
	    this.max = min;
	  }
	  else {
	    this.min = min;
	    this.max = max;
	  }
	
	  if (this.min !== undefined && this.index < this.min) {
	    this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
	  }
	  else if (this.max !== undefined && this.index >= this.max) {
	    this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
	  }
	  else {
	    this.message = 'Index out of range (' + this.index + ')';
	  }
	
	  this.stack = (new Error()).stack;
	}
	
	IndexError.prototype = new RangeError();
	IndexError.prototype.constructor = RangeError;
	IndexError.prototype.name = 'IndexError';
	IndexError.prototype.isIndexError = true;
	
	module.exports = IndexError;


/***/ }),
/* 95 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Test whether value is a boolean
	 * @param {*} value
	 * @return {boolean} isBoolean
	 */
	exports.isBoolean = function(value) {
	  return typeof value == 'boolean';
	};


/***/ }),
/* 96 */
/***/ (function(module, exports) {

	// function utils
	
	/*
	 * Memoize a given function by caching the computed result.
	 * The cache of a memoized function can be cleared by deleting the `cache`
	 * property of the function.
	 *
	 * @param {function} fn                     The function to be memoized.
	 *                                          Must be a pure function.
	 * @param {function(args: Array)} [hasher]  A custom hash builder.
	 *                                          Is JSON.stringify by default.
	 * @return {function}                       Returns the memoized function
	 */
	exports.memoize = function(fn, hasher) {
	  return function memoize() {
	    if (typeof memoize.cache !== 'object') {
	      memoize.cache = {};
	    }
	
	    var args = [];
	    for (var i = 0; i < arguments.length; i++) {
	      args[i] = arguments[i];
	    }
	
	    var hash = hasher ? hasher(args) : JSON.stringify(args);
	    if (!(hash in memoize.cache)) {
	      return memoize.cache[hash] = fn.apply(fn, args);
	    }
	    return memoize.cache[hash];
	  };
	};
	
	/**
	 * Find the maximum number of arguments expected by a typed function.
	 * @param {function} fn   A typed function
	 * @return {number} Returns the maximum number of expected arguments.
	 *                  Returns -1 when no signatures where found on the function.
	 */
	exports.maxArgumentCount = function (fn) {
	  return Object.keys(fn.signatures || {})
	      .reduce(function (args, signature) {
	        var count = (signature.match(/,/g) || []).length + 1;
	        return Math.max(args, count);
	      }, -1);
	};


/***/ }),
/* 97 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(90);
	var DimensionError = __webpack_require__(93);
	var getSafeProperty = __webpack_require__(98).getSafeProperty;
	var setSafeProperty = __webpack_require__(98).setSafeProperty;
	
	var string = util.string;
	var array = util.array;
	var object = util.object;
	var number = util.number;
	
	var isArray = Array.isArray;
	var isNumber = number.isNumber;
	var isInteger = number.isInteger;
	var isString = string.isString;
	
	var validateIndex = array.validateIndex;
	
	function factory (type, config, load, typed) {
	  var Matrix = load(__webpack_require__(89)); // force loading Matrix (do not use via type.Matrix)
	
	  /**
	   * Dense Matrix implementation. A regular, dense matrix, supporting multi-dimensional matrices. This is the default matrix type.
	   * @class DenseMatrix
	   */
	  function DenseMatrix(data, datatype) {
	    if (!(this instanceof DenseMatrix))
	      throw new SyntaxError('Constructor must be called with the new operator');
	    if (datatype && !isString(datatype))
	      throw new Error('Invalid datatype: ' + datatype);
	
	    if (data && data.isMatrix === true) {
	      // check data is a DenseMatrix
	      if (data.type === 'DenseMatrix') {
	        // clone data & size
	        this._data = object.clone(data._data);
	        this._size = object.clone(data._size);
	        this._datatype = datatype || data._datatype;
	      }
	      else {
	        // build data from existing matrix
	        this._data = data.toArray();
	        this._size = data.size();
	        this._datatype = datatype || data._datatype;
	      }
	    }
	    else if (data && isArray(data.data) && isArray(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size;
	      this._datatype = datatype || data.datatype;
	    }
	    else if (isArray(data)) {
	      // replace nested Matrices with Arrays
	      this._data = preprocess(data);
	      // get the dimensions of the array
	      this._size = array.size(this._data);
	      // verify the dimensions of the array, TODO: compute size while processing array
	      array.validate(this._data, this._size);
	      // data type unknown
	      this._datatype = datatype;
	    }
	    else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
	    }
	    else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	    }
	  }
	  
	  DenseMatrix.prototype = new Matrix();
	
	  /**
	   * Attach type information
	   */
	  DenseMatrix.prototype.type = 'DenseMatrix';
	  DenseMatrix.prototype.isDenseMatrix = true;
	
	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     var format = matrix.storage()                   // retrieve storage format
	   *
	   * @memberof DenseMatrix
	   * @return {string}           The storage format.
	   */
	  DenseMatrix.prototype.storage = function () {
	    return 'dense';
	  };
	
	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     var format = matrix.datatype()                   // retrieve matrix datatype
	   *
	   * @memberof DenseMatrix
	   * @return {string}           The datatype.
	   */
	  DenseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };
	
	  /**
	   * Create a new DenseMatrix
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */
	  DenseMatrix.prototype.create = function (data, datatype) {
	    return new DenseMatrix(data, datatype);
	  };
	
	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     var subset = matrix.subset(index)               // retrieve subset
	   *     var value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @memberof DenseMatrix
	   * @param {Index} index
	   * @param {Array | DenseMatrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  DenseMatrix.prototype.subset = function (index, replacement, defaultValue) {
	    switch (arguments.length) {
	      case 1:
	        return _get(this, index);
	
	        // intentional fall through
	      case 2:
	      case 3:
	        return _set(this, index, replacement, defaultValue);
	
	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };
	  
	  /**
	   * Get a single element from the matrix.
	   * @memberof DenseMatrix
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  DenseMatrix.prototype.get = function (index) {
	    if (!isArray(index))
	      throw new TypeError('Array expected');
	    if (index.length != this._size.length)
	      throw new DimensionError(index.length, this._size.length);
	
	    // check index
	    for (var x = 0; x < index.length; x++)
	      validateIndex(index[x], this._size[x]);
	
	    var data = this._data;
	    for (var i = 0, ii = index.length; i < ii; i++) {
	      var index_i = index[i];
	      validateIndex(index_i, data.length);
	      data = data[index_i];
	    }
	
	    return data;
	  };
	  
	  /**
	   * Replace a single element in the matrix.
	   * @memberof DenseMatrix
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {DenseMatrix} self
	   */
	  DenseMatrix.prototype.set = function (index, value, defaultValue) {
	    if (!isArray(index))
	      throw new TypeError('Array expected');
	    if (index.length < this._size.length)
	      throw new DimensionError(index.length, this._size.length, '<');
	
	    var i, ii, index_i;
	
	    // enlarge matrix when needed
	    var size = index.map(function (i) {
	      return i + 1;
	    });
	    _fit(this, size, defaultValue);
	
	    // traverse over the dimensions
	    var data = this._data;
	    for (i = 0, ii = index.length - 1; i < ii; i++) {
	      index_i = index[i];
	      validateIndex(index_i, data.length);
	      data = data[index_i];
	    }
	
	    // set new value
	    index_i = index[index.length - 1];
	    validateIndex(index_i, data.length);
	    data[index_i] = value;
	
	    return this;
	  };
	  
	  /**
	   * Get a submatrix of this matrix
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index   Zero-based index
	   * @private
	   */
	  function _get (matrix, index) {
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }
	
	    var isScalar = index.isScalar();
	    if (isScalar) {
	      // return a scalar
	      return matrix.get(index.min());
	    }
	    else {
	      // validate dimensions
	      var size = index.size();
	      if (size.length != matrix._size.length) {
	        throw new DimensionError(size.length, matrix._size.length);
	      }
	
	      // validate if any of the ranges in the index is out of range
	      var min = index.min();
	      var max = index.max();
	      for (var i = 0, ii = matrix._size.length; i < ii; i++) {
	        validateIndex(min[i], matrix._size[i]);
	        validateIndex(max[i], matrix._size[i]);
	      }
	
	      // retrieve submatrix
	      // TODO: more efficient when creating an empty matrix and setting _data and _size manually
	      return new DenseMatrix(_getSubmatrix(matrix._data, index, size.length, 0), matrix._datatype);
	    }
	  }
	  
	  /**
	   * Recursively get a submatrix of a multi dimensional matrix.
	   * Index is not checked for correct number or length of dimensions.
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {Index} index
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim    Current dimension
	   * @return {Array} submatrix
	   * @private
	   */
	  function _getSubmatrix (data, index, dims, dim) {
	    var last = (dim === dims - 1);
	    var range = index.dimension(dim);
	
	    if (last) {
	      return range.map(function (i) {
	        validateIndex(i, data.length);
	        return data[i];
	      }).valueOf();
	    }
	    else {
	      return range.map(function (i) {
	        validateIndex(i, data.length);
	        var child = data[i];
	        return _getSubmatrix(child, index, dims, dim + 1);
	      }).valueOf();
	    }
	  }
	  
	  /**
	   * Replace a submatrix in this matrix
	   * Indexes are zero-based.
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix
	   * @param {Index} index
	   * @param {DenseMatrix | Array | *} submatrix
	   * @param {*} defaultValue          Default value, filled in on new entries when
	   *                                  the matrix is resized.
	   * @return {DenseMatrix} matrix
	   * @private
	   */
	  function _set (matrix, index, submatrix, defaultValue) {
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }
	
	    // get index size and check whether the index contains a single value
	    var iSize = index.size(),
	        isScalar = index.isScalar();
	
	    // calculate the size of the submatrix, and convert it into an Array if needed
	    var sSize;
	    if (submatrix && submatrix.isMatrix === true) {
	      sSize = submatrix.size();
	      submatrix = submatrix.valueOf();
	    }
	    else {
	      sSize = array.size(submatrix);
	    }
	
	    if (isScalar) {
	      // set a scalar
	
	      // check whether submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      }
	
	      matrix.set(index.min(), submatrix, defaultValue);
	    }
	    else {
	      // set a submatrix
	
	      // validate dimensions
	      if (iSize.length < matrix._size.length) {
	        throw new DimensionError(iSize.length, matrix._size.length, '<');
	      }
	
	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;
	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }
	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        }
	
	        // unsqueeze both outer and inner dimensions
	        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
	      }
	
	      // check whether the size of the submatrix matches the index size
	      if (!object.deepEqual(iSize, sSize)) {
	        throw new DimensionError(iSize, sSize, '>');
	      }
	
	      // enlarge matrix when needed
	      var size = index.max().map(function (i) {
	        return i + 1;
	      });
	      _fit(matrix, size, defaultValue);
	
	      // insert the sub matrix
	      var dims = iSize.length,
	          dim = 0;
	      _setSubmatrix (matrix._data, index, submatrix, dims, dim);
	    }
	
	    return matrix;
	  }
	  
	  /**
	   * Replace a submatrix of a multi dimensional matrix.
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @param {Index} index
	   * @param {Array} submatrix
	   * @param {number} dims   Total number of dimensions
	   * @param {number} dim
	   * @private
	   */
	  function _setSubmatrix (data, index, submatrix, dims, dim) {
	    var last = (dim === dims - 1),
	        range = index.dimension(dim);
	
	    if (last) {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);
	        data[dataIndex] = submatrix[subIndex[0]];
	      });
	    }
	    else {
	      range.forEach(function (dataIndex, subIndex) {
	        validateIndex(dataIndex);
	        _setSubmatrix(data[dataIndex], index, submatrix[subIndex[0]], dims, dim + 1);
	      });
	    }
	  }
	  
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @memberof DenseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  DenseMatrix.prototype.resize = function (size, defaultValue, copy) {
	    // validate arguments
	    if (!isArray(size))
	      throw new TypeError('Array expected');
	
	    // matrix to resize
	    var m = copy ? this.clone() : this;
	    // resize matrix
	    return _resize(m, size, defaultValue);
	  };
	  
	  var _resize = function (matrix, size, defaultValue) {
	    // check size
	    if (size.length === 0) {
	      // first value in matrix
	      var v = matrix._data;
	      // go deep
	      while (isArray(v)) {
	        v = v[0];
	      }
	      return v;
	    }
	    // resize matrix
	    matrix._size = size.slice(0); // copy the array
	    matrix._data = array.resize(matrix._data, matrix._size, defaultValue);
	    // return matrix
	    return matrix;
	  };
	
	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * NOTE: This might be better suited to copy by default, instead of modifying
	   *       in place. For now, it operates in place to remain consistent with
	   *       resize().
	   *
	   * @memberof DenseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */
	  DenseMatrix.prototype.reshape = function (size, copy) {
	    var m = copy ? this.clone() : this;
	
	    m._data = array.reshape(m._data, size);
	    m._size = size.slice(0);
	    return m;
	  };
	  
	  /**
	   * Enlarge the matrix when it is smaller than given size.
	   * If the matrix is larger or equal sized, nothing is done.
	   * @memberof DenseMatrix
	   * @param {DenseMatrix} matrix           The matrix to be resized
	   * @param {number[]} size
	   * @param {*} defaultValue          Default value, filled in on new entries.
	   * @private
	   */
	  function _fit(matrix, size, defaultValue) {
	    var newSize = matrix._size.slice(0), // copy the array
	        changed = false;
	
	    // add dimensions when needed
	    while (newSize.length < size.length) {
	      newSize.push(0);
	      changed = true;
	    }
	
	    // enlarge size when needed
	    for (var i = 0, ii = size.length; i < ii; i++) {
	      if (size[i] > newSize[i]) {
	        newSize[i] = size[i];
	        changed = true;
	      }
	    }
	
	    if (changed) {
	      // resize only when size is changed
	      _resize(matrix, newSize, defaultValue);
	    }
	  }
	  
	  /**
	   * Create a clone of the matrix
	   * @memberof DenseMatrix
	   * @return {DenseMatrix} clone
	   */
	  DenseMatrix.prototype.clone = function () {
	    var m = new DenseMatrix({
	      data: object.clone(this._data),
	      size: object.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };
	  
	  /**
	   * Retrieve the size of the matrix.
	   * @memberof DenseMatrix
	   * @returns {number[]} size
	   */
	  DenseMatrix.prototype.size = function() {
	    return this._size.slice(0); // return a clone of _size
	  };
	  
	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @memberof DenseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   *
	   * @return {DenseMatrix} matrix
	   */
	  DenseMatrix.prototype.map = function (callback) {
	    // matrix instance
	    var me = this;
	    var recurse = function (value, index) {
	      if (isArray(value)) {
	        return value.map(function (child, i) {
	          return recurse(child, index.concat(i));
	        });
	      }
	      else {
	        return callback(value, index, me);
	      }
	    };
	    // return dense format
	    return new DenseMatrix({
	      data: recurse(this._data, []),
	      size: object.clone(this._size),
	      datatype: this._datatype
	    });
	  };
	  
	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @memberof DenseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   */
	  DenseMatrix.prototype.forEach = function (callback) {
	    // matrix instance
	    var me = this;
	    var recurse = function (value, index) {
	      if (isArray(value)) {
	        value.forEach(function (child, i) {
	          recurse(child, index.concat(i));
	        });
	      }
	      else {
	        callback(value, index, me);
	      }
	    };
	    recurse(this._data, []);
	  };
	  
	  /**
	   * Create an Array with a copy of the data of the DenseMatrix
	   * @memberof DenseMatrix
	   * @returns {Array} array
	   */
	  DenseMatrix.prototype.toArray = function () {
	    return object.clone(this._data);
	  };
	  
	  /**
	   * Get the primitive value of the DenseMatrix: a multidimensional array
	   * @memberof DenseMatrix
	   * @returns {Array} array
	   */
	  DenseMatrix.prototype.valueOf = function () {
	    return this._data;
	  };
	  
	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @memberof DenseMatrix
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  DenseMatrix.prototype.format = function (options) {
	    return string.format(this._data, options);
	  };
	  
	  /**
	   * Get a string representation of the matrix
	   * @memberof DenseMatrix
	   * @returns {string} str
	   */
	  DenseMatrix.prototype.toString = function () {
	    return string.format(this._data);
	  };
	  
	  /**
	   * Get a JSON representation of the matrix
	   * @memberof DenseMatrix
	   * @returns {Object}
	   */
	  DenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'DenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };
	  
	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @memberof DenseMatrix
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Array}                      The array vector with the diagonal values.
	   */
	  DenseMatrix.prototype.diagonal = function(k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (k.isBigNumber === true)
	        k = k.toNumber();
	      // is must be an integer
	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError ('The parameter k must be an integer number');
	      }
	    }
	    else {
	      // default value
	      k = 0;
	    }
	
	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;
	
	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	
	    // number diagonal values
	    var n = Math.min(rows - kSub, columns -  kSuper);
	    
	    // x is a matrix get diagonal from matrix
	    var data = [];
	    
	    // loop rows
	    for (var i = 0; i < n; i++) {
	      data[i] = this._data[i + kSub][i + kSuper];
	    }
	
	    // create DenseMatrix
	    return new DenseMatrix({
	      data: data,
	      size: [n],
	      datatype: this._datatype
	    });
	  };
	  
	  /**
	   * Create a diagonal matrix.
	   *
	   * @memberof DenseMatrix
	   * @param {Array} size                   The matrix size.
	   * @param {number | Array} value          The values for the diagonal.
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will be filled in.
	   * @param {number} [defaultValue]        The default value for non-diagonal
	   *
	   * @returns {DenseMatrix}
	   */
	  DenseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
	    if (!isArray(size))
	      throw new TypeError('Array expected, size parameter');
	    if (size.length !== 2)
	      throw new Error('Only two dimensions matrix are supported');
	
	    // map size & validate
	    size = size.map(function (s) {
	      // check it is a big number
	      if (s && s.isBigNumber === true) {
	        // convert it
	        s = s.toNumber();
	      }
	      // validate arguments
	      if (!isNumber(s) || !isInteger(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      } 
	      return s;
	    });
	
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (k && k.isBigNumber === true)
	        k = k.toNumber();
	      // is must be an integer
	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError ('The parameter k must be an integer number');
	      }
	    }
	    else {
	      // default value
	      k = 0;
	    }
	    
	    if (defaultValue && isString(datatype)) {
	      // convert defaultValue to the same datatype
	      defaultValue = typed.convert(defaultValue, datatype);
	    }
	
	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;
	    
	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];
	
	    // number of non-zero items
	    var n = Math.min(rows - kSub, columns -  kSuper);
	
	    // value extraction function
	    var _value;
	
	    // check value
	    if (isArray(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      }
	      // define function
	      _value = function (i) {
	        // return value @ i
	        return value[i];
	      };      
	    }
	    else if (value && value.isMatrix === true) {
	      // matrix size
	      var ms = value.size();
	      // validate matrix
	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      }
	      // define function
	      _value = function (i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    }
	    else {
	      // define function
	      _value = function () {
	        // return value
	        return value;
	      };
	    }
	    
	    // discover default value if needed
	    if (!defaultValue) {
	      // check first value in array
	      defaultValue = (_value(0) && _value(0).isBigNumber === true) ? new type.BigNumber(0) : 0;
	    }
	
	    // empty array
	    var data = [];
	
	    // check we need to resize array
	    if (size.length > 0) {
	      // resize array
	      data = array.resize(data, size, defaultValue);
	      // fill diagonal
	      for (var d = 0; d < n; d++) {
	        data[d + kSub][d + kSuper] = _value(d);
	      }
	    }
	    
	    // create DenseMatrix
	    return new DenseMatrix({
	      data: data,
	      size: [rows, columns]
	    });
	  };
	
	  /**
	   * Generate a matrix from a JSON object
	   * @memberof DenseMatrix
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "DenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {DenseMatrix}
	   */
	  DenseMatrix.fromJSON = function (json) {
	    return new DenseMatrix(json);
	  };
	  
	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @memberof DenseMatrix
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  DenseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
	      throw new Error('Row index must be positive integers');
	    }
	    // check dimensions
	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    }
	    // validate index
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[0]);
	
	    // swap rows
	    DenseMatrix._swapRows(i, j, this._data);
	    // return current instance
	    return this;
	  };
	
	  /**
	   * Swap rows i and j in Dense Matrix data structure.
	   *
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   */
	  DenseMatrix._swapRows = function (i, j, data) {
	    // swap values i <-> j
	    var vi = data[i];
	    data[i] = data[j];
	    data[j] = vi;
	  };
	
	  /**
	   * Preprocess data, which can be an Array or DenseMatrix with nested Arrays and
	   * Matrices. Replaces all nested Matrices with Arrays
	   * @memberof DenseMatrix
	   * @param {Array} data
	   * @return {Array} data
	   */
	  function preprocess(data) {
	    for (var i = 0, ii = data.length; i < ii; i++) {
	      var elem = data[i];
	      if (isArray(elem)) {
	        data[i] = preprocess(elem);
	      }
	      else if (elem && elem.isMatrix === true) {
	        data[i] = preprocess(elem.valueOf());
	      }
	    }
	
	    return data;
	  }
	
	  // register this type in the base class Matrix
	  type.Matrix._storage.dense = DenseMatrix;
	  type.Matrix._storage['default'] = DenseMatrix;
	
	  // exports
	  return DenseMatrix;
	}
	
	exports.name = 'DenseMatrix';
	exports.path = 'type';
	exports.factory = factory;
	exports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage


/***/ }),
/* 98 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Get a property of a plain object
	 * Throws an error in case the object is not a plain object or the
	 * property is not defined on the object itself
	 * @param {Object} object
	 * @param {string} prop
	 * @return {*} Returns the property value when safe
	 */
	function getSafeProperty (object, prop) {
	  // only allow getting properties of a plain object
	  if (isPlainObject(object)) {
	    // only allow getting properties defined on the object itself,
	    // not inherited from it's prototype.
	    if (Object.hasOwnProperty.call(object, prop)) {
	      return object[prop];
	    }
	
	    if (!(prop in object)) {
	      // this is a not existing property on a plain object
	      return undefined;
	    }
	  }
	
	  if (typeof object[prop] === 'function' && isSafeMethod(object, prop)) {
	    throw new Error('Cannot access method "' + prop + '" as a property');
	  }
	
	  throw new Error('No access to property "' + prop + '"');
	}
	
	/**
	 * Set a property on a plain object.
	 * Throws an error in case the object is not a plain object or the
	 * property would override an inherited property like .constructor or .toString
	 * @param {Object} object
	 * @param {string} prop
	 * @param {*} value
	 * @return {*} Returns the value
	 */
	// TODO: merge this function into access.js?
	function setSafeProperty (object, prop, value) {
	  // only allow setting properties of a plain object
	  if (isPlainObject(object)) {
	    // only allow setting properties defined on the object itself,
	    // not inherited from it's prototype.
	    if (prop in object) {
	      // property already exists
	      // override when the property is defined on the object itself.
	      // don't allow overriding inherited properties like .constructor or .toString
	      if (Object.hasOwnProperty.call(object, prop)) {
	        return object[prop] = value;
	      }
	    }
	    else {
	      // this is a new property, that's just ok
	      return object[prop] = value;
	    }
	  }
	
	  throw new Error('No access to property "' + prop + '"');
	}
	
	/**
	 * Validate whether a method is safe.
	 * Throws an error when that's not the case.
	 * @param {Object} object
	 * @param {string} method
	 */
	// TODO: merge this function into assign.js?
	function validateSafeMethod (object, method) {
	  if (!isSafeMethod(object, method)) {
	    throw new Error('No access to method "' + method + '"');
	  }
	}
	
	function isSafeMethod (object, method) {
	  // TODO: remove this, replace with whitelist
	  if (method === 'constructor') {
	    return false;
	  }
	
	  // test for plain functions defined on the object (instead of a method)
	  if (Object.hasOwnProperty.call(object, method) && isPlainObject(object)) {
	    return true;
	  }
	
	  // only allow methods from the whitelist
	  // TODO: also check whether this method is supported on given object
	  return safeMethods[method];
	}
	
	function isPlainObject (object) {
	  // TODO: improve this function
	  return typeof object === 'object' && object && object.constructor === Object;
	}
	
	// whitelist of safe methods
	var safeMethods = {
	  abs: true,
	  absoluteValue: true,
	  acos: true,
	  acosh: true,
	  acot: true,
	  acoth: true,
	  acsc: true,
	  acsch: true,
	  add: true,
	  and: true,
	  arg: true,
	  asec: true,
	  asech: true,
	  asin: true,
	  asinh: true,
	  atan: true,
	  atan2: true,
	  atanh: true,
	  bellNumbers: true,
	  bignumber: true,
	  bitAnd: true,
	  bitNot: true,
	  bitOr: true,
	  bitXor: true,
	  boolean: true,
	  catalan: true,
	  cbrt: true,
	  ceil: true,
	  chain: true,
	  clone: true,
	  cloneDeep: true,
	  cmp: true,
	  combinations: true,
	  compare: true,
	  comparedTo: true,
	  compile: true,
	  complex: true,
	  composition: true,
	  concat: true,
	  config: true,
	  conj: true,
	  conjugate: true,
	  cos: true,
	  cosh: true,
	  cosine: true,
	  cot: true,
	  coth: true,
	  create: true,
	  createUnit: true,
	  cross: true,
	  csc: true,
	  csch: true,
	  cube: true,
	  cubeRoot: true,
	  decimalPlaces: true,
	  deepEqual: true,
	  derivative: true,
	  det: true,
	  diag: true,
	  diagonal: true,
	  distance: true,
	  div: true,
	  divToInt: true,
	  divide: true,
	  dividedBy: true,
	  dividedToIntegerBy: true,
	  done: true,
	  dot: true,
	  dotDivide: true,
	  dotMultiply: true,
	  dotPow: true,
	  dp: true,
	  emit: true,
	  eq: true,
	  equal: true,
	  equalBase: true,
	  equals: true,
	  erf: true,
	  eval: true,
	  exp: true,
	  eye: true,
	  factorial: true,
	  filter: true,
	  fix: true,
	  flatten: true,
	  floor: true,
	  forEach: true,
	  format: true,
	  formatUnits: true,
	  fraction: true,
	  gamma: true,
	  gcd: true,
	  greaterThan: true,
	  greaterThanOrEqualTo: true,
	  gt: true,
	  gte: true,
	  hasBase: true,
	  help: true,
	  hyperbolicCosine: true,
	  hyperbolicSine: true,
	  hyperbolicTangent: true,
	  hypot: true,
	  im: true,
	  import: true,
	  index: true,
	  intersect: true,
	  inv: true,
	  inverse: true,
	  inverseCosine: true,
	  inverseHyperbolicCosine: true,
	  inverseHyperbolicSine: true,
	  inverseHyperbolicTangent: true,
	  inverseSine: true,
	  inverseTangent: true,
	  isFinite: true,
	  isInt: true,
	  isInteger: true,
	  isNaN: true,
	  isNeg: true,
	  isNegative: true,
	  isNumeric: true,
	  isPos: true,
	  isPositive: true,
	  isPrime: true,
	  isZero: true,
	  kldivergence: true,
	  kron: true,
	  larger: true,
	  largerEq: true,
	  lcm: true,
	  leftShift: true,
	  lessThan: true,
	  lessThanOrEqualTo: true,
	  ln: true,
	  log: true,
	  log10: true,
	  log2: true,
	  logarithm: true,
	  lsolve: true,
	  lt: true,
	  lte: true,
	  lup: true,
	  lusolve: true,
	  mad: true,
	  map: true,
	  matrix: true,
	  max: true,
	  mean: true,
	  median: true,
	  min: true,
	  minus: true,
	  mod: true,
	  mode: true,
	  modulo: true,
	  mul: true,
	  multinomial: true,
	  multiply: true,
	  naturalExponential: true,
	  naturalLogarithm: true,
	  neg: true,
	  negated: true,
	  noConflict: true,
	  norm: true,
	  not: true,
	  nthRoot: true,
	  number: true,
	  off: true,
	  on: true,
	  once: true,
	  ones: true,
	  or: true,
	  parse: true,
	  parser: true,
	  partitionSelect: true,
	  permutations: true,
	  pickRandom: true,
	  plus: true,
	  pow: true,
	  precision: true,
	  print: true,
	  prod: true,
	  quantileSeq: true,
	  random: true,
	  randomInt: true,
	  range: true,
	  re: true,
	  reshape: true,
	  resize: true,
	  rightArithShift: true,
	  rightLogShift: true,
	  round: true,
	  sd: true,
	  sec: true,
	  sech: true,
	  set: true,
	  sign: true,
	  simplify: true,
	  sin: true,
	  sine: true,
	  sinh: true,
	  size: true,
	  slu: true,
	  smaller: true,
	  smallerEq: true,
	  sort: true,
	  sparse: true,
	  splitUnit: true,
	  sqrt: true,
	  square: true,
	  squareRoot: true,
	  squeeze: true,
	  std: true,
	  stirlingS2: true,
	  string: true,
	  sub: true,
	  subset: true,
	  subtract: true,
	  sum: true,
	  swapRows: true,
	  tan: true,
	  tangent: true,
	  tanh: true,
	  times: true,
	  to: true,
	  toArray: true,
	  toBinary: true,
	  toContinued: true,
	  toDP: true,
	  toDecimalPlaces: true,
	  toExponential: true,
	  toFixed: true,
	  toFraction: true,
	  toHex: true,
	  toHexadecimal: true,
	  toJSON: true,
	  toLatex: true,
	  toNearest: true,
	  toNumber: true,
	  toNumeric: true,
	  toOctal: true,
	  toPower: true,
	  toPrecision: true,
	  toSD: true,
	  toSignificantDigits: true,
	  toString: true,
	  toTex: true,
	  toVector: true,
	  trace: true,
	  transform: true,
	  transpose: true,
	  traverse: true,
	  trunc: true,
	  truncated: true,
	  typed: true,
	  typeof: true,
	  unaryMinus: true,
	  unaryPlus: true,
	  unequal: true,
	  unit: true,
	  usolve: true,
	  valueOf: true,
	  var: true,
	  xgcd: true,
	  xor: true,
	  zeros: true
	}
	
	exports.getSafeProperty = getSafeProperty;
	exports.setSafeProperty = setSafeProperty;
	exports.validateSafeMethod = validateSafeMethod;
	exports.isSafeMethod = isSafeMethod;


/***/ }),
/* 99 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(90);
	var DimensionError = __webpack_require__(93);
	
	var array = util.array;
	var object = util.object;
	var string = util.string;
	var number = util.number;
	
	var isArray = Array.isArray;
	var isNumber = number.isNumber;
	var isInteger = number.isInteger;
	var isString = string.isString;
	
	var validateIndex = array.validateIndex;
	
	function factory (type, config, load, typed) {
	  var Matrix = load(__webpack_require__(89)); // force loading Matrix (do not use via type.Matrix)
	  var equalScalar = load(__webpack_require__(100));
	
	  /**
	   * Sparse Matrix implementation. This type implements a Compressed Column Storage format
	   * for sparse matrices.
	   * @class SparseMatrix
	   */
	  function SparseMatrix(data, datatype) {
	    if (!(this instanceof SparseMatrix))
	      throw new SyntaxError('Constructor must be called with the new operator');
	    if (datatype && !isString(datatype))
	      throw new Error('Invalid datatype: ' + datatype);
	    
	    if (data && data.isMatrix === true) {
	      // create from matrix
	      _createFromMatrix(this, data, datatype);
	    }
	    else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {
	      // initialize fields
	      this._values = data.values;
	      this._index = data.index;
	      this._ptr = data.ptr;
	      this._size = data.size;
	      this._datatype = datatype || data.datatype;
	    }
	    else if (isArray(data)) {
	      // create from array
	      _createFromArray(this, data, datatype);
	    }
	    else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
	    }
	    else {
	      // nothing provided
	      this._values = [];
	      this._index = [];
	      this._ptr = [0];
	      this._size = [0, 0];
	      this._datatype = datatype;
	    }
	  }
	  
	  var _createFromMatrix = function (matrix, source, datatype) {
	    // check matrix type
	    if (source.type === 'SparseMatrix') {
	      // clone arrays
	      matrix._values = source._values ? object.clone(source._values) : undefined;
	      matrix._index = object.clone(source._index);
	      matrix._ptr = object.clone(source._ptr);
	      matrix._size = object.clone(source._size);
	      matrix._datatype = datatype || source._datatype;
	    }
	    else {
	      // build from matrix data
	      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);
	    }
	  };
	  
	  var _createFromArray = function (matrix, data, datatype) {
	    // initialize fields
	    matrix._values = [];
	    matrix._index = [];
	    matrix._ptr = [];
	    matrix._datatype = datatype;
	    // discover rows & columns, do not use math.size() to avoid looping array twice
	    var rows = data.length;
	    var columns = 0;
	    
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    
	    if (isString(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, datatype);
	    }
	
	    // check we have rows (empty array)
	    if (rows > 0) {
	      // column index
	      var j = 0;
	      do {
	        // store pointer to values index
	        matrix._ptr.push(matrix._index.length);
	        // loop rows
	        for (var i = 0; i < rows; i++) {
	          // current row
	          var row = data[i];
	          // check row is an array
	          if (isArray(row)) {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < row.length)
	              columns = row.length;
	            // check row has column
	            if (j < row.length) {
	              // value
	              var v = row[j];
	              // check value != 0
	              if (!eq(v, zero)) {
	                // store value
	                matrix._values.push(v);
	                // index
	                matrix._index.push(i);
	              }
	            }
	          }
	          else {
	            // update columns if needed (only on first column)
	            if (j === 0 && columns < 1)
	              columns = 1;
	            // check value != 0 (row is a scalar)
	            if (!eq(row, zero)) {
	              // store value
	              matrix._values.push(row);
	              // index
	              matrix._index.push(i);
	            }
	          }
	        }
	        // increment index
	        j++;      
	      }
	      while (j < columns);
	    }
	    // store number of values in ptr
	    matrix._ptr.push(matrix._index.length);
	    // size
	    matrix._size = [rows, columns];
	  };
	  
	  SparseMatrix.prototype = new Matrix();
	
	  /**
	   * Attach type information
	   */
	  SparseMatrix.prototype.type = 'SparseMatrix';
	  SparseMatrix.prototype.isSparseMatrix = true;
	
	  /**
	   * Get the storage format used by the matrix.
	   *
	   * Usage:
	   *     var format = matrix.storage()                   // retrieve storage format
	   *
	   * @memberof SparseMatrix
	   * @return {string}           The storage format.
	   */
	  SparseMatrix.prototype.storage = function () {
	    return 'sparse';
	  };
	
	  /**
	   * Get the datatype of the data stored in the matrix.
	   *
	   * Usage:
	   *     var format = matrix.datatype()                   // retrieve matrix datatype
	   *
	   * @memberof SparseMatrix
	   * @return {string}           The datatype.
	   */
	  SparseMatrix.prototype.datatype = function () {
	    return this._datatype;
	  };
	
	  /**
	   * Create a new SparseMatrix
	   * @memberof SparseMatrix
	   * @param {Array} data
	   * @param {string} [datatype]
	   */
	  SparseMatrix.prototype.create = function (data, datatype) {
	    return new SparseMatrix(data, datatype);
	  };
	
	  /**
	   * Get the matrix density.
	   *
	   * Usage:
	   *     var density = matrix.density()                   // retrieve matrix density
	   *
	   * @memberof SparseMatrix
	   * @return {number}           The matrix density.
	   */
	  SparseMatrix.prototype.density = function () {
	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // calculate density
	    return rows !== 0 && columns !== 0 ? (this._index.length / (rows * columns)) : 0;
	  };
	  
	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     var subset = matrix.subset(index)               // retrieve subset
	   *     var value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @memberof SparseMatrix
	   * @param {Index} index
	   * @param {Array | Maytrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) { // check it is a pattern matrix
	    if (!this._values)
	      throw new Error('Cannot invoke subset on a Pattern only matrix');
	
	    // check arguments
	    switch (arguments.length) {
	      case 1:
	        return _getsubset(this, index);
	
	        // intentional fall through
	      case 2:
	      case 3:
	        return _setsubset(this, index, replacement, defaultValue);
	
	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };
	  
	  var _getsubset = function (matrix, idx) {
	    // check idx
	    if (!idx || idx.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }
	
	    var isScalar = idx.isScalar();
	    if (isScalar) {
	      // return a scalar
	      return matrix.get(idx.min());
	    }
	    // validate dimensions
	    var size = idx.size();
	    if (size.length != matrix._size.length) {
	      throw new DimensionError(size.length, matrix._size.length);
	    }
	
	    // vars
	    var i, ii, k, kk;
	    
	    // validate if any of the ranges in the index is out of range
	    var min = idx.min();
	    var max = idx.max();
	    for (i = 0, ii = matrix._size.length; i < ii; i++) {
	      validateIndex(min[i], matrix._size[i]);
	      validateIndex(max[i], matrix._size[i]);
	    }
	    
	    // matrix arrays
	    var mvalues = matrix._values;
	    var mindex = matrix._index;
	    var mptr = matrix._ptr;
	        
	    // rows & columns dimensions for result matrix
	    var rows = idx.dimension(0);
	    var columns = idx.dimension(1);
	    
	    // workspace & permutation vector
	    var w = [];
	    var pv = [];
	    
	    // loop rows in resulting matrix
	    rows.forEach(function (i, r) {
	      // update permutation vector
	      pv[i] = r[0];  
	      // mark i in workspace
	      w[i] = true;
	    });
	
	    // result matrix arrays
	    var values = mvalues ? [] : undefined;
	    var index = [];
	    var ptr = [];
	        
	    // loop columns in result matrix
	    columns.forEach(function (j) {
	      // update ptr
	      ptr.push(index.length);
	      // loop values in column j
	      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {
	        // row
	        i = mindex[k];
	        // check row is in result matrix
	        if (w[i] === true) {
	          // push index
	          index.push(pv[i]);
	          // check we need to process values
	          if (values)
	            values.push(mvalues[k]);
	        }
	      }
	    });
	    // update ptr
	    ptr.push(index.length);
	    
	    // return matrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: size,
	      datatype: matrix._datatype
	    });
	  };
	  
	  var _setsubset = function (matrix, index, submatrix, defaultValue) {
	    // check index
	    if (!index || index.isIndex !== true) {
	      throw new TypeError('Invalid index');
	    }
	    
	    // get index size and check whether the index contains a single value
	    var iSize = index.size(),
	        isScalar = index.isScalar();
	    
	    // calculate the size of the submatrix, and convert it into an Array if needed
	    var sSize;
	    if (submatrix && submatrix.isMatrix === true) {
	      // submatrix size
	      sSize = submatrix.size();
	      // use array representation
	      submatrix = submatrix.toArray();
	    }
	    else {
	      // get submatrix size (array, scalar)
	      sSize = array.size(submatrix);
	    }
	    
	    // check index is a scalar
	    if (isScalar) {
	      // verify submatrix is a scalar
	      if (sSize.length !== 0) {
	        throw new TypeError('Scalar expected');
	      }
	      // set value
	      matrix.set(index.min(), submatrix, defaultValue);
	    }
	    else {
	      // validate dimensions, index size must be one or two dimensions
	      if (iSize.length !== 1 && iSize.length !== 2) {
	        throw new DimensionError(iSize.length, matrix._size.length, '<');
	      }
	      
	      // check submatrix and index have the same dimensions
	      if (sSize.length < iSize.length) {
	        // calculate number of missing outer dimensions
	        var i = 0;
	        var outer = 0;
	        while (iSize[i] === 1 && sSize[i] === 1) {
	          i++;
	        }
	        while (iSize[i] === 1) {
	          outer++;
	          i++;
	        }
	        // unsqueeze both outer and inner dimensions
	        submatrix = array.unsqueeze(submatrix, iSize.length, outer, sSize);
	      }
	      
	      // check whether the size of the submatrix matches the index size
	      if (!object.deepEqual(iSize, sSize)) {
	        throw new DimensionError(iSize, sSize, '>');
	      }
	      
	      // offsets
	      var x0 = index.min()[0];
	      var y0 = index.min()[1];      
	      
	      // submatrix rows and columns
	      var m = sSize[0];
	      var n = sSize[1];
	
	      // loop submatrix
	      for (var x = 0; x < m; x++) {
	        // loop columns
	        for (var y = 0; y < n; y++) {
	          // value at i, j
	          var v = submatrix[x][y];
	          // invoke set (zero value will remove entry from matrix)
	          matrix.set([x + x0, y + y0], v, defaultValue);
	        }
	      }
	    }
	    return matrix;
	  };
	
	  /**
	   * Get a single element from the matrix.
	   * @memberof SparseMatrix
	   * @param {number[]} index   Zero-based index
	   * @return {*} value
	   */
	  SparseMatrix.prototype.get = function (index) {
	    if (!isArray(index))
	      throw new TypeError('Array expected');
	    if (index.length != this._size.length)
	      throw new DimensionError(index.length, this._size.length);
	
	    // check it is a pattern matrix
	    if (!this._values)
	      throw new Error('Cannot invoke get on a Pattern only matrix');
	
	    // row and column
	    var i = index[0];
	    var j = index[1];
	
	    // check i, j are valid
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[1]);
	
	    // find value index
	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
	    // check k is prior to next column k and it is in the correct row
	    if (k < this._ptr[j + 1] && this._index[k] === i)
	      return this._values[k];
	
	    return 0;
	  };
	  
	  /**
	   * Replace a single element in the matrix.
	   * @memberof SparseMatrix
	   * @param {number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be set to zero.
	   * @return {SparseMatrix} self
	   */
	  SparseMatrix.prototype.set = function (index, v, defaultValue) {
	    if (!isArray(index))
	      throw new TypeError('Array expected');
	    if (index.length != this._size.length)
	      throw new DimensionError(index.length, this._size.length);
	
	    // check it is a pattern matrix
	    if (!this._values)
	      throw new Error('Cannot invoke set on a Pattern only matrix');
	      
	    // row and column
	    var i = index[0];
	    var j = index[1];
	
	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	
	    if (isString(this._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, this._datatype);
	    }
	
	    // check we need to resize matrix
	    if (i > rows - 1 || j > columns - 1) {
	      // resize matrix
	      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);
	      // update rows & columns
	      rows = this._size[0];
	      columns = this._size[1];
	    }
	
	    // check i, j are valid
	    validateIndex(i, rows);
	    validateIndex(j, columns);
	
	    // find value index
	    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);
	    // check k is prior to next column k and it is in the correct row
	    if (k < this._ptr[j + 1] && this._index[k] === i) {
	      // check value != 0
	      if (!eq(v, zero)) {
	        // update value
	        this._values[k] = v;
	      }
	      else {
	        // remove value from matrix
	        _remove(k, j, this._values, this._index, this._ptr);
	      }
	    }
	    else {
	      // insert value @ (i, j)
	      _insert(k, i, j, v, this._values, this._index, this._ptr);
	    }
	
	    return this;
	  };
	  
	  var _getValueIndex = function(i, top, bottom, index) {
	    // check row is on the bottom side
	    if (bottom - top === 0)
	      return bottom;
	    // loop rows [top, bottom[
	    for (var r = top; r < bottom; r++) {
	      // check we found value index
	      if (index[r] === i)
	        return r;
	    }
	    // we did not find row
	    return top;
	  };
	
	  var _remove = function (k, j, values, index, ptr) {
	    // remove value @ k
	    values.splice(k, 1);
	    index.splice(k, 1);
	    // update pointers
	    for (var x = j + 1; x < ptr.length; x++)
	      ptr[x]--;
	  };
	
	  var _insert = function (k, i, j, v, values, index, ptr) {
	    // insert value
	    values.splice(k, 0, v);
	    // update row for k
	    index.splice(k, 0, i);
	    // update column pointers
	    for (var x = j + 1; x < ptr.length; x++)
	      ptr[x]++;
	  };
	  
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when 
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @memberof SparseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {    
	    // validate arguments
	    if (!isArray(size))
	      throw new TypeError('Array expected');
	    if (size.length !== 2)
	      throw new Error('Only two dimensions matrix are supported');
	
	    // check sizes
	    size.forEach(function (value) {
	      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
	        throw new TypeError('Invalid size, must contain positive integers ' +
	                            '(size: ' + string.format(size) + ')');
	      }
	    });
	    
	    // matrix to resize
	    var m = copy ? this.clone() : this;
	    // resize matrix
	    return _resize(m, size[0], size[1], defaultValue);
	  };
	  
	  var _resize = function (matrix, rows, columns, defaultValue) {
	    // value to insert at the time of growing matrix
	    var value = defaultValue || 0;
	    
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	
	    if (isString(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, matrix._datatype);
	      // convert value to the same datatype
	      value = typed.convert(value, matrix._datatype);
	    }
	    
	    // should we insert the value?
	    var ins = !eq(value, zero);
	
	    // old columns and rows
	    var r = matrix._size[0];
	    var c = matrix._size[1];
	
	    var i, j, k;
	
	    // check we need to increase columns
	    if (columns > c) {
	      // loop new columns
	      for (j = c; j < columns; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._values.length;
	        // check we need to insert matrix._values
	        if (ins) {
	          // loop rows
	          for (i = 0; i < r; i++) {
	            // add new matrix._values
	            matrix._values.push(value);
	            // update matrix._index
	            matrix._index.push(i);
	          }
	        }        
	      }
	      // store number of matrix._values in matrix._ptr
	      matrix._ptr[columns] = matrix._values.length;
	    }
	    else if (columns < c) {
	      // truncate matrix._ptr
	      matrix._ptr.splice(columns + 1, c - columns);
	      // truncate matrix._values and matrix._index
	      matrix._values.splice(matrix._ptr[columns], matrix._values.length);
	      matrix._index.splice(matrix._ptr[columns], matrix._index.length);
	    }
	    // update columns
	    c = columns;
	
	    // check we need to increase rows
	    if (rows > r) {
	      // check we have to insert values
	      if (ins) {
	        // inserts
	        var n = 0;
	        // loop columns
	        for (j = 0; j < c; j++) {
	          // update matrix._ptr for current column
	          matrix._ptr[j] = matrix._ptr[j] + n;
	          // where to insert matrix._values
	          k = matrix._ptr[j + 1] + n;
	          // pointer
	          var p = 0;
	          // loop new rows, initialize pointer
	          for (i = r; i < rows; i++, p++) {
	            // add value
	            matrix._values.splice(k + p, 0, value);
	            // update matrix._index
	            matrix._index.splice(k + p, 0, i);
	            // increment inserts
	            n++;
	          }
	        }
	        // store number of matrix._values in matrix._ptr
	        matrix._ptr[c] = matrix._values.length;
	      }
	    }
	    else if (rows < r) {
	      // deletes
	      var d = 0;
	      // loop columns
	      for (j = 0; j < c; j++) {
	        // update matrix._ptr for current column
	        matrix._ptr[j] = matrix._ptr[j] - d;
	        // where matrix._values start for next column
	        var k0 = matrix._ptr[j];
	        var k1 = matrix._ptr[j + 1] - d;
	        // loop matrix._index
	        for (k = k0; k < k1; k++) {
	          // row
	          i = matrix._index[k];
	          // check we need to delete value and matrix._index
	          if (i > rows - 1) {
	            // remove value
	            matrix._values.splice(k, 1);
	            // remove item from matrix._index
	            matrix._index.splice(k, 1);
	            // increase deletes
	            d++;
	          }
	        }
	      }
	      // update matrix._ptr for current column
	      matrix._ptr[j] = matrix._values.length;
	    }
	    // update matrix._size
	    matrix._size[0] = rows;
	    matrix._size[1] = columns;
	    // return matrix
	    return matrix;
	  };
	
	  /**
	   * Reshape the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (reshape in place).
	   *
	   * NOTE: This might be better suited to copy by default, instead of modifying
	   *       in place. For now, it operates in place to remain consistent with
	   *       resize().
	   *
	   * @memberof SparseMatrix
	   * @param {number[]} size           The new size the matrix should have.
	   * @param {boolean} [copy]          Return a reshaped copy of the matrix
	   *
	   * @return {Matrix}                 The reshaped matrix
	   */
	  SparseMatrix.prototype.reshape = function (size, copy) {
	
	    // validate arguments
	    if (!isArray(size))
	      throw new TypeError('Array expected');
	    if (size.length !== 2)
	      throw new Error('Sparse matrices can only be reshaped in two dimensions');
	
	    // check sizes
	    size.forEach(function (value) {
	      if (!number.isNumber(value) || !number.isInteger(value) || value < 0) {
	        throw new TypeError('Invalid size, must contain positive integers ' +
	                            '(size: ' + string.format(size) + ')');
	      }
	    });
	
	    // m * n must not change
	    if(this._size[0] * this._size[1] !== size[0] * size[1]) {
	      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');
	    }
	
	    // matrix to reshape
	    var m = copy ? this.clone() : this;
	
	    // return unchanged if the same shape
	    if(this._size[0] === size[0] && this._size[1] === size[1]) {
	      return m;
	    }
	
	    // Convert to COO format (generate a column index)
	    var colIndex = [];
	    for(var i=0; i<m._ptr.length; i++) {
	      for(var j=0; j<m._ptr[i+1]-m._ptr[i]; j++) {
	        colIndex.push(i);
	      }
	    }
	
	    // Clone the values array
	    var values = m._values.slice();
	
	    // Clone the row index array
	    var rowIndex = m._index.slice();
	
	    // Transform the (row, column) indices
	    for(var i=0; i<m._index.length; i++) {
	      var r1 = rowIndex[i];
	      var c1 = colIndex[i];
	      var flat = r1 * m._size[1] + c1;
	      colIndex[i] = flat % size[1];
	      rowIndex[i] = Math.floor(flat / size[1]);
	    }
	
	    // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored
	    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,
	    // sorting several arrays based on some other array.
	
	    // OR, we could easily just:
	
	    // 1. Remove all values from the matrix
	    m._values.length = 0;
	    m._index.length = 0;
	    m._ptr.length = size[1] + 1;
	    m._size = size.slice();
	    for(var i=0; i<m._ptr.length; i++) {
	      m._ptr[i] = 0;
	    }
	
	    // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)
	    // This step is probably the most time-consuming
	    for(var h=0; h<values.length; h++) {
	      var i = rowIndex[h];
	      var j = colIndex[h];
	      var v = values[h];
	      var k = _getValueIndex(i, m._ptr[j], m._ptr[j + 1], m._index);
	      _insert(k, i, j, v, m._values, m._index, m._ptr);
	    }
	
	    // The value indices are inserted out of order, but apparently that's... still OK?
	
	    return m;
	  }
	  
	  /**
	   * Create a clone of the matrix
	   * @memberof SparseMatrix
	   * @return {SparseMatrix} clone
	   */
	  SparseMatrix.prototype.clone = function () {
	    var m = new SparseMatrix({
	      values: this._values ? object.clone(this._values) : undefined,
	      index: object.clone(this._index),
	      ptr: object.clone(this._ptr),
	      size: object.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };
	  
	  /**
	   * Retrieve the size of the matrix.
	   * @memberof SparseMatrix
	   * @returns {number[]} size
	   */
	  SparseMatrix.prototype.size = function() {
	    return this._size.slice(0); // copy the Array
	  };
	  
	  /**
	   * Create a new matrix with the results of the callback function executed on
	   * each entry of the matrix.
	   * @memberof SparseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   *
	   * @return {SparseMatrix} matrix
	   */
	  SparseMatrix.prototype.map = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values)
	      throw new Error('Cannot invoke map on a Pattern only matrix');
	    // matrix instance
	    var me = this;
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // invoke callback
	    var invoke = function (v, i, j) {
	      // invoke callback
	      return callback(v, [i, j], me);
	    };
	    // invoke _map
	    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);
	  };
	
	  /**
	   * Create a new matrix with the results of the callback function executed on the interval
	   * [minRow..maxRow, minColumn..maxColumn].
	   */
	  var _map = function (matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {
	    // result arrays
	    var values = [];
	    var index = [];
	    var ptr = [];
	    
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	
	    if (isString(matrix._datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, matrix._datatype);
	    }
	    
	    // invoke callback
	    var invoke = function (v, x, y) {
	      // invoke callback
	      v = callback(v, x, y);
	      // check value != 0
	      if (!eq(v, zero)) {
	        // store value
	        values.push(v);
	        // index
	        index.push(x);
	      }
	    };
	    // loop columns
	    for (var j = minColumn; j <= maxColumn; j++) {
	      // store pointer to values index
	      ptr.push(values.length);
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = matrix._ptr[j];
	      var k1 = matrix._ptr[j + 1];
	      // row pointer
	      var p = minRow;
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = matrix._index[k];
	        // check i is in range
	        if (i >= minRow && i <= maxRow) {
	          // zero values
	          if (!skipZeros) {
	           for (var x = p; x < i; x++)
	             invoke(0, x - minRow, j - minColumn);
	          }
	          // value @ k
	          invoke(matrix._values[k], i - minRow, j - minColumn);
	        }
	        // update pointer
	        p = i + 1;
	      }
	      // zero values
	      if (!skipZeros) {
	        for (var y = p; y <= maxRow; y++)
	          invoke(0, y - minRow, j - minColumn);
	      }
	    }
	    // store number of values in ptr
	    ptr.push(values.length);
	    // return sparse matrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]
	    });
	  };
	  
	  /**
	   * Execute a callback function on each entry of the matrix.
	   * @memberof SparseMatrix
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.
	   */
	  SparseMatrix.prototype.forEach = function (callback, skipZeros) {
	    // check it is a pattern matrix
	    if (!this._values)
	      throw new Error('Cannot invoke forEach on a Pattern only matrix');
	    // matrix instance
	    var me = this;
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // column pointer
	      var p = 0;
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k];
	        // check we need to process zeros
	        if (!skipZeros) {
	          // zero values
	          for (var x = p; x < i; x++)
	            callback(0, [x, j], me);
	        }
	        // value @ k
	        callback(this._values[k], [i, j], me);
	        // update pointer
	        p = i + 1;
	      }
	      // check we need to process zeros
	      if (!skipZeros) {
	        // zero values
	        for (var y = p; y < rows; y++)
	          callback(0, [y, j], me);
	      }
	    }
	  };
	  
	  /**
	   * Create an Array with a copy of the data of the SparseMatrix
	   * @memberof SparseMatrix
	   * @returns {Array} array
	   */
	  SparseMatrix.prototype.toArray = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, true);
	  };
	
	  /**
	   * Get the primitive value of the SparseMatrix: a two dimensions array
	   * @memberof SparseMatrix
	   * @returns {Array} array
	   */
	  SparseMatrix.prototype.valueOf = function () {
	    return _toArray(this._values, this._index, this._ptr, this._size, false);
	  };
	  
	  var _toArray = function (values, index, ptr, size, copy) {    
	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];
	    // result
	    var a = [];
	    // vars
	    var i, j;
	    // initialize array
	    for (i = 0; i < rows; i++) {
	      a[i] = [];
	      for (j = 0; j < columns; j++)
	        a[i][j] = 0;
	    }
	
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        i = index[k];
	        // set value (use one for pattern matrix)
	        a[i][j] = values ? (copy ? object.clone(values[k]) : values[k]) : 1;
	      }
	    }
	    return a;
	  };
	  
	  /**
	   * Get a string representation of the matrix, with optional formatting options.
	   * @memberof SparseMatrix
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  SparseMatrix.prototype.format = function (options) {
	    // rows and columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    // density
	    var density = this.density();
	    // rows & columns
	    var str = 'Sparse Matrix [' + string.format(rows, options) + ' x ' + string.format(columns, options) + '] density: ' + string.format(density, options) + '\n';
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // loop k within [k0, k1[
	      for (var k = k0; k < k1; k++) {
	        // row index
	        var i = this._index[k];
	        // append value
	        str += '\n    (' + string.format(i, options) + ', ' + string.format(j, options) + ') ==> ' + (this._values ? string.format(this._values[k], options) : 'X');
	      }
	    }
	    return str;
	  };
	  
	  /**
	   * Get a string representation of the matrix
	   * @memberof SparseMatrix
	   * @returns {string} str
	   */
	  SparseMatrix.prototype.toString = function () {
	    return string.format(this.toArray());
	  };
	  
	  /**
	   * Get a JSON representation of the matrix
	   * @memberof SparseMatrix
	   * @returns {Object}
	   */
	  SparseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'SparseMatrix',
	      values: this._values,
	      index: this._index,
	      ptr: this._ptr,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };
	
	  /**
	   * Get the kth Matrix diagonal.
	   *
	   * @memberof SparseMatrix
	   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.
	   *
	   * @returns {Matrix}                     The matrix vector with the diagonal values.
	   */
	  SparseMatrix.prototype.diagonal = function(k) {
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (k.isBigNumber === true)
	        k = k.toNumber();
	      // is must be an integer
	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError ('The parameter k must be an integer number');
	      }
	    }
	    else {
	      // default value
	      k = 0;
	    }
	
	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;
	    
	    // rows & columns
	    var rows = this._size[0];
	    var columns = this._size[1];
	    
	    // number diagonal values
	    var n = Math.min(rows - kSub, columns -  kSuper);
	    
	    // diagonal arrays
	    var values = [];
	    var index = [];
	    var ptr = [];
	    // initial ptr value
	    ptr[0] = 0;
	    // loop columns
	    for (var j = kSuper; j < columns && values.length < n; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = this._ptr[j];
	      var k1 = this._ptr[j + 1];
	      // loop x within [k0, k1[
	      for (var x = k0; x < k1; x++) {
	        // row index
	        var i = this._index[x];
	        // check row
	        if (i === j - kSuper + kSub) {
	          // value on this column
	          values.push(this._values[x]);
	          // store row
	          index[values.length - 1] = i - kSub;
	          // exit loop
	          break;
	        }
	      }
	    }
	    // close ptr
	    ptr.push(values.length);
	    // return matrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [n, 1]
	    });
	  };
	  
	  /**
	   * Generate a matrix from a JSON object
	   * @memberof SparseMatrix
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "SparseMatrix", "values": [], "index": [], "ptr": [], "size": []}`,
	   *                       where mathjs is optional
	   * @returns {SparseMatrix}
	   */
	  SparseMatrix.fromJSON = function (json) {
	    return new SparseMatrix(json);
	  };
	
	  /**
	   * Create a diagonal matrix.
	   *
	   * @memberof SparseMatrix
	   * @param {Array} size                       The matrix size.
	   * @param {number | Array | Matrix } value   The values for the diagonal.
	   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.
	   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.
	   *
	   * @returns {SparseMatrix}
	   */
	  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {
	    if (!isArray(size))
	      throw new TypeError('Array expected, size parameter');
	    if (size.length !== 2)
	      throw new Error('Only two dimensions matrix are supported');
	    
	    // map size & validate
	    size = size.map(function (s) {
	      // check it is a big number
	      if (s && s.isBigNumber === true) {
	        // convert it
	        s = s.toNumber();
	      }
	      // validate arguments
	      if (!isNumber(s) || !isInteger(s) || s < 1) {
	        throw new Error('Size values must be positive integers');
	      } 
	      return s;
	    });
	    
	    // validate k if any
	    if (k) {
	      // convert BigNumber to a number
	      if (k.isBigNumber === true)
	        k = k.toNumber();
	      // is must be an integer
	      if (!isNumber(k) || !isInteger(k)) {
	        throw new TypeError ('The parameter k must be an integer number');
	      }
	    }
	    else {
	      // default value
	      k = 0;
	    }
	
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	
	    if (isString(datatype)) {
	      // find signature that matches (datatype, datatype)
	      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, datatype);
	    }
	    
	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;
	    
	    // rows and columns
	    var rows = size[0];
	    var columns = size[1];
	    
	    // number of non-zero items
	    var n = Math.min(rows - kSub, columns -  kSuper);
	    
	    // value extraction function
	    var _value;
	      
	    // check value
	    if (isArray(value)) {
	      // validate array
	      if (value.length !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid value array length');
	      }
	      // define function
	      _value = function (i) {
	        // return value @ i
	        return value[i];
	      };
	    }
	    else if (value && value.isMatrix === true) {
	      // matrix size
	      var ms = value.size();
	      // validate matrix
	      if (ms.length !== 1 || ms[0] !== n) {
	        // number of values in array must be n
	        throw new Error('Invalid matrix length');
	      }
	      // define function
	      _value = function (i) {
	        // return value @ i
	        return value.get([i]);
	      };
	    }
	    else {
	      // define function
	      _value = function () {
	        // return value
	        return value;
	      };
	    }
	    
	    // create arrays
	    var values = [];
	    var index = [];
	    var ptr = [];
	    
	    // loop items
	    for (var j = 0; j < columns; j++) {
	      // number of rows with value
	      ptr.push(values.length);
	      // diagonal index
	      var i = j - kSuper;      
	      // check we need to set diagonal value
	      if (i >= 0 && i < n) {
	        // get value @ i
	        var v = _value(i);
	        // check for zero
	        if (!eq(v, zero)) {
	          // column
	          index.push(i + kSub);
	          // add value
	          values.push(v);
	        }
	      }
	    }
	    // last value should be number of values
	    ptr.push(values.length);
	    // create SparseMatrix
	    return new SparseMatrix({
	      values: values,
	      index: index,
	      ptr: ptr,
	      size: [rows, columns]
	    });
	  };
	  
	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @memberof SparseMatrix
	   * @param {number} i       Matrix row index 1
	   * @param {number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  SparseMatrix.prototype.swapRows = function (i, j) {
	    // check index
	    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {
	      throw new Error('Row index must be positive integers');
	    }
	    // check dimensions
	    if (this._size.length !== 2) {
	      throw new Error('Only two dimensional matrix is supported');
	    }
	    // validate index
	    validateIndex(i, this._size[0]);
	    validateIndex(j, this._size[0]);
	    
	    // swap rows
	    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);
	    // return current instance
	    return this;
	  };
	  
	  /**
	   * Loop rows with data in column j.
	   *
	   * @param {number} j            Column
	   * @param {Array} values        Matrix values
	   * @param {Array} index         Matrix row indeces
	   * @param {Array} ptr           Matrix column pointers
	   * @param {Function} callback   Callback function invoked for every row in column j
	   */
	  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {
	    // indeces for column j
	    var k0 = ptr[j];
	    var k1 = ptr[j + 1];
	    // loop
	    for (var k = k0; k < k1; k++) {
	      // invoke callback
	      callback(index[k], values[k]);
	    }
	  };
	  
	  /**
	   * Swap rows x and y in Sparse Matrix data structures.
	   *
	   * @param {number} x         Matrix row index 1
	   * @param {number} y         Matrix row index 2
	   * @param {number} columns   Number of columns in matrix
	   * @param {Array} values     Matrix values
	   * @param {Array} index      Matrix row indeces
	   * @param {Array} ptr        Matrix column pointers
	   */
	  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // find value index @ x
	      var kx = _getValueIndex(x, k0, k1, index);
	      // find value index @ x
	      var ky = _getValueIndex(y, k0, k1, index);
	      // check both rows exist in matrix
	      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {
	        // swap values (check for pattern matrix)
	        if (values) {
	          var v = values[kx];
	          values[kx] = values[ky];
	          values[ky] = v;
	        }
	        // next column
	        continue;
	      }
	      // check x row exist & no y row
	      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {
	        // value @ x (check for pattern matrix)
	        var vx = values ? values[kx] : undefined;
	        // insert value @ y
	        index.splice(ky, 0, y);
	        if (values)
	          values.splice(ky, 0, vx);        
	        // remove value @ x (adjust array index if needed)
	        index.splice(ky <= kx ? kx + 1 : kx, 1);
	        if (values)
	          values.splice(ky <= kx ? kx + 1 : kx, 1);
	        // next column
	        continue;
	      }
	      // check y row exist & no x row
	      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {
	        // value @ y (check for pattern matrix)
	        var vy = values ? values[ky] : undefined;
	        // insert value @ x
	        index.splice(kx, 0, x);
	        if (values)
	          values.splice(kx, 0, vy);
	        // remove value @ y (adjust array index if needed)
	        index.splice(kx <= ky ? ky + 1 : ky, 1);
	        if (values)
	          values.splice(kx <= ky ? ky + 1 : ky, 1);
	      }
	    }
	  };
	
	  // register this type in the base class Matrix
	  type.Matrix._storage.sparse = SparseMatrix;
	
	  return SparseMatrix;
	}
	
	exports.name = 'SparseMatrix';
	exports.path = 'type';
	exports.factory = factory;
	exports.lazy = false;  // no lazy loading, as we alter type.Matrix._storage


/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var nearlyEqual = __webpack_require__(58).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(101);
	
	function factory (type, config, load, typed) {
	  
	  /**
	   * Test whether two values are equal.
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit} x   First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Complex} y          Second value to compare
	   * @return {boolean}                                                  Returns true when the compared values are equal, else returns false
	   * @private
	   */
	  var equalScalar = typed('equalScalar', {
	
	    'boolean, boolean': function (x, y) {
	      return x === y;
	    },
	
	    'number, number': function (x, y) {
	      return x === y || nearlyEqual(x, y, config.epsilon);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return x.eq(y) || bigNearlyEqual(x, y, config.epsilon);
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      return x.equals(y);
	    },
	
	    'Complex, Complex': function (x, y) {
	      return x.equals(y);
	    },
	
	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return equalScalar(x.value, y.value);
	    },
	
	    'string, string': function (x, y) {
	      return x === y;
	    }
	  });
	  
	  return equalScalar;
	}
	
	exports.factory = factory;


/***/ }),
/* 101 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Compares two BigNumbers.
	 * @param {BigNumber} x       First value to compare
	 * @param {BigNumber} y       Second value to compare
	 * @param {number} [epsilon]  The maximum relative difference between x and y
	 *                            If epsilon is undefined or null, the function will
	 *                            test whether x and y are exactly equal.
	 * @return {boolean} whether the two numbers are nearly equal
	 */
	module.exports = function nearlyEqual(x, y, epsilon) {
	  // if epsilon is null or undefined, test whether x and y are exactly equal
	  if (epsilon == null) {
	    return x.eq(y);
	  }
	
	
	  // use "==" operator, handles infinities
	  if (x.eq(y)) {
	    return true;
	  }
	
	  // NaN
	  if (x.isNaN() || y.isNaN()) {
	    return false;
	  }
	
	  // at this point x and y should be finite
	  if(x.isFinite() && y.isFinite()) {
	    // check numbers are very close, needed when comparing numbers near zero
	    var diff = x.minus(y).abs();
	    if (diff.isZero()) {
	      return true;
	    }
	    else {
	      // use relative error
	      var max = x.constructor.max(x.abs(), y.abs());
	      return diff.lte(max.times(epsilon));
	    }
	  }
	
	  // Infinite and Number or negative Infinite and positive Infinite cases
	  return false;
	};


/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load) {
	  
	  var add = load(__webpack_require__(103));
	  var equalScalar = load(__webpack_require__(100));
	  
	  /**
	   * An ordered Sparse Accumulator is a representation for a sparse vector that includes a dense array 
	   * of the vector elements and an ordered list of non-zero elements.
	   */
	  function Spa() {
	    if (!(this instanceof Spa))
	      throw new SyntaxError('Constructor must be called with the new operator');
	    
	    // allocate vector, TODO use typed arrays
	    this._values = [];
	    this._heap = new type.FibonacciHeap();
	  }
	
	  /**
	   * Attach type information
	   */
	  Spa.prototype.type = 'Spa';
	  Spa.prototype.isSpa = true;
	
	  /**
	   * Set the value for index i.
	   *
	   * @param {number} i                       The index
	   * @param {number | BigNumber | Complex}   The value at index i
	   */
	  Spa.prototype.set = function (i, v) {
	    // check we have a value @ i
	    if (!this._values[i]) {
	      // insert in heap
	      var node = this._heap.insert(i, v);
	      // set the value @ i
	      this._values[i] = node;
	    }
	    else {
	      // update the value @ i
	      this._values[i].value = v;
	    }
	  };
	  
	  Spa.prototype.get = function (i) {
	    var node = this._values[i];
	    if (node)
	      return node.value;
	    return 0;
	  };
	  
	  Spa.prototype.accumulate = function (i, v) {
	    // node @ i
	    var node = this._values[i];
	    if (!node) {
	      // insert in heap
	      node = this._heap.insert(i, v);
	      // initialize value
	      this._values[i] = node;
	    }
	    else {
	      // accumulate value
	      node.value = add(node.value, v);
	    }
	  };
	  
	  Spa.prototype.forEach = function (from, to, callback) {
	    // references
	    var heap = this._heap;
	    var values = this._values;
	    // nodes
	    var nodes = [];
	    // node with minimum key, save it
	    var node = heap.extractMinimum();
	    if (node)
	      nodes.push(node);
	    // extract nodes from heap (ordered)
	    while (node && node.key <= to) {
	      // check it is in range
	      if (node.key >= from) {
	        // check value is not zero
	        if (!equalScalar(node.value, 0)) {
	          // invoke callback
	          callback(node.key, node.value, this);
	        }
	      }
	      // extract next node, save it
	      node = heap.extractMinimum();
	      if (node)
	        nodes.push(node);
	    }
	    // reinsert all nodes in heap
	    for (var i = 0; i < nodes.length; i++) {
	      // current node
	      var n = nodes[i];
	      // insert node in heap
	      node = heap.insert(n.key, n.value);
	      // update values
	      values[node.key] = node;
	    }
	  };
	  
	  Spa.prototype.swap = function (i, j) {
	    // node @ i and j
	    var nodei = this._values[i];
	    var nodej = this._values[j];
	    // check we need to insert indeces
	    if (!nodei && nodej) {
	      // insert in heap
	      nodei = this._heap.insert(i, nodej.value);
	      // remove from heap
	      this._heap.remove(nodej);
	      // set values
	      this._values[i] = nodei;
	      this._values[j] = undefined;
	    }
	    else if (nodei && !nodej) {
	      // insert in heap
	      nodej = this._heap.insert(j, nodei.value);
	      // remove from heap
	      this._heap.remove(nodei);
	      // set values
	      this._values[j] = nodej;
	      this._values[i] = undefined;
	    }
	    else if (nodei && nodej) {
	      // swap values
	      var v = nodei.value;
	      nodei.value = nodej.value;
	      nodej.value = v;
	    }
	  };
	  
	  return Spa;
	}
	
	exports.name = 'Spa';
	exports.path = 'type';
	exports.factory = factory;


/***/ }),
/* 103 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var extend = __webpack_require__(55).extend;
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	  var addScalar = load(__webpack_require__(105));
	  var latex = __webpack_require__(83);
	  
	  var algorithm01 = load(__webpack_require__(106));
	  var algorithm04 = load(__webpack_require__(107));
	  var algorithm10 = load(__webpack_require__(108));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Add two or more values, `x + y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.add(x, y)
	   *    math.add(x, y, z, ...)
	   *
	   * Examples:
	   *
	   *    math.add(2, 3);               // returns number 5
	   *    math.add(2, 3, 4);            // returns number 9
	   *
	   *    var a = math.complex(2, 3);
	   *    var b = math.complex(-4, 1);
	   *    math.add(a, b);               // returns Complex -2 + 4i
	   *
	   *    math.add([1, 2, 3], 4);       // returns Array [5, 6, 7]
	   *
	   *    var c = math.unit('5 cm');
	   *    var d = math.unit('2.1 mm');
	   *    math.add(c, d);               // returns Unit 52.1 mm
	   *
	   *    math.add("2.3", "4");         // returns number 6.3
	   *
	   * See also:
	   *
	   *    subtract, sum
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to add
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to add
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Sum of `x` and `y`
	   */
	  var add = typed('add', extend({
	    // we extend the signatures of addScalar with signatures dealing with matrices
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	      
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm04(x, y, addScalar);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm01(y, x, addScalar, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm01(x, y, addScalar, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, addScalar);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	    
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return add(matrix(x), matrix(y)).valueOf();
	    },
	    
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return add(matrix(x), y);
	    },
	    
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return add(x, matrix(y));
	    },
	    
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm10(x, y, addScalar, false);
	          break;
	        default:
	          c = algorithm14(x, y, addScalar, false);
	          break;
	      }
	      return c;
	    },
	    
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm10(y, x, addScalar, true);
	          break;
	        default:
	          c = algorithm14(y, x, addScalar, true);
	          break;
	      }
	      return c;
	    },
	    
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, addScalar, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, addScalar, true).valueOf();
	    },
	
	    'any, any': addScalar,
	
	    'any, any, ...any': function (x, y, rest) {
	      var result = add(x, y);
	
	      for (var i = 0; i < rest.length; i++) {
	        result = add(result, rest[i]);
	      }
	
	      return result;
	    }
	  }, addScalar.signatures));
	
	  add.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['add'] + '${args[1]}\\right)'
	  };
	  
	  return add;
	}
	
	exports.name = 'add';
	exports.factory = factory;


/***/ }),
/* 104 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  /**
	   * Create a Matrix. The function creates a new `math.type.Matrix` object from
	   * an `Array`. A Matrix has utility functions to manipulate the data in the
	   * matrix, like getting the size and getting or setting values in the matrix.
	   * Supported storage formats are 'dense' and 'sparse'.
	   *
	   * Syntax:
	   *
	   *    math.matrix()                         // creates an empty matrix using default storage format (dense).
	   *    math.matrix(data)                     // creates a matrix with initial data using default storage format (dense).
	   *    math.matrix('dense')                  // creates an empty matrix using the given storage format.
	   *    math.matrix(data, 'dense')            // creates a matrix with initial data using the given storage format.
	   *    math.matrix(data, 'sparse')           // creates a sparse matrix with initial data.
	   *    math.matrix(data, 'sparse', 'number') // creates a sparse matrix with initial data, number data type.
	   *
	   * Examples:
	   *
	   *    var m = math.matrix([[1, 2], [3, 4]]);
	   *    m.size();                        // Array [2, 2]
	   *    m.resize([3, 2], 5);
	   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]
	   *    m.get([1, 0])                    // number 3
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, number, string, unit, sparse
	   *
	   * @param {Array | Matrix} [data]    A multi dimensional array
	   * @param {string} [format]          The Matrix storage format
	   *
	   * @return {Matrix} The created matrix
	   */
	  var matrix = typed('matrix', {
	    '': function () {
	      return _create([]);
	    },
	
	    'string': function (format) {
	      return _create([], format);
	    },
	    
	    'string, string': function (format, datatype) {
	      return _create([], format, datatype);
	    },
	
	    'Array': function (data) {
	      return _create(data);
	    },
	      
	    'Matrix': function (data) {
	      return _create(data, data.storage());
	    },
	    
	    'Array | Matrix, string': _create,
	    
	    'Array | Matrix, string, string': _create
	  });
	
	  matrix.toTex = {
	    0: '\\begin{bmatrix}\\end{bmatrix}',
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(${args[0]}\\right)'
	  };
	
	  return matrix;
	
	  /**
	   * Create a new Matrix with given storage format
	   * @param {Array} data
	   * @param {string} [format]
	   * @param {string} [datatype]
	   * @returns {Matrix} Returns a new Matrix
	   * @private
	   */
	  function _create(data, format, datatype) {
	    // get storage format constructor
	    var M = type.Matrix.storage(format || 'default');
	
	    // create instance
	    return new M(data, datatype);
	  }
	}
	
	exports.name = 'matrix';
	exports.factory = factory;


/***/ }),
/* 105 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory(type, config, load, typed) {
	
	  /**
	   * Add two scalar values, `x + y`.
	   * This function is meant for internal use: it is used by the public function
	   * `add`
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to add
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to add
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Sum of `x` and `y`
	   * @private
	   */
	  var add = typed('add', {
	
	    'number, number': function (x, y) {
	      return x + y;
	    },
	
	    'Complex, Complex': function (x, y) {
	      return x.add(y);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return x.plus(y);
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      return x.add(y);
	    },
	
	    'Unit, Unit': function (x, y) {
	      if (x.value == null) throw new Error('Parameter x contains a unit with undefined value');
	      if (y.value == null) throw new Error('Parameter y contains a unit with undefined value');
	      if (!x.equalBase(y)) throw new Error('Units do not match');
	
	      var res = x.clone();
	      res.value = add(res.value, y.value);
	      res.fixPrefix = false;
	      return res;
	    }
	  });
	
	  return add;
	}
	
	exports.factory = factory;


/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DimensionError = __webpack_require__(93);
	
	function factory (type, config, load, typed) {
	
	  var DenseMatrix = type.DenseMatrix;
	
	  /**
	   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). 
	   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  Dij          ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  var algorithm01 = function (denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;
	
	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);
	
	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	
	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues)
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	
	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	
	    // process data types
	    var dt = typeof adt === 'string' && adt === bdt ? adt : undefined;
	    // callback function
	    var cf = dt ? typed.find(callback, [dt, dt]) : callback;
	
	    // vars
	    var i, j;
	    
	    // result (DenseMatrix)
	    var cdata = [];
	    // initialize c
	    for (i = 0; i < rows; i++)
	      cdata[i] = [];      
	    
	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];
	
	    // loop columns in b
	    for (j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // update workspace
	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        // mark i as updated
	        w[i] = mark;
	      }
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // check row is in workspace
	        if (w[i] === mark) {
	          // c[i][j] was already calculated
	          cdata[i][j] = x[i];
	        }
	        else {
	          // item does not exist in S
	          cdata[i][j] = adata[i][j];
	        }
	      }
	    }
	
	    // return dense matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	  
	  return algorithm01;
	}
	
	exports.name = 'algorithm01';
	exports.factory = factory;


/***/ }),
/* 107 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DimensionError = __webpack_require__(93);
	
	function factory (type, config, load, typed) {
	
	  var equalScalar = load(__webpack_require__(100));
	
	  var SparseMatrix = type.SparseMatrix;
	
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
	   *          └  B(i,j)       ; B(i,j) !== 0
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm04 = function (a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;
	
	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);
	
	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	
	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	
	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	
	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	
	    // workspace
	    var xa = avalues && bvalues ? [] : undefined;
	    var xb = avalues && bvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];
	
	    // vars 
	    var i, j, k, k0, k1;
	    
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop A(:,j)
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // update c
	        cindex.push(i);
	        // update workspace
	        wa[i] = mark;
	        // check we need to process values
	        if (xa)
	          xa[i] = avalues[k];
	      }
	      // loop B(:,j)
	      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check row exists in A
	        if (wa[i] === mark) {
	          // update record in xa @ i
	          if (xa) {
	            // invoke callback
	            var v = cf(xa[i], bvalues[k]);
	            // check for zero
	            if (!eq(v, zero)) {
	              // update workspace
	              xa[i] = v;              
	            }
	            else {
	              // remove mark (index will be removed later)
	              wa[i] = null;
	            }
	          }
	        }
	        else {
	          // update c
	          cindex.push(i);
	          // update workspace
	          wb[i] = mark;
	          // check we need to process values
	          if (xb)
	            xb[i] = bvalues[k];
	        }
	      }
	      // check we need to process values (non pattern matrix)
	      if (xa && xb) {
	        // initialize first index in j
	        k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          i = cindex[k];
	          // check workspace has value @ i
	          if (wa[i] === mark) {
	            // push value (Aij != 0 || (Aij != 0 && Bij != 0))
	            cvalues[k] = xa[i];
	            // increment pointer
	            k++;
	          }
	          else if (wb[i] === mark) {
	            // push value (bij != 0)
	            cvalues[k] = xb[i];
	            // increment pointer
	            k++;
	          }
	          else {
	            // remove index @ k
	            cindex.splice(k, 1);
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;
	
	    // return sparse matrix
	    return c;
	  };
	  
	  return algorithm04;
	}
	
	exports.name = 'algorithm04';
	exports.factory = factory;


/***/ }),
/* 108 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var DenseMatrix = type.DenseMatrix;
	
	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  b          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  var algorithm10 = function (s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;
	
	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues)
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	
	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	
	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	
	    // result arrays
	    var cdata = [];
	    // matrix
	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	
	    // workspaces
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];
	
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k];
	        // update workspace
	        x[r] = avalues[k];
	        w[r] = mark;
	      }
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        }
	        // check sparse matrix has a value @ i,j
	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        }
	        else {
	          // dense matrix value @ i, j
	          cdata[i][j] = b;
	        }
	      }
	    }
	
	    // return sparse matrix
	    return c;
	  };
	
	  return algorithm10;
	}
	
	exports.name = 'algorithm10';
	exports.factory = factory;


/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(90);
	var DimensionError = __webpack_require__(93);
	
	var string = util.string,
	    isString = string.isString;
	
	function factory (type, config, load, typed) {
	
	  var DenseMatrix = type.DenseMatrix;
	
	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, Bij..z). 
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, Bij..z)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Matrix}   b                 The DenseMatrix instance (B)
	   * @param {Function} callback          The f(Aij..z,Bij..z) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97658658
	   */
	  var algorithm13 = function (a, b, callback) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b arrays
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // c arrays
	    var csize = [];
	
	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);
	
	    // validate each one of the dimension sizes
	    for (var s = 0; s < asize.length; s++) {
	      // must match
	      if (asize[s] !== bsize[s])
	        throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	      // update dimension in c
	      csize[s] = asize[s];
	    }
	
	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	
	    // populate cdata, iterate through dimensions
	    var cdata = csize.length > 0 ? _iterate(cf, 0, csize, csize[0], adata, bdata) : [];
	    
	    // c matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: csize,
	      datatype: dt
	    });
	  };
	  
	  // recursive function
	  var _iterate = function (f, level, s, n, av, bv) {
	    // initialize array for this level
	    var cv = [];
	    // check we reach the last level
	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = f(av[i], bv[i]);
	      }
	    }
	    else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv[j]);
	      }
	    }
	    return cv;
	  };
	  
	  return algorithm13;
	}
	
	exports.name = 'algorithm13';
	exports.factory = factory;


/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var clone = __webpack_require__(55).clone;
	
	function factory (type, config, load, typed) {
	
	  var DenseMatrix = type.DenseMatrix;
	
	  /**
	   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b). 
	   * Callback function invoked MxN times.
	   *
	   * C(i,j,...z) = f(Aij..z, b)
	   *
	   * @param {Matrix}   a                 The DenseMatrix instance (A)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij..z,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042
	   */
	  var algorithm14 = function (a, b, callback, inverse) {
	    // a arrays
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    
	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	    
	    // populate cdata, iterate through dimensions
	    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];
	
	    // c matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: clone(asize),
	      datatype: dt
	    });
	  };
	  
	  // recursive function
	  var _iterate = function (f, level, s, n, av, bv, inverse) {
	    // initialize array for this level
	    var cv = [];
	    // check we reach the last level
	    if (level === s.length - 1) {
	      // loop arrays in last level
	      for (var i = 0; i < n; i++) {
	        // invoke callback and store value
	        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);
	      }
	    }
	    else {
	      // iterate current level
	      for (var j = 0; j < n; j++) {
	        // iterate next level
	        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);
	      }
	    }
	    return cv;
	  };
	
	  return algorithm14;
	}
	
	exports.name = 'algorithm14';
	exports.factory = factory;


/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  
	  var smaller = load(__webpack_require__(112));
	  var larger = load(__webpack_require__(116));
	  
	  var oneOverLogPhi = 1.0 / Math.log((1.0 + Math.sqrt(5.0)) / 2.0);
	  
	  /**
	   * Fibonacci Heap implementation, used interally for Matrix math.
	   * @class FibonacciHeap
	   * @constructor FibonacciHeap
	   */
	  function FibonacciHeap() {
	    if (!(this instanceof FibonacciHeap))
	      throw new SyntaxError('Constructor must be called with the new operator');
	
	    // initialize fields
	    this._minimum = null;
	    this._size = 0;
	  }
	
	  /**
	   * Attach type information
	   */
	  FibonacciHeap.prototype.type = 'FibonacciHeap';
	  FibonacciHeap.prototype.isFibonacciHeap = true;
	
	  /**
	   * Inserts a new data element into the heap. No heap consolidation is
	   * performed at this time, the new node is simply inserted into the root
	   * list of this heap. Running time: O(1) actual.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.insert = function (key, value) {
	    // create node
	    var node = {
	      key: key,
	      value: value,
	      degree: 0
	    };
	    // check we have a node in the minimum
	    if (this._minimum) {
	      // minimum node
	      var minimum = this._minimum;
	      // update left & right of node
	      node.left = minimum;
	      node.right = minimum.right;
	      minimum.right = node;
	      node.right.left = node;
	      // update minimum node in heap if needed
	      if (smaller(key, minimum.key)) {
	        // node has a smaller key, use it as minimum
	        this._minimum = node;
	      }
	    }
	    else {
	      // set left & right
	      node.left = node;
	      node.right = node;
	      // this is the first node
	      this._minimum = node;
	    }
	    // increment number of nodes in heap
	    this._size++;
	    // return node
	    return node;
	  };
	
	  /**
	   * Returns the number of nodes in heap. Running time: O(1) actual.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.size = function () {
	    return this._size;
	  };
	
	  /**
	   * Removes all elements from this heap.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.clear = function () {
	    this._minimum = null;
	    this._size = 0;
	  };
	
	  /**
	   * Returns true if the heap is empty, otherwise false.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.isEmpty = function () {
	    return !!this._minimum;
	  };
	  
	  /**
	   * Extracts the node with minimum key from heap. Amortized running 
	   * time: O(log n).
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.extractMinimum = function () {
	    // node to remove
	    var node = this._minimum;
	    // check we have a minimum
	    if (node === null)
	      return node;
	    // current minimum
	    var minimum = this._minimum;
	    // get number of children
	    var numberOfChildren = node.degree;
	    // pointer to the first child
	    var x = node.child;
	    // for each child of node do...
	    while (numberOfChildren > 0) {
	      // store node in right side
	      var tempRight = x.right;
	      // remove x from child list
	      x.left.right = x.right;
	      x.right.left = x.left;
	      // add x to root list of heap
	      x.left = minimum;
	      x.right = minimum.right;
	      minimum.right = x;
	      x.right.left = x;
	      // set Parent[x] to null
	      x.parent = null;
	      x = tempRight;
	      numberOfChildren--;
	    }
	    // remove node from root list of heap
	    node.left.right = node.right;
	    node.right.left = node.left;
	    // update minimum
	    if (node == node.right) {
	      // empty
	      minimum = null;
	    }
	    else {
	      // update minimum
	      minimum = node.right;
	      // we need to update the pointer to the root with minimum key
	      minimum = _findMinimumNode(minimum, this._size);
	    }
	    // decrement size of heap
	    this._size--;
	    // update minimum
	    this._minimum = minimum;
	    // return node
	    return node;
	  };
	  
	  /**
	   * Removes a node from the heap given the reference to the node. The trees
	   * in the heap will be consolidated, if necessary. This operation may fail
	   * to remove the correct element if there are nodes with key value -Infinity.
	   * Running time: O(log n) amortized.
	   * @memberof FibonacciHeap
	   */
	  FibonacciHeap.prototype.remove = function (node) {
	    // decrease key value
	    this._minimum = _decreaseKey(this._minimum, node, -1);
	    // remove the smallest
	    this.extractMinimum();
	  };
	  
	  /**
	   * Decreases the key value for a heap node, given the new value to take on.
	   * The structure of the heap may be changed and will not be consolidated. 
	   * Running time: O(1) amortized.
	   * @memberof FibonacciHeap
	   */
	  var _decreaseKey = function (minimum, node, key) {
	    // set node key
	    node.key = key;
	    // get parent node
	    var parent = node.parent;
	    if (parent && smaller(node.key, parent.key)) {
	      // remove node from parent
	      _cut(minimum, node, parent);
	      // remove all nodes from parent to the root parent
	      _cascadingCut(minimum, parent);
	    }
	    // update minimum node if needed
	    if (smaller(node.key, minimum.key))
	      minimum = node;
	    // return minimum
	    return minimum;
	  };
	  
	  /**
	   * The reverse of the link operation: removes node from the child list of parent.
	   * This method assumes that min is non-null. Running time: O(1).
	   * @memberof FibonacciHeap
	   */
	  var _cut = function (minimum, node, parent) {
	    // remove node from parent children and decrement Degree[parent]
	    node.left.right = node.right;
	    node.right.left = node.left;
	    parent.degree--;
	    // reset y.child if necessary
	    if (parent.child == node)
	      parent.child = node.right;
	    // remove child if degree is 0
	    if (parent.degree === 0)
	      parent.child = null;
	    // add node to root list of heap
	    node.left = minimum;
	    node.right = minimum.right;
	    minimum.right = node;
	    node.right.left = node;
	    // set parent[node] to null
	    node.parent = null;
	    // set mark[node] to false
	    node.mark = false;
	  };
	  
	  /**
	   * Performs a cascading cut operation. This cuts node from its parent and then
	   * does the same for its parent, and so on up the tree.
	   * Running time: O(log n); O(1) excluding the recursion.
	   * @memberof FibonacciHeap
	   */
	  var _cascadingCut= function (minimum, node) {
	    // store parent node
	    var parent = node.parent;
	    // if there's a parent...
	    if (!parent)
	      return;
	    // if node is unmarked, set it marked
	    if (!node.mark) {
	      node.mark = true;
	    }
	    else {
	      // it's marked, cut it from parent
	      _cut(minimum, node, parent);
	      // cut its parent as well
	      _cascadingCut(parent);
	    }
	  };
	  
	  /**
	   * Make the first node a child of the second one. Running time: O(1) actual.
	   * @memberof FibonacciHeap
	   */
	  var _linkNodes = function (node, parent) {
	    // remove node from root list of heap
	    node.left.right = node.right;
	    node.right.left = node.left;
	    // make node a Child of parent
	    node.parent = parent;
	    if (!parent.child) {
	      parent.child = node;
	      node.right = node;
	      node.left = node;
	    }
	    else {
	      node.left = parent.child;
	      node.right = parent.child.right;
	      parent.child.right = node;
	      node.right.left = node;
	    }
	    // increase degree[parent]
	    parent.degree++;
	    // set mark[node] false
	    node.mark = false;
	  };
	  
	  var _findMinimumNode = function (minimum, size) {
	    // to find trees of the same degree efficiently we use an array of length O(log n) in which we keep a pointer to one root of each degree
	    var arraySize = Math.floor(Math.log(size) * oneOverLogPhi) + 1;
	    // create list with initial capacity
	    var array = new Array(arraySize);
	    // find the number of root nodes.
	    var numRoots = 0;
	    var x = minimum;
	    if (x) {
	      numRoots++;
	      x = x.right;
	      while (x !== minimum) {
	        numRoots++;
	        x = x.right;
	      }
	    }
	    // vars
	    var y;
	    // For each node in root list do...
	    while (numRoots > 0) {
	      // access this node's degree..
	      var d = x.degree;
	      // get next node
	      var next = x.right;
	      // check if there is a node already in array with the same degree
	      while (true) {
	        // get node with the same degree is any
	        y = array[d];
	        if (!y)
	          break;
	        // make one node with the same degree a child of the other, do this based on the key value.
	        if (larger(x.key, y.key)) {
	          var temp = y;
	          y = x;
	          x = temp;
	        }
	        // make y a child of x
	        _linkNodes(y, x);
	        // we have handled this degree, go to next one.
	        array[d] = null;
	        d++;
	      }
	      // save this node for later when we might encounter another of the same degree.
	      array[d] = x;
	      // move forward through list.
	      x = next;
	      numRoots--;
	    }
	    // Set min to null (effectively losing the root list) and reconstruct the root list from the array entries in array[].
	    minimum = null;
	    // loop nodes in array
	    for (var i = 0; i < arraySize; i++) {
	      // get current node
	      y = array[i];
	      if (!y)
	        continue;
	      // check if we have a linked list
	      if (minimum) {
	        // First remove node from root list.
	        y.left.right = y.right;
	        y.right.left = y.left;
	        // now add to root list, again.
	        y.left = minimum;
	        y.right = minimum.right;
	        minimum.right = y;
	        y.right.left = y;
	        // check if this is a new min.
	        if (smaller(y.key, minimum.key))
	          minimum = y;
	      }
	      else
	        minimum = y;
	    }
	    return minimum;
	  };
	  
	  return FibonacciHeap;
	}
	
	exports.name = 'FibonacciHeap';
	exports.path = 'type';
	exports.factory = factory;


/***/ }),
/* 112 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var nearlyEqual = __webpack_require__(58).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(101);
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm07 = load(__webpack_require__(114));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  var latex = __webpack_require__(83);
	
	  /**
	   * Test whether value x is smaller than y.
	   *
	   * The function returns true when x is smaller than y and the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.smaller(x, y)
	   *
	   * Examples:
	   *
	   *    math.smaller(2, 3);            // returns true
	   *    math.smaller(5, 2 * 2);        // returns false
	   *
	   *    var a = math.unit('5 cm');
	   *    var b = math.unit('2 inch');
	   *    math.smaller(a, b);            // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smallerEq, smaller, smallerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
	   */
	  var smaller = typed('smaller', {
	
	    'boolean, boolean': function (x, y) {
	      return x < y;
	    },
	
	    'number, number': function (x, y) {
	      return x < y && !nearlyEqual(x, y, config.epsilon);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return x.lt(y) && !bigNearlyEqual(x, y, config.epsilon);
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      return x.compare(y) === -1;
	    },
	
	    'Complex, Complex': function (x, y) {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },
	
	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return smaller(x.value, y.value);
	    },
	
	    'string, string': function (x, y) {
	      return x < y;
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, smaller);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, smaller, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, smaller, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, smaller);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return smaller(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return smaller(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return smaller(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, smaller, false);
	          break;
	        default:
	          c = algorithm14(x, y, smaller, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, smaller, true);
	          break;
	        default:
	          c = algorithm14(y, x, smaller, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, smaller, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, smaller, true).valueOf();
	    }
	  });
	
	  smaller.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['smaller'] + '${args[1]}\\right)'
	  };
	
	  return smaller;
	}
	
	exports.name = 'smaller';
	exports.factory = factory;


/***/ }),
/* 113 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DimensionError = __webpack_require__(93);
	
	function factory (type, config, load, typed) {
	
	  var DenseMatrix = type.DenseMatrix;
	
	  /**
	   * Iterates over SparseMatrix items and invokes the callback function f(Dij, Sij).
	   * Callback function invoked M*N times.
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  f(Dij, 0)    ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (C)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  var algorithm03 = function (denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;
	
	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);
	
	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	
	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues)
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	
	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	
	    // datatype
	    var dt;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	
	    // result (DenseMatrix)
	    var cdata = [];
	
	    // initialize dense matrix
	    for (var z = 0; z < rows; z++) {
	      // initialize row
	      cdata[z] = [];
	    }
	
	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];
	
	    // loop columns in b
	    for (var j = 0; j < columns; j++) {
	      // column mark
	      var mark = j + 1;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = bindex[k];
	        // update workspace
	        x[i] = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        w[i] = mark;
	      }
	      // process workspace
	      for (var y = 0; y < rows; y++) {
	        // check we have a calculated value for current row
	        if (w[y] === mark) {
	          // use calculated value
	          cdata[y][j] = x[y];
	        }
	        else {
	          // calculate value
	          cdata[y][j] = inverse ? cf(zero, adata[y][j]) : cf(adata[y][j], zero);
	        }
	      }
	    }
	
	    // return dense matrix
	    return new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	  
	  return algorithm03;
	}
	
	exports.name = 'algorithm03';
	exports.factory = factory;


/***/ }),
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DimensionError = __webpack_require__(93);
	
	function factory (type, config, load, typed) {
	
	  var DenseMatrix = type.DenseMatrix;
	
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B items (zero and nonzero) and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked MxN times.
	   *
	   * C(i,j) = f(Aij, Bij)
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm07 = function (a, b, callback) {
	    // sparse matrix arrays
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bsize = b._size;
	    var bdt = b._datatype;
	
	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);
	
	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	
	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	
	    // datatype
	    var dt;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	
	    // vars
	    var i, j;
	    
	    // result arrays
	    var cdata = [];
	    // initialize c
	    for (i = 0; i < rows; i++)
	      cdata[i] = [];
	
	    // matrix
	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	
	    // workspaces
	    var xa = [];
	    var xb = [];
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];
	
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // scatter the values of A(:,j) into workspace
	      _scatter(a, j, wa, xa, mark);
	      // scatter the values of B(:,j) into workspace
	      _scatter(b, j, wb, xb, mark);
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // matrix values @ i,j
	        var va = wa[i] === mark ? xa[i] : zero;
	        var vb = wb[i] === mark ? xb[i] : zero;
	        // invoke callback
	        cdata[i][j] = cf(va, vb);
	      }          
	    }
	
	    // return sparse matrix
	    return c;
	  };
	  
	  var _scatter = function (m, j, w, x, mark) {
	    // a arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // loop values in column j
	    for (var k = ptr[j], k1 = ptr[j + 1]; k < k1; k++) {
	      // row
	      var i = index[k];
	      // update workspace
	      w[i] = mark;
	      x[i] = values[k];
	    }
	  };
	  
	  return algorithm07;
	}
	
	exports.name = 'algorithm07';
	exports.factory = factory;


/***/ }),
/* 115 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var DenseMatrix = type.DenseMatrix;
	
	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
	   * Callback function invoked MxN times.
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  f(0, b)    ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    DenseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  var algorithm12 = function (s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;
	
	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues)
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	
	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	
	    // datatype
	    var dt;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	    
	    // result arrays
	    var cdata = [];
	    // matrix
	    var c = new DenseMatrix({
	      data: cdata,
	      size: [rows, columns],
	      datatype: dt
	    });
	
	    // workspaces
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];
	
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // columns mark
	      var mark = j + 1;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var r = aindex[k];
	        // update workspace
	        x[r] = avalues[k];
	        w[r] = mark;
	      }
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // initialize C on first column
	        if (j === 0) {
	          // create row array
	          cdata[i] = [];
	        }
	        // check sparse matrix has a value @ i,j
	        if (w[i] === mark) {
	          // invoke callback, update C
	          cdata[i][j] = inverse ? cf(b, x[i]) : cf(x[i], b);
	        }
	        else {
	          // dense matrix value @ i, j
	          cdata[i][j] = inverse ? cf(b, 0) : cf(0, b);
	        }
	      }
	    }
	
	    // return sparse matrix
	    return c;
	  };
	  
	  return algorithm12;
	}
	
	exports.name = 'algorithm12';
	exports.factory = factory;


/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var nearlyEqual = __webpack_require__(58).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(101);
	
	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm07 = load(__webpack_require__(114));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  var latex = __webpack_require__(83);
	
	  /**
	   * Test whether value x is larger than y.
	   *
	   * The function returns true when x is larger than y and the relative
	   * difference between x and y is larger than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.larger(x, y)
	   *
	   * Examples:
	   *
	   *    math.larger(2, 3);             // returns false
	   *    math.larger(5, 2 + 2);         // returns true
	   *
	   *    var a = math.unit('5 cm');
	   *    var b = math.unit('2 inch');
	   *    math.larger(a, b);             // returns false
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false
	   */
	  var larger = typed('larger', {
	
	    'boolean, boolean': function (x, y) {
	      return x > y;
	    },
	
	    'number, number': function (x, y) {
	      return x > y && !nearlyEqual(x, y, config.epsilon);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      return x.compare(y) === 1;
	    },
	
	    'Complex, Complex': function () {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },
	
	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return larger(x.value, y.value);
	    },
	
	    'string, string': function (x, y) {
	      return x > y;
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, larger);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, larger, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, larger, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, larger);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return larger(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return larger(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return larger(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, larger, false);
	          break;
	        default:
	          c = algorithm14(x, y, larger, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, larger, true);
	          break;
	        default:
	          c = algorithm14(y, x, larger, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, larger, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, larger, true).valueOf();
	    }
	  });
	
	  larger.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['larger'] + '${args[1]}\\right)'
	  };
	
	  return larger;
	}
	
	exports.name = 'larger';
	exports.factory = factory;


/***/ }),
/* 117 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(90);
	
	var string = util.string;
	var object = util.object;
	
	var isArray = Array.isArray;
	var isString = string.isString;
	
	function factory (type, config, load) {
	
	  var DenseMatrix = load(__webpack_require__(97));
	
	  var smaller = load(__webpack_require__(112));
	
	  function ImmutableDenseMatrix(data, datatype) {
	    if (!(this instanceof ImmutableDenseMatrix))
	      throw new SyntaxError('Constructor must be called with the new operator');
	    if (datatype && !isString(datatype))
	      throw new Error('Invalid datatype: ' + datatype);
	
	    if ((data && data.isMatrix === true) || isArray(data)) {
	      // use DenseMatrix implementation
	      var matrix = new DenseMatrix(data, datatype);
	      // internal structures
	      this._data = matrix._data;
	      this._size = matrix._size;
	      this._datatype = matrix._datatype;
	      this._min = null;
	      this._max = null;
	    }
	    else if (data && isArray(data.data) && isArray(data.size)) {
	      // initialize fields from JSON representation
	      this._data = data.data;
	      this._size = data.size;
	      this._datatype = data.datatype;
	      this._min = typeof data.min !== 'undefined' ? data.min : null;
	      this._max = typeof data.max !== 'undefined' ? data.max : null;
	    }
	    else if (data) {
	      // unsupported type
	      throw new TypeError('Unsupported type of data (' + util.types.type(data) + ')');
	    }
	    else {
	      // nothing provided
	      this._data = [];
	      this._size = [0];
	      this._datatype = datatype;
	      this._min = null;
	      this._max = null;
	    }
	  }
	
	  ImmutableDenseMatrix.prototype = new DenseMatrix();
	
	  /**
	   * Attach type information
	   */
	  ImmutableDenseMatrix.prototype.type = 'ImmutableDenseMatrix';
	  ImmutableDenseMatrix.prototype.isImmutableDenseMatrix = true;
	
	  /**
	   * Get a subset of the matrix, or replace a subset of the matrix.
	   *
	   * Usage:
	   *     var subset = matrix.subset(index)               // retrieve subset
	   *     var value = matrix.subset(index, replacement)   // replace subset
	   *
	   * @param {Index} index
	   * @param {Array | ImmutableDenseMatrix | *} [replacement]
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be filled with zeros.
	   */
	  ImmutableDenseMatrix.prototype.subset = function (index) {
	    switch (arguments.length) {
	      case 1:
	        // use base implementation
	        var m = DenseMatrix.prototype.subset.call(this, index);
	        // check result is a matrix
	        if (m.isMatrix) {
	          // return immutable matrix
	          return new ImmutableDenseMatrix({
	            data: m._data,
	            size: m._size,
	            datatype: m._datatype
	          });
	        }
	        return m;
	        
	        // intentional fall through
	      case 2:
	      case 3:
	        throw new Error('Cannot invoke set subset on an Immutable Matrix instance');
	
	      default:
	        throw new SyntaxError('Wrong number of arguments');
	    }
	  };
	
	  /**
	   * Replace a single element in the matrix.
	   * @param {Number[]} index   Zero-based index
	   * @param {*} value
	   * @param {*} [defaultValue]        Default value, filled in on new entries when
	   *                                  the matrix is resized. If not provided,
	   *                                  new matrix elements will be left undefined.
	   * @return {ImmutableDenseMatrix} self
	   */
	  ImmutableDenseMatrix.prototype.set = function () {
	    throw new Error('Cannot invoke set on an Immutable Matrix instance');
	  };
	
	  /**
	   * Resize the matrix to the given size. Returns a copy of the matrix when
	   * `copy=true`, otherwise return the matrix itself (resize in place).
	   *
	   * @param {Number[]} size           The new size the matrix should have.
	   * @param {*} [defaultValue=0]      Default value, filled in on new entries.
	   *                                  If not provided, the matrix elements will
	   *                                  be filled with zeros.
	   * @param {boolean} [copy]          Return a resized copy of the matrix
	   *
	   * @return {Matrix}                 The resized matrix
	   */
	  ImmutableDenseMatrix.prototype.resize = function () {
	    throw new Error('Cannot invoke resize on an Immutable Matrix instance');
	  };
	
	  /**
	   * Disallows reshaping in favor of immutability.
	   *
	   * @throws {Error} Operation not allowed
	   */
	  ImmutableDenseMatrix.prototype.reshape = function () {
	    throw new Error('Cannot invoke reshape on an Immutable Matrix instance');
	  };
	
	  /**
	   * Create a clone of the matrix
	   * @return {ImmutableDenseMatrix} clone
	   */
	  ImmutableDenseMatrix.prototype.clone = function () {
	    var m = new ImmutableDenseMatrix({
	      data: object.clone(this._data),
	      size: object.clone(this._size),
	      datatype: this._datatype
	    });
	    return m;
	  };
	
	  /**
	   * Get a JSON representation of the matrix
	   * @returns {Object}
	   */
	  ImmutableDenseMatrix.prototype.toJSON = function () {
	    return {
	      mathjs: 'ImmutableDenseMatrix',
	      data: this._data,
	      size: this._size,
	      datatype: this._datatype
	    };
	  };
	
	  /**
	   * Generate a matrix from a JSON object
	   * @param {Object} json  An object structured like
	   *                       `{"mathjs": "ImmutableDenseMatrix", data: [], size: []}`,
	   *                       where mathjs is optional
	   * @returns {ImmutableDenseMatrix}
	   */
	  ImmutableDenseMatrix.fromJSON = function (json) {
	    return new ImmutableDenseMatrix(json);
	  };
	
	  /**
	   * Swap rows i and j in Matrix.
	   *
	   * @param {Number} i       Matrix row index 1
	   * @param {Number} j       Matrix row index 2
	   *
	   * @return {Matrix}        The matrix reference
	   */
	  ImmutableDenseMatrix.prototype.swapRows = function () {
	    throw new Error('Cannot invoke swapRows on an Immutable Matrix instance');
	  };
	
	  /**
	   * Calculate the minimum value in the set
	   * @return {Number | undefined} min
	   */
	  ImmutableDenseMatrix.prototype.min = function () {
	    // check min has been calculated before
	    if (this._min === null) {
	      // minimum
	      var m = null;
	      // compute min
	      this.forEach(function (v) {
	        if (m === null || smaller(v, m))
	          m = v;
	      });
	      this._min = m !== null ? m : undefined;
	    }
	    return this._min;
	  };
	
	  /**
	   * Calculate the maximum value in the set
	   * @return {Number | undefined} max
	   */
	  ImmutableDenseMatrix.prototype.max = function () {
	    // check max has been calculated before
	    if (this._max === null) {
	      // maximum
	      var m = null;
	      // compute max
	      this.forEach(function (v) {
	        if (m === null || smaller(m, v))
	          m = v;
	      });
	      this._max = m !== null ? m : undefined;
	    }
	    return this._max;
	  };
	
	  // exports
	  return ImmutableDenseMatrix;
	}
	
	exports.name = 'ImmutableDenseMatrix';
	exports.path = 'type';
	exports.factory = factory;


/***/ }),
/* 118 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var clone = __webpack_require__(55).clone;
	var isInteger = __webpack_require__(58).isInteger;
	
	function factory (type) {
	  
	  /**
	   * Create an index. An Index can store ranges and sets for multiple dimensions.
	   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
	   *
	   * Usage:
	   *     var index = new Index(range1, range2, matrix1, array1, ...);
	   *
	   * Where each parameter can be any of:
	   *     A number
	   *     A string (containing a name of an object property)
	   *     An instance of Range
	   *     An Array with the Set values
	   *     A Matrix with the Set values
	   *
	   * The parameters start, end, and step must be integer numbers.
	   *
	   * @class Index
	   * @Constructor Index
	   * @param {...*} ranges
	   */
	  function Index(ranges) {
	    if (!(this instanceof Index)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    this._dimensions = [];
	    this._isScalar = true;
	
	    for (var i = 0, ii = arguments.length; i < ii; i++) {
	      var arg = arguments[i];
	
	      if (arg && (arg.isRange === true)) {
	        this._dimensions.push(arg);
	        this._isScalar = false;
	      }
	      else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {
	        // create matrix
	        var m = _createImmutableMatrix(arg.valueOf());
	        this._dimensions.push(m);
	        // size
	        var size = m.size();
	        // scalar
	        if (size.length !== 1 || size[0] !== 1) {
	          this._isScalar = false;
	        }
	      }
	      else if (typeof arg === 'number') {
	        this._dimensions.push(_createImmutableMatrix([arg]));
	      }
	      else if (typeof arg === 'string') {
	        // object property (arguments.count should be 1)
	        this._dimensions.push(arg);
	      }
	      // TODO: implement support for wildcard '*'
	      else {
	        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
	      }
	    }
	  }
	
	  /**
	   * Attach type information
	   */
	  Index.prototype.type = 'Index';
	  Index.prototype.isIndex = true;
	
	  function _createImmutableMatrix(arg) {
	    // loop array elements
	    for (var i = 0, l = arg.length; i < l; i++) {
	      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {
	        throw new TypeError('Index parameters must be positive integer numbers');
	      }
	    }
	    // create matrix
	    return new type.ImmutableDenseMatrix(arg);
	  }
	
	  /**
	   * Create a clone of the index
	   * @memberof Index
	   * @return {Index} clone
	   */
	  Index.prototype.clone = function () {
	    var index = new Index();
	    index._dimensions = clone(this._dimensions);
	    index._isScalar = this._isScalar;
	    return index;
	  };
	
	  /**
	   * Create an index from an array with ranges/numbers
	   * @memberof Index
	   * @param {Array.<Array | number>} ranges
	   * @return {Index} index
	   * @private
	   */
	  Index.create = function (ranges) {
	    var index = new Index();
	    Index.apply(index, ranges);
	    return index;
	  };
	
	  /**
	   * Retrieve the size of the index, the number of elements for each dimension.
	   * @memberof Index
	   * @returns {number[]} size
	   */
	  Index.prototype.size = function () {
	    var size = [];
	
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var d = this._dimensions[i];
	      size[i] = (typeof d === 'string') ? 1 : d.size()[0];
	    }
	
	    return size;
	  };
	
	  /**
	   * Get the maximum value for each of the indexes ranges.
	   * @memberof Index
	   * @returns {number[]} max
	   */
	  Index.prototype.max = function () {
	    var values = [];
	
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var range = this._dimensions[i];
	      values[i] = (typeof range === 'string') ? range : range.max();
	    }
	
	    return values;
	  };
	
	  /**
	   * Get the minimum value for each of the indexes ranges.
	   * @memberof Index
	   * @returns {number[]} min
	   */
	  Index.prototype.min = function () {
	    var values = [];
	
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var range = this._dimensions[i];
	      values[i] = (typeof range === 'string') ? range : range.min();
	    }
	
	    return values;
	  };
	
	  /**
	   * Loop over each of the ranges of the index
	   * @memberof Index
	   * @param {Function} callback   Called for each range with a Range as first
	   *                              argument, the dimension as second, and the
	   *                              index object as third.
	   */
	  Index.prototype.forEach = function (callback) {
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      callback(this._dimensions[i], i, this);
	    }
	  };
	
	  /**
	   * Retrieve the dimension for the given index
	   * @memberof Index
	   * @param {Number} dim                  Number of the dimension
	   * @returns {Range | null} range
	   */
	  Index.prototype.dimension = function (dim) {
	    return this._dimensions[dim] || null;
	  };
	
	  /**
	   * Test whether this index contains an object property
	   * @returns {boolean} Returns true if the index is an object property
	   */
	  Index.prototype.isObjectProperty = function () {
	    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';
	  };
	
	  /**
	   * Returns the object property name when the Index holds a single object property,
	   * else returns null
	   * @returns {string | null}
	   */
	  Index.prototype.getObjectProperty = function () {
	    return this.isObjectProperty() ? this._dimensions[0] : null;
	  };
	
	  /**
	   * Test whether this index contains only a single value.
	   *
	   * This is the case when the index is created with only scalar values as ranges,
	   * not for ranges resolving into a single value.
	   * @memberof Index
	   * @return {boolean} isScalar
	   */
	  Index.prototype.isScalar = function () {
	    return this._isScalar;
	  };
	
	  /**
	   * Expand the Index into an array.
	   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]
	   * @memberof Index
	   * @returns {Array} array
	   */
	  Index.prototype.toArray = function () {
	    var array = [];
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var dimension = this._dimensions[i];
	      array.push((typeof dimension === 'string') ? dimension : dimension.toArray());
	    }
	    return array;
	  };
	
	  /**
	   * Get the primitive value of the Index, a two dimensional array.
	   * Equivalent to Index.toArray().
	   * @memberof Index
	   * @returns {Array} array
	   */
	  Index.prototype.valueOf = Index.prototype.toArray;
	
	  /**
	   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'
	   * @memberof Index
	   * @returns {String} str
	   */
	  Index.prototype.toString = function () {
	    var strings = [];
	
	    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {
	      var dimension = this._dimensions[i];
	      if (typeof dimension === 'string') {
	        strings.push(JSON.stringify(dimension));
	      }
	      else {
	        strings.push(dimension.toString());
	      }
	    }
	
	    return '[' + strings.join(', ') + ']';
	  };
	
	  /**
	   * Get a JSON representation of the Index
	   * @memberof Index
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Index", "ranges": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
	   */
	  Index.prototype.toJSON = function () {
	    return {
	      mathjs: 'Index',
	      dimensions: this._dimensions
	    };
	  };
	
	  /**
	   * Instantiate an Index from a JSON object
	   * @memberof Index
	   * @param {Object} json A JSON object structured as:
	   *                     `{"mathjs": "Index", "dimensions": [{"mathjs": "Range", start: 0, end: 10, step:1}, ...]}`
	   * @return {Index}
	   */
	  Index.fromJSON = function (json) {
	    return Index.create(json.dimensions);
	  };
	
	  return Index;
	}
	
	exports.name = 'Index';
	exports.path = 'type';
	exports.factory = factory;


/***/ }),
/* 119 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var number = __webpack_require__(58);
	
	function factory (type, config, load, typed) {
	  /**
	   * Create a range. A range has a start, step, and end, and contains functions
	   * to iterate over the range.
	   *
	   * A range can be constructed as:
	   *     var range = new Range(start, end);
	   *     var range = new Range(start, end, step);
	   *
	   * To get the result of the range:
	   *     range.forEach(function (x) {
	   *         console.log(x);
	   *     });
	   *     range.map(function (x) {
	   *         return math.sin(x);
	   *     });
	   *     range.toArray();
	   *
	   * Example usage:
	   *     var c = new Range(2, 6);         // 2:1:5
	   *     c.toArray();                     // [2, 3, 4, 5]
	   *     var d = new Range(2, -3, -1);    // 2:-1:-2
	   *     d.toArray();                     // [2, 1, 0, -1, -2]
	   *
	   * @class Range
	   * @constructor Range
	   * @param {number} start  included lower bound
	   * @param {number} end    excluded upper bound
	   * @param {number} [step] step size, default value is 1
	   */
	  function Range(start, end, step) {
	    if (!(this instanceof Range)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    if (start != null) {
	      if (start.isBigNumber === true)
	        start = start.toNumber();
	      else if (typeof start !== 'number')
	        throw new TypeError('Parameter start must be a number');
	    }
	    if (end != null) {
	      if (end.isBigNumber === true)
	        end = end.toNumber();
	      else if (typeof end !== 'number')
	        throw new TypeError('Parameter end must be a number');
	    }
	    if (step != null) {
	      if (step.isBigNumber === true)
	        step = step.toNumber();
	      else if (typeof step !== 'number')
	        throw new TypeError('Parameter step must be a number');
	    }
	
	    this.start = (start != null) ? parseFloat(start) : 0;
	    this.end   = (end != null)   ? parseFloat(end)   : 0;
	    this.step  = (step != null)  ? parseFloat(step)  : 1;
	  }
	
	  /**
	   * Attach type information
	   */
	  Range.prototype.type = 'Range';
	  Range.prototype.isRange = true;
	
	  /**
	   * Parse a string into a range,
	   * The string contains the start, optional step, and end, separated by a colon.
	   * If the string does not contain a valid range, null is returned.
	   * For example str='0:2:11'.
	   * @memberof Range
	   * @param {string} str
	   * @return {Range | null} range
	   */
	  Range.parse = function (str) {
	    if (typeof str !== 'string') {
	      return null;
	    }
	
	    var args = str.split(':');
	    var nums = args.map(function (arg) {
	      return parseFloat(arg);
	    });
	
	    var invalid = nums.some(function (num) {
	      return isNaN(num);
	    });
	    if (invalid) {
	      return null;
	    }
	
	    switch (nums.length) {
	      case 2:
	        return new Range(nums[0], nums[1]);
	      case 3:
	        return new Range(nums[0], nums[2], nums[1]);
	      default:
	        return null;
	    }
	  };
	
	  /**
	   * Create a clone of the range
	   * @return {Range} clone
	   */
	  Range.prototype.clone = function () {
	    return new Range(this.start, this.end, this.step);
	  };
	
	  /**
	   * Retrieve the size of the range.
	   * Returns an array containing one number, the number of elements in the range.
	   * @memberof Range
	   * @returns {number[]} size
	   */
	  Range.prototype.size = function () {
	    var len = 0,
	        start = this.start,
	        step = this.step,
	        end = this.end,
	        diff = end - start;
	
	    if (number.sign(step) == number.sign(diff)) {
	      len = Math.ceil((diff) / step);
	    }
	    else if (diff == 0) {
	      len = 0;
	    }
	
	    if (isNaN(len)) {
	      len = 0;
	    }
	    return [len];
	  };
	
	  /**
	   * Calculate the minimum value in the range
	   * @memberof Range
	   * @return {number | undefined} min
	   */
	  Range.prototype.min = function () {
	    var size = this.size()[0];
	
	    if (size > 0) {
	      if (this.step > 0) {
	        // positive step
	        return this.start;
	      }
	      else {
	        // negative step
	        return this.start + (size - 1) * this.step;
	      }
	    }
	    else {
	      return undefined;
	    }
	  };
	
	  /**
	   * Calculate the maximum value in the range
	   * @memberof Range
	   * @return {number | undefined} max
	   */
	  Range.prototype.max = function () {
	    var size = this.size()[0];
	
	    if (size > 0) {
	      if (this.step > 0) {
	        // positive step
	        return this.start + (size - 1) * this.step;
	      }
	      else {
	        // negative step
	        return this.start;
	      }
	    }
	    else {
	      return undefined;
	    }
	  };
	
	
	  /**
	   * Execute a callback function for each value in the range.
	   * @memberof Range
	   * @param {function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Range being traversed.
	   */
	  Range.prototype.forEach = function (callback) {
	    var x = this.start;
	    var step = this.step;
	    var end = this.end;
	    var i = 0;
	
	    if (step > 0) {
	      while (x < end) {
	        callback(x, [i], this);
	        x += step;
	        i++;
	      }
	    }
	    else if (step < 0) {
	      while (x > end) {
	        callback(x, [i], this);
	        x += step;
	        i++;
	      }
	    }
	  };
	
	  /**
	   * Execute a callback function for each value in the Range, and return the
	   * results as an array
	   * @memberof Range
	   * @param {function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix being traversed.
	   * @returns {Array} array
	   */
	  Range.prototype.map = function (callback) {
	    var array = [];
	    this.forEach(function (value, index, obj) {
	      array[index[0]] = callback(value, index, obj);
	    });
	    return array;
	  };
	
	  /**
	   * Create an Array with a copy of the Ranges data
	   * @memberof Range
	   * @returns {Array} array
	   */
	  Range.prototype.toArray = function () {
	    var array = [];
	    this.forEach(function (value, index) {
	      array[index[0]] = value;
	    });
	    return array;
	  };
	
	  /**
	   * Get the primitive value of the Range, a one dimensional array
	   * @memberof Range
	   * @returns {Array} array
	   */
	  Range.prototype.valueOf = function () {
	    // TODO: implement a caching mechanism for range.valueOf()
	    return this.toArray();
	  };
	
	  /**
	   * Get a string representation of the range, with optional formatting options.
	   * Output is formatted as 'start:step:end', for example '2:6' or '0:0.2:11'
	   * @memberof Range
	   * @param {Object | number | function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @returns {string} str
	   */
	  Range.prototype.format = function (options) {
	    var str = number.format(this.start, options);
	
	    if (this.step != 1) {
	      str += ':' + number.format(this.step, options);
	    }
	    str += ':' + number.format(this.end, options);
	    return str;
	  };
	
	  /**
	   * Get a string representation of the range.
	   * @memberof Range
	   * @returns {string}
	   */
	  Range.prototype.toString = function () {
	    return this.format();
	  };
	
	  /**
	   * Get a JSON representation of the range
	   * @memberof Range
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
	   */
	  Range.prototype.toJSON = function () {
	    return {
	      mathjs: 'Range',
	      start: this.start,
	      end: this.end,
	      step: this.step
	    };
	  };
	
	  /**
	   * Instantiate a Range from a JSON object
	   * @memberof Range
	   * @param {Object} json A JSON object structured as:
	   *                      `{"mathjs": "Range", "start": 2, "end": 4, "step": 1}`
	   * @return {Range}
	   */
	  Range.fromJSON = function (json) {
	    return new Range(json.start, json.end, json.step);
	  };
	
	  return Range;
	}
	
	exports.name = 'Range';
	exports.path = 'type';
	exports.factory = factory;


/***/ }),
/* 120 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  /**
	   * Create an index. An Index can store ranges having start, step, and end
	   * for multiple dimensions.
	   * Matrix.get, Matrix.set, and math.subset accept an Index as input.
	   *
	   * Syntax:
	   *
	   *     math.index(range1, range2, ...)
	   *
	   * Where each range can be any of:
	   *
	   * - A number
	   * - A string for getting/setting an object property
	   * - An instance of `Range`
	   * - A one-dimensional Array or a Matrix with numbers
	   *
	   * Indexes must be zero-based, integer numbers.
	   *
	   * Examples:
	   *
	   *    var math = math.js
	   *
	   *    var b = [1, 2, 3, 4, 5];
	   *    math.subset(b, math.index([1, 2, 3]));     // returns [2, 3, 4]
	   *
	   *    var a = math.matrix([[1, 2], [3, 4]]);
	   *    a.subset(math.index(0, 1));             // returns 2
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, matrix, number, string, unit
	   *
	   * @param {...*} ranges   Zero or more ranges or numbers.
	   * @return {Index}        Returns the created index
	   */
	  return typed('index', {
	    '...number | string | BigNumber | Range | Array | Matrix': function (args) {
	      var ranges = args.map(function (arg) {
	        if (arg && arg.isBigNumber === true) {
	          return arg.toNumber(); // convert BigNumber to Number
	        }
	        else if (arg && (Array.isArray(arg) || arg.isMatrix === true)) {
	          return arg.map(function (elem) {
	            // convert BigNumber to Number
	            return (elem && elem.isBigNumber === true) ? elem.toNumber() : elem;
	          });
	        }
	        else {
	          return arg;
	        }
	      });
	
	      var res = new type.Index();
	      type.Index.apply(res, ranges);
	      return res;
	    }
	  });
	}
	
	exports.name = 'index';
	exports.factory = factory;


/***/ }),
/* 121 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var SparseMatrix = type.SparseMatrix;
	
	  /**
	   * Create a Sparse Matrix. The function creates a new `math.type.Matrix` object from
	   * an `Array`. A Matrix has utility functions to manipulate the data in the
	   * matrix, like getting the size and getting or setting values in the matrix.
	   *
	   * Syntax:
	   *
	   *    math.sparse()               // creates an empty sparse matrix.
	   *    math.sparse(data)           // creates a sparse matrix with initial data.
	   *    math.sparse(data, 'number') // creates a sparse matrix with initial data, number datatype.
	   *
	   * Examples:
	   *
	   *    var m = math.sparse([[1, 2], [3, 4]]);
	   *    m.size();                        // Array [2, 2]
	   *    m.resize([3, 2], 5);
	   *    m.valueOf();                     // Array [[1, 2], [3, 4], [5, 5]]
	   *    m.get([1, 0])                    // number 3
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, number, string, unit, matrix
	   *
	   * @param {Array | Matrix} [data]    A two dimensional array
	   *
	   * @return {Matrix} The created matrix
	   */
	  var sparse = typed('sparse', {
	    '': function () {
	      return new SparseMatrix([]);
	    },
	    
	    'string': function (datatype) {
	      return new SparseMatrix([], datatype);
	    },
	
	    'Array | Matrix': function (data) {
	      return new SparseMatrix(data);
	    },
	    
	    'Array | Matrix, string': function (data, datatype) {
	      return new SparseMatrix(data, datatype);
	    }
	  });
	
	  sparse.toTex = {
	    0: '\\begin{bsparse}\\end{bsparse}',
	    1: '\\left(${args[0]}\\right)'
	  };
	
	  return sparse;
	}
	
	exports.name = 'sparse';
	exports.factory = factory;


/***/ }),
/* 122 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Create a number or convert a string, boolean, or unit to a number.
	   * When value is a matrix, all elements will be converted to number.
	   *
	   * Syntax:
	   *
	   *    math.number(value)
	   *    math.number(unit, valuelessUnit)
	   *
	   * Examples:
	   *
	   *    math.number(2);                         // returns number 2
	   *    math.number('7.2');                     // returns number 7.2
	   *    math.number(true);                      // returns number 1
	   *    math.number([true, false, true, true]); // returns [1, 0, 1, 1]
	   *    math.number(math.unit('52cm'), 'm');    // returns 0.52
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, string, unit
	   *
	   * @param {string | number | BigNumber | Fraction | boolean | Array | Matrix | Unit | null} [value]  Value to be converted
	   * @param {Unit | string} [valuelessUnit] A valueless unit, used to convert a unit to a number
	   * @return {number | Array | Matrix} The created number
	   */
	  var number = typed('number', {
	    '': function () {
	      return 0;
	    },
	
	    'number': function (x) {
	      return x;
	    },
	
	    'string': function (x) {
	      var num = Number(x);
	      if (isNaN(num)) {
	        throw new SyntaxError('String "' + x + '" is no valid number');
	      }
	      return num;
	    },
	
	    'BigNumber': function (x) {
	      return x.toNumber();
	    },
	
	    'Fraction': function (x) {
	      return x.valueOf();
	    },
	
	    'Unit': function (x) {
	      throw new Error('Second argument with valueless unit expected');
	    },
	
	    'Unit, string | Unit': function (unit, valuelessUnit) {
	      return unit.toNumber(valuelessUnit);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, number);
	    }
	  });
	
	  number.toTex = {
	    0: '0',
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
	  };
	
	  return number;
	}
	
	exports.name = 'number';
	exports.factory = factory;


/***/ }),
/* 123 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  // type
	  __webpack_require__(124)
	];


/***/ }),
/* 124 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  /**
	   * A ResultSet contains a list or results
	   * @class ResultSet
	   * @param {Array} entries
	   * @constructor ResultSet
	   */
	  function ResultSet(entries) {
	    if (!(this instanceof ResultSet)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    this.entries = entries || [];
	  }
	
	  /**
	   * Attach type information
	   */
	  ResultSet.prototype.type = 'ResultSet';
	  ResultSet.prototype.isResultSet = true;
	
	  /**
	   * Returns the array with results hold by this ResultSet
	   * @memberof ResultSet
	   * @returns {Array} entries
	   */
	  ResultSet.prototype.valueOf = function () {
	    return this.entries;
	  };
	
	  /**
	   * Returns the stringified results of the ResultSet
	   * @memberof ResultSet
	   * @returns {string} string
	   */
	  ResultSet.prototype.toString = function () {
	    return '[' + this.entries.join(', ') + ']';
	  };
	
	  /**
	   * Get a JSON representation of the ResultSet
	   * @memberof ResultSet
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "ResultSet", "entries": [...]}`
	   */
	  ResultSet.prototype.toJSON = function () {
	    return {
	      mathjs: 'ResultSet',
	      entries: this.entries
	    };
	  };
	
	  /**
	   * Instantiate a ResultSet from a JSON object
	   * @memberof ResultSet
	   * @param {Object} json  A JSON object structured as:
	   *                       `{"mathjs": "ResultSet", "entries": [...]}`
	   * @return {ResultSet}
	   */
	  ResultSet.fromJSON = function (json) {
	    return new ResultSet(json.entries);
	  };
	
	  return ResultSet;
	}
	
	exports.name = 'ResultSet';
	exports.path = 'type';
	exports.factory = factory;


/***/ }),
/* 125 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	var number = __webpack_require__(58);
	
	function factory (type, config, load, typed) {
	  /**
	   * Create a string or convert any object into a string.
	   * Elements of Arrays and Matrices are processed element wise.
	   *
	   * Syntax:
	   *
	   *    math.string(value)
	   *
	   * Examples:
	   *
	   *    math.string(4.2);               // returns string '4.2'
	   *    math.string(math.complex(3, 2); // returns string '3 + 2i'
	   *
	   *    var u = math.unit(5, 'km');
	   *    math.string(u.to('m'));         // returns string '5000 m'
	   *
	   *    math.string([true, false]);     // returns ['true', 'false']
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, number, unit
	   *
	   * @param {* | Array | Matrix | null} [value]  A value to convert to a string
	   * @return {string | Array | Matrix} The created string
	   */
	  var string = typed('string', {
	    '': function () {
	      return '';
	    },
	
	    'number': number.format,
	
	    'null': function (x) {
	      return 'null';
	    },
	
	    'boolean': function (x) {
	      return x + '';
	    },
	
	    'string': function (x) {
	      return x;
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, string);
	    },
	
	    'any': function (x) {
	      return String(x);
	    }
	  });
	
	  string.toTex = {
	    0: '\\mathtt{""}',
	    1: '\\mathrm{string}\\left(${args[0]}\\right)'
	  };
	
	  return string;
	}
	
	exports.name = 'string';
	exports.factory = factory;


/***/ }),
/* 126 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  // type
	  __webpack_require__(127),
	
	  // construction function
	  __webpack_require__(144),
	
	  // create new units
	  __webpack_require__(145),
	
	  // split units
	  __webpack_require__(146),
	
	  // physical constants
	  __webpack_require__(147)
	];


/***/ }),
/* 127 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var endsWith = __webpack_require__(74).endsWith;
	var clone = __webpack_require__(55).clone;
	var constants = __webpack_require__(128);
	
	function factory (type, config, load, typed, math) {
	  var add       = load(__webpack_require__(105));
	  var subtract  = load(__webpack_require__(129));
	  var multiply  = load(__webpack_require__(132));
	  var divide    = load(__webpack_require__(133));
	  var pow       = load(__webpack_require__(134));
	  var abs       = load(__webpack_require__(138));
	  var fix       = load(__webpack_require__(139));
	  var equal     = load(__webpack_require__(140));
	  var isNumeric = load(__webpack_require__(141));
	  var format    = load(__webpack_require__(142));
	  var getTypeOf = load(__webpack_require__(143));
	  var toNumber  = load(__webpack_require__(122));
	  var Complex   = load(__webpack_require__(78));
	
	  /**
	   * A unit can be constructed in the following ways:
	   *     var a = new Unit(value, name);
	   *     var b = new Unit(null, name);
	   *     var c = Unit.parse(str);
	   *
	   * Example usage:
	   *     var a = new Unit(5, 'cm');               // 50 mm
	   *     var b = Unit.parse('23 kg');             // 23 kg
	   *     var c = math.in(a, new Unit(null, 'm');  // 0.05 m
	   *     var d = new Unit(9.81, "m/s^2");         // 9.81 m/s^2
	   *
	   * @class Unit
	   * @constructor Unit
	   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2
	   * @param {string} [name]   A unit name like "cm" or "inch", or a derived unit of the form: "u1[^ex1] [u2[^ex2] ...] [/ u3[^ex3] [u4[^ex4]]]", such as "kg m^2/s^2", where each unit appearing after the forward slash is taken to be in the denominator. "kg m^2 s^-2" is a synonym and is also acceptable. Any of the units can include a prefix.
	   */
	  function Unit(value, name) {
	    if (!(this instanceof Unit)) {
	      throw new Error('Constructor must be called with the new operator');
	    }
	
	    if (!(value === undefined || isNumeric(value) || value.isComplex)) {
	      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
	    }
	    if (name != undefined && (typeof name !== 'string' || name == '')) {
	      throw new TypeError('Second parameter in Unit constructor must be a string');
	    }
	
	    if (name != undefined) {
	      var u = Unit.parse(name);
	      this.units = u.units;
	      this.dimensions = u.dimensions;
	    }
	    else {
	      this.units = [
	        {
	          unit: UNIT_NONE,
	          prefix: PREFIXES.NONE,  // link to a list with supported prefixes
	          power: 0
	        }
	      ];
	      this.dimensions = []; 
	      for(var i=0; i<BASE_DIMENSIONS.length; i++) {
	        this.dimensions[i] = 0;
	      }
	    }
	
	    this.value = (value != undefined) ? this._normalize(value) : null;
	
	    this.fixPrefix = false; // if true, function format will not search for the
	                            // best prefix but leave it as initially provided.
	                            // fixPrefix is set true by the method Unit.to
	
	    // The justification behind this is that if the constructor is explicitly called,
	    // the caller wishes the units to be returned exactly as he supplied.
	    this.isUnitListSimplified = true;
	
	  }
	
	  /**
	   * Attach type information
	   */
	  Unit.prototype.type = 'Unit';
	  Unit.prototype.isUnit = true;
	
	  // private variables and functions for the Unit parser
	  var text, index, c;
	
	  function skipWhitespace() {
	    while (c == ' ' || c == '\t') {
	      next();
	    }
	  }
	
	  function isDigitDot(c) {
	    return ((c >= '0' && c <= '9') || c == '.');
	  }
	
	  function isDigit(c) {
	    return ((c >= '0' && c <= '9'));
	  }
	
	  function next() {
	    index++;
	    c = text.charAt(index);
	  }
	
	  function revert(oldIndex) {
	    index = oldIndex;
	    c = text.charAt(index);
	  }
	
	  function parseNumber() {
	    var number = '';
	    var oldIndex;
	    oldIndex = index;
	
	    if (c == '+') {
	      next();
	    }
	    else if (c == '-') {
	      number += c;
	      next();
	    }
	
	    if (!isDigitDot(c)) {
	      // a + or - must be followed by a digit
	      revert(oldIndex);
	      return null;
	    }
	
	    // get number, can have a single dot
	    if (c == '.') {
	      number += c;
	      next();
	      if (!isDigit(c)) {
	        // this is no legal number, it is just a dot
	        revert(oldIndex);
	        return null;
	      }
	    }
	    else {
	      while (isDigit(c)) {
	        number += c;
	        next();
	      }
	      if (c == '.') {
	        number += c;
	        next();
	      }
	    }
	    while (isDigit(c)) {
	      number += c;
	      next();
	    }
	
	    // check for exponential notation like "2.3e-4" or "1.23e50"
	    if (c == 'E' || c == 'e') {
	      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as "4exabytes"
	
	      var tentativeNumber = '';
	      var tentativeIndex = index;
	
	      tentativeNumber += c;
	      next();
	
	      if (c == '+' || c == '-') {
	        tentativeNumber += c;
	        next();
	      }
	
	      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)
	      if (!isDigit(c)) {
	        // The e or E must belong to something else, so return the number without the e or E.
	        revert(tentativeIndex);
	        return number;
	      }
	      
	      // We can now safely say that this is scientific notation.
	      number = number + tentativeNumber;
	      while (isDigit(c)) {
	        number += c;
	        next();
	      }
	    }
	
	    return number;
	  }
	
	  function parseUnit() {
	    var unitName = '';
	
	    // Alphanumeric characters only; matches [a-zA-Z0-9]
	    var code = text.charCodeAt(index);
	    while ( (code >= 48 && code <= 57) ||
	            (code >= 65 && code <= 90) ||
	            (code >= 97 && code <= 122)) {
	      unitName += c;
	      next();
	      code = text.charCodeAt(index);
	    }
	
	    // Must begin with [a-zA-Z]
	    code = unitName.charCodeAt(0);
	    if ((code >= 65 && code <= 90) ||
	        (code >= 97 && code <= 122)) {
	        return unitName || null;
	    } 
	    else {
	      return null;
	    }
	  }
	
	  function parseCharacter(toFind) {
	    if (c === toFind) {
	      next();
	      return toFind;
	    }
	    else {
	      return null;
	    }
	  }
	
	  /**
	   * Parse a string into a unit. The value of the unit is parsed as number,
	   * BigNumber, or Fraction depending on the math.js config setting `number`.
	   *
	   * Throws an exception if the provided string does not contain a valid unit or
	   * cannot be parsed.
	   * @memberof Unit
	   * @param {string} str        A string like "5.2 inch", "4e2 cm/s^2"
	   * @return {Unit} unit
	   */
	  Unit.parse = function (str, options) {
	    options = options || {};
	    text = str;
	    index = -1;
	    c = '';
	
	    if (typeof text !== 'string') {
	      throw new TypeError('Invalid argument in Unit.parse, string expected');
	    }
	
	    var unit = new Unit();
	    unit.units = [];
	
	    // A unit should follow this pattern:
	    // [number]unit[^number] [unit[^number]]...[/unit[^number] [unit[^number]]]
	
	    // Rules:
	    // number is any floating point number.
	    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!
	    // The string may optionally begin with a number.
	    // Each unit may optionally be followed by ^number.
	    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:
	    //   2m^2kg/s^2
	    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:
	    //   4erg
	
	    next();
	    skipWhitespace();
	    // Optional number at the start of the string
	    var valueStr = parseNumber();
	    var value = null;
	    if(valueStr) {
	      if (config.number === 'BigNumber') {
	        value = new type.BigNumber(valueStr);
	      }
	      else if (config.number === 'Fraction') {
	        value = new type.Fraction(valueStr);
	      }
	      else { // number
	        value = parseFloat(valueStr);
	      }
	    }
	    skipWhitespace();    // Whitespace is not required here
	
	    // Next, we read any number of unit[^number]
	    var powerMultiplierCurrent = 1;
	    var expectingUnit = false;
	
	    // Stack to keep track of powerMultipliers applied to each parentheses group
	    var powerMultiplierStack = [];
	
	    // Running product of all elements in powerMultiplierStack
	    var powerMultiplierStackProduct = 1;
	
	    while (true) {
	      skipWhitespace();
	
	      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack
	      // A '(' will always appear directly before a unit.
	      while (c === '(') {
	        powerMultiplierStack.push(powerMultiplierCurrent);
	        powerMultiplierStackProduct *= powerMultiplierCurrent;
	        powerMultiplierCurrent = 1;
	        next();
	        skipWhitespace();
	      }
	
	      // Is there something here?
	      if(c) {
	        var oldC = c;
	        var uStr = parseUnit();
	        if(uStr == null) {
	          throw new SyntaxError('Unexpected "' + oldC + '" in "' + text + '" at index ' + index.toString());
	        }
	      }
	      else {
	        // End of input.
	        break;
	      }
	
	      // Verify the unit exists and get the prefix (if any)
	      var res = _findUnit(uStr);
	      if(res == null) {
	        // Unit not found.
	        throw new SyntaxError('Unit "' + uStr + '" not found.');
	      }
	
	      var power = powerMultiplierCurrent * powerMultiplierStackProduct;
	      // Is there a "^ number"?
	      skipWhitespace();
	      if (parseCharacter('^')) {
	        skipWhitespace();
	        var p = parseNumber();
	        if(p == null) {
	          // No valid number found for the power!
	          throw new SyntaxError('In "' + str + '", "^" must be followed by a floating-point number');
	        }
	        power *= p;
	      }
	
	      // Add the unit to the list
	      unit.units.push( {
	        unit: res.unit,
	        prefix: res.prefix,
	        power: power
	      });
	      for(var i=0; i<BASE_DIMENSIONS.length; i++) {
	        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;
	      }
	
	      // Check for and consume closing parentheses, popping from the stack.
	      // A ')' will always follow a unit.
	      skipWhitespace();
	      while (c === ')') {
	        if(powerMultiplierStack.length === 0) {
	          throw new SyntaxError('Unmatched ")" in "' + text + '" at index ' + index.toString());
	        }
	        powerMultiplierStackProduct /= powerMultiplierStack.pop();
	        next();
	        skipWhitespace();
	      }
	
	      // "*" and "/" should mean we are expecting something to come next.
	      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.
	      expectingUnit = false;
	
	      if (parseCharacter('*')) {
	        // explicit multiplication
	        powerMultiplierCurrent = 1;
	        expectingUnit = true;
	      }
	      else if (parseCharacter('/')) {
	        // division
	        powerMultiplierCurrent = -1;
	        expectingUnit = true;
	      }
	      else {
	        // implicit multiplication
	        powerMultiplierCurrent = 1;
	      }
	
	      // Replace the unit into the auto unit system
	      if(res.unit.base) {
	        var baseDim = res.unit.base.key;
	        UNIT_SYSTEMS.auto[baseDim] = {
	          unit: res.unit,
	          prefix: res.prefix
	        };
	      }
	    }
	    
	    // Has the string been entirely consumed?
	    skipWhitespace();
	    if(c) {
	      throw new SyntaxError('Could not parse: "' + str + '"');
	    }
	
	    // Is there a trailing slash?
	    if(expectingUnit) {
	      throw new SyntaxError('Trailing characters: "' + str + '"');
	    }
	
	    // Is the parentheses stack empty?
	    if(powerMultiplierStack.length !== 0) {
	      throw new SyntaxError('Unmatched "(" in "' + text + '"');
	    }
	
	    // Are there any units at all?
	    if(unit.units.length == 0 && !options.allowNoUnits) {
	      throw new SyntaxError('"' + str + '" contains no units');
	    }
	
	    unit.value = (value != undefined) ? unit._normalize(value) : null;
	    return unit;
	  };
	
	  /**
	   * create a copy of this unit
	   * @memberof Unit
	   * @return {Unit} Returns a cloned version of the unit
	   */
	  Unit.prototype.clone = function () {
	    var unit = new Unit();
	
	    unit.fixPrefix = this.fixPrefix;
	    unit.isUnitListSimplified = this.isUnitListSimplified;
	
	    unit.value = clone(this.value);
	    unit.dimensions = this.dimensions.slice(0);
	    unit.units = [];
	    for(var i = 0; i < this.units.length; i++) {
	      unit.units[i] = { };
	      for (var p in this.units[i]) {
	        if (this.units[i].hasOwnProperty(p)) {
	          unit.units[i][p] = this.units[i][p];
	        }
	      }
	    }
	
	    return unit;
	  };
	
	  /**
	   * Return whether the unit is derived (such as m/s, or cm^2, but not N)
	   * @memberof Unit
	   * @return {boolean} True if the unit is derived
	   */
	  Unit.prototype._isDerived = function() {
	    if(this.units.length === 0) {
	      return false;
	    }
	    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;
	  };
	
	  /**
	   * Normalize a value, based on its currently set unit(s)
	   * @memberof Unit
	   * @param {number | BigNumber | Fraction | boolean} value
	   * @return {number | BigNumber | Fraction | boolean} normalized value
	   * @private
	   */
	  Unit.prototype._normalize = function (value) {
	    var unitValue, unitOffset, unitPower, unitPrefixValue;
	    var convert;
	
	    if (value == null || this.units.length === 0) {
	      return value;
	    }
	    else if (this._isDerived()) {
	      // This is a derived unit, so do not apply offsets.
	      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
	      var res = value;
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed
	
	      for(var i=0; i < this.units.length; i++) {
	        unitValue       = convert(this.units[i].unit.value);
	        unitPrefixValue = convert(this.units[i].prefix.value);
	        unitPower       = convert(this.units[i].power);
	        res = multiply(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
	      }
	
	      return res;
	    }
	    else {
	      // This is a single unit of power 1, like kg or degC
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed
	
	      unitValue       = convert(this.units[0].unit.value);
	      unitOffset      = convert(this.units[0].unit.offset);
	      unitPrefixValue = convert(this.units[0].prefix.value);
	
	      return multiply(add(value, unitOffset), multiply(unitValue, unitPrefixValue));
	    }
	  };
	
	  /**
	   * Denormalize a value, based on its currently set unit(s)
	   * @memberof Unit
	   * @param {number} value
	   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)
	   * @return {number} denormalized value
	   * @private
	   */
	  Unit.prototype._denormalize = function (value, prefixValue) {
	    var unitValue, unitOffset, unitPower, unitPrefixValue;
	    var convert;
	
	    if (value == null || this.units.length === 0) {
	      return value;
	    }
	    else if (this._isDerived()) {
	      // This is a derived unit, so do not apply offsets.
	      // For example, with J kg^-1 degC^-1 you would NOT want to apply the offset.
	      // Also, prefixValue is ignored--but we will still use the prefix value stored in each unit, since kg is usually preferable to g unless the user decides otherwise.
	      var res = value;
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed
	
	      for (var i = 0; i < this.units.length; i++) {
	        unitValue       = convert(this.units[i].unit.value);
	        unitPrefixValue = convert(this.units[i].prefix.value);
	        unitPower       = convert(this.units[i].power);
	        res = divide(res, pow(multiply(unitValue, unitPrefixValue), unitPower));
	      }
	
	      return res;
	    }
	    else {
	      // This is a single unit of power 1, like kg or degC
	      convert = Unit._getNumberConverter(getTypeOf(value)); // convert to Fraction or BigNumber if needed
	
	      unitValue       = convert(this.units[0].unit.value);
	      unitPrefixValue = convert(this.units[0].prefix.value);
	      unitOffset      = convert(this.units[0].unit.offset);
	
	      if (prefixValue == undefined) {
	        return subtract(divide(divide(value, unitValue), unitPrefixValue), unitOffset);
	      }
	      else {
	        return subtract(divide(divide(value, unitValue), prefixValue), unitOffset);
	      }
	    }
	  };
	
	  /**
	   * Find a unit from a string
	   * @memberof Unit
	   * @param {string} str              A string like 'cm' or 'inch'
	   * @returns {Object | null} result  When found, an object with fields unit and
	   *                                  prefix is returned. Else, null is returned.
	   * @private
	   */
	  function _findUnit(str) {
	  
	    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.
	    if(UNITS.hasOwnProperty(str)) {
	      var unit = UNITS[str];
	      var prefix = unit.prefixes[''];
	      return {
	        unit: unit,
	        prefix: prefix
	      }
	    }
	
	    for (var name in UNITS) {
	      if (UNITS.hasOwnProperty(name)) {
	        if (endsWith(str, name)) {
	          var unit = UNITS[name];
	          var prefixLen = (str.length - name.length);
	          var prefixName = str.substring(0, prefixLen);
	          var prefix = unit.prefixes[prefixName];
	          if (prefix !== undefined) {
	            // store unit, prefix, and value
	            return {
	              unit: unit,
	              prefix: prefix
	            };
	          }
	        }
	      }
	    }
	
	    return null;
	  }
	
	  /**
	   * Test if the given expression is a unit.
	   * The unit can have a prefix but cannot have a value.
	   * @memberof Unit
	   * @param {string} name   A string to be tested whether it is a value less unit.
	   *                        The unit can have prefix, like "cm"
	   * @return {boolean}      true if the given string is a unit
	   */
	  Unit.isValuelessUnit = function (name) {
	    return (_findUnit(name) != null);
	  };
	
	  /**
	   * check if this unit has given base unit
	   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.
	   * @memberof Unit
	   * @param {BASE_UNITS | string | undefined} base
	   */
	  Unit.prototype.hasBase = function (base) {
	
	    if(typeof(base) === "string") {
	      base = BASE_UNITS[base];
	    }
	
	    if(!base)
	      return false;
	
	
	    // All dimensions must be the same
	    for(var i=0; i<BASE_DIMENSIONS.length; i++) {
	      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {
	        return false;
	      }
	    }
	    return true;
	
	  };
	
	  /**
	   * Check if this unit has a base or bases equal to another base or bases
	   * For derived units, the exponent on each base also must match
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {boolean} true if equal base
	   */
	  Unit.prototype.equalBase = function (other) {
	    // All dimensions must be the same
	    for(var i=0; i<BASE_DIMENSIONS.length; i++) {
	      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {
	        return false;
	      }
	    }
	    return true;
	  };
	
	  /**
	   * Check if this unit equals another unit
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {boolean} true if both units are equal
	   */
	  Unit.prototype.equals = function (other) {
	    return (this.equalBase(other) && equal(this.value, other.value));
	  };
	
	  /**
	   * Multiply this unit with another one
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {Unit} product of this unit and the other unit
	   */
	  Unit.prototype.multiply = function (other) {
	    var res = this.clone();
	    
	    for(var i = 0; i<BASE_DIMENSIONS.length; i++) {
	      // Dimensions arrays may be of different lengths. Default to 0.
	      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);
	    }
	
	    // Append other's units list onto res (simplify later in Unit.prototype.format)
	    for(var i=0; i<other.units.length; i++) {
	      // Make a deep copy
	      var inverted = {};
	      for(var key in other.units[i]) {
	        inverted[key] = other.units[i][key];
	      }
	      res.units.push(inverted);
	    }
	
	    // If at least one operand has a value, then the result should also have a value
	    if(this.value != null || other.value != null) {
	      var valThis = this.value == null ? this._normalize(1) : this.value;
	      var valOther = other.value == null ? other._normalize(1) : other.value;
	      res.value = multiply(valThis, valOther);
	    }
	    else {
	      res.value = null;
	    }
	
	    // Trigger simplification of the unit list at some future time
	    res.isUnitListSimplified = false;
	
	    return getNumericIfUnitless(res);
	  };
	
	  /**
	   * Divide this unit by another one
	   * @memberof Unit
	   * @param {Unit} other
	   * @return {Unit} result of dividing this unit by the other unit
	   */
	  Unit.prototype.divide = function (other) {
	    var res = this.clone();
	    
	    for(var i=0; i<BASE_DIMENSIONS.length; i++) {
	      // Dimensions arrays may be of different lengths. Default to 0.
	      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);
	    }
	
	    // Invert and append other's units list onto res (simplify later in Unit.prototype.format)
	    for(var i=0; i<other.units.length; i++) {
	      // Make a deep copy
	      var inverted = {};
	      for(var key in other.units[i]) {
	        inverted[key] = other.units[i][key];
	      }
	      inverted.power = -inverted.power;
	      res.units.push(inverted);
	    }
	
	    // If at least one operand has a value, the result should have a value
	    if (this.value != null || other.value != null) {
	      var valThis = this.value == null ? this._normalize(1) : this.value;
	      var valOther = other.value == null ? other._normalize(1) : other.value;
	      res.value = divide(valThis, valOther);
	    }
	    else {
	      res.value = null;
	    }
	
	    // Trigger simplification of the unit list at some future time
	    res.isUnitListSimplified = false;
	
	    return getNumericIfUnitless(res);
	  };
	
	  /**
	   * Calculate the power of a unit
	   * @memberof Unit
	   * @param {number | Fraction | BigNumber} p
	   * @returns {Unit}      The result: this^p
	   */
	  Unit.prototype.pow = function (p) {
	    var res = this.clone();
	    
	    for(var i=0; i<BASE_DIMENSIONS.length; i++) {
	      // Dimensions arrays may be of different lengths. Default to 0.
	      res.dimensions[i] = (this.dimensions[i] || 0) * p;
	    }
	
	    // Adjust the power of each unit in the list
	    for(var i=0; i<res.units.length; i++) {
	      res.units[i].power *= p;
	    }
	
	    if(res.value != null) {
	      res.value = pow(res.value, p);
	
	      // only allow numeric output, we don't want to return a Complex number
	      //if (!isNumeric(res.value)) {
	      //  res.value = NaN;
	      //}
	      // Update: Complex supported now
	    }
	    else {
	      res.value = null;
	    }
	
	    // Trigger lazy evaluation of the unit list
	    res.isUnitListSimplified = false;
	
	    return getNumericIfUnitless(res);
	  };
	
	  /**
	   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise
	   * @param {Unit} unit
	   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise
	   */
	  var getNumericIfUnitless = function(unit) {
	    if(unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {
	      return unit.value;
	    }
	    else {
	      return unit;
	    }
	  }
	    
	
	  /**
	   * Calculate the absolute value of a unit
	   * @memberof Unit
	   * @param {number | Fraction | BigNumber} x
	   * @returns {Unit}      The result: |x|, absolute value of x
	   */
	  Unit.prototype.abs = function () {
	    // This gives correct, but unexpected, results for units with an offset.
	    // For example, abs(-283.15 degC) = -263.15 degC !!!
	    var ret = this.clone();
	    ret.value = abs(ret.value);
	
	    for(var i in ret.units) {
	      if(ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {
	        ret.units[i].unit = UNITS["W"];
	      }
	    }
	
	    return ret;
	  };
	
	  /**
	   * Convert the unit to a specific unit name.
	   * @memberof Unit
	   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like "cm"
	   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.
	   */
	  Unit.prototype.to = function (valuelessUnit) {
	    var other;
	    var value = this.value == null ? this._normalize(1) : this.value;
	    if (typeof valuelessUnit === 'string') {
	      //other = new Unit(null, valuelessUnit);
	      other = Unit.parse(valuelessUnit);
	      if (!this.equalBase(other)) {
	        throw new Error('Units do not match');
	      }
	      if (other.value !== null) {
	        throw new Error('Cannot convert to a unit with a value');
	      }
	
	      other.value = clone(value);
	      other.fixPrefix = true;
	      other.isUnitListSimplified = true;
	      return other;
	    }
	    else if (valuelessUnit && valuelessUnit.isUnit) {
	      if (!this.equalBase(valuelessUnit)) {
	        throw new Error('Units do not match');
	      }
	      if (valuelessUnit.value !== null) {
	        throw new Error('Cannot convert to a unit with a value');
	      }
	      other = valuelessUnit.clone();
	      other.value = clone(value);
	      other.fixPrefix = true;
	      other.isUnitListSimplified = true;
	      return other;
	    }
	    else {
	      throw new Error('String or Unit expected as parameter');
	    }
	  };
	
	  /**
	   * Return the value of the unit when represented with given valueless unit
	   * @memberof Unit
	   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
	   * @return {number} Returns the unit value as number.
	   */
	  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric
	  Unit.prototype.toNumber = function (valuelessUnit) {
	    return toNumber(this.toNumeric(valuelessUnit));
	  };
	
	  /**
	   * Return the value of the unit in the original numeric type
	   * @memberof Unit
	   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'
	   * @return {number | BigNumber | Fraction} Returns the unit value
	   */
	  Unit.prototype.toNumeric = function (valuelessUnit) {
	    var other = this;
	    if(valuelessUnit) {
	      // Allow getting the numeric value without converting to a different unit
	      other = this.to(valuelessUnit);
	    }
	
	    if(other._isDerived()) {
	      return other._denormalize(other.value);
	    }
	    else {
	      return other._denormalize(other.value, other.units[0].prefix.value);
	    }
	  };
	
	  /**
	   * Get a string representation of the unit.
	   * @memberof Unit
	   * @return {string}
	   */
	  Unit.prototype.toString = function () {
	    return this.format();
	  };
	
	  /**
	   * Get a JSON representation of the unit
	   * @memberof Unit
	   * @returns {Object} Returns a JSON object structured as:
	   *                   `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
	   */
	  Unit.prototype.toJSON = function () {
	    return {
	      mathjs: 'Unit',
	      value: this._denormalize(this.value),
	      unit: this.formatUnits(),
	      fixPrefix: this.fixPrefix
	    };
	  };
	
	  /**
	   * Instantiate a Unit from a JSON object
	   * @memberof Unit
	   * @param {Object} json  A JSON object structured as:
	   *                       `{"mathjs": "Unit", "value": 2, "unit": "cm", "fixPrefix": false}`
	   * @return {Unit}
	   */
	  Unit.fromJSON = function (json) {
	    var unit = new Unit(json.value, json.unit);
	    unit.fixPrefix = json.fixPrefix || false;
	    return unit;
	  };
	
	  /**
	   * Returns the string representation of the unit.
	   * @memberof Unit
	   * @return {string}
	   */
	  Unit.prototype.valueOf = Unit.prototype.toString;
	
	  /**
	   * Attempt to simplify the list of units for this unit according to the dimensions array and the current unit system. After the call, this Unit will contain a list of the "best" units for formatting.
	   * Intended to be evaluated lazily. You must set isUnitListSimplified = false before the call! After the call, isUnitListSimplified will be set to true.
	   */
	  Unit.prototype.simplifyUnitListLazy = function() {
	
	    if (this.isUnitListSimplified || this.value == null) {
	      return;
	    }
	
	    var proposedUnitList = [];
	
	    // Search for a matching base
	    var matchingBase;
	    for(var key in currentUnitSystem) {
	      if(this.hasBase(BASE_UNITS[key])) {
	        matchingBase = key;
	        break;
	      }
	    }
	
	    if(matchingBase === 'NONE')
	    {
	      this.units = [];
	    }
	    else {
	      var matchingUnit;
	      if(matchingBase) {
	        // Does the unit system have a matching unit?
	        if(currentUnitSystem.hasOwnProperty(matchingBase)) {
	          matchingUnit = currentUnitSystem[matchingBase];
	        }
	      }
	      var value;
	      var str;
	      if(matchingUnit) {
	        this.units = [{
	          unit: matchingUnit.unit,
	          prefix: matchingUnit.prefix,
	          power: 1.0
	        }];
	      }
	      else {
	        // Multiple units or units with powers are formatted like this:
	        // 5 (kg m^2) / (s^3 mol)
	        // Build an representation from the base units of the current unit system
	        var missingBaseDim = false;
	        for(var i=0; i<BASE_DIMENSIONS.length; i++) {
	          var baseDim = BASE_DIMENSIONS[i];
	          if(Math.abs(this.dimensions[i] || 0) > 1e-12) {
	            if(currentUnitSystem.hasOwnProperty(baseDim)) {
	              proposedUnitList.push({
	                unit: currentUnitSystem[baseDim].unit,
	                prefix: currentUnitSystem[baseDim].prefix,
	                power: this.dimensions[i] || 0
	              });
	            }
	            else {
	              missingBaseDim = true;
	            }
	          }
	        }
	
	        // Is the proposed unit list "simpler" than the existing one?
	        if(proposedUnitList.length < this.units.length && !missingBaseDim) {
	          // Replace this unit list with the proposed list
	          this.units = proposedUnitList;
	        }
	      }
	    }
	
	    this.isUnitListSimplified = true;
	  };
	
	  Unit.prototype.toSI = function() {
	
	    var ret = this.clone();
	
	    var proposedUnitList = [];
	
	    // Multiple units or units with powers are formatted like this:
	    // 5 (kg m^2) / (s^3 mol)
	    // Build an representation from the base units of the SI unit system
	    var missingBaseDim = false;
	    for(var i=0; i<BASE_DIMENSIONS.length; i++) {
	      var baseDim = BASE_DIMENSIONS[i];
	      if(Math.abs(ret.dimensions[i] || 0) > 1e-12) {
	        if(UNIT_SYSTEMS["si"].hasOwnProperty(baseDim)) {
	          proposedUnitList.push({
	            unit: UNIT_SYSTEMS["si"][baseDim].unit,
	            prefix: UNIT_SYSTEMS["si"][baseDim].prefix,
	            power: ret.dimensions[i] || 0
	          });
	        }
	        else {
	          throw new Error("Cannot express custom unit " + baseDim + " in SI units");
	        }
	      }
	    }
	
	    // Replace this unit list with the proposed list
	    ret.units = proposedUnitList;
	
	    ret.isUnitListSimplified = true;
	
	    return ret;
	  }
	
	  /**
	   * Get a string representation of the units of this Unit, without the value.
	   * @memberof Unit
	   * @return {string}
	   */
	  Unit.prototype.formatUnits = function () {
	
	    // Lazy evaluation of the unit list
	    this.simplifyUnitListLazy();
	
	    var strNum = "";
	    var strDen = "";
	    var nNum = 0;
	    var nDen = 0;
	
	    for(var i=0; i<this.units.length; i++) {
	      if(this.units[i].power > 0) {
	        nNum++;
	        strNum += " " + this.units[i].prefix.name + this.units[i].unit.name;
	        if(Math.abs(this.units[i].power - 1.0) > 1e-15) {
	          strNum += "^" + this.units[i].power;
	        }
	      }
	      else if(this.units[i].power < 0) {
	        nDen++;
	      }
	    }
	
	    if(nDen > 0) {
	      for(var i=0; i<this.units.length; i++) {
	        if(this.units[i].power < 0) {
	          if(nNum > 0) {
	            strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
	            if(Math.abs(this.units[i].power + 1.0) > 1e-15) {
	              strDen += "^" + (-this.units[i].power);
	            }
	          }
	          else {
	            strDen += " " + this.units[i].prefix.name + this.units[i].unit.name;
	            strDen += "^" + (this.units[i].power);
	          }
	        }
	      }
	    }
	    // Remove leading " "
	    strNum = strNum.substr(1);
	    strDen = strDen.substr(1);
	
	    // Add parans for better copy/paste back into the eval, for example, or for better pretty print formatting
	    if(nNum > 1 && nDen > 0) {
	      strNum = "(" + strNum + ")";
	    }
	    if(nDen > 1 && nNum > 0) {
	      strDen = "(" + strDen + ")";
	    }
	
	    var str = strNum;
	    if(nNum > 0 && nDen > 0) {
	      str += " / ";
	    }
	    str += strDen;
	
	    return str;
	  };
	
	  /**
	   * Get a string representation of the Unit, with optional formatting options.
	   * @memberof Unit
	   * @param {Object | number | Function} [options]  Formatting options. See
	   *                                                lib/utils/number:format for a
	   *                                                description of the available
	   *                                                options.
	   * @return {string}
	   */
	  Unit.prototype.format = function (options) {
	
	    // Simplfy the unit list, if necessary
	    this.simplifyUnitListLazy();
	
	    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.
	    var isImaginary = false;
	    var isReal = true;
	    if(typeof(this.value) !== 'undefined' && this.value !== null && this.value.isComplex) {
	      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute
	      isImaginary = Math.abs(this.value.re) < 1e-14;
	      isReal = Math.abs(this.value.im) < 1e-14;
	    }
	    
	    for(var i in this.units) {
	      if(this.units[i].unit) {
	        if(this.units[i].unit.name === 'VA' && isImaginary) {
	          this.units[i].unit = UNITS["VAR"];
	        }
	        else if(this.units[i].unit.name === 'VAR' && !isImaginary) {
	          this.units[i].unit = UNITS["VA"];
	        }
	      }
	    }
	
	
	    // Now apply the best prefix
	    // Units must have only one unit and not have the fixPrefix flag set
	    if (this.units.length === 1 && !this.fixPrefix) {
	      // Units must have integer powers, otherwise the prefix will change the
	      // outputted value by not-an-integer-power-of-ten
	      if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) < 1e-14) {
	        // Apply the best prefix
	        this.units[0].prefix = this._bestPrefix();
	      }
	    }
	
	
	    var value = this._denormalize(this.value);
	    var str = (this.value !== null) ? format(value, options || {}) : '';
	    var unitStr = this.formatUnits();
	    if(this.value && this.value.isComplex) {
	      str = "(" + str + ")";    // Surround complex values with ( ) to enable better parsing 
	    }
	    if(unitStr.length > 0 && str.length > 0) {
	      str += " ";
	    }
	    str += unitStr;
	
	    return str;
	  };
	
	  /**
	   * Calculate the best prefix using current value.
	   * @memberof Unit
	   * @returns {Object} prefix
	   * @private
	   */
	  Unit.prototype._bestPrefix = function () {
	    if (this.units.length !== 1) {
	      throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
	    }
	    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {
	      throw new Error("Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!");
	    }
	
	    // find the best prefix value (resulting in the value of which
	    // the absolute value of the log10 is closest to zero,
	    // though with a little offset of 1.2 for nicer values: you get a
	    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...
	
	    // Note: the units value can be any numeric type, but to find the best
	    // prefix it's enough to work with limited precision of a regular number
	    // Update: using mathjs abs since we also allow complex numbers
	    var absValue = abs(this.value);
	    var absUnitValue = abs(this.units[0].unit.value);
	    var bestPrefix = this.units[0].prefix;
	    if (absValue === 0) {
	      return bestPrefix;
	    }
	    var power = this.units[0].power;
	    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;
	    if(bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix;    // Allow the original prefix
	    bestDiff = Math.abs(bestDiff);
	    var prefixes = this.units[0].unit.prefixes;
	    for (var p in prefixes) {
	      if (prefixes.hasOwnProperty(p)) {
	        var prefix = prefixes[p];
	        if (prefix.scientific) {
	
	          var diff = Math.abs(
	              Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);
	
	          if (diff < bestDiff
	              || (diff === bestDiff && prefix.name.length < bestPrefix.name.length)) {
	                // choose the prefix with the smallest diff, or if equal, choose the one
	                // with the shortest name (can happen with SHORTLONG for example)
	                bestPrefix = prefix;
	                bestDiff = diff;
	          }
	        }
	      }
	    }
	
	    return bestPrefix;
	  };
	
	  /**
	   * Returns an array of units whose sum is equal to this unit
	   * @memberof Unit
	   * @param {Array} [parts] An array of strings or valueless units. 
	   *
	   *   Example:
	   *
	   *   var u = new Unit(1, 'm');
	   *   u.splitUnit(['feet', 'inch']);
	   *     [ 3 feet, 3.3700787401575 inch ]
	   *
	   * @return {Array} An array of units.
	   */
	  Unit.prototype.splitUnit = function(parts) {
	
	    var x = this.clone();
	    var ret = [];
	    for(var i=0; i<parts.length; i++) {
	      x = x.to(parts[i]);
	      if(i==parts.length-1) break;
	      // fix rounds a number towards 0
	      var fixedVal = fix(x.toNumeric());
	      var y = new Unit(fixedVal, parts[i].toString());
	      ret.push(y);
	      x = subtract(x, y);
	    }
	    ret.push(x);
	
	    return ret;
	  };
	
	  var PREFIXES = {
	    NONE: {
	      '': {name: '', value: 1, scientific: true}
	    },
	    SHORT: {
	      '': {name: '', value: 1, scientific: true},
	
	      'da': {name: 'da', value: 1e1, scientific: false},
	      'h': {name: 'h', value: 1e2, scientific: false},
	      'k': {name: 'k', value: 1e3, scientific: true},
	      'M': {name: 'M', value: 1e6, scientific: true},
	      'G': {name: 'G', value: 1e9, scientific: true},
	      'T': {name: 'T', value: 1e12, scientific: true},
	      'P': {name: 'P', value: 1e15, scientific: true},
	      'E': {name: 'E', value: 1e18, scientific: true},
	      'Z': {name: 'Z', value: 1e21, scientific: true},
	      'Y': {name: 'Y', value: 1e24, scientific: true},
	
	      'd': {name: 'd', value: 1e-1, scientific: false},
	      'c': {name: 'c', value: 1e-2, scientific: false},
	      'm': {name: 'm', value: 1e-3, scientific: true},
	      'u': {name: 'u', value: 1e-6, scientific: true},
	      'n': {name: 'n', value: 1e-9, scientific: true},
	      'p': {name: 'p', value: 1e-12, scientific: true},
	      'f': {name: 'f', value: 1e-15, scientific: true},
	      'a': {name: 'a', value: 1e-18, scientific: true},
	      'z': {name: 'z', value: 1e-21, scientific: true},
	      'y': {name: 'y', value: 1e-24, scientific: true}
	    },
	    LONG: {
	      '': {name: '', value: 1, scientific: true},
	
	      'deca': {name: 'deca', value: 1e1, scientific: false},
	      'hecto': {name: 'hecto', value: 1e2, scientific: false},
	      'kilo': {name: 'kilo', value: 1e3, scientific: true},
	      'mega': {name: 'mega', value: 1e6, scientific: true},
	      'giga': {name: 'giga', value: 1e9, scientific: true},
	      'tera': {name: 'tera', value: 1e12, scientific: true},
	      'peta': {name: 'peta', value: 1e15, scientific: true},
	      'exa': {name: 'exa', value: 1e18, scientific: true},
	      'zetta': {name: 'zetta', value: 1e21, scientific: true},
	      'yotta': {name: 'yotta', value: 1e24, scientific: true},
	
	      'deci': {name: 'deci', value: 1e-1, scientific: false},
	      'centi': {name: 'centi', value: 1e-2, scientific: false},
	      'milli': {name: 'milli', value: 1e-3, scientific: true},
	      'micro': {name: 'micro', value: 1e-6, scientific: true},
	      'nano': {name: 'nano', value: 1e-9, scientific: true},
	      'pico': {name: 'pico', value: 1e-12, scientific: true},
	      'femto': {name: 'femto', value: 1e-15, scientific: true},
	      'atto': {name: 'atto', value: 1e-18, scientific: true},
	      'zepto': {name: 'zepto', value: 1e-21, scientific: true},
	      'yocto': {name: 'yocto', value: 1e-24, scientific: true}
	    },
	    SQUARED: {
	      '': {name: '', value: 1, scientific: true},
	
	      'da': {name: 'da', value: 1e2, scientific: false},
	      'h': {name: 'h', value: 1e4, scientific: false},
	      'k': {name: 'k', value: 1e6, scientific: true},
	      'M': {name: 'M', value: 1e12, scientific: true},
	      'G': {name: 'G', value: 1e18, scientific: true},
	      'T': {name: 'T', value: 1e24, scientific: true},
	      'P': {name: 'P', value: 1e30, scientific: true},
	      'E': {name: 'E', value: 1e36, scientific: true},
	      'Z': {name: 'Z', value: 1e42, scientific: true},
	      'Y': {name: 'Y', value: 1e48, scientific: true},
	
	      'd': {name: 'd', value: 1e-2, scientific: false},
	      'c': {name: 'c', value: 1e-4, scientific: false},
	      'm': {name: 'm', value: 1e-6, scientific: true},
	      'u': {name: 'u', value: 1e-12, scientific: true},
	      'n': {name: 'n', value: 1e-18, scientific: true},
	      'p': {name: 'p', value: 1e-24, scientific: true},
	      'f': {name: 'f', value: 1e-30, scientific: true},
	      'a': {name: 'a', value: 1e-36, scientific: true},
	      'z': {name: 'z', value: 1e-42, scientific: true},
	      'y': {name: 'y', value: 1e-48, scientific: true}
	    },
	    CUBIC: {
	      '': {name: '', value: 1, scientific: true},
	
	      'da': {name: 'da', value: 1e3, scientific: false},
	      'h': {name: 'h', value: 1e6, scientific: false},
	      'k': {name: 'k', value: 1e9, scientific: true},
	      'M': {name: 'M', value: 1e18, scientific: true},
	      'G': {name: 'G', value: 1e27, scientific: true},
	      'T': {name: 'T', value: 1e36, scientific: true},
	      'P': {name: 'P', value: 1e45, scientific: true},
	      'E': {name: 'E', value: 1e54, scientific: true},
	      'Z': {name: 'Z', value: 1e63, scientific: true},
	      'Y': {name: 'Y', value: 1e72, scientific: true},
	
	      'd': {name: 'd', value: 1e-3, scientific: false},
	      'c': {name: 'c', value: 1e-6, scientific: false},
	      'm': {name: 'm', value: 1e-9, scientific: true},
	      'u': {name: 'u', value: 1e-18, scientific: true},
	      'n': {name: 'n', value: 1e-27, scientific: true},
	      'p': {name: 'p', value: 1e-36, scientific: true},
	      'f': {name: 'f', value: 1e-45, scientific: true},
	      'a': {name: 'a', value: 1e-54, scientific: true},
	      'z': {name: 'z', value: 1e-63, scientific: true},
	      'y': {name: 'y', value: 1e-72, scientific: true}
	    },
	    BINARY_SHORT: {
	      '': {name: '', value: 1, scientific: true},
	      'k': {name: 'k', value: 1e3, scientific: true},
	      'M': {name: 'M', value: 1e6, scientific: true},
	      'G': {name: 'G', value: 1e9, scientific: true},
	      'T': {name: 'T', value: 1e12, scientific: true},
	      'P': {name: 'P', value: 1e15, scientific: true},
	      'E': {name: 'E', value: 1e18, scientific: true},
	      'Z': {name: 'Z', value: 1e21, scientific: true},
	      'Y': {name: 'Y', value: 1e24, scientific: true},
	
	      'Ki': {name: 'Ki', value: 1024, scientific: true},
	      'Mi': {name: 'Mi', value: Math.pow(1024, 2), scientific: true},
	      'Gi': {name: 'Gi', value: Math.pow(1024, 3), scientific: true},
	      'Ti': {name: 'Ti', value: Math.pow(1024, 4), scientific: true},
	      'Pi': {name: 'Pi', value: Math.pow(1024, 5), scientific: true},
	      'Ei': {name: 'Ei', value: Math.pow(1024, 6), scientific: true},
	      'Zi': {name: 'Zi', value: Math.pow(1024, 7), scientific: true},
	      'Yi': {name: 'Yi', value: Math.pow(1024, 8), scientific: true}
	    },
	    BINARY_LONG: {
	      '': {name: '', value: 1, scientific: true},
	      'kilo': {name: 'kilo', value: 1e3, scientific: true},
	      'mega': {name: 'mega', value: 1e6, scientific: true},
	      'giga': {name: 'giga', value: 1e9, scientific: true},
	      'tera': {name: 'tera', value: 1e12, scientific: true},
	      'peta': {name: 'peta', value: 1e15, scientific: true},
	      'exa': {name: 'exa', value: 1e18, scientific: true},
	      'zetta': {name: 'zetta', value: 1e21, scientific: true},
	      'yotta': {name: 'yotta', value: 1e24, scientific: true},
	
	      'kibi': {name: 'kibi', value: 1024, scientific: true},
	      'mebi': {name: 'mebi', value: Math.pow(1024, 2), scientific: true},
	      'gibi': {name: 'gibi', value: Math.pow(1024, 3), scientific: true},
	      'tebi': {name: 'tebi', value: Math.pow(1024, 4), scientific: true},
	      'pebi': {name: 'pebi', value: Math.pow(1024, 5), scientific: true},
	      'exi': {name: 'exi', value: Math.pow(1024, 6), scientific: true},
	      'zebi': {name: 'zebi', value: Math.pow(1024, 7), scientific: true},
	      'yobi': {name: 'yobi', value: Math.pow(1024, 8), scientific: true}
	    },
	    BTU: {
	      '':   {name: '',   value: 1,   scientific: true},
	      'MM': {name: 'MM', value: 1e6, scientific: true}
	    }
	  };
	
	  // Add a prefix list for both short and long prefixes (for ohm in particular, since Mohm and megaohm are both acceptable):
	  PREFIXES.SHORTLONG = {};
	  for (var key in PREFIXES.SHORT) {
	    if(PREFIXES.SHORT.hasOwnProperty(key)) {
	      PREFIXES.SHORTLONG[key] = PREFIXES.SHORT[key];
	    }
	  }
	  for (var key in PREFIXES.LONG) {
	    if(PREFIXES.LONG.hasOwnProperty(key)) {
	      PREFIXES.SHORTLONG[key] = PREFIXES.LONG[key];
	    }
	  }
	
	  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:
	   * Index  Dimension
	   * -----  ---------
	   *   0    Length
	   *   1    Mass
	   *   2    Time
	   *   3    Current
	   *   4    Temperature
	   *   5    Luminous intensity
	   *   6    Amount of substance
	   *   7    Angle
	   *   8    Bit (digital)
	   * For example, the unit "298.15 K" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit "1 cal / (gm °C)" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].
	   *
	   */
	
	  var BASE_DIMENSIONS = ["MASS", "LENGTH", "TIME", "CURRENT", "TEMPERATURE", "LUMINOUS_INTENSITY", "AMOUNT_OF_SUBSTANCE", "ANGLE", "BIT"];
	
	  var BASE_UNITS = {
	    NONE: {
	      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]
	    },
	    MASS: {
	      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]
	    },
	    LENGTH: {
	      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]
	    },
	    TIME: {
	      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]
	    },
	    CURRENT: {
	      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]
	    },
	    TEMPERATURE: {
	      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]
	    },
	    LUMINOUS_INTENSITY: {
	      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]
	    },
	    AMOUNT_OF_SUBSTANCE: {
	      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]
	    },
	
	    FORCE: {
	      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]
	    },
	    SURFACE: {
	      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]
	    },
	    VOLUME: {
	      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]
	    },
	    ENERGY: {
	      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]
	    },
	    POWER: {
	      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]
	    },
	    PRESSURE: {
	      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]
	    },
	
	    ELECTRIC_CHARGE: {
	      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_CAPACITANCE: {
	      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_POTENTIAL: {
	      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_RESISTANCE: {
	      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_INDUCTANCE: {
	      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]
	    },
	    ELECTRIC_CONDUCTANCE: {
	      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]
	    },
	    MAGNETIC_FLUX: {
	      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]
	    },
	    MAGNETIC_FLUX_DENSITY: {
	      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]
	    },
	
	    FREQUENCY: {
	      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]
	    },
	    ANGLE: {
	      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]
	    },
	    BIT: {
	      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]
	    }
	  };
	
	  for(var key in BASE_UNITS) {
	    BASE_UNITS[key].key = key;
	  }
	
	  var BASE_UNIT_NONE = {};
	
	  var UNIT_NONE = {name: '', base: BASE_UNIT_NONE, value: 1, offset: 0, dimensions: [0,0,0,0,0,0,0,0,0]};
	
	  var UNITS = {
	    // length
	    meter: {
	      name: 'meter',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    inch: {
	      name: 'inch',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0254,
	      offset: 0
	    },
	    foot: {
	      name: 'foot',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.3048,
	      offset: 0
	    },
	    yard: {
	      name: 'yard',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.9144,
	      offset: 0
	    },
	    mile: {
	      name: 'mile',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1609.344,
	      offset: 0
	    },
	    link: {
	      name: 'link',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.201168,
	      offset: 0
	    },
	    rod: {
	      name: 'rod',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 5.029210,
	      offset: 0
	    },
	    chain: {
	      name: 'chain',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 20.1168,
	      offset: 0
	    },
	    angstrom: {
	      name: 'angstrom',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1e-10,
	      offset: 0
	    },
	
	    m: {
	      name: 'm',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    'in': {
	      name: 'in',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0254,
	      offset: 0
	    },
	    ft: {
	      name: 'ft',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.3048,
	      offset: 0
	    },
	    yd: {
	      name: 'yd',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.9144,
	      offset: 0
	    },
	    mi: {
	      name: 'mi',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 1609.344,
	      offset: 0
	    },
	    li: {
	      name: 'li',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.201168,
	      offset: 0
	    },
	    rd: {
	      name: 'rd',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 5.029210,
	      offset: 0
	    },
	    ch: {
	      name: 'ch',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 20.1168,
	      offset: 0
	    },
	    mil: {
	      name: 'mil',
	      base: BASE_UNITS.LENGTH,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000254,
	      offset: 0
	    }, // 1/1000 inch
	
	    // Surface
	    m2: {
	      name: 'm2',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.SQUARED,
	      value: 1,
	      offset: 0
	    },
	    sqin: {
	      name: 'sqin',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.00064516,
	      offset: 0
	    }, // 645.16 mm2
	    sqft: {
	      name: 'sqft',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.09290304,
	      offset: 0
	    }, // 0.09290304 m2
	    sqyd: {
	      name: 'sqyd',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 0.83612736,
	      offset: 0
	    }, // 0.83612736 m2
	    sqmi: {
	      name: 'sqmi',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 2589988.110336,
	      offset: 0
	    }, // 2.589988110336 km2
	    sqrd: {
	      name: 'sqrd',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 25.29295,
	      offset: 0
	    }, // 25.29295 m2
	    sqch: {
	      name: 'sqch',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 404.6873,
	      offset: 0
	    }, // 404.6873 m2
	    sqmil: {
	      name: 'sqmil',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 6.4516e-10,
	      offset: 0
	    }, // 6.4516 * 10^-10 m2
	    acre: {
	      name: 'acre',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 4046.86,
	      offset: 0
	    }, // 4046.86 m2
	    hectare: {
	      name: 'hectare',
	      base: BASE_UNITS.SURFACE,
	      prefixes: PREFIXES.NONE,
	      value: 10000,
	      offset: 0
	    }, // 10000 m2
	
	    // Volume
	    m3: {
	      name: 'm3',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.CUBIC,
	      value: 1,
	      offset: 0
	    },
	    L: {
	      name: 'L',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    }, // litre
	    l: {
	      name: 'l',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    }, // litre
	    litre: {
	      name: 'litre',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.LONG,
	      value: 0.001,
	      offset: 0
	    },
	    cuin: {
	      name: 'cuin',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 1.6387064e-5,
	      offset: 0
	    }, // 1.6387064e-5 m3
	    cuft: {
	      name: 'cuft',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.028316846592,
	      offset: 0
	    }, // 28.316 846 592 L
	    cuyd: {
	      name: 'cuyd',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.764554857984,
	      offset: 0
	    }, // 764.554 857 984 L
	    teaspoon: {
	      name: 'teaspoon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.000005,
	      offset: 0
	    }, // 5 mL
	    tablespoon: {
	      name: 'tablespoon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.000015,
	      offset: 0
	    }, // 15 mL
	    //{name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup
	    drop: {
	      name: 'drop',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 5e-8,
	      offset: 0
	    },  // 0.05 mL = 5e-8 m3
	    gtt: {
	      name: 'gtt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 5e-8,
	      offset: 0
	    },  // 0.05 mL = 5e-8 m3
	
	    // Liquid volume
	    minim: {
	      name: 'minim',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00000006161152,
	      offset: 0
	    }, // 0.06161152 mL
	    fluiddram: {
	      name: 'fluiddram',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000036966911,
	      offset: 0
	    },  // 3.696691 mL
	    fluidounce: {
	      name: 'fluidounce',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00002957353,
	      offset: 0
	    }, // 29.57353 mL
	    gill: {
	      name: 'gill',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0001182941,
	      offset: 0
	    }, // 118.2941 mL
	    cc: {
	      name: 'cc',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 1e-6,
	      offset: 0
	    }, // 1e-6 L
	    cup: {
	      name: 'cup',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0002365882,
	      offset: 0
	    }, // 236.5882 mL
	    pint: {
	      name: 'pint',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0004731765,
	      offset: 0
	    }, // 473.1765 mL
	    quart: {
	      name: 'quart',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0009463529,
	      offset: 0
	    }, // 946.3529 mL
	    gallon: {
	      name: 'gallon',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.003785412,
	      offset: 0
	    }, // 3.785412 L
	    beerbarrel: {
	      name: 'beerbarrel',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1173478,
	      offset: 0
	    }, // 117.3478 L
	    oilbarrel: {
	      name: 'oilbarrel',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1589873,
	      offset: 0
	    }, // 158.9873 L
	    hogshead: {
	      name: 'hogshead',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.2384810,
	      offset: 0
	    }, // 238.4810 L
	
	    //{name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute
	    fldr: {
	      name: 'fldr',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0000036966911,
	      offset: 0
	    },  // 3.696691 mL
	    floz: {
	      name: 'floz',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.00002957353,
	      offset: 0
	    }, // 29.57353 mL
	    gi: {
	      name: 'gi',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0001182941,
	      offset: 0
	    }, // 118.2941 mL
	    cp: {
	      name: 'cp',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0002365882,
	      offset: 0
	    }, // 236.5882 mL
	    pt: {
	      name: 'pt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0004731765,
	      offset: 0
	    }, // 473.1765 mL
	    qt: {
	      name: 'qt',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.0009463529,
	      offset: 0
	    }, // 946.3529 mL
	    gal: {
	      name: 'gal',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.003785412,
	      offset: 0
	    }, // 3.785412 L
	    bbl: {
	      name: 'bbl',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1173478,
	      offset: 0
	    }, // 117.3478 L
	    obl: {
	      name: 'obl',
	      base: BASE_UNITS.VOLUME,
	      prefixes: PREFIXES.NONE,
	      value: 0.1589873,
	      offset: 0
	    }, // 158.9873 L
	    //{name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?
	
	    // Mass
	    g: {
	      name: 'g',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 0.001,
	      offset: 0
	    },
	    gram: {
	      name: 'gram',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.LONG,
	      value: 0.001,
	      offset: 0
	    },
	
	    ton: {
	      name: 'ton',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 907.18474,
	      offset: 0
	    },
	    tonne: {
	      name: 'tonne',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.SHORT,
	      value: 1000,
	      offset: 0
	    },
	
	    grain: {
	      name: 'grain',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 64.79891e-6,
	      offset: 0
	    },
	    dram: {
	      name: 'dram',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 1.7718451953125e-3,
	      offset: 0
	    },
	    ounce: {
	      name: 'ounce',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 28.349523125e-3,
	      offset: 0
	    },
	    poundmass: {
	      name: 'poundmass',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 453.59237e-3,
	      offset: 0
	    },
	    hundredweight: {
	      name: 'hundredweight',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 45.359237,
	      offset: 0
	    },
	    stick: {
	      name: 'stick',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 115e-3,
	      offset: 0
	    },
	    stone: {
	      name: 'stone',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 6.35029318,
	      offset: 0
	    },
	
	    gr: {
	      name: 'gr',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 64.79891e-6,
	      offset: 0
	    },
	    dr: {
	      name: 'dr',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 1.7718451953125e-3,
	      offset: 0
	    },
	    oz: {
	      name: 'oz',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 28.349523125e-3,
	      offset: 0
	    },
	    lbm: {
	      name: 'lbm',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 453.59237e-3,
	      offset: 0
	    },
	    cwt: {
	      name: 'cwt',
	      base: BASE_UNITS.MASS,
	      prefixes: PREFIXES.NONE,
	      value: 45.359237,
	      offset: 0
	    },
	
	    // Time
	    s: {
	      name: 's',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    min: {
	      name: 'min',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 60,
	      offset: 0
	    },
	    h: {
	      name: 'h',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3600,
	      offset: 0
	    },
	    second: {
	      name: 'second',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    sec: {
	      name: 'sec',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    minute: {
	      name: 'minute',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 60,
	      offset: 0
	    },
	    hour: {
	      name: 'hour',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3600,
	      offset: 0
	    },
	    day: {
	      name: 'day',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 86400,
	      offset: 0
	    },
	    week: {
	      name: 'week',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 7*86400,
	      offset: 0
	    },
	    month: {
	      name: 'month',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 2629800, //1/12th of Julian year
	      offset: 0
	    },
	    year: {
	      name: 'year',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 31557600, //Julian year
	      offset: 0
	    },
	    decade: {
	      name: 'year',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 315576000, //Julian decade
	      offset: 0
	    },
	    century: {
	      name: 'century',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 3155760000, //Julian century
	      offset: 0
	    },
	    millennium: {
	      name: 'millennium',
	      base: BASE_UNITS.TIME,
	      prefixes: PREFIXES.NONE,
	      value: 31557600000, //Julian millennium
	      offset: 0
	    },
	
	    // Frequency
	    hertz: {
	      name: 'Hertz',
	      base: BASE_UNITS.FREQUENCY,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0,
	      reciprocal: true
	    },
	    Hz: {
	      name: 'Hz',
	      base: BASE_UNITS.FREQUENCY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0,
	      reciprocal: true
	    },
	
	    // Angle
	    rad: {
	      name: 'rad',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888
	    deg: {
	      name: 'deg',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.LONG,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399
	    grad: {
	      name: 'grad',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.LONG,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793
	    cycle: {
	      name: 'cycle',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795
	    arcsec: {
	      name: 'arcsec',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477
	    arcmin: {
	      name: 'arcmin',
	      base: BASE_UNITS.ANGLE,
	      prefixes: PREFIXES.NONE,
	      value: null, // will be filled in by calculateAngleValues()
	      offset: 0
	    },
	    
	    // Electric current
	    A: {
	      name: 'A',
	      base: BASE_UNITS.CURRENT,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    ampere: {
	      name: 'ampere',
	      base: BASE_UNITS.CURRENT,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	
	    // Temperature
	    // K(C) = °C + 273.15
	    // K(F) = (°F + 459.67) / 1.8
	    // K(R) = °R / 1.8
	    K: {
	      name: 'K',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    degC: {
	      name: 'degC',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 273.15
	    },
	    degF: {
	      name: 'degF',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 459.67
	    },
	    degR: {
	      name: 'degR',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 0
	    },
	    kelvin: {
	      name: 'kelvin',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    celsius: {
	      name: 'celsius',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 273.15
	    },
	    fahrenheit: {
	      name: 'fahrenheit',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 459.67
	    },
	    rankine: {
	      name: 'rankine',
	      base: BASE_UNITS.TEMPERATURE,
	      prefixes: PREFIXES.NONE,
	      value: 1 / 1.8,
	      offset: 0
	    },
	
	    // amount of substance
	    mol: {
	      name: 'mol',
	      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    mole: {
	      name: 'mole',
	      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	
	    // luminous intensity
	    cd: {
	      name: 'cd',
	      base: BASE_UNITS.LUMINOUS_INTENSITY,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    candela: {
	      name: 'candela',
	      base: BASE_UNITS.LUMINOUS_INTENSITY,
	      prefixes: PREFIXES.NONE,
	      value: 1,
	      offset: 0
	    },
	    // TODO: units STERADIAN
	    //{name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
	    //{name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},
	
	    // Force
	    N: {
	      name: 'N',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    newton: {
	      name: 'newton',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    dyn: {
	      name: 'dyn',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.SHORT,
	      value: 0.00001,
	      offset: 0
	    },
	    dyne: {
	      name: 'dyne',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 0.00001,
	      offset: 0
	    },
	    lbf: {
	      name: 'lbf',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.NONE,
	      value: 4.4482216152605,
	      offset: 0
	    },
	    poundforce: {
	      name: 'poundforce',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.NONE,
	      value: 4.4482216152605,
	      offset: 0
	    },
	    kip: {
	      name: 'kip',
	      base: BASE_UNITS.FORCE,
	      prefixes: PREFIXES.LONG,
	      value: 4448.2216,
	      offset: 0
	    },
		
	    // Energy
	    J: {
	      name: 'J',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    joule: {
	      name: 'joule',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    erg: {
	      name: 'erg',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.NONE,
	      value: 1e-5,
	      offset: 0
	    },
	    Wh: {
	      name: 'Wh',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 3600,
	      offset: 0
	    },
	    BTU: {
	      name: 'BTU',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.BTU,
	      value: 1055.05585262,
	      offset: 0
	    },
	    eV: {
	      name: 'eV',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.SHORT,
	      value: 1.602176565e-19,
	      offset: 0
	    },
	    electronvolt: {
	      name: 'electronvolt',
	      base: BASE_UNITS.ENERGY,
	      prefixes: PREFIXES.LONG,
	      value: 1.602176565e-19,
	      offset: 0
	    },
	
	
	    // Power
	    W: {
	      name: 'W',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    watt: {
	      name: 'W',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    hp: {
	      name: 'hp',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.NONE,
	      value: 745.6998715386,
	      offset: 0
	    },
	
	    // Electrical power units
	    VAR: {
	      name: 'VAR',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.SHORT,
	      value: Complex.I,
	      offset: 0
	    },
	    
	    VA: {
	      name: 'VA',
	      base: BASE_UNITS.POWER,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	
	    // Pressure
	    Pa: {
	      name: 'Pa',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    psi: {
	      name: 'psi',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 6894.75729276459,
	      offset: 0
	    },
	    atm: {
	      name: 'atm',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 101325,
	      offset: 0
	    },
	    bar: {
	      name: 'bar',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 100000,
	      offset: 0
	    },
	    torr: {
	      name: 'torr',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 133.322,
	      offset: 0
	    },
	    mmHg: {
	      name: 'mmHg',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 133.322,
	      offset: 0
	    },
	    mmH2O: {
	      name: 'mmH2O',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 9.80665,
	      offset: 0
	    },
	    cmH2O: {
	      name: 'cmH2O',
	      base: BASE_UNITS.PRESSURE,
	      prefixes: PREFIXES.NONE,
	      value: 98.0665,
	      offset: 0
	    },
	
	    // Electric charge
	    coulomb: {
	      name: 'coulomb',
	      base: BASE_UNITS.ELECTRIC_CHARGE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    C: {
	      name: 'C',
	      base: BASE_UNITS.ELECTRIC_CHARGE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric capacitance
	    farad: {
	      name: 'farad',
	      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    F: {
	      name: 'F',
	      base: BASE_UNITS.ELECTRIC_CAPACITANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric potential
	    volt: {
	      name: 'volt',
	      base: BASE_UNITS.ELECTRIC_POTENTIAL,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    V: {
	      name: 'V',
	      base: BASE_UNITS.ELECTRIC_POTENTIAL,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric resistance
	    ohm: {
	      name: 'ohm',
	      base: BASE_UNITS.ELECTRIC_RESISTANCE,
	      prefixes: PREFIXES.SHORTLONG,    // Both Mohm and megaohm are acceptable
	      value: 1,
	      offset: 0
	    },
	    /*
	     * Unicode breaks in browsers if charset is not specified
	    Ω: {
	      name: 'Ω',
	      base: BASE_UNITS.ELECTRIC_RESISTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    */
	    // Electric inductance
	    henry: {
	      name: 'henry',
	      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    H: {
	      name: 'H',
	      base: BASE_UNITS.ELECTRIC_INDUCTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Electric conductance
	    siemens: {
	      name: 'siemens',
	      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    S: {
	      name: 'S',
	      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Magnetic flux
	    weber: {
	      name: 'weber',
	      base: BASE_UNITS.MAGNETIC_FLUX,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    Wb: {
	      name: 'Wb',
	      base: BASE_UNITS.MAGNETIC_FLUX,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	    // Magnetic flux density
	    tesla: {
	      name: 'tesla',
	      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
	      prefixes: PREFIXES.LONG,
	      value: 1,
	      offset: 0
	    },
	    T: {
	      name: 'T',
	      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,
	      prefixes: PREFIXES.SHORT,
	      value: 1,
	      offset: 0
	    },
	
	    // Binary
	    b: {
	      name: 'b',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_SHORT,
	      value: 1,
	      offset: 0
	    },
	    bits: {
	      name: 'bits',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_LONG,
	      value: 1,
	      offset: 0
	    },
	    B: {
	      name: 'B',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_SHORT,
	      value: 8,
	      offset: 0
	    },
	    bytes: {
	      name: 'bytes',
	      base: BASE_UNITS.BIT,
	      prefixes: PREFIXES.BINARY_LONG,
	      value: 8,
	      offset: 0
	    }
	  };
	
	  // aliases (formerly plurals)
	  var ALIASES = {
	    meters: 'meter',
	    inches: 'inch',
	    feet: 'foot',
	    yards: 'yard',
	    miles: 'mile',
	    links: 'link',
	    rods: 'rod',
	    chains: 'chain',
	    angstroms: 'angstrom',
	
	    lt: 'l',
	    litres: 'litre',
	    liter: 'litre',
	    liters: 'litre',
	    teaspoons: 'teaspoon',
	    tablespoons: 'tablespoon',
	    minims: 'minim',
	    fluiddrams: 'fluiddram',
	    fluidounces: 'fluidounce',
	    gills: 'gill',
	    cups: 'cup',
	    pints: 'pint',
	    quarts: 'quart',
	    gallons: 'gallon',
	    beerbarrels: 'beerbarrel',
	    oilbarrels: 'oilbarrel',
	    hogsheads: 'hogshead',
	    gtts: 'gtt',
	
	    grams: 'gram',
	    tons: 'ton',
	    tonnes: 'tonne',
	    grains: 'grain',
	    drams: 'dram',
	    ounces: 'ounce',
	    poundmasses: 'poundmass',
	    hundredweights: 'hundredweight',
	    sticks: 'stick',
	    lb: 'lbm',
	    lbs: 'lbm',
		
	    kips: 'kip',
	
	    acres: 'acre',
	    hectares: 'hectare',
	    sqfeet: 'sqft',
	    sqyard: 'sqyd',
	    sqmile: 'sqmi',
	    sqmiles: 'sqmi',
	
	    mmhg: 'mmHg',
	    mmh2o: 'mmH2O',
	    cmh2o: 'cmH2O',
	
	    seconds: 'second',
	    secs: 'second',
	    minutes: 'minute',
	    mins: 'minute',
	    hours: 'hour',
	    hr: 'hour',
	    hrs: 'hour',
	    days: 'day',
	    weeks: 'week',
	    months: 'month',
	    years: 'year',
	
	    hertz: 'hertz',
	
	    radians: 'rad',
	    degree: 'deg',
	    degrees: 'deg',
	    gradian: 'grad',
	    gradians: 'grad',
	    cycles: 'cycle',
	    arcsecond: 'arcsec',
	    arcseconds: 'arcsec',
	    arcminute: 'arcmin',
	    arcminutes: 'arcmin',
	
	    BTUs: 'BTU',
	    watts: 'watt',
	    joules: 'joule',
	
	    amperes: 'ampere',
	    coulombs: 'coulomb',
	    volts: 'volt',
	    ohms: 'ohm',
	    farads: 'farad',
	    webers: 'weber',
	    teslas: 'tesla',
	    electronvolts: 'electronvolt',
	    moles: 'mole'
	
	  };
	
	  /**
	   * Calculate the values for the angle units.
	   * Value is calculated as number or BigNumber depending on the configuration
	   * @param {{number: 'number' | 'BigNumber'}} config
	   */
	  function calculateAngleValues (config) {
	    if (config.number === 'BigNumber') {
	      var pi = constants.pi(type.BigNumber);
	      UNITS.rad.value = new type.BigNumber(1);
	      UNITS.deg.value = pi.div(180);        // 2 * pi / 360;
	      UNITS.grad.value = pi.div(200);       // 2 * pi / 400;
	      UNITS.cycle.value = pi.times(2);      // 2 * pi
	      UNITS.arcsec.value = pi.div(648000);  // 2 * pi / 360 / 3600
	      UNITS.arcmin.value = pi.div(10800);   // 2 * pi / 360 / 60
	    }
	    else { // number
	      UNITS.rad.value = 1;
	      UNITS.deg.value = Math.PI / 180;        // 2 * pi / 360;
	      UNITS.grad.value = Math.PI / 200;       // 2 * pi / 400;
	      UNITS.cycle.value = Math.PI * 2;        // 2 * pi
	      UNITS.arcsec.value = Math.PI / 648000;  // 2 * pi / 360 / 3600;
	      UNITS.arcmin.value = Math.PI / 10800;   // 2 * pi / 360 / 60;
	    }
	  }
	
	  // apply the angle values now
	  calculateAngleValues(config);
	
	  // recalculate the values on change of configuration
	  math.on('config', function (curr, prev) {
	    if (curr.number !== prev.number) {
	      calculateAngleValues(curr);
	    }
	  });
	
	  /**
	   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.
	   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).
	   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.
	   */
	  var UNIT_SYSTEMS = {
	    si: {
	      // Base units
	      NONE:                  {unit: UNIT_NONE, prefix: PREFIXES.NONE['']},
	      LENGTH:                {unit: UNITS.m,   prefix: PREFIXES.SHORT['']},
	      MASS:                  {unit: UNITS.g,   prefix: PREFIXES.SHORT['k']}, 
	      TIME:                  {unit: UNITS.s,   prefix: PREFIXES.SHORT['']}, 
	      CURRENT:               {unit: UNITS.A,   prefix: PREFIXES.SHORT['']}, 
	      TEMPERATURE:           {unit: UNITS.K,   prefix: PREFIXES.SHORT['']}, 
	      LUMINOUS_INTENSITY:    {unit: UNITS.cd,  prefix: PREFIXES.SHORT['']}, 
	      AMOUNT_OF_SUBSTANCE:   {unit: UNITS.mol, prefix: PREFIXES.SHORT['']}, 
	      ANGLE:                 {unit: UNITS.rad, prefix: PREFIXES.SHORT['']}, 
	      BIT:                   {unit: UNITS.bit, prefix: PREFIXES.SHORT['']}, 
	
	      // Derived units
	      FORCE:                 {unit: UNITS.N,   prefix: PREFIXES.SHORT['']}, 
	      ENERGY:                {unit: UNITS.J,   prefix: PREFIXES.SHORT['']},
	      POWER:                 {unit: UNITS.W,   prefix: PREFIXES.SHORT['']},
	      PRESSURE:              {unit: UNITS.Pa,  prefix: PREFIXES.SHORT['']},
	      ELECTRIC_CHARGE:       {unit: UNITS.C,   prefix: PREFIXES.SHORT['']},
	      ELECTRIC_CAPACITANCE:  {unit: UNITS.F,   prefix: PREFIXES.SHORT['']},
	      ELECTRIC_POTENTIAL:    {unit: UNITS.V,   prefix: PREFIXES.SHORT['']},
	      ELECTRIC_RESISTANCE:   {unit: UNITS.ohm, prefix: PREFIXES.SHORT['']},
	      ELECTRIC_INDUCTANCE:   {unit: UNITS.H,   prefix: PREFIXES.SHORT['']},
	      ELECTRIC_CONDUCTANCE:  {unit: UNITS.S,   prefix: PREFIXES.SHORT['']},
	      MAGNETIC_FLUX:         {unit: UNITS.Wb,  prefix: PREFIXES.SHORT['']},
	      MAGNETIC_FLUX_DENSITY: {unit: UNITS.T,   prefix: PREFIXES.SHORT['']},
	      FREQUENCY:             {unit: UNITS.Hz,  prefix: PREFIXES.SHORT['']}
	    }
	  };
	
	  // Clone to create the other unit systems
	  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
	  UNIT_SYSTEMS.cgs.LENGTH = {unit: UNITS.m,   prefix: PREFIXES.SHORT['c']};
	  UNIT_SYSTEMS.cgs.MASS =   {unit: UNITS.g,   prefix: PREFIXES.SHORT['']};
	  UNIT_SYSTEMS.cgs.FORCE =  {unit: UNITS.dyn, prefix: PREFIXES.SHORT['']};
	  UNIT_SYSTEMS.cgs.ENERGY = {unit: UNITS.erg, prefix: PREFIXES.NONE['']};
	  // there are wholly 4 unique cgs systems for electricity and magnetism,
	  // so let's not worry about it unless somebody complains
	  
	  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
	  UNIT_SYSTEMS.us.LENGTH =      {unit: UNITS.ft,   prefix: PREFIXES.NONE['']};
	  UNIT_SYSTEMS.us.MASS =        {unit: UNITS.lbm,  prefix: PREFIXES.NONE['']};
	  UNIT_SYSTEMS.us.TEMPERATURE = {unit: UNITS.degF, prefix: PREFIXES.NONE['']};
	  UNIT_SYSTEMS.us.FORCE =       {unit: UNITS.lbf,  prefix: PREFIXES.NONE['']};
	  UNIT_SYSTEMS.us.ENERGY =      {unit: UNITS.BTU,  prefix: PREFIXES.BTU['']};
	  UNIT_SYSTEMS.us.POWER =       {unit: UNITS.hp,   prefix: PREFIXES.NONE['']};
	  UNIT_SYSTEMS.us.PRESSURE =    {unit: UNITS.psi,  prefix: PREFIXES.NONE['']};
	
	  // Add additional unit systems here.
	
	
	
	  // Choose a unit system to seed the auto unit system.
	  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));
	
	  // Set the current unit system
	  var currentUnitSystem = UNIT_SYSTEMS.auto;
	
	  /**
	   * Set a unit system for formatting derived units.
	   * @param {string} [name] The name of the unit system.
	   */
	  Unit.setUnitSystem = function(name) {
	    if(UNIT_SYSTEMS.hasOwnProperty(name)) {
	      currentUnitSystem = UNIT_SYSTEMS[name];
	    }
	    else {
	      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));
	    }
	  };
	
	  /**
	   * Return the current unit system.
	   * @return {string} The current unit system.
	   */
	  Unit.getUnitSystem = function() {
	    for(var key in UNIT_SYSTEMS) {
	      if(UNIT_SYSTEMS[key] === currentUnitSystem) {
	        return key;
	      }
	    }
	  };
	
	  /**
	   * Converters to convert from number to an other numeric type like BigNumber
	   * or Fraction
	   */
	  Unit.typeConverters = {
	    BigNumber: function (x) {
	      return new type.BigNumber(x + ''); // stringify to prevent constructor error
	    },
	
	    Fraction: function (x) {
	      return new type.Fraction(x);
	    },
	
	    Complex: function (x) {
	      return x;
	    },
	
	    number: function (x) {
	      return x;
	    }
	  };
	
	  /**
	   * Retrieve the right convertor function corresponding with the type
	   * of provided exampleValue.
	   *
	   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'
	   *                        In case of an unknown type,
	   * @return {Function}
	   */
	  Unit._getNumberConverter = function (type) {
	    if (!Unit.typeConverters[type]) {
	      throw new TypeError('Unsupported type "' + type + '"');
	    }
	
	    return Unit.typeConverters[type];
	  };
	
	  // Add dimensions to each built-in unit
	  for (var key in UNITS) {
	    var unit = UNITS[key];
	    unit.dimensions = unit.base.dimensions;
	  }    
	
	  // Create aliases
	  for (var name in ALIASES) {
	    if(ALIASES.hasOwnProperty(name)) {
	      var unit = UNITS[ALIASES[name]];
	      var alias = {};
	      for(var key in unit) {
	        if(unit.hasOwnProperty(key)) {
	          alias[key] = unit[key];
	        }
	      }
	      alias.name = name;
	      UNITS[name] = alias;
	    }
	  }
	
	  function assertUnitNameIsValid(name) {
	    for(var i=0; i<name.length; i++) {
	      var c = name.charAt(i);
	       
	      var isValidAlpha = function (p) {
	        return /^[a-zA-Z]$/.test(p);
	      };
	
	      var isDigit = function (c) {
	        return (c >= '0' && c <= '9');
	      }
	
	      if(i === 0 && !isValidAlpha(c))
	        throw new Error('Invalid unit name (must begin with alpha character): "' + name + '"');
	
	      if(i > 0 && !( isValidAlpha(c)
	                  || isDigit(c)))
	        throw new Error('Invalid unit name (only alphanumeric characters are allowed): "' + name + '"');
	
	    }
	  }
	
	  /**
	   * Wrapper around createUnitSingle.
	   * Example: 
	   *  createUnit({
	   *    foo: { },
	   *    bar: {
	   *      definition: 'kg/foo',
	   *      aliases: ['ba', 'barr', 'bars'],
	   *      offset: 200
	   *    },
	   *    baz: '4 bar'
	   *  }, 
	   *  {
	   *    override: true;
	   *  });
	   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.
	   * @param {object} options
	   */
	  Unit.createUnit = function(obj, options) {
	    
	    if(typeof(obj) !== 'object') {
	      throw new TypeError("createUnit expects first parameter to be of type 'Object'");
	    }
	
	    // Remove all units and aliases we are overriding
	    if(options && options.override) {
	      for(var key in obj) {
	        if(obj.hasOwnProperty(key)) {
	          Unit.deleteUnit(key);
	        }
	        if(obj[key].aliases) {
	          for(var i=0; i<obj[key].aliases.length; i++) {
	            Unit.deleteUnit(obj[key].aliases[i]);
	          }
	        }
	      }
	    }
	
	    // TODO: traverse multiple times until all units have been added
	    var lastUnit;
	    for(var key in obj) {
	      if(obj.hasOwnProperty(key)) {
	        lastUnit = Unit.createUnitSingle(key, obj[key]);
	      }
	    }
	    return lastUnit;
	  };
	
	  /**
	   * Create a user-defined unit and register it with the Unit type.
	   * Example: 
	   *  createUnitSingle('knot', '0.514444444 m/s')
	   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))
	   *
	   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
	   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
	   * @param {Object} options   (optional) An object containing any of the following properties:
	   *     prefixes {string} "none", "short", "long", "binary_short", or "binary_long". The default is "none".
	   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
	   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15 and the offset for farhenheit is 459.67. Default is 0.
	   *
	   * @return {Unit} 
	   */
	  Unit.createUnitSingle = function(name, obj, options) {
	
	    if(typeof(obj) === 'undefined' || obj === null) {
	      obj = {};
	    }
	    
	    if(typeof(name) !== 'string') {
	      throw new TypeError("createUnitSingle expects first parameter to be of type 'string'");
	    }
	   
	    // Check collisions with existing units
	    if(UNITS.hasOwnProperty(name)) {
	      throw new Error('Cannot create unit "' + name + '": a unit with that name already exists');
	    }
	
	    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.
	
	    assertUnitNameIsValid(name);
	
	    var defUnit = null;   // The Unit from which the new unit will be created.
	    var aliases = [];
	    var offset = 0;
	    var definition;
	    var prefixes;
	    if(obj && obj.type === 'Unit') {
	      defUnit = obj.clone();
	    }
	    else if(typeof(obj) === 'string') {
	      if(obj !== '') {
	        definition = obj;
	      }
	    }
	    else if(typeof(obj) === 'object') {
	      definition = obj.definition;
	      prefixes = obj.prefixes; 
	      offset = obj.offset;
	      aliases = obj.aliases;
	    }
	    else {
	      throw new TypeError('Cannot create unit "' + name + '" from "' + obj.toString() + '": expecting "string" or "Unit" or "Object"');
	    }
	
	    if(aliases) {
	      for (var i=0; i<aliases.length; i++) {
	        if(UNITS.hasOwnProperty(aliases[i])) {
	          throw new Error('Cannot create alias "' + aliases[i] + '": a unit with that name already exists');
	        }
	      }
	    }
	
	    if(definition && typeof(definition) === 'string' && !defUnit) {
	      try {
	        defUnit = Unit.parse(definition, {allowNoUnits: true});
	      }
	      catch (ex) {
	        ex.message = 'Could not create unit "' + name + '" from "' + definition + '": ' + ex.message;
	        throw(ex);
	      }
	    }
	    else if(definition && definition.type === 'Unit') {
	      defUnit = definition.clone();
	    }
	
	    aliases = aliases || [];
	    offset = offset || 0;
	    if(prefixes && prefixes.toUpperCase) 
	      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;
	    else
	      prefixes = PREFIXES.NONE;
	
	
	    // If defUnit is null, it is because the user did not
	    // specify a defintion. So create a new base dimension.
	    var newUnit = {};
	    if(!defUnit) {
	      // Add a new base dimension
	      var baseName = name + "_STUFF";   // foo --> foo_STUFF, or the essence of foo
	      if(BASE_DIMENSIONS.indexOf(baseName) >= 0) {
	        throw new Error('Cannot create new base unit "' + name + '": a base unit with that name already exists (and cannot be overridden)');
	      }
	      BASE_DIMENSIONS.push(baseName);
	
	      // Push 0 onto existing base units
	      for(var b in BASE_UNITS) {
	        if(BASE_UNITS.hasOwnProperty(b)) {
	          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length-1] = 0;
	        }
	      }
	
	      // Add the new base unit
	      var newBaseUnit = { dimensions: [] };
	      for(var i=0; i<BASE_DIMENSIONS.length; i++) {
	        newBaseUnit.dimensions[i] = 0;
	      }
	      newBaseUnit.dimensions[BASE_DIMENSIONS.length-1] = 1;
	      newBaseUnit.key = baseName;
	      BASE_UNITS[baseName] = newBaseUnit;
	       
	      newUnit = {
	        name: name,
	        value: 1,
	        dimensions: BASE_UNITS[baseName].dimensions.slice(0),
	        prefixes: prefixes,
	        offset: offset,
	        base: baseName
	      };
	
	      currentUnitSystem[baseName] = {
	        unit: newUnit,
	        prefix: PREFIXES.NONE['']
	      };
	
	    }
	    else {
	
	      newUnit = {
	        name: name,
	        value: defUnit.value,
	        dimensions: defUnit.dimensions.slice(0),
	        prefixes: prefixes,
	        offset: offset,
	      };
	      
	      // Create a new base if no matching base exists
	      var anyMatch = false;
	      for(var i in BASE_UNITS) {
	        if(BASE_UNITS.hasOwnProperty(i)) {
	          var match = true;
	          for(var j=0; j<BASE_DIMENSIONS.length; j++) {
	            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[i].dimensions[j] || 0)) > 1e-12) {
	              match = false;
	              break;
	            }
	          }
	          if(match) {
	            anyMatch = true;
	            break;
	          }
	        }
	      }
	      if(!anyMatch) {
	        var baseName = name + "_STUFF";   // foo --> foo_STUFF, or the essence of foo
	        // Add the new base unit
	        var newBaseUnit = { dimensions: defUnit.dimensions.slice(0) };
	        newBaseUnit.key = baseName;
	        BASE_UNITS[baseName] = newBaseUnit;
	
	        currentUnitSystem[baseName] = {
	          unit: newUnit,
	          prefix: PREFIXES.NONE['']
	        };
	
	        newUnit.base = baseName;
	      }
	    }
	
	    Unit.UNITS[name] = newUnit;
	
	    for (var i=0; i<aliases.length; i++) {
	      var aliasName = aliases[i];
	      var alias = {};
	      for(var key in newUnit) {
	        if(newUnit.hasOwnProperty(key)) {
	          alias[key] = newUnit[key];
	        }
	      }
	      alias.name = aliasName;
	      Unit.UNITS[aliasName] = alias;
	    }
	
	    return new Unit(null, name);
	  };
	
	  Unit.deleteUnit = function(name) {
	    delete Unit.UNITS[name];
	  };
	
	
	  Unit.PREFIXES = PREFIXES;
	  Unit.BASE_UNITS = BASE_UNITS;
	  Unit.UNITS = UNITS;
	  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;
	
	  return Unit;
	}
	
	exports.name = 'Unit';
	exports.path = 'type';
	exports.factory = factory;
	exports.math = true; // request access to the math namespace


/***/ }),
/* 128 */
/***/ (function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(96).memoize;
	
	/**
	 * Calculate BigNumber e
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns e
	 */
	exports.e = memoize(function (BigNumber) {
	  return new BigNumber(1).exp();
	}, hasher);
	
	/**
	 * Calculate BigNumber golden ratio, phi = (1+sqrt(5))/2
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns phi
	 */
	exports.phi = memoize(function (BigNumber) {
	  return new BigNumber(1).plus(new BigNumber(5).sqrt()).div(2);
	}, hasher);
	
	/**
	 * Calculate BigNumber pi.
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns pi
	 */
	exports.pi = memoize(function (BigNumber) {
	  return BigNumber.acos(-1);
	}, hasher);
	
	/**
	 * Calculate BigNumber tau, tau = 2 * pi
	 * @param {function} BigNumber   BigNumber constructor
	 * @returns {BigNumber} Returns tau
	 */
	exports.tau = memoize(function (BigNumber) {
	  return exports.pi(BigNumber).times(2);
	}, hasher);
	
	/**
	 * Create a hash for a BigNumber constructor function. The created has is
	 * the configured precision
	 * @param {Array} args         Supposed to contain a single entry with
	 *                             a BigNumber constructor
	 * @return {number} precision
	 * @private
	 */
	function hasher (args) {
	  return args[0].precision;
	}


/***/ }),
/* 129 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DimensionError = __webpack_require__(93);
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  var matrix = load(__webpack_require__(104));
	  var addScalar = load(__webpack_require__(105));
	  var unaryMinus = load(__webpack_require__(130));
	
	  var algorithm01 = load(__webpack_require__(106));
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm05 = load(__webpack_require__(131));
	  var algorithm10 = load(__webpack_require__(108));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  // TODO: split function subtract in two: subtract and subtractScalar
	
	  /**
	   * Subtract two values, `x - y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.subtract(x, y)
	   *
	   * Examples:
	   *
	   *    math.subtract(5.3, 2);        // returns number 3.3
	   *
	   *    var a = math.complex(2, 3);
	   *    var b = math.complex(4, 1);
	   *    math.subtract(a, b);          // returns Complex -2 + 2i
	   *
	   *    math.subtract([5, 7, 4], 4);  // returns Array [1, 3, 0]
	   *
	   *    var c = math.unit('2.1 km');
	   *    var d = math.unit('500m');
	   *    math.subtract(c, d);          // returns Unit 1.6 km
	   *
	   * See also:
	   *
	   *    add
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x
	   *            Initial value
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y
	   *            Value to subtract from `x`
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Subtraction of `x` and `y`
	   */
	  var subtract = typed('subtract', {
	
	    'number, number': function (x, y) {
	      return x - y;
	    },
	
	    'Complex, Complex': function (x, y) {
	      return x.sub(y);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return x.minus(y);
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      return x.sub(y);
	    },
	
	    'Unit, Unit': function (x, y) {
	      if (x.value == null) {
	        throw new Error('Parameter x contains a unit with undefined value');
	      }
	
	      if (y.value == null) {
	        throw new Error('Parameter y contains a unit with undefined value');
	      }
	
	      if (!x.equalBase(y)) {
	        throw new Error('Units do not match');
	      }
	
	      var res = x.clone();
	      res.value = subtract(res.value, y.value);
	      res.fixPrefix = false;
	
	      return res;
	    },
	    
	    'Matrix, Matrix': function (x, y) {
	      // matrix sizes
	      var xsize = x.size();
	      var ysize = y.size();
	
	      // check dimensions
	      if (xsize.length !== ysize.length)
	        throw new DimensionError(xsize.length, ysize.length);
	
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse - sparse
	              c = algorithm05(x, y, subtract);
	              break;
	            default:
	              // sparse - dense
	              c = algorithm03(y, x, subtract, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense - sparse
	              c = algorithm01(x, y, subtract, false);
	              break;
	            default:
	              // dense - dense
	              c = algorithm13(x, y, subtract);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	    
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return subtract(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return subtract(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return subtract(x, matrix(y));
	    },
	    
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          // algorithm 7 is faster than 9 since it calls f() for nonzero items only!
	          c = algorithm10(x, unaryMinus(y), addScalar);
	          break;
	        default:
	          c = algorithm14(x, y, subtract);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm10(y, x, subtract, true);
	          break;
	        default:
	          c = algorithm14(y, x, subtract, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, subtract, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, subtract, true).valueOf();
	    }
	  });
	
	  subtract.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['subtract'] + '${args[1]}\\right)'
	  };
	
	  return subtract;
	}
	
	exports.name = 'subtract';
	exports.factory = factory;


/***/ }),
/* 130 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  /**
	   * Inverse the sign of a value, apply a unary minus operation.
	   *
	   * For matrices, the function is evaluated element wise. Boolean values and
	   * strings will be converted to a number. For complex numbers, both real and
	   * complex value are inverted.
	   *
	   * Syntax:
	   *
	   *    math.unaryMinus(x)
	   *
	   * Examples:
	   *
	   *    math.unaryMinus(3.5);      // returns -3.5
	   *    math.unaryMinus(-4.2);     // returns 4.2
	   *
	   * See also:
	   *
	   *    add, subtract, unaryPlus
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Number to be inverted.
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Returns the value with inverted sign.
	   */
	  var unaryMinus = typed('unaryMinus', {
	    'number': function (x) {
	      return -x;
	    },
	
	    'Complex': function (x) {
	      return x.neg();
	    },
	
	    'BigNumber': function (x) {
	      return x.neg();
	    },
	
	    'Fraction': function (x) {
	      return x.neg();
	    },
	
	    'Unit': function (x) {
	      var res = x.clone();
	      res.value = unaryMinus(x.value);
	      return res;
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since unaryMinus(0) = 0
	      return deepMap(x, unaryMinus, true);
	    }
	
	    // TODO: add support for string
	  });
	
	  unaryMinus.toTex = {
	    1: latex.operators['unaryMinus'] + '\\left(${args[0]}\\right)'
	  };
	
	  return unaryMinus;
	}
	
	exports.name = 'unaryMinus';
	exports.factory = factory;


/***/ }),
/* 131 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DimensionError = __webpack_require__(93);
	
	function factory (type, config, load, typed) {
	
	  var equalScalar = load(__webpack_require__(100));
	  
	  var SparseMatrix = type.SparseMatrix;
	
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 || B(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm05 = function (a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;
	
	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);
	
	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	
	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	
	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	
	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	
	    // workspaces
	    var xa = cvalues ? [] : undefined;
	    var xb = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var wa = [];
	    var wb = [];
	
	    // vars
	    var i, j, k, k1;
	    
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop values A(:,j)
	      for (k = aptr[j], k1 = aptr[j + 1]; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // push index
	        cindex.push(i);
	        // update workspace
	        wa[i] = mark;
	        // check we need to process values
	        if (xa)
	          xa[i] = avalues[k];
	      }
	      // loop values B(:,j)
	      for (k = bptr[j], k1 = bptr[j + 1]; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check row existed in A
	        if (wa[i] !== mark) {
	          // push index
	          cindex.push(i);
	        }
	        // update workspace
	        wb[i] = mark;
	        // check we need to process values
	        if (xb)
	          xb[i] = bvalues[k];
	      }
	      // check we need to process values (non pattern matrix)
	      if (cvalues) {
	        // initialize first index in j
	        k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          i = cindex[k];
	          // marks
	          var wai = wa[i];
	          var wbi = wb[i];
	          // check Aij or Bij are nonzero
	          if (wai === mark || wbi === mark) {
	            // matrix values @ i,j
	            var va = wai === mark ? xa[i] : zero;
	            var vb = wbi === mark ? xb[i] : zero;
	            // Cij
	            var vc = cf(va, vb);
	            // check for zero
	            if (!eq(vc, zero)) {
	              // push value
	              cvalues.push(vc);
	              // increment pointer
	              k++;
	            }
	            else {
	              // remove value @ i, do not increment pointer
	              cindex.splice(k, 1);
	            }
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;
	
	    // return sparse matrix
	    return c;
	  };
	
	  return algorithm05;
	}
	
	exports.name = 'algorithm05';
	exports.factory = factory;


/***/ }),
/* 132 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory(type, config, load, typed) {
	  
	  /**
	   * Multiply two scalar values, `x * y`.
	   * This function is meant for internal use: it is used by the public function
	   * `multiply`
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex} y          Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Multiplication of `x` and `y`
	   * @private
	   */
	  var multiplyScalar = typed('multiplyScalar', {
	
	    'number, number': function (x, y) {
	      return x * y;
	    },
	
	    'Complex, Complex': function (x, y) {
	      return x.mul(y);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return x.times(y);
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      return x.mul(y);
	    },
	
	    'number | Fraction | BigNumber | Complex, Unit': function (x, y) {
	      var res = y.clone();
	      res.value = (res.value === null) ? res._normalize(x) : multiplyScalar(res.value, x);
	      return res;
	    },
	
	    'Unit, number | Fraction | BigNumber | Complex': function (x, y) {
	      var res = x.clone();
	      res.value = (res.value === null) ? res._normalize(y) : multiplyScalar(res.value, y);
	      return res;
	    },
	
	    'Unit, Unit': function (x, y) {
	      return x.multiply(y);
	    }
	
	  });
	
	  return multiplyScalar;
	}
	
	exports.factory = factory;


/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory(type, config, load, typed) {
	  var multiplyScalar = load(__webpack_require__(132));
	
	  /**
	   * Divide two scalar values, `x / y`.
	   * This function is meant for internal use: it is used by the public functions
	   * `divide` and `inv`.
	   *
	   * This function does not support collections (Array or Matrix), and does
	   * not validate the number of of inputs.
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit} x   Numerator
	   * @param  {number | BigNumber | Fraction | Complex} y          Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit}                      Quotient, `x / y`
	   * @private
	   */
	  var divideScalar = typed('divide', {
	    'number, number': function (x, y) {
	      return x / y;
	    },
	
	    'Complex, Complex': function (x, y) {
	      return x.div(y);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return x.div(y);
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      return x.div(y);
	    },
	
	    'Unit, number | Fraction | BigNumber': function (x, y) {
	      var res = x.clone();
	      // TODO: move the divide function to Unit.js, it uses internals of Unit
	      res.value = divideScalar(((res.value === null) ? res._normalize(1) : res.value), y);
	      return res;
	    },
	
	    'number | Fraction | BigNumber, Unit': function (x, y) {
	      var res = y.pow(-1);
	      // TODO: move the divide function to Unit.js, it uses internals of Unit
	      res.value = multiplyScalar(((res.value === null) ? res._normalize(1) : res.value), x);
	      return res;
	    },
	
	    'Unit, Unit': function (x, y) {
	      return x.divide(y);
	    }
	
	  });
	
	  return divideScalar;
	}
	
	exports.factory = factory;


/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	var size = __webpack_require__(91).size;
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	  var eye = load(__webpack_require__(135));
	  var multiply = load(__webpack_require__(136));
	  var matrix = load(__webpack_require__(104));
	  var fraction = load(__webpack_require__(87));
	  var number = load(__webpack_require__(122));
	
	  /**
	   * Calculates the power of x to y, `x ^ y`.
	   * Matrix exponentiation is supported for square matrices `x`, and positive
	   * integer exponents `y`.
	   *
	   * For cubic roots of negative numbers, the function returns the principal
	   * root by default. In order to let the function return the real root,
	   * math.js can be configured with `math.config({predictable: true})`.
	   * To retrieve all cubic roots of a value, use `math.cbrt(x, true)`.
	   *
	   * Syntax:
	   *
	   *    math.pow(x, y)
	   *
	   * Examples:
	   *
	   *    math.pow(2, 3);               // returns number 8
	   *
	   *    var a = math.complex(2, 3);
	   *    math.pow(a, 2)                // returns Complex -5 + 12i
	   *
	   *    var b = [[1, 2], [4, 3]];
	   *    math.pow(b, 2);               // returns Array [[9, 8], [16, 17]]
	   *
	   * See also:
	   *
	   *    multiply, sqrt, cbrt, nthRoot
	   *
	   * @param  {number | BigNumber | Complex | Array | Matrix} x  The base
	   * @param  {number | BigNumber | Complex} y                   The exponent
	   * @return {number | BigNumber | Complex | Array | Matrix} The value of `x` to the power `y`
	   */
	  var pow = typed('pow', {
	    'number, number': _pow,
	
	    'Complex, Complex': function (x, y) {
	      return x.pow(y);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      if (y.isInteger() || x >= 0 || config.predictable) {
	        return x.pow(y);
	      }
	      else {
	        return new type.Complex(x.toNumber(), 0).pow(y.toNumber(), 0);
	      }
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      if (y.d !== 1) {
	        if (config.predictable) {
	          throw new Error('Function pow does not support non-integer exponents for fractions.');
	        }
	        else {
	          return _pow(x.valueOf(), y.valueOf());
	        }
	      }
	      else {
	        return x.pow(y);
	     }
	    },
	
	    'Array, number': _powArray,
	
	    'Array, BigNumber': function (x, y) {
	      return _powArray(x, y.toNumber());
	    },
	
	    'Matrix, number': _powMatrix,
	
	    'Matrix, BigNumber': function (x, y) {
	      return _powMatrix(x, y.toNumber());
	    },
	
	    'Unit, number': function (x, y) {
	      return x.pow(y);
	    }
	
	  });
	
	  /**
	   * Calculates the power of x to y, x^y, for two numbers.
	   * @param {number} x
	   * @param {number} y
	   * @return {number | Complex} res
	   * @private
	   */
	  function _pow(x, y) {
	
	    // Alternatively could define a 'realmode' config option or something, but
	    // 'predictable' will work for now
	    if (config.predictable && !isInteger(y) && x < 0) {
	      // Check to see if y can be represented as a fraction
	      try {
	        var yFrac = fraction(y);
	        var yNum = number(yFrac);
	        if(y === yNum || Math.abs((y - yNum) / y) < 1e-14) {
	          if(yFrac.d % 2 === 1) {
	            return (yFrac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, y);
	          }
	        }
	      }
	      catch (ex) {
	        // fraction() throws an error if y is Infinity, etc.
	      }
	
	      // Unable to express y as a fraction, so continue on
	    }
	
	
	    // x^Infinity === 0 if -1 < x < 1
	    // A real number 0 is returned instead of complex(0)
	    if ((x*x < 1 && y ===  Infinity) ||
	        (x*x > 1 && y === -Infinity)) {
	      return 0;
	    }
	
	    // **for predictable mode** x^Infinity === NaN if x < -1
	    // N.B. this behavour is different from `Math.pow` which gives
	    // (-2)^Infinity === Infinity
	    if (config.predictable &&
	        ((x < -1 &&          y ===  Infinity) ||
	         (x > -1 && x < 0 && y === -Infinity))) {
	      return NaN;
	    }
	
	    if (isInteger(y) || x >= 0 || config.predictable) {
	      return Math.pow(x, y);
	    }
	    else {
	      return new type.Complex(x, 0).pow(y, 0);
	    }
	  }
	
	  /**
	   * Calculate the power of a 2d array
	   * @param {Array} x     must be a 2 dimensional, square matrix
	   * @param {number} y    a positive, integer value
	   * @returns {Array}
	   * @private
	   */
	  function _powArray(x, y) {
	    if (!isInteger(y) || y < 0) {
	      throw new TypeError('For A^b, b must be a positive integer (value is ' + y + ')');
	    }
	    // verify that A is a 2 dimensional square matrix
	    var s = size(x);
	    if (s.length != 2) {
	      throw new Error('For A^b, A must be 2 dimensional (A has ' + s.length + ' dimensions)');
	    }
	    if (s[0] != s[1]) {
	      throw new Error('For A^b, A must be square (size is ' + s[0] + 'x' + s[1] + ')');
	    }
	
	    var res = eye(s[0]).valueOf();
	    var px = x;
	    while (y >= 1) {
	      if ((y & 1) == 1) {
	        res = multiply(px, res);
	      }
	      y >>= 1;
	      px = multiply(px, px);
	    }
	    return res;
	  }
	
	  /**
	   * Calculate the power of a 2d matrix
	   * @param {Matrix} x     must be a 2 dimensional, square matrix
	   * @param {number} y    a positive, integer value
	   * @returns {Matrix}
	   * @private
	   */
	  function _powMatrix (x, y) {
	    return matrix(_powArray(x.valueOf(), y));
	  }
	
	
	
	  pow.toTex = {
	    2: '\\left(${args[0]}\\right)' + latex.operators['pow'] + '{${args[1]}}'
	  };
	
	  return pow;
	}
	
	exports.name = 'pow';
	exports.factory = factory;


/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var array = __webpack_require__(91);
	var isInteger = __webpack_require__(58).isInteger;
	
	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(104));
	  
	  /**
	   * Create a 2-dimensional identity matrix with size m x n or n x n.
	   * The matrix has ones on the diagonal and zeros elsewhere.
	   *
	   * Syntax:
	   *
	   *    math.eye(n)
	   *    math.eye(n, format)
	   *    math.eye(m, n)
	   *    math.eye(m, n, format)
	   *    math.eye([m, n])
	   *    math.eye([m, n], format)
	   *
	   * Examples:
	   *
	   *    math.eye(3);                    // returns [[1, 0, 0], [0, 1, 0], [0, 0, 1]]
	   *    math.eye(3, 2);                 // returns [[1, 0], [0, 1], [0, 0]]
	   *
	   *    var A = [[1, 2, 3], [4, 5, 6]];
	   *    math.eye(math.size(A));         // returns [[1, 0, 0], [0, 1, 0]]
	   *
	   * See also:
	   *
	   *    diag, ones, zeros, size, range
	   *
	   * @param {...number | Matrix | Array} size   The size for the matrix
	   * @param {string} [format]                   The Matrix storage format
	   *
	   * @return {Matrix | Array | number} A matrix with ones on the diagonal.
	   */
	  var eye = typed('eye', {
	    '': function () {
	      return (config.matrix === 'Matrix') ? matrix([]) : [];
	    },
	
	    'string': function (format) {
	      return matrix(format);
	    },
	
	    'number | BigNumber': function (rows) {
	      return _eye(rows, rows, config.matrix === 'Matrix' ? 'default' : undefined);
	    },
	    
	    'number | BigNumber, string': function (rows, format) {
	      return _eye(rows, rows, format);
	    },
	
	    'number | BigNumber, number | BigNumber': function (rows, cols) {
	      return _eye(rows, cols, config.matrix === 'Matrix' ? 'default' : undefined);
	    },
	    
	    'number | BigNumber, number | BigNumber, string': function (rows, cols, format) {
	      return _eye(rows, cols, format);
	    },
	
	    'Array':  function (size) {
	      return _eyeVector(size);
	    },
	    
	    'Array, string':  function (size, format) {
	      return _eyeVector(size, format);
	    },
	
	    'Matrix': function (size) {
	      return _eyeVector(size.valueOf(), size.storage());
	    },
	    
	    'Matrix, string': function (size, format) {
	      return _eyeVector(size.valueOf(), format);
	    }
	  });
	
	  eye.toTex = undefined; // use default template
	
	  return eye;
	
	  function _eyeVector (size, format) {
	    switch (size.length) {
	      case 0: return format ? matrix(format) : [];
	      case 1: return _eye(size[0], size[0], format);
	      case 2: return _eye(size[0], size[1], format);
	      default: throw new Error('Vector containing two values expected');
	    }
	  }
	
	  /**
	   * Create an identity matrix
	   * @param {number | BigNumber} rows
	   * @param {number | BigNumber} cols
	   * @param {string} [format]
	   * @returns {Matrix}
	   * @private
	   */
	  function _eye (rows, cols, format) {
	    // BigNumber constructor with the right precision
	    var Big = (rows && rows.isBigNumber === true)
	        ? type.BigNumber
	        : (cols && cols.isBigNumber === true)
	            ? type.BigNumber
	            : null;
	
	    if (rows && rows.isBigNumber === true) rows = rows.toNumber();
	    if (cols && cols.isBigNumber === true) cols = cols.toNumber();
	
	    if (!isInteger(rows) || rows < 1) {
	      throw new Error('Parameters in function eye must be positive integers');
	    }
	    if (!isInteger(cols) || cols < 1) {
	      throw new Error('Parameters in function eye must be positive integers');
	    }
	    
	    var one = Big ? new type.BigNumber(1) : 1;
	    var defaultValue = Big ? new Big(0) : 0;
	    var size = [rows, cols];
	    
	    // check we need to return a matrix
	    if (format) {
	      // get matrix storage constructor
	      var F = type.Matrix.storage(format);
	      // create diagonal matrix (use optimized implementation for storage format)
	      return F.diagonal(size, one, 0, defaultValue);
	    }
	    
	    // create and resize array
	    var res = array.resize([], size, defaultValue);
	    // fill in ones on the diagonal
	    var minimum = rows < cols ? rows : cols;
	    // fill diagonal
	    for (var d = 0; d < minimum; d++) {
	      res[d][d] = one;
	    }
	    return res;
	  }
	}
	
	exports.name = 'eye';
	exports.factory = factory;


/***/ }),
/* 136 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var extend = __webpack_require__(55).extend;
	var array = __webpack_require__(91);
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  var matrix = load(__webpack_require__(104));
	  var addScalar = load(__webpack_require__(105));
	  var multiplyScalar = load(__webpack_require__(132));
	  var equalScalar = load(__webpack_require__(100));
	
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm14 = load(__webpack_require__(110));
	  
	  var DenseMatrix = type.DenseMatrix;
	  var SparseMatrix = type.SparseMatrix;
	
	  /**
	   * Multiply two or more values, `x * y`.
	   * For matrices, the matrix product is calculated.
	   *
	   * Syntax:
	   *
	   *    math.multiply(x, y)
	   *    math.multiply(x, y, z, ...)
	   *
	   * Examples:
	   *
	   *    math.multiply(4, 5.2);        // returns number 20.8
	   *    math.multiply(2, 3, 4);       // returns number 24
	   *
	   *    var a = math.complex(2, 3);
	   *    var b = math.complex(4, 1);
	   *    math.multiply(a, b);          // returns Complex 5 + 14i
	   *
	   *    var c = [[1, 2], [4, 3]];
	   *    var d = [[1, 2, 3], [3, -4, 7]];
	   *    math.multiply(c, d);          // returns Array [[7, -6, 17], [13, -4, 33]]
	   *
	   *    var e = math.unit('2.1 km');
	   *    math.multiply(3, e);          // returns Unit 6.3 km
	   *
	   * See also:
	   *
	   *    divide, prod, cross, dot
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First value to multiply
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second value to multiply
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} Multiplication of `x` and `y`
	   */
	  var multiply = typed('multiply', extend({
	    // we extend the signatures of multiplyScalar with signatures dealing with matrices
	
	    'Array, Array': function (x, y) {
	      // check dimensions
	      _validateMatrixDimensions(array.size(x), array.size(y));
	
	      // use dense matrix implementation
	      var m = multiply(matrix(x), matrix(y));
	      // return array or scalar
	      return (m && m.isMatrix === true) ? m.valueOf() : m;
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // dimensions
	      var xsize = x.size();
	      var ysize = y.size();
	
	      // check dimensions
	      _validateMatrixDimensions(xsize, ysize);
	
	      // process dimensions
	      if (xsize.length === 1) {
	        // process y dimensions
	        if (ysize.length === 1) {
	          // Vector * Vector
	          return _multiplyVectorVector(x, y, xsize[0]);
	        }
	        // Vector * Matrix
	        return _multiplyVectorMatrix(x, y);
	      }
	      // process y dimensions
	      if (ysize.length === 1) {
	        // Matrix * Vector
	        return _multiplyMatrixVector(x, y);
	      }
	      // Matrix * Matrix
	      return _multiplyMatrixMatrix(x, y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use Matrix * Matrix implementation
	      return multiply(x, matrix(y));
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use Matrix * Matrix implementation
	      return multiply(matrix(x, y.storage()), y);
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      
	      // process storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, multiplyScalar, false);
	          break;
	        case 'dense':
	          c = algorithm14(x, y, multiplyScalar, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, multiplyScalar, true);
	          break;
	        case 'dense':
	          c = algorithm14(y, x, multiplyScalar, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
	    },
	
	    'any, any': multiplyScalar,
	
	    'any, any, ...any': function (x, y, rest) {
	      var result = multiply(x, y);
	
	      for (var i = 0; i < rest.length; i++) {
	        result = multiply(result, rest[i]);
	      }
	
	      return result;
	    }
	  }, multiplyScalar.signatures));
	
	  var _validateMatrixDimensions = function (size1, size2) {
	    // check left operand dimensions
	    switch (size1.length) {
	      case 1:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Vector x Vector
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vectors must have the same length');
	            }
	            break;
	          case 2:
	            // Vector x Matrix
	            if (size1[0] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Vector length (' + size1[0] + ') must match Matrix rows (' + size2[0] + ')');
	            }
	            break;
	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }
	        break;
	      case 2:
	        // check size2
	        switch (size2.length) {
	          case 1:
	            // Matrix x Vector
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix columns (' + size1[1] + ') must match Vector length (' + size2[0] + ')');
	            }
	            break;
	          case 2:
	            // Matrix x Matrix
	            if (size1[1] !== size2[0]) {
	              // throw error
	              throw new RangeError('Dimension mismatch in multiplication. Matrix A columns (' + size1[1] + ') must match Matrix B rows (' + size2[0] + ')');
	            }
	            break;
	          default:
	            throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix B has ' + size2.length + ' dimensions)');
	        }
	        break;
	      default:
	        throw new Error('Can only multiply a 1 or 2 dimensional matrix (Matrix A has ' + size1.length + ' dimensions)');
	    }
	  };
	
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (N)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {number}             Scalar value
	   */
	  var _multiplyVectorVector = function (a, b, n) {
	    // check empty vector
	    if (n === 0)
	      throw new Error('Cannot multiply two empty vectors');
	
	    // a dense
	    var adata = a._data;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	
	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	
	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }
	    
	    // result (do not initialize it with zero)
	    var c = mf(adata[0], bdata[0]);
	    // loop data
	    for (var i = 1; i < n; i++) {
	      // multiply and accumulate
	      c = af(c, mf(adata[i], bdata[i]));
	    }
	    return c;
	  };
	
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Matrix         (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */
	  var _multiplyVectorMatrix = function (a, b) {
	    // process storage
	    switch (b.storage()) {
	      case 'dense':
	        return _multiplyVectorDenseMatrix(a, b);
	    }
	    throw new Error('Not implemented');
	  };
	
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Dense Vector   (M)
	   * @param {Matrix} b            Dense Matrix   (MxN)
	   *
	   * @return {Matrix}             Dense Vector   (N)
	   */
	  var _multiplyVectorDenseMatrix = function (a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // rows & columns
	    var alength = asize[0];
	    var bcolumns = bsize[1];
	
	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	
	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }
	
	    // result
	    var c = [];
	
	    // loop matrix columns
	    for (var j = 0; j < bcolumns; j++) {
	      // sum (do not initialize it with zero)
	      var sum = mf(adata[0], bdata[0][j]);      
	      // loop vector
	      for (var i = 1; i < alength; i++) {
	        // multiply & accumulate
	        sum = af(sum, mf(adata[i], bdata[i][j]));
	      }
	      c[j] = sum;
	    }
	
	    // return matrix
	    return new DenseMatrix({
	      data: c,
	      size: [bcolumns],
	      datatype: dt
	    });
	  };
	
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Dense Vector   (N)
	   *
	   * @return {Matrix}             Dense Vector   (M)
	   */
	  var _multiplyMatrixVector = function (a, b) {
	    // process storage
	    switch (a.storage()) {
	      case 'dense':
	        return _multiplyDenseMatrixVector(a, b);
	      case 'sparse':
	        return _multiplySparseMatrixVector(a, b);
	    }
	  };
	
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            Matrix         (MxN)
	   * @param {Matrix} b            Matrix         (NxC)
	   *
	   * @return {Matrix}             Matrix         (MxC)
	   */
	  var _multiplyMatrixMatrix = function (a, b) {
	    // process storage
	    switch (a.storage()) {
	      case 'dense':
	        // process storage
	        switch (b.storage()) {
	          case 'dense':
	            return _multiplyDenseMatrixDenseMatrix(a, b);
	          case 'sparse':
	            return _multiplyDenseMatrixSparseMatrix(a, b);
	        }
	        break;
	      case 'sparse':
	        // process storage
	        switch (b.storage()) {
	          case 'dense':
	            return _multiplySparseMatrixDenseMatrix(a, b);
	          case 'sparse':
	            return _multiplySparseMatrixSparseMatrix(a, b);
	        }
	        break;
	    }
	  };
	
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix  (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             Dense Vector (M) 
	   */ 
	  var _multiplyDenseMatrixVector = function (a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = asize[0];
	    var acolumns = asize[1];
	
	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	
	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }
	
	    // result
	    var c = [];
	
	    // loop matrix a rows
	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i];
	      // sum (do not initialize it with zero)
	      var sum = mf(row[0], bdata[0]);
	      // loop matrix a columns
	      for (var j = 1; j < acolumns; j++) {
	        // multiply & accumulate
	        sum = af(sum, mf(row[j], bdata[j]));
	      }
	      c[i] = sum;
	    }
	
	    // return matrix
	    return new DenseMatrix({
	      data: c,
	      size: [arows],
	      datatype: dt
	    });
	  };
	
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            DenseMatrix    (NxC)
	   *
	   * @return {Matrix}             DenseMatrix    (MxC)
	   */
	  var _multiplyDenseMatrixDenseMatrix = function (a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b dense
	    var bdata = b._data;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = asize[0];
	    var acolumns = asize[1];
	    var bcolumns = bsize[1];
	
	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	
	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }
	    
	    // result
	    var c = [];
	
	    // loop matrix a rows
	    for (var i = 0; i < arows; i++) {
	      // current row
	      var row = adata[i];
	      // initialize row array
	      c[i] = [];
	      // loop matrix b columns
	      for (var j = 0; j < bcolumns; j++) {
	        // sum (avoid initializing sum to zero)
	        var sum = mf(row[0], bdata[0][j]);
	        // loop matrix a columns
	        for (var x = 1; x < acolumns; x++) {
	          // multiply & accumulate
	          sum = af(sum, mf(row[x], bdata[x][j]));
	        }
	        c[i][j] = sum;
	      }
	    }
	
	    // return matrix
	    return new DenseMatrix({
	      data: c,
	      size: [arows, bcolumns],
	      datatype: dt
	    });
	  };
	
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            DenseMatrix    (MxN)
	   * @param {Matrix} b            SparseMatrix   (NxC)
	   *
	   * @return {Matrix}             SparseMatrix   (MxC)
	   */
	  var _multiplyDenseMatrixSparseMatrix = function (a, b) {
	    // a dense
	    var adata = a._data;
	    var asize = a._size;
	    var adt = a._datatype;
	    // b sparse
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;
	    // validate b matrix
	    if (!bvalues)
	      throw new Error('Cannot multiply Dense Matrix times Pattern only Matrix');
	    // rows & columns
	    var arows = asize[0];
	    var bcolumns = bsize[1];
	    
	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	    // equalScalar signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	
	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }
	
	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = new SparseMatrix({
	      values : cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });
	
	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // indeces in column jb
	      var kb0 = bptr[jb];
	      var kb1 = bptr[jb + 1];
	      // do not process column jb if no data exists
	      if (kb1 > kb0) {
	        // last row mark processed
	        var last = 0;
	        // loop a rows
	        for (var i = 0; i < arows; i++) {
	          // column mark
	          var mark = i + 1;
	          // C[i, jb]
	          var cij;
	          // values in b column j
	          for (var kb = kb0; kb < kb1; kb++) {
	            // row
	            var ib = bindex[kb];
	            // check value has been initialized
	            if (last !== mark) {
	              // first value in column jb
	              cij = mf(adata[i][ib], bvalues[kb]);
	              // update mark
	              last = mark;
	            }
	            else {
	              // accumulate value
	              cij = af(cij, mf(adata[i][ib], bvalues[kb]));
	            }
	          }
	          // check column has been processed and value != 0
	          if (last === mark && !eq(cij, zero)) {
	            // push row & value
	            cindex.push(i);
	            cvalues.push(cij);
	          }
	        }
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;
	
	    // return sparse matrix
	    return c;
	  };
	
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix    (MxN)
	   * @param {Matrix} b            Dense Vector (N)
	   *
	   * @return {Matrix}             SparseMatrix    (M, 1) 
	   */
	  var _multiplySparseMatrixVector = function (a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // validate a matrix
	    if (!avalues)
	      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = a._size[0];
	    var brows = b._size[0];
	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    
	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	    // equalScalar signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	
	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }
	
	    // workspace
	    var x = [];
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];
	
	    // update ptr
	    cptr[0] = 0;
	    // rows in b
	    for (var ib = 0; ib < brows; ib++) {
	      // b[ib]
	      var vbi = bdata[ib];
	      // check b[ib] != 0, avoid loops
	      if (!eq(vbi, zero)) {
	        // A values & index in ib column
	        for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	          // a row
	          var ia = aindex[ka];
	          // check value exists in current j
	          if (!w[ia]) {
	            // ia is new entry in j
	            w[ia] = true;
	            // add i to pattern of C
	            cindex.push(ia);
	            // x(ia) = A
	            x[ia] = mf(vbi, avalues[ka]);
	          }
	          else {
	            // i exists in C already
	            x[ia] = af(x[ia], mf(vbi, avalues[ka]));
	          }
	        }
	      }
	    }
	    // copy values from x to column jb of c
	    for (var p1 = cindex.length, p = 0; p < p1; p++) {
	      // row
	      var ic = cindex[p];
	      // copy value
	      cvalues[p] = x[ic];
	    }
	    // update ptr
	    cptr[1] = cindex.length;
	
	    // return sparse matrix
	    return new SparseMatrix({
	      values : cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, 1],
	      datatype: dt
	    });
	  };
	
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            DenseMatrix       (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */
	  var _multiplySparseMatrixDenseMatrix = function (a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // validate a matrix
	    if (!avalues)
	      throw new Error('Cannot multiply Pattern only Matrix times Dense Matrix');
	    // b dense
	    var bdata = b._data;
	    var bdt = b._datatype;
	    // rows & columns
	    var arows = a._size[0];
	    var brows = b._size[0];
	    var bcolumns = b._size[1];
	
	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	    // equalScalar signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	
	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	    }
	
	    // result
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = new SparseMatrix({
	      values : cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });
	
	    // workspace
	    var x = [];
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];
	
	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // mark in workspace for current column
	      var mark = jb + 1;
	      // rows in jb
	      for (var ib = 0; ib < brows; ib++) {
	        // b[ib, jb]
	        var vbij = bdata[ib][jb];
	        // check b[ib, jb] != 0, avoid loops
	        if (!eq(vbij, zero)) {
	          // A values & index in ib column
	          for (var ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // a row
	            var ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	              // x(ia) = A
	              x[ia] = mf(vbij, avalues[ka]);
	            }
	            else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(vbij, avalues[ka]));
	            }
	          }
	        }
	      }
	      // copy values from x to column jb of c
	      for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	        // row
	        var ic = cindex[p];
	        // copy value
	        cvalues[p] = x[ic];
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;
	
	    // return sparse matrix
	    return c;
	  };
	
	  /**
	   * C = A * B
	   *
	   * @param {Matrix} a            SparseMatrix      (MxN)
	   * @param {Matrix} b            SparseMatrix      (NxC)
	   *
	   * @return {Matrix}             SparseMatrix      (MxC)
	   */
	  var _multiplySparseMatrixSparseMatrix = function (a, b) {
	    // a sparse
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var adt = a._datatype;
	    // b sparse
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bdt = b._datatype;
	    
	    // rows & columns
	    var arows = a._size[0];
	    var bcolumns = b._size[1];
	    // flag indicating both matrices (a & b) contain data
	    var values = avalues && bvalues;
	
	    // datatype
	    var dt;
	    // addScalar signature to use
	    var af = addScalar;
	    // multiplyScalar signature to use
	    var mf = multiplyScalar;
	
	    // process data types
	    if (adt && bdt && adt === bdt && typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signatures that matches (dt, dt)
	      af = typed.find(addScalar, [dt, dt]);
	      mf = typed.find(multiplyScalar, [dt, dt]);
	    }
	    
	    // result
	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // c matrix
	    var c = new SparseMatrix({
	      values : cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [arows, bcolumns],
	      datatype: dt
	    });
	
	    // workspace
	    var x = values ? [] : undefined;
	    // vector with marks indicating a value x[i] exists in a given column
	    var w = [];
	    // variables
	    var ka, ka0, ka1, kb, kb0, kb1, ia, ib;
	    // loop b columns
	    for (var jb = 0; jb < bcolumns; jb++) {
	      // update ptr
	      cptr[jb] = cindex.length;
	      // mark in workspace for current column
	      var mark = jb + 1;
	      // B values & index in j
	      for (kb0 = bptr[jb], kb1 = bptr[jb + 1], kb = kb0; kb < kb1; kb++) {
	        // b row
	        ib = bindex[kb];
	        // check we need to process values
	        if (values) {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	              // x(ia) = A
	              x[ia] = mf(bvalues[kb], avalues[ka]);
	            }
	            else {
	              // i exists in C already
	              x[ia] = af(x[ia], mf(bvalues[kb], avalues[ka]));
	            }
	          }
	        }
	        else {
	          // loop values in a[:,ib]
	          for (ka0 = aptr[ib], ka1 = aptr[ib + 1], ka = ka0; ka < ka1; ka++) {
	            // row
	            ia = aindex[ka];
	            // check value exists in current j
	            if (w[ia] !== mark) {
	              // ia is new entry in j
	              w[ia] = mark;
	              // add i to pattern of C
	              cindex.push(ia);
	            }
	          }
	        }
	      }
	      // check we need to process matrix values (pattern matrix)
	      if (values) {
	        // copy values from x to column jb of c
	        for (var p0 = cptr[jb], p1 = cindex.length, p = p0; p < p1; p++) {
	          // row
	          var ic = cindex[p];
	          // copy value
	          cvalues[p] = x[ic];
	        }
	      }
	    }
	    // update ptr
	    cptr[bcolumns] = cindex.length;
	
	    // return sparse matrix
	    return c;
	  };
	
	  multiply.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['multiply'] + '${args[1]}\\right)'
	  };
	
	  return multiply;
	}
	
	exports.name = 'multiply';
	exports.factory = factory;


/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var equalScalar = load(__webpack_require__(100));
	
	  var SparseMatrix = type.SparseMatrix;
	
	  /**
	   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b). 
	   * Callback function invoked NZ times (number of nonzero items in S).
	   *
	   *
	   *          ┌  f(Sij, b)  ; S(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  0          ; otherwise
	   *
	   *
	   * @param {Matrix}   s                 The SparseMatrix instance (S)
	   * @param {Scalar}   b                 The Scalar value
	   * @param {Function} callback          The f(Aij,b) operation to invoke
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813
	   */
	  var algorithm11 = function (s, b, callback, inverse) {
	    // sparse matrix arrays
	    var avalues = s._values;
	    var aindex = s._index;
	    var aptr = s._ptr;
	    var asize = s._size;
	    var adt = s._datatype;
	
	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues)
	      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');
	
	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	
	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string') {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // convert b to the same datatype
	      b = typed.convert(b, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	
	    // result arrays
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // initialize ptr
	      cptr[j] = cindex.length;
	      // values in j
	      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = aindex[k];
	        // invoke callback
	        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);
	        // check value is zero
	        if (!eq(v, zero)) {
	          // push index & value
	          cindex.push(i);
	          cvalues.push(v);
	        }
	      }
	    }
	    // update ptr
	    cptr[columns] = cindex.length;
	
	    // return sparse matrix
	    return c;
	  };
	
	  return algorithm11;
	}
	
	exports.name = 'algorithm11';
	exports.factory = factory;


/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the absolute value of a number. For matrices, the function is
	   * evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.abs(x)
	   *
	   * Examples:
	   *
	   *    math.abs(3.5);                // returns number 3.5
	   *    math.abs(-4.2);               // returns number 4.2
	   *
	   *    math.abs([3, -5, -1, 0, 2]);  // returns Array [3, 5, 1, 0, 2]
	   *
	   * See also:
	   *
	   *    sign
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            A number or matrix for which to get the absolute value
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
	   *            Absolute value of `x`
	   */
	  var abs = typed('abs', {
	    'number': Math.abs,
	
	    'Complex': function (x) {
	      return x.abs();
	    },
	
	    'BigNumber': function (x) {
	      return x.abs();
	    },
	
	    'Fraction': function (x) {
	      return x.abs();
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since abs(0) = 0
	      return deepMap(x, abs, true);
	    },
	
	    'Unit': function(x) {
	      return x.abs();
	    }
	  });
	
	  abs.toTex = {1: '\\left|${args[0]}\\right|'};
	
	  return abs;
	}
	
	exports.name = 'abs';
	exports.factory = factory;


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Round a value towards zero.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.fix(x)
	   *
	   * Examples:
	   *
	   *    math.fix(3.2);                // returns number 3
	   *    math.fix(3.8);                // returns number 3
	   *    math.fix(-4.2);               // returns number -4
	   *    math.fix(-4.7);               // returns number -4
	   *
	   *    var c = math.complex(3.2, -2.7);
	   *    math.fix(c);                  // returns Complex 3 - 2i
	   *
	   *    math.fix([3.2, 3.8, -4.7]);   // returns Array [3, 3, -4]
	   *
	   * See also:
	   *
	   *    ceil, floor, round
	   *
	   * @param {number | BigNumber | Fraction | Complex | Array | Matrix} x Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix}            Rounded value
	   */
	  var fix = typed('fix', {
	    'number': function (x) {
	      return (x > 0) ? Math.floor(x) : Math.ceil(x);
	    },
	
	    'Complex': function (x) {
	      return new type.Complex(
	          (x.re > 0) ? Math.floor(x.re) : Math.ceil(x.re),
	          (x.im > 0) ? Math.floor(x.im) : Math.ceil(x.im)
	      );
	    },
	
	    'BigNumber': function (x) {
	      return x.isNegative() ? x.ceil() : x.floor();
	    },
	
	    'Fraction': function (x) {
	      return x.s < 0 ? x.ceil() : x.floor();
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since fix(0) = 0
	      return deepMap(x, fix, true);
	    }
	  });
	
	  fix.toTex = {1: '\\mathrm{${name}}\\left(${args[0]}\\right)'};
	
	  return fix;
	}
	
	exports.name = 'fix';
	exports.factory = factory;


/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(104));
	  var equalScalar = load(__webpack_require__(100));
	
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm07 = load(__webpack_require__(114));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  var latex = __webpack_require__(83);
	
	  /**
	   * Test whether two values are equal.
	   *
	   * The function tests whether the relative difference between x and y is
	   * smaller than the configured epsilon. The function cannot be used to
	   * compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * In case of complex numbers, x.re must equal y.re, and x.im must equal y.im.
	   *
	   * Values `null` and `undefined` are compared strictly, thus `null` is only
	   * equal to `null` and nothing else, and `undefined` is only equal to
	   * `undefined` and nothing else.
	   *
	   * Syntax:
	   *
	   *    math.equal(x, y)
	   *
	   * Examples:
	   *
	   *    math.equal(2 + 2, 3);         // returns false
	   *    math.equal(2 + 2, 4);         // returns true
	   *
	   *    var a = math.unit('50 cm');
	   *    var b = math.unit('5 m');
	   *    math.equal(a, b);             // returns true
	   *
	   *    var c = [2, 5, 1];
	   *    var d = [2, 7, 1];
	   *
	   *    math.equal(c, d);             // returns [true, false, true]
	   *    math.deepEqual(c, d);         // returns false
	   *
	   *    math.equal(0, null);          // returns false
	   *
	   * See also:
	   *
	   *    unequal, smaller, smallerEq, larger, largerEq, compare, deepEqual
	   *
	   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | boolean | Complex | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the compared values are equal, else returns false
	   */
	  var equal = typed('equal', {
	    
	    'any, any': function (x, y) {
	      // strict equality for null and undefined?
	      if (x === null) { return y === null; }
	      if (y === null) { return x === null; }
	      if (x === undefined) { return y === undefined; }
	      if (y === undefined) { return x === undefined; }
	
	      return equalScalar(x, y);
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, equalScalar);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, equalScalar, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, equalScalar, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, equalScalar);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	    
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return equal(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return equal(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return equal(x, matrix(y));
	    },
	    
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, equalScalar, false);
	          break;
	        default:
	          c = algorithm14(x, y, equalScalar, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, equalScalar, true);
	          break;
	        default:
	          c = algorithm14(y, x, equalScalar, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, equalScalar, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, equalScalar, true).valueOf();
	    }
	  });
	
	  equal.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['equal'] + '${args[1]}\\right)'
	  };
	
	  return equal;
	}
	
	exports.name = 'equal';
	exports.factory = factory;


/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	var number = __webpack_require__(58);
	
	function factory (type, config, load, typed) {
	  /**
	   * Test whether a value is an numeric value.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNumeric(x)
	   *
	   * Examples:
	   *
	   *    math.isNumeric(2);                     // returns true
	   *    math.isNumeric(0);                     // returns true
	   *    math.isNumeric(math.bignumber(500));   // returns true
	   *    math.isNumeric(math.fraction(4));      // returns true
	   *    math.isNumeric(math.complex('2-4i');   // returns false
	   *    math.isNumeric('3');                   // returns false
	   *    math.isNumeric([2.3, 'foo', false]);   // returns [true, false, true]
	   *
	   * See also:
	   *
	   *    isZero, isPositive, isNegative, isInteger
	   *
	   * @param {*} x       Value to be tested
	   * @return {boolean}  Returns true when `x` is a `number`, `BigNumber`,
	   *                    `Fraction`, or `boolean`. Returns false for other types.
	   *                    Throws an error in case of unknown types.
	   */
	  var isNumeric = typed('isNumeric', {
	    'number | BigNumber | Fraction | boolean': function () {
	      return true;
	    },
	
	    'Complex | Unit | string': function () {
	      return false;
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, isNumeric);
	    }
	  });
	
	  return isNumeric;
	}
	
	exports.name = 'isNumeric';
	exports.factory = factory;


/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var string = __webpack_require__(74);
	
	function factory (type, config, load, typed) {
	  /**
	   * Format a value of any type into a string.
	   *
	   * Syntax:
	   *
	   *    math.format(value)
	   *    math.format(value, options)
	   *    math.format(value, precision)
	   *    math.format(value, callback)
	   *
	   * Where:
	   *
	   *  - `value: *`
	   *    The value to be formatted
	   *  - `options: Object`
	   *    An object with formatting options. Available options:
	   *    - `notation: string`
	   *      Number notation. Choose from:
	   *      - 'fixed'
	   *        Always use regular number notation.
	   *        For example '123.40' and '14000000'
	   *      - 'exponential'
	   *        Always use exponential notation.
	   *        For example '1.234e+2' and '1.4e+7'
	   *      - 'engineering'
	   *        Always use engineering notation.
	   *        For example '123.4e+0' and '14.0e+6'
	   *      - 'auto' (default)
	   *        Regular number notation for numbers having an absolute value between
	   *        `lower` and `upper` bounds, and uses exponential notation elsewhere.
	   *        Lower bound is included, upper bound is excluded.
	   *        For example '123.4' and '1.4e7'.
	   *    - `precision: number`
	   *      A number between 0 and 16 to round the digits of the number. In case
	   *      of notations 'exponential' and 'auto', `precision` defines the total
	   *      number of significant digits returned and is undefined by default.
	   *      In case of notation 'fixed', `precision` defines the number of
	   *      significant digits after the decimal point, and is 0 by default.
	   *    - `exponential: Object`
	   *      An object containing two parameters, {number} lower and {number} upper,
	   *      used by notation 'auto' to determine when to return exponential
	   *      notation. Default values are `lower=1e-3` and `upper=1e5`. Only
	   *      applicable for notation `auto`.
	   *    - `fraction: string`. Available values: 'ratio' (default) or 'decimal'.
	   *      For example `format(fraction(1, 3))` will output '1/3' when 'ratio' is
	   *      configured, and will output `0.(3)` when 'decimal' is configured.
	   * - `callback: function`
	   *   A custom formatting function, invoked for all numeric elements in `value`,
	   *   for example all elements of a matrix, or the real and imaginary
	   *   parts of a complex number. This callback can be used to override the
	   *   built-in numeric notation with any type of formatting. Function `callback`
	   *   is called with `value` as parameter and must return a string.
	   *
	   * When `value` is an Object:
	   *
	   * - When the object contains a property `format` being a function, this function
	   *   is invoked as `value.format(options)` and the result is returned.
	   * - When the object has its own `toString` method, this method is invoked
	   *   and the result is returned.
	   * - In other cases the function will loop over all object properties and
	   *   return JSON object notation like '{"a": 2, "b": 3}'.
	   *
	   * When value is a function:
	   *
	   * - When the function has a property `syntax`, it returns this
	   *   syntax description.
	   * - In other cases, a string `'function'` is returned.
	   *
	   * Examples:
	   *
	   *    math.format(6.4);                                        // returns '6.4'
	   *    math.format(1240000);                                    // returns '1.24e6'
	   *    math.format(1/3);                                        // returns '0.3333333333333333'
	   *    math.format(1/3, 3);                                     // returns '0.333'
	   *    math.format(21385, 2);                                   // returns '21000'
	   *    math.format(12.071, {notation: 'fixed'});                // returns '12'
	   *    math.format(2.3,    {notation: 'fixed', precision: 2});  // returns '2.30'
	   *    math.format(52.8,   {notation: 'exponential'});          // returns '5.28e+1'
	   *    math.format(12400,  {notation: 'engineering'});         // returns '12.400e+3'
	   *
	   *    function formatCurrency(value) {
	   *      // return currency notation with two digits:
	   *      return '$' + value.toFixed(2);
	   *
	   *      // you could also use math.format inside the callback:
	   *      // return '$' + math.format(value, {notation: 'fixed', precision: 2});
	   *    }
	   *    math.format([2.1, 3, 0.016], formatCurrency};            // returns '[$2.10, $3.00, $0.02]'
	   *
	   * See also:
	   *
	   *    print
	   *
	   * @param {*} value                               Value to be stringified
	   * @param {Object | Function | number} [options]  Formatting options
	   * @return {string} The formatted value
	   */
	  var format = typed('format', {
	    'any': string.format,
	    'any, Object | function | number': string.format
	  });
	
	  format.toTex = undefined; // use default template
	
	  return format;
	}
	
	exports.name = 'format';
	exports.factory = factory;


/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var types = __webpack_require__(92);
	
	function factory (type, config, load, typed) {
	  /**
	   * Determine the type of a variable.
	   *
	   * Function `typeof` recognizes the following types of objects:
	   *
	   * Object                 | Returns       | Example
	   * ---------------------- | ------------- | ------------------------------------------
	   * null                   | `'null'`      | `math.typeof(null)`
	   * number                 | `'number'`    | `math.typeof(3.5)`
	   * boolean                | `'boolean'`   | `math.typeof (true)`
	   * string                 | `'string'`    | `math.typeof ('hello world')`
	   * Array                  | `'Array'`     | `math.typeof ([1, 2, 3])`
	   * Date                   | `'Date'`      | `math.typeof (new Date())`
	   * Function               | `'Function'`  | `math.typeof (function () {})`
	   * Object                 | `'Object'`    | `math.typeof ({a: 2, b: 3})`
	   * RegExp                 | `'RegExp'`    | `math.typeof (/a regexp/)`
	   * undefined              | `'undefined'` | `math.typeof(undefined)`
	   * math.type.BigNumber    | `'BigNumber'` | `math.typeof (math.bignumber('2.3e500'))`
	   * math.type.Chain        | `'Chain'`     | `math.typeof (math.chain(2))`
	   * math.type.Complex      | `'Complex'`   | `math.typeof (math.complex(2, 3))`
	   * math.type.Fraction     | `'Fraction'`  | `math.typeof (math.fraction(1, 3))`
	   * math.type.Help         | `'Help'`      | `math.typeof (math.help('sqrt'))`
	   * math.type.Index        | `'Index'`     | `math.typeof (math.index(1, 3))`
	   * math.type.Matrix       | `'Matrix'`    | `math.typeof (math.matrix([[1,2], [3, 4]]))`
	   * math.type.Range        | `'Range'`     | `math.typeof (math.range(0, 10))`
	   * math.type.Unit         | `'Unit'`      | `math.typeof (math.unit('45 deg'))`
	   *
	   * Syntax:
	   *
	   *    math.typeof(x)
	   *
	   * Examples:
	   *
	   *    math.typeof(3.5);                     // returns 'number'
	   *    math.typeof(math.complex('2-4i'));    // returns 'Complex'
	   *    math.typeof(math.unit('45 deg'));     // returns 'Unit'
	   *    math.typeof('hello world');           // returns 'string'
	   *
	   * @param {*} x     The variable for which to test the type.
	   * @return {string} Returns the name of the type. Primitive types are lower case,
	   *                  non-primitive types are upper-camel-case.
	   *                  For example 'number', 'string', 'Array', 'Date'.
	   */
	  var _typeof = typed('_typeof', {
	    'any': function (x) {
	      // JavaScript types
	      var t = types.type(x);
	
	      // math.js types
	      if (t === 'Object') {
	        if (x.isBigNumber === true) return 'BigNumber';
	        if (x.isComplex === true)   return 'Complex';
	        if (x.isFraction === true)  return 'Fraction';
	        if (x.isMatrix === true)    return 'Matrix';
	        if (x.isUnit === true)      return 'Unit';
	        if (x.isIndex === true)     return 'Index';
	        if (x.isRange === true)     return 'Range';
	        if (x.isChain === true)     return 'Chain';
	        if (x.isHelp === true)      return 'Help';
	      }
	
	      return t;
	    }
	  });
	
	  _typeof.toTex = undefined; // use default template
	
	  return _typeof;
	}
	
	exports.name = 'typeof';
	exports.factory = factory;


/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Create a unit. Depending on the passed arguments, the function
	   * will create and return a new math.type.Unit object.
	   * When a matrix is provided, all elements will be converted to units.
	   *
	   * Syntax:
	   *
	   *     math.unit(unit : string)
	   *     math.unit(value : number, unit : string)
	   *
	   * Examples:
	   *
	   *    var a = math.unit(5, 'cm');    // returns Unit 50 mm
	   *    var b = math.unit('23 kg');    // returns Unit 23 kg
	   *    a.to('m');                     // returns Unit 0.05 m
	   *
	   * See also:
	   *
	   *    bignumber, boolean, complex, index, matrix, number, string, createUnit
	   *
	   * @param {* | Array | Matrix} args   A number and unit.
	   * @return {Unit | Array | Matrix}    The created unit
	   */
	
	  var unit = typed('unit', {
	    'Unit': function (x) {
	      return x.clone();
	    },
	
	    'string': function (x) {
	      if (type.Unit.isValuelessUnit(x)) {
	        return new type.Unit(null, x); // a pure unit
	      }
	
	      return type.Unit.parse(x); // a unit with value, like '5cm'
	    },
	
	    'number | BigNumber | Fraction | Complex, string': function (value, unit) {
	      return new type.Unit(value, unit);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, unit);
	    }
	  });
	
	  unit.toTex = {
	    1: '\\left(${args[0]}\\right)',
	    2: '\\left(\\left(${args[0]}\\right)${args[1]}\\right)'
	  };
	
	  return unit;
	}
	
	exports.name = 'unit';
	exports.factory = factory;


/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Create a user-defined unit and register it with the Unit type.
	   *
	   * Syntax:
	   *
	   *     math.createUnit({
	   *       baseUnit1: {
	   *         aliases: [string, ...]
	   *         prefixes: object
	   *       },
	   *       unit2: {
	   *         definition: string,
	   *         aliases: [string, ...]
	   *         prefixes: object,
	   *         offset: number
	   *       },
	   *       unit3: string    // Shortcut
	   *     })
	   *
	   *     // Another shortcut:
	   *     math.createUnit(string, unit : string, [object])
	   *
	   * Examples: 
	   *
	   *     math.createUnit('foo');
	   *     math.createUnit('knot', {definition: '0.514444444 m/s', aliases: ['knots', 'kt', 'kts']});
	   *     math.createUnit('mph', '1 mile/hour');
	   *
	   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'
	   * @param {string, Unit} definition      Definition of the unit in terms of existing units. For example, '0.514444444 m / s'.
	   * @param {Object} options   (optional) An object containing any of the following properties:
	   *     prefixes {string} "none", "short", "long", "binary_short", or "binary_long". The default is "none".
	   *     aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']
	   *     offset {Numeric} An offset to apply when converting from the unit. For example, the offset for celsius is 273.15. Default is 0.
	   *
	   * See also:
	   *
	   *     unit
	   *
	   * @return {Unit} The new unit
	   */
	  var createUnit = typed('createUnit', {
	
	    // General function signature. First parameter is an object where each property is the definition of a new unit. The object keys are the unit names and the values are the definitions. The values can be objects, strings, or Units. If a property is an empty object or an empty string, a new base unit is created. The second parameter is the options.
	    'Object, Object': function(obj, options) {
	      return type.Unit.createUnit(obj, options);
	    },
	
	    // Same as above but without the options.
	    'Object': function(obj) {
	      return type.Unit.createUnit(obj, {});
	    },
	
	    // Shortcut method for creating one unit.
	    'string, Unit | string | Object, Object': function (name, def, options) {
	      var obj = {};
	      obj[name] = def;
	      return type.Unit.createUnit(obj, options);
	    },
	
	    // Same as above but without the options.
	    'string, Unit | string | Object': function (name, def) {
	      var obj = {};
	      obj[name] = def;
	      return type.Unit.createUnit(obj, {});
	    },
	
	    // Without a definition, creates a base unit.
	    'string': function (name) {
	      var obj = {};
	      obj[name] = {};
	      return type.Unit.createUnit(obj, {});
	    },
	  });
	
	  return createUnit;
	}
	
	exports.name = 'createUnit';
	exports.factory = factory;


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Split a unit in an array of units whose sum is equal to the original unit.
	   *
	   * Syntax:
	   *
	   *     splitUnit(unit: Unit, parts: Array.<Unit>)
	   *
	   * Example:
	   *
	   *     math.splitUnit(new Unit(1, 'm'), ['feet', 'inch']);
	   *     // [ 3 feet, 3.3700787401575 inch ]
	   *
	   * See also:
	   *
	   *     unit
	   *
	   * @param {Array} [parts] An array of strings or valueless units.
	   * @return {Array} An array of units.
	   */
	  var splitUnit = typed('splitUnit', {
	    'Unit, Array': function(unit, parts) {
	      return unit.splitUnit(parts);
	    }
	  });
	
	  return splitUnit;
	
	}
	
	exports.name = 'splitUnit';
	exports.factory = factory;


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

	var lazy = __webpack_require__(55).lazy;
	
	
	function factory (type, config, load, typed, math) {
	
	  // helper function to create a unit with a fixed prefix
	  function fixedUnit(str) {
	    var unit = type.Unit.parse(str);
	    unit.fixPrefix = true;
	    return unit;
	  }
	
	  // Source: http://www.wikiwand.com/en/Physical_constant
	
	  // Universal constants
	  lazy(math, 'speedOfLight',         function () {return fixedUnit('299792458 m s^-1')});
	  lazy(math, 'gravitationConstant',  function () {return fixedUnit('6.6738480e-11 m^3 kg^-1 s^-2')});
	  lazy(math, 'planckConstant',       function () {return fixedUnit('6.626069311e-34 J s')});
	  lazy(math, 'reducedPlanckConstant',function () {return fixedUnit('1.05457172647e-34 J s')});
	
	  // Electromagnetic constants
	  lazy(math, 'magneticConstant',          function () {return fixedUnit('1.2566370614e-6 N A^-2')});
	  lazy(math, 'electricConstant',          function () {return fixedUnit('8.854187817e-12 F m^-1')});
	  lazy(math, 'vacuumImpedance',           function () {return fixedUnit('376.730313461 ohm')});
	  lazy(math, 'coulomb',                   function () {return fixedUnit('8.9875517873681764e9 N m^2 C^-2')});
	  lazy(math, 'elementaryCharge',          function () {return fixedUnit('1.60217656535e-19 C')});
	  lazy(math, 'bohrMagneton',              function () {return fixedUnit('9.2740096820e-24 J T^-1')});
	  lazy(math, 'conductanceQuantum',        function () {return fixedUnit('7.748091734625e-5 S')});
	  lazy(math, 'inverseConductanceQuantum', function () {return fixedUnit('12906.403721742 ohm')});
	  lazy(math, 'magneticFluxQuantum',       function () {return fixedUnit('2.06783375846e-15 Wb')});
	  lazy(math, 'nuclearMagneton',           function () {return fixedUnit('5.0507835311e-27 J T^-1')});
	  lazy(math, 'klitzing',                  function () {return fixedUnit('25812.807443484 ohm')});
	  //lazy(math, 'josephson',                 function () {return fixedUnit('4.8359787011e-14 Hz V^-1')});  // TODO: support for Hz needed
	
	  // Atomic and nuclear constants
	  lazy(math, 'bohrRadius',              function () {return fixedUnit('5.291772109217e-11 m')});
	  lazy(math, 'classicalElectronRadius', function () {return fixedUnit('2.817940326727e-15 m')});
	  lazy(math, 'electronMass',            function () {return fixedUnit('9.1093829140e-31 kg')});
	  lazy(math, 'fermiCoupling',           function () {return fixedUnit('1.1663645e-5 GeV^-2')});
	  lazy(math, 'fineStructure',           function () {return 7.297352569824e-3});
	  lazy(math, 'hartreeEnergy',           function () {return fixedUnit('4.3597443419e-18 J')});
	  lazy(math, 'protonMass',              function () {return fixedUnit('1.67262177774e-27 kg')});
	  lazy(math, 'deuteronMass',            function () {return fixedUnit('3.3435830926e-27 kg')});
	  lazy(math, 'neutronMass',             function () {return fixedUnit('1.6749271613e-27 kg')});
	  lazy(math, 'quantumOfCirculation',    function () {return fixedUnit('3.636947552024e-4 m^2 s^-1')});
	  lazy(math, 'rydberg',                 function () {return fixedUnit('10973731.56853955 m^-1')});
	  lazy(math, 'thomsonCrossSection',     function () {return fixedUnit('6.65245873413e-29 m^2')});
	  lazy(math, 'weakMixingAngle',         function () {return 0.222321});
	  lazy(math, 'efimovFactor',            function () {return 22.7});
	
	  // Physico-chemical constants
	  lazy(math, 'atomicMass',          function () {return fixedUnit('1.66053892173e-27 kg')});
	  lazy(math, 'avogadro',            function () {return fixedUnit('6.0221412927e23 mol^-1')});
	  lazy(math, 'boltzmann',           function () {return fixedUnit('1.380648813e-23 J K^-1')});
	  lazy(math, 'faraday',             function () {return fixedUnit('96485.336521 C mol^-1')});
	  lazy(math, 'firstRadiation',      function () {return fixedUnit('3.7417715317e-16 W m^2')});
	  // lazy(math, 'spectralRadiance',   function () {return fixedUnit('1.19104286953e-16 W m^2 sr^-1')}); // TODO spectralRadiance
	  lazy(math, 'loschmidt',           function () {return fixedUnit('2.686780524e25 m^-3')});
	  lazy(math, 'gasConstant',         function () {return fixedUnit('8.314462175 J K^-1 mol^-1')});
	  lazy(math, 'molarPlanckConstant', function () {return fixedUnit('3.990312717628e-10 J s mol^-1')});
	  lazy(math, 'molarVolume',         function () {return fixedUnit('2.241396820e-10 m^3 mol^-1')});
	  lazy(math, 'sackurTetrode',       function () {return -1.164870823});
	  lazy(math, 'secondRadiation',     function () {return fixedUnit('1.438777013e-2 m K')});
	  lazy(math, 'stefanBoltzmann',     function () {return fixedUnit('5.67037321e-8 W m^-2 K^-4')});
	  lazy(math, 'wienDisplacement',    function () {return fixedUnit('2.897772126e-3 m K')});
	
	  // Adopted values
	  lazy(math, 'molarMass',         function () {return fixedUnit('1e-3 kg mol^-1')});
	  lazy(math, 'molarMassC12',      function () {return fixedUnit('1.2e-2 kg mol^-1')});
	  lazy(math, 'gravity',           function () {return fixedUnit('9.80665 m s^-2')});
	  // atm is defined in Unit.js
	
	  // Natural units
	  lazy(math, 'planckLength',      function () {return fixedUnit('1.61619997e-35 m')});
	  lazy(math, 'planckMass',        function () {return fixedUnit('2.1765113e-8 kg')});
	  lazy(math, 'planckTime',        function () {return fixedUnit('5.3910632e-44 s')});
	  lazy(math, 'planckCharge',      function () {return fixedUnit('1.87554595641e-18 C')});
	  lazy(math, 'planckTemperature', function () {return fixedUnit('1.41683385e+32 K')});
	
	}
	
	exports.factory = factory;
	exports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed
	exports.math = true;   // request access to the math namespace


/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var object = __webpack_require__(55);
	var bigConstants = __webpack_require__(128);
	
	function factory (type, config, load, typed, math) {
	  // listen for changed in the configuration, automatically reload
	  // constants when needed
	  math.on('config', function (curr, prev) {
	    if (curr.number !== prev.number) {
	      factory(type, config, load, typed, math);
	    }
	  });
	
	  setConstant(math, 'true', true);
	  setConstant(math, 'false', false);
	  setConstant(math, 'null', null);
	  setConstant(math, 'uninitialized', __webpack_require__(91).UNINITIALIZED);
	
	  if (config.number === 'BigNumber') {
	    setConstant(math, 'Infinity', new type.BigNumber(Infinity));
	    setConstant(math, 'NaN', new type.BigNumber(NaN));
	
	    setLazyConstant(math, 'pi',  function () {return bigConstants.pi(type.BigNumber)});
	    setLazyConstant(math, 'tau', function () {return bigConstants.tau(type.BigNumber)});
	    setLazyConstant(math, 'e',   function () {return bigConstants.e(type.BigNumber)});
	    setLazyConstant(math, 'phi', function () {return bigConstants.phi(type.BigNumber)}); // golden ratio, (1+sqrt(5))/2
	
	    // uppercase constants (for compatibility with built-in Math)
	    setLazyConstant(math, 'E',       function () {return math.e;});
	    setLazyConstant(math, 'LN2',     function () {return new type.BigNumber(2).ln();});
	    setLazyConstant(math, 'LN10',    function () {return new type.BigNumber(10).ln()});
	    setLazyConstant(math, 'LOG2E',   function () {return new type.BigNumber(1).div(new type.BigNumber(2).ln());});
	    setLazyConstant(math, 'LOG10E',  function () {return new type.BigNumber(1).div(new type.BigNumber(10).ln())});
	    setLazyConstant(math, 'PI',      function () {return math.pi});
	    setLazyConstant(math, 'SQRT1_2', function () {return new type.BigNumber('0.5').sqrt()});
	    setLazyConstant(math, 'SQRT2',   function () {return new type.BigNumber(2).sqrt()});
	  }
	  else {
	    setConstant(math, 'Infinity', Infinity);
	    setConstant(math, 'NaN',      NaN);
	
	    setConstant(math, 'pi',  Math.PI);
	    setConstant(math, 'tau', Math.PI * 2);
	    setConstant(math, 'e',   Math.E);
	    setConstant(math, 'phi', 1.61803398874989484820458683436563811772030917980576286213545); // golden ratio, (1+sqrt(5))/2
	
	    // uppercase constants (for compatibility with built-in Math)
	    setConstant(math, 'E',           math.e);
	    setConstant(math, 'LN2',         Math.LN2);
	    setConstant(math, 'LN10',        Math.LN10);
	    setConstant(math, 'LOG2E',       Math.LOG2E);
	    setConstant(math, 'LOG10E',      Math.LOG10E);
	    setConstant(math, 'PI',          math.pi);
	    setConstant(math, 'SQRT1_2',     Math.SQRT1_2);
	    setConstant(math, 'SQRT2',       Math.SQRT2);
	  }
	
	  // complex i
	  setConstant(math, 'i', type.Complex.I);
	
	  // meta information
	  setConstant(math, 'version', __webpack_require__(149));
	}
	
	// create a constant in both math and mathWithTransform
	function setConstant(math, name, value) {
	  math[name] = value;
	  math.expression.mathWithTransform[name] = value;
	}
	
	// create a lazy constant in both math and mathWithTransform
	function setLazyConstant (math, name, resolver) {
	  object.lazy(math, name,  resolver);
	  object.lazy(math.expression.mathWithTransform, name,  resolver);
	}
	
	exports.factory = factory;
	exports.lazy = false;  // no lazy loading of constants, the constants themselves are lazy when needed
	exports.math = true;   // request access to the math namespace

/***/ }),
/* 149 */
/***/ (function(module, exports) {

	module.exports = '3.12.1';
	// Note: This file is automatically generated when building math.js.
	// Changes made in this file will be overwritten.


/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(151),
	  __webpack_require__(334),
	  __webpack_require__(364),
	  __webpack_require__(366),
	
	  __webpack_require__(392),
	  __webpack_require__(336),
	  __webpack_require__(363)
	];


/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

	function factory (construction, config, load, typed) {
	  var docs = {};
	
	
	  // construction functions
	  docs.bignumber = __webpack_require__(152);
	  docs['boolean'] = __webpack_require__(153);
	  docs.complex = __webpack_require__(154);
	  docs.createUnit = __webpack_require__(155);
	  docs.fraction = __webpack_require__(156);
	  docs.index = __webpack_require__(157);
	  docs.matrix = __webpack_require__(158);
	  docs.number = __webpack_require__(159);
	  docs.sparse = __webpack_require__(160);
	  docs.splitUnit = __webpack_require__(161);
	  docs.string = __webpack_require__(162);
	  docs.unit = __webpack_require__(163);
	
	  // constants
	  docs.e = __webpack_require__(164);
	  docs.E = __webpack_require__(164);
	  docs['false'] = __webpack_require__(165);
	  docs.i = __webpack_require__(166);
	  docs['Infinity'] = __webpack_require__(167);
	  docs.LN2 = __webpack_require__(168);
	  docs.LN10 = __webpack_require__(169);
	  docs.LOG2E = __webpack_require__(170);
	  docs.LOG10E = __webpack_require__(171);
	  docs.NaN = __webpack_require__(172);
	  docs['null'] = __webpack_require__(173);
	  docs.pi = __webpack_require__(174);
	  docs.PI = __webpack_require__(174);
	  docs.phi = __webpack_require__(175);
	  docs.SQRT1_2 = __webpack_require__(176);
	  docs.SQRT2 = __webpack_require__(177);
	  docs.tau = __webpack_require__(178);
	  docs['true'] = __webpack_require__(179);
	  docs.version = __webpack_require__(180);
	
	  // physical constants
	  // TODO: more detailed docs for physical constants
	  docs.speedOfLight = {description: 'Speed of light in vacuum', examples: ['speedOfLight']};
	  docs.gravitationConstant = {description: 'Newtonian constant of gravitation', examples: ['gravitationConstant']};
	  docs.planckConstant = {description: 'Planck constant', examples: ['planckConstant']};
	  docs.reducedPlanckConstant = {description: 'Reduced Planck constant', examples: ['reducedPlanckConstant']};
	
	  docs.magneticConstant = {description: 'Magnetic constant (vacuum permeability)', examples: ['magneticConstant']};
	  docs.electricConstant = {description: 'Electric constant (vacuum permeability)', examples: ['electricConstant']};
	  docs.vacuumImpedance = {description: 'Characteristic impedance of vacuum', examples: ['vacuumImpedance']};
	  docs.coulomb = {description: 'Coulomb\'s constant', examples: ['coulomb']};
	  docs.elementaryCharge = {description: 'Elementary charge', examples: ['elementaryCharge']};
	  docs.bohrMagneton = {description: 'Borh magneton', examples: ['bohrMagneton']};
	  docs.conductanceQuantum = {description: 'Conductance quantum', examples: ['conductanceQuantum']};
	  docs.inverseConductanceQuantum = {description: 'Inverse conductance quantum', examples: ['inverseConductanceQuantum']};
	  //docs.josephson = {description: 'Josephson constant', examples: ['josephson']};
	  docs.magneticFluxQuantum = {description: 'Magnetic flux quantum', examples: ['magneticFluxQuantum']};
	  docs.nuclearMagneton = {description: 'Nuclear magneton', examples: ['nuclearMagneton']};
	  docs.klitzing = {description: 'Von Klitzing constant', examples: ['klitzing']};
	
	  docs.bohrRadius = {description: 'Borh radius', examples: ['bohrRadius']};
	  docs.classicalElectronRadius = {description: 'Classical electron radius', examples: ['classicalElectronRadius']};
	  docs.electronMass = {description: 'Electron mass', examples: ['electronMass']};
	  docs.fermiCoupling = {description: 'Fermi coupling constant', examples: ['fermiCoupling']};
	  docs.fineStructure = {description: 'Fine-structure constant', examples: ['fineStructure']};
	  docs.hartreeEnergy = {description: 'Hartree energy', examples: ['hartreeEnergy']};
	  docs.protonMass = {description: 'Proton mass', examples: ['protonMass']};
	  docs.deuteronMass = {description: 'Deuteron Mass', examples: ['deuteronMass']};
	  docs.neutronMass = {description: 'Neutron mass', examples: ['neutronMass']};
	  docs.quantumOfCirculation = {description: 'Quantum of circulation', examples: ['quantumOfCirculation']};
	  docs.rydberg = {description: 'Rydberg constant', examples: ['rydberg']};
	  docs.thomsonCrossSection = {description: 'Thomson cross section', examples: ['thomsonCrossSection']};
	  docs.weakMixingAngle = {description: 'Weak mixing angle', examples: ['weakMixingAngle']};
	  docs.efimovFactor = {description: 'Efimov factor', examples: ['efimovFactor']};
	
	  docs.atomicMass = {description: 'Atomic mass constant', examples: ['atomicMass']};
	  docs.avogadro = {description: 'Avogadro\'s number', examples: ['avogadro']};
	  docs.boltzmann = {description: 'Boltzmann constant', examples: ['boltzmann']};
	  docs.faraday = {description: 'Faraday constant', examples: ['faraday']};
	  docs.firstRadiation = {description: 'First radiation constant', examples: ['firstRadiation']};
	  docs.loschmidt = {description: 'Loschmidt constant at T=273.15 K and p=101.325 kPa', examples: ['loschmidt']};
	  docs.gasConstant = {description: 'Gas constant', examples: ['gasConstant']};
	  docs.molarPlanckConstant = {description: 'Molar Planck constant', examples: ['molarPlanckConstant']};
	  docs.molarVolume = {description: 'Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa', examples: ['molarVolume']};
	  docs.sackurTetrode = {description: 'Sackur-Tetrode constant at T=1 K and p=101.325 kPa', examples: ['sackurTetrode']};
	  docs.secondRadiation = {description: 'Second radiation constant', examples: ['secondRadiation']};
	  docs.stefanBoltzmann = {description: 'Stefan-Boltzmann constant', examples: ['stefanBoltzmann']};
	  docs.wienDisplacement = {description: 'Wien displacement law constant', examples: ['wienDisplacement']};
	  //docs.spectralRadiance = {description: 'First radiation constant for spectral radiance', examples: ['spectralRadiance']};
	
	  docs.molarMass = {description: 'Molar mass constant', examples: ['molarMass']};
	  docs.molarMassC12 = {description: 'Molar mass constant of carbon-12', examples: ['molarMassC12']};
	  docs.gravity = {description: 'Standard acceleration of gravity (standard acceleration of free-fall on Earth)', examples: ['gravity']};
	
	  docs.planckLength = {description: 'Planck length', examples: ['planckLength']};
	  docs.planckMass = {description: 'Planck mass', examples: ['planckMass']};
	  docs.planckTime = {description: 'Planck time', examples: ['planckTime']};
	  docs.planckCharge = {description: 'Planck charge', examples: ['planckCharge']};
	  docs.planckTemperature = {description: 'Planck temperature', examples: ['planckTemperature']};
	
	  // functions - algebra
	  docs.derivative = __webpack_require__(181);
	  docs.lsolve = __webpack_require__(182);
	  docs.lup = __webpack_require__(183);
	  docs.lusolve = __webpack_require__(184);
	  docs.simplify = __webpack_require__(185);
	  docs.slu = __webpack_require__(186);
	  docs.usolve = __webpack_require__(187);
	  docs.qr = __webpack_require__(188);
	
	  // functions - arithmetic
	  docs.abs = __webpack_require__(189);
	  docs.add = __webpack_require__(190);
	  docs.cbrt = __webpack_require__(191);
	  docs.ceil = __webpack_require__(192);
	  docs.cube = __webpack_require__(193);
	  docs.divide = __webpack_require__(194);
	  docs.dotDivide = __webpack_require__(195);
	  docs.dotMultiply = __webpack_require__(196);
	  docs.dotPow = __webpack_require__(197);
	  docs.exp = __webpack_require__(198);
	  docs.fix = __webpack_require__(199);
	  docs.floor = __webpack_require__(200);
	  docs.gcd = __webpack_require__(201);
	  docs.hypot = __webpack_require__(202);
	  docs.lcm = __webpack_require__(203);
	  docs.log = __webpack_require__(204);
	  docs.log10 = __webpack_require__(205);
	  docs.mod = __webpack_require__(206);
	  docs.multiply = __webpack_require__(207);
	  docs.norm = __webpack_require__(208);
	  docs.nthRoot = __webpack_require__(209);
	  docs.pow = __webpack_require__(210);
	  docs.round = __webpack_require__(211);
	  docs.sign = __webpack_require__(212);
	  docs.sqrt = __webpack_require__(213);
	  docs.square = __webpack_require__(214);
	  docs.subtract = __webpack_require__(215);
	  docs.unaryMinus = __webpack_require__(216);
	  docs.unaryPlus = __webpack_require__(217);
	  docs.xgcd = __webpack_require__(218);
	
	  // functions - bitwise
	  docs.bitAnd = __webpack_require__(219);
	  docs.bitNot = __webpack_require__(220);
	  docs.bitOr = __webpack_require__(221);
	  docs.bitXor = __webpack_require__(222);
	  docs.leftShift = __webpack_require__(223);
	  docs.rightArithShift = __webpack_require__(224);
	  docs.rightLogShift = __webpack_require__(225);
	
	  // functions - combinatorics
	  docs.bellNumbers = __webpack_require__(226);
	  docs.catalan = __webpack_require__(227);
	  docs.composition = __webpack_require__(228);
	  docs.stirlingS2 = __webpack_require__(229);
	
	  // functions - core
	  docs['config'] =  __webpack_require__(230);
	  docs['import'] =  __webpack_require__(231);
	  docs['typed'] =  __webpack_require__(232);
	
	  // functions - complex
	  docs.arg = __webpack_require__(233);
	  docs.conj = __webpack_require__(234);
	  docs.re = __webpack_require__(235);
	  docs.im = __webpack_require__(236);
	
	  // functions - expression
	  docs['eval'] =  __webpack_require__(237);
	  docs.help =  __webpack_require__(238);
	
	  // functions - geometry
	  docs.distance = __webpack_require__(239);
	  docs.intersect = __webpack_require__(240);
	
	  // functions - logical
	  docs['and'] = __webpack_require__(241);
	  docs['not'] = __webpack_require__(242);
	  docs['or'] = __webpack_require__(243);
	  docs['xor'] = __webpack_require__(244);
	
	  // functions - matrix
	  docs['concat'] = __webpack_require__(245);
	  docs.cross = __webpack_require__(246);
	  docs.det = __webpack_require__(247);
	  docs.diag = __webpack_require__(248);
	  docs.dot = __webpack_require__(249);
	  docs.eye = __webpack_require__(250);
	  docs.filter =  __webpack_require__(251);
	  docs.flatten = __webpack_require__(252);
	  docs.forEach =  __webpack_require__(253);
	  docs.inv = __webpack_require__(254);
	  docs.kron = __webpack_require__(255);
	  docs.map =  __webpack_require__(256);
	  docs.ones = __webpack_require__(257);
	  docs.partitionSelect =  __webpack_require__(258);
	  docs.range = __webpack_require__(259);
	  docs.resize = __webpack_require__(260);
	  docs.reshape = __webpack_require__(261);
	  docs.size = __webpack_require__(262);
	  docs.sort =  __webpack_require__(263);
	  docs.squeeze = __webpack_require__(264);
	  docs.subset = __webpack_require__(265);
	  docs.trace = __webpack_require__(266);
	  docs.transpose = __webpack_require__(267);
	  docs.zeros = __webpack_require__(268);
	
	  // functions - probability
	  docs.combinations = __webpack_require__(269);
	  //docs.distribution = require('./function/probability/distribution');
	  docs.factorial = __webpack_require__(270);
	  docs.gamma = __webpack_require__(271);
	  docs.kldivergence = __webpack_require__(272);
	  docs.multinomial = __webpack_require__(273);
	  docs.permutations = __webpack_require__(274);
	  docs.pickRandom = __webpack_require__(275);
	  docs.random = __webpack_require__(276);
	  docs.randomInt = __webpack_require__(277);
	
	  // functions - relational
	  docs.compare = __webpack_require__(278);
	  docs.deepEqual = __webpack_require__(279);
	  docs['equal'] = __webpack_require__(280);
	  docs.larger = __webpack_require__(281);
	  docs.largerEq = __webpack_require__(282);
	  docs.smaller = __webpack_require__(283);
	  docs.smallerEq = __webpack_require__(284);
	  docs.unequal = __webpack_require__(285);
	
	  // functions - special
	  docs.erf = __webpack_require__(286);
	
	  // functions - statistics
	  docs.mad = __webpack_require__(287);
	  docs.max = __webpack_require__(288);
	  docs.mean = __webpack_require__(289);
	  docs.median = __webpack_require__(290);
	  docs.min = __webpack_require__(291);
	  docs.mode = __webpack_require__(292);
	  docs.prod = __webpack_require__(293);
	  docs.quantileSeq = __webpack_require__(294);
	  docs.std = __webpack_require__(295);
	  docs.sum = __webpack_require__(296);
	  docs['var'] = __webpack_require__(297);
	
	  // functions - trigonometry
	  docs.acos = __webpack_require__(298);
	  docs.acosh = __webpack_require__(299);
	  docs.acot = __webpack_require__(300);
	  docs.acoth = __webpack_require__(301);
	  docs.acsc = __webpack_require__(302);
	  docs.acsch = __webpack_require__(303);
	  docs.asec = __webpack_require__(304);
	  docs.asech = __webpack_require__(305);
	  docs.asin = __webpack_require__(306);
	  docs.asinh = __webpack_require__(307);
	  docs.atan = __webpack_require__(308);
	  docs.atanh = __webpack_require__(309);
	  docs.atan2 = __webpack_require__(310);
	  docs.cos = __webpack_require__(311);
	  docs.cosh = __webpack_require__(312);
	  docs.cot = __webpack_require__(313);
	  docs.coth = __webpack_require__(314);
	  docs.csc = __webpack_require__(315);
	  docs.csch = __webpack_require__(316);
	  docs.sec = __webpack_require__(317);
	  docs.sech = __webpack_require__(318);
	  docs.sin = __webpack_require__(319);
	  docs.sinh = __webpack_require__(320);
	  docs.tan = __webpack_require__(321);
	  docs.tanh = __webpack_require__(322);
	
	  // functions - units
	  docs.to = __webpack_require__(323);
	
	  // functions - utils
	  docs.clone = __webpack_require__(324);
	  docs.format = __webpack_require__(325);
	  docs.isNaN = __webpack_require__(326);
	  docs.isInteger = __webpack_require__(327);
	  docs.isNegative = __webpack_require__(328);
	  docs.isNumeric = __webpack_require__(329);
	  docs.isPositive = __webpack_require__(330);
	  docs.isPrime = __webpack_require__(331);
	  docs.isZero = __webpack_require__(332);
	  // docs.print = require('./function/utils/print'); // TODO: add documentation for print as soon as the parser supports objects.
	  docs['typeof'] =  __webpack_require__(333);
	
	  return docs;
	}
	
	exports.name = 'docs';
	exports.path = 'expression';
	exports.factory = factory;


/***/ }),
/* 152 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'bignumber',
	  'category': 'Construction',
	  'syntax': [
	    'bignumber(x)'
	  ],
	  'description':
	      'Create a big number from a number or string.',
	  'examples': [
	    '0.1 + 0.2',
	    'bignumber(0.1) + bignumber(0.2)',
	    'bignumber("7.2")',
	    'bignumber("7.2e500")',
	    'bignumber([0.1, 0.2, 0.3])'
	  ],
	  'seealso': [
	    'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'
	  ]
	};


/***/ }),
/* 153 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'boolean',
	  'category': 'Construction',
	  'syntax': [
	    'x',
	    'boolean(x)'
	  ],
	  'description':
	      'Convert a string or number into a boolean.',
	  'examples': [
	    'boolean(0)',
	    'boolean(1)',
	    'boolean(3)',
	    'boolean("true")',
	    'boolean("false")',
	    'boolean([1, 0, 1, 1])'
	  ],
	  'seealso': [
	    'bignumber', 'complex', 'index', 'matrix', 'number', 'string', 'unit'
	  ]
	};


/***/ }),
/* 154 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'complex',
	  'category': 'Construction',
	  'syntax': [
	    'complex()',
	    'complex(re, im)',
	    'complex(string)'
	  ],
	  'description':
	      'Create a complex number.',
	  'examples': [
	    'complex()',
	    'complex(2, 3)',
	    'complex("7 - 2i")'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'index', 'matrix', 'number', 'string', 'unit'
	  ]
	};


/***/ }),
/* 155 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'createUnit',
	  'category': 'Construction',
	  'syntax': [
	    'createUnit(definitions)',
	    'createUnit(name, definition)'
	  ],
	  'description':
	      'Create a user-defined unit and register it with the Unit type.',
	  'examples': [
	    'createUnit("foo")',
	    'createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})',
	    'createUnit("mph", "1 mile/hour")'
	  ],
	  'seealso': [
	    'unit', 'splitUnit'
	  ]
	};


/***/ }),
/* 156 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'fraction',
	  'category': 'Construction',
	  'syntax': [
	    'fraction(num)',
	    'fraction(num,den)'
	  ],
	  'description':
	    'Create a fraction from a number or from a numerator and denominator.',
	  'examples': [
	    'fraction(0.125)',
	    'fraction(1, 3) + fraction(2, 5)'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'string', 'unit'
	  ]
	};


/***/ }),
/* 157 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'index',
	  'category': 'Construction',
	  'syntax': [
	    '[start]',
	    '[start:end]',
	    '[start:step:end]',
	    '[start1, start 2, ...]',
	    '[start1:end1, start2:end2, ...]',
	    '[start1:step1:end1, start2:step2:end2, ...]'
	  ],
	  'description':
	      'Create an index to get or replace a subset of a matrix',
	  'examples': [
	    '[]',
	    '[1, 2, 3]',
	    'A = [1, 2, 3; 4, 5, 6]',
	    'A[1, :]',
	    'A[1, 2] = 50',
	    'A[0:2, 0:2] = ones(2, 2)'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'matrix,', 'number', 'range', 'string', 'unit'
	  ]
	};


/***/ }),
/* 158 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'matrix',
	  'category': 'Construction',
	  'syntax': [
	    '[]',
	    '[a1, b1, ...; a2, b2, ...]',
	    'matrix()',
	    'matrix("dense")',
	    'matrix([...])'
	  ],
	  'description':
	      'Create a matrix.',
	  'examples': [
	    '[]',
	    '[1, 2, 3]',
	    '[1, 2, 3; 4, 5, 6]',
	    'matrix()',
	    'matrix([3, 4])',
	    'matrix([3, 4; 5, 6], "sparse")',
	    'matrix([3, 4; 5, 6], "sparse", "number")'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'sparse'
	  ]
	};


/***/ }),
/* 159 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'number',
	  'category': 'Construction',
	  'syntax': [
	    'x',
	    'number(x)'
	  ],
	  'description':
	      'Create a number or convert a string or boolean into a number.',
	  'examples': [
	    '2',
	    '2e3',
	    '4.05',
	    'number(2)',
	    'number("7.2")',
	    'number(true)',
	    'number([true, false, true, true])',
	    'number("52cm", "m")'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'fraction', 'index', 'matrix', 'string', 'unit'
	  ]
	};


/***/ }),
/* 160 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'sparse',
	  'category': 'Construction',
	  'syntax': [
	    'sparse()',
	    'sparse([a1, b1, ...; a1, b2, ...])',
	    'sparse([a1, b1, ...; a1, b2, ...], "number")'
	  ],
	  'description':
	  'Create a sparse matrix.',
	  'examples': [
	    'sparse()',
	    'sparse([3, 4; 5, 6])',
	    'sparse([3, 0; 5, 0], "number")'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'index', 'number', 'string', 'unit', 'matrix'
	  ]
	};


/***/ }),
/* 161 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'splitUnit',
	  'category': 'Construction',
	  'syntax': [
	    'splitUnit(unit: Unit, parts: Unit[])'
	  ],
	  'description':
	      'Split a unit in an array of units whose sum is equal to the original unit.',
	  'examples': [
	    'splitUnit(1 m, ["feet", "inch"])'
	  ],
	  'seealso': [
	    'unit', 'createUnit'
	  ]
	};


/***/ }),
/* 162 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'string',
	  'category': 'Construction',
	  'syntax': [
	    '"text"',
	    'string(x)'
	  ],
	  'description':
	      'Create a string or convert a value to a string',
	  'examples': [
	    '"Hello World!"',
	    'string(4.2)',
	    'string(3 + 2i)'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'unit'
	  ]
	};


/***/ }),
/* 163 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'unit',
	  'category': 'Construction',
	  'syntax': [
	    'value unit',
	    'unit(value, unit)',
	    'unit(string)'
	  ],
	  'description':
	      'Create a unit.',
	  'examples': [
	    '5.5 mm',
	    '3 inch',
	    'unit(7.1, "kilogram")',
	    'unit("23 deg")'
	  ],
	  'seealso': [
	    'bignumber', 'boolean', 'complex', 'index', 'matrix', 'number', 'string'
	  ]
	};


/***/ }),
/* 164 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'e',
	  'category': 'Constants',
	  'syntax': [
	    'e'
	  ],
	  'description': 'Euler\'s number, the base of the natural logarithm. Approximately equal to 2.71828',
	  'examples': [
	    'e',
	    'e ^ 2',
	    'exp(2)',
	    'log(e)'
	  ],
	  'seealso': ['exp']
	};


/***/ }),
/* 165 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'false',
	  'category': 'Constants',
	  'syntax': [
	    'false'
	  ],
	  'description': 'Boolean value false',
	  'examples': [
	    'false'
	  ],
	  'seealso': ['true']
	};


/***/ }),
/* 166 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'i',
	  'category': 'Constants',
	  'syntax': [
	    'i'
	  ],
	  'description': 'Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.',
	  'examples': [
	    'i',
	    'i * i',
	    'sqrt(-1)'
	  ],
	  'seealso': []
	};


/***/ }),
/* 167 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'Infinity',
	  'category': 'Constants',
	  'syntax': [
	    'Infinity'
	  ],
	  'description': 'Infinity, a number which is larger than the maximum number that can be handled by a floating point number.',
	  'examples': [
	    'Infinity',
	    '1 / 0'
	  ],
	  'seealso': []
	};


/***/ }),
/* 168 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'LN2',
	  'category': 'Constants',
	  'syntax': [
	    'LN2'
	  ],
	  'description': 'Returns the natural logarithm of 2, approximately equal to 0.693',
	  'examples': [
	    'LN2',
	    'log(2)'
	  ],
	  'seealso': []
	};


/***/ }),
/* 169 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'LN10',
	  'category': 'Constants',
	  'syntax': [
	    'LN10'
	  ],
	  'description': 'Returns the natural logarithm of 10, approximately equal to 2.302',
	  'examples': [
	    'LN10',
	    'log(10)'
	  ],
	  'seealso': []
	};


/***/ }),
/* 170 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'LOG2E',
	  'category': 'Constants',
	  'syntax': [
	    'LOG2E'
	  ],
	  'description': 'Returns the base-2 logarithm of E, approximately equal to 1.442',
	  'examples': [
	    'LOG2E',
	    'log(e, 2)'
	  ],
	  'seealso': []
	};


/***/ }),
/* 171 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'LOG10E',
	  'category': 'Constants',
	  'syntax': [
	    'LOG10E'
	  ],
	  'description': 'Returns the base-10 logarithm of E, approximately equal to 0.434',
	  'examples': [
	    'LOG10E',
	    'log(e, 10)'
	  ],
	  'seealso': []
	};


/***/ }),
/* 172 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'NaN',
	  'category': 'Constants',
	  'syntax': [
	    'NaN'
	  ],
	  'description': 'Not a number',
	  'examples': [
	    'NaN',
	    '0 / 0'
	  ],
	  'seealso': []
	};


/***/ }),
/* 173 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'null',
	  'category': 'Constants',
	  'syntax': [
	    'null'
	  ],
	  'description': 'Value null',
	  'examples': [
	    'null'
	  ],
	  'seealso': ['true', 'false']
	};


/***/ }),
/* 174 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'pi',
	  'category': 'Constants',
	  'syntax': [
	    'pi'
	  ],
	  'description': 'The number pi is a mathematical constant that is the ratio of a circle\'s circumference to its diameter, and is approximately equal to 3.14159',
	  'examples': [
	    'pi',
	    'sin(pi/2)'
	  ],
	  'seealso': ['tau']
	};


/***/ }),
/* 175 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'phi',
	  'category': 'Constants',
	  'syntax': [
	    'phi'
	  ],
	  'description': 'Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...',
	  'examples': [
	    'tau'
	  ],
	  'seealso': []
	};


/***/ }),
/* 176 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'SQRT1_2',
	  'category': 'Constants',
	  'syntax': [
	    'SQRT1_2'
	  ],
	  'description': 'Returns the square root of 1/2, approximately equal to 0.707',
	  'examples': [
	    'SQRT1_2',
	    'sqrt(1/2)'
	  ],
	  'seealso': []
	};


/***/ }),
/* 177 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'SQRT2',
	  'category': 'Constants',
	  'syntax': [
	    'SQRT2'
	  ],
	  'description': 'Returns the square root of 2, approximately equal to 1.414',
	  'examples': [
	    'SQRT2',
	    'sqrt(2)'
	  ],
	  'seealso': []
	};


/***/ }),
/* 178 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'tau',
	  'category': 'Constants',
	  'syntax': [
	    'tau'
	  ],
	  'description': 'Tau is the ratio constant of a circle\'s circumference to radius, equal to 2 * pi, approximately 6.2832.',
	  'examples': [
	    'tau',
	    '2 * pi'
	  ],
	  'seealso': ['pi']
	};


/***/ }),
/* 179 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'true',
	  'category': 'Constants',
	  'syntax': [
	    'true'
	  ],
	  'description': 'Boolean value true',
	  'examples': [
	    'true'
	  ],
	  'seealso': ['false']
	};


/***/ }),
/* 180 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'version',
	  'category': 'Constants',
	  'syntax': [
	    'version'
	  ],
	  'description': 'A string with the version number of math.js',
	  'examples': [
	    'version'
	  ],
	  'seealso': []
	};


/***/ }),
/* 181 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'derivative',
	  'category': 'Algebra',
	  'syntax': [
	    'derivative(expr)',
	    'derivative(expr, {simplify: boolean})'
	  ],
	  'description': 'Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.',
	  'examples': [
	    'derivative("2x^3", "x")',
	    'derivative("2x^3", "x", {simplify: false})',
	    'derivative("2x^2 + 3x + 4", "x")',
	    'derivative("sin(2x)", "x")',
	    'f = parse("x^2 + x")',
	    'x = parse("x")',
	    'df = derivative(f, x)',
	    'df.eval({x: 3})'
	  ],
	  'seealso': [
	    'simplify', 'parse', 'eval'
	  ]
	};


/***/ }),
/* 182 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'lsolve',
	  'category': 'Algebra',
	  'syntax': [
	    'x=lsolve(L, b)'
	  ],
	  'description':
	  'Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.',
	  'examples': [
	    'a = [-2, 3; 2, 1]',
	    'b = [11, 9]',
	    'x = lsolve(a, b)'
	  ],
	  'seealso': [
	    'lup', 'lusolve', 'usolve', 'matrix', 'sparse'
	  ]
	};


/***/ }),
/* 183 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'lup',
	  'category': 'Algebra',
	  'syntax': [
	    'lup(m)'
	  ],
	  'description':
	  'Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U',
	  'examples': [
	    'lup([[2, 1], [1, 4]])',
	    'lup(matrix([[2, 1], [1, 4]]))',
	    'lup(sparse([[2, 1], [1, 4]]))'
	  ],
	  'seealso': [
	    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'slu', 'qr'
	  ]
	};


/***/ }),
/* 184 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'lusolve',
	  'category': 'Algebra',
	  'syntax': [
	    'x=lusolve(A, b)',
	    'x=lusolve(lu, b)'
	  ],
	  'description': 'Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.',
	  'examples': [
	    'a = [-2, 3; 2, 1]',
	    'b = [11, 9]',
	    'x = lusolve(a, b)'
	  ],
	  'seealso': [
	    'lup', 'slu', 'lsolve', 'usolve', 'matrix', 'sparse'
	  ]
	};


/***/ }),
/* 185 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'simplify',
	  'category': 'Algebra',
	  'syntax': [
	    'simplify(expr)',
	    'simplify(expr, rules)'
	  ],
	  'description': 'Simplify an expression tree.',
	  'examples': [
	    'simplify("3 + 2 / 4")',
	    'simplify("2x + x")',
	    'f = parse("x * (x + 2 + x)")',
	    'simplified = simplify(f)',
	    'simplified.eval({x: 2})'
	  ],
	  'seealso': [
	    'derivative', 'parse', 'eval'
	  ]
	};


/***/ }),
/* 186 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'slu',
	  'category': 'Algebra',
	  'syntax': [
	    'slu(A, order, threshold)'
	  ],
	  'description': 'Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U',
	  'examples': [
	    'slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)'
	  ],
	  'seealso': [
	    'lusolve', 'lsolve', 'usolve', 'matrix', 'sparse', 'lup', 'qr'
	  ]
	};


/***/ }),
/* 187 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'usolve',
	  'category': 'Algebra',
	  'syntax': [
	    'x=usolve(U, b)'
	  ],
	  'description':
	  'Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.',
	  'examples': [
	    'x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])'
	  ],
	  'seealso': [
	    'lup', 'lusolve', 'lsolve', 'matrix', 'sparse'
	  ]
	};


/***/ }),
/* 188 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'qr',
	  'category': 'Algebra',
	  'syntax': [
	    'qr(A)'
	  ],
	  'description':
	  'Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.',
	  'examples': [
	    'qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])'
	  ],
	  'seealso': [
	    'lup', 'slu', 'matrix'
	  ]
	};


/***/ }),
/* 189 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'abs',
	  'category': 'Arithmetic',
	  'syntax': [
	    'abs(x)'
	  ],
	  'description': 'Compute the absolute value.',
	  'examples': [
	    'abs(3.5)',
	    'abs(-4.2)'
	  ],
	  'seealso': ['sign']
	};


/***/ }),
/* 190 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'add',
	  'category': 'Operators',
	  'syntax': [
	    'x + y',
	    'add(x, y)'
	  ],
	  'description': 'Add two values.',
	  'examples': [
	    'a = 2.1 + 3.6',
	    'a - 3.6',
	    '3 + 2i',
	    '3 cm + 2 inch',
	    '"2.3" + "4"'
	  ],
	  'seealso': [
	    'subtract'
	  ]
	};


/***/ }),
/* 191 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'cbrt',
	  'category': 'Arithmetic',
	  'syntax': [
	    'cbrt(x)',
	    'cbrt(x, allRoots)'
	  ],
	  'description':
	      'Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned',
	  'examples': [
	    'cbrt(64)',
	    'cube(4)',
	    'cbrt(-8)',
	    'cbrt(2 + 3i)',
	    'cbrt(8i)',
	    'cbrt(8i, true)',
	    'cbrt(27 m^3)'
	  ],
	  'seealso': [
	    'square',
	    'sqrt',
	    'cube',
	    'multiply'
	  ]
	};


/***/ }),
/* 192 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'ceil',
	  'category': 'Arithmetic',
	  'syntax': [
	    'ceil(x)'
	  ],
	  'description':
	      'Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.',
	  'examples': [
	    'ceil(3.2)',
	    'ceil(3.8)',
	    'ceil(-4.2)'
	  ],
	  'seealso': ['floor', 'fix', 'round']
	};


/***/ }),
/* 193 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'cube',
	  'category': 'Arithmetic',
	  'syntax': [
	    'cube(x)'
	  ],
	  'description': 'Compute the cube of a value. The cube of x is x * x * x.',
	  'examples': [
	    'cube(2)',
	    '2^3',
	    '2 * 2 * 2'
	  ],
	  'seealso': [
	    'multiply',
	    'square',
	    'pow'
	  ]
	};


/***/ }),
/* 194 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'divide',
	  'category': 'Operators',
	  'syntax': [
	    'x / y',
	    'divide(x, y)'
	  ],
	  'description': 'Divide two values.',
	  'examples': [
	    'a = 2 / 3',
	    'a * 3',
	    '4.5 / 2',
	    '3 + 4 / 2',
	    '(3 + 4) / 2',
	    '18 km / 4.5'
	  ],
	  'seealso': [
	    'multiply'
	  ]
	};


/***/ }),
/* 195 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'dotDivide',
	  'category': 'Operators',
	  'syntax': [
	    'x ./ y',
	    'dotDivide(x, y)'
	  ],
	  'description': 'Divide two values element wise.',
	  'examples': [
	    'a = [1, 2, 3; 4, 5, 6]',
	    'b = [2, 1, 1; 3, 2, 5]',
	    'a ./ b'
	  ],
	  'seealso': [
	    'multiply',
	    'dotMultiply',
	    'divide'
	  ]
	};


/***/ }),
/* 196 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'dotMultiply',
	  'category': 'Operators',
	  'syntax': [
	    'x .* y',
	    'dotMultiply(x, y)'
	  ],
	  'description': 'Multiply two values element wise.',
	  'examples': [
	    'a = [1, 2, 3; 4, 5, 6]',
	    'b = [2, 1, 1; 3, 2, 5]',
	    'a .* b'
	  ],
	  'seealso': [
	    'multiply',
	    'divide',
	    'dotDivide'
	  ]
	};


/***/ }),
/* 197 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'dotpow',
	  'category': 'Operators',
	  'syntax': [
	    'x .^ y',
	    'dotpow(x, y)'
	  ],
	  'description':
	      'Calculates the power of x to y element wise.',
	  'examples': [
	    'a = [1, 2, 3; 4, 5, 6]',
	    'a .^ 2'
	  ],
	  'seealso': [
	    'pow'
	  ]
	};


/***/ }),
/* 198 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'exp',
	  'category': 'Arithmetic',
	  'syntax': [
	    'exp(x)'
	  ],
	  'description': 'Calculate the exponent of a value.',
	  'examples': [
	    'exp(1.3)',
	    'e ^ 1.3',
	    'log(exp(1.3))',
	    'x = 2.4',
	    '(exp(i*x) == cos(x) + i*sin(x))   # Euler\'s formula'
	  ],
	  'seealso': [
	    'pow',
	    'log'
	  ]
	};


/***/ }),
/* 199 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'fix',
	  'category': 'Arithmetic',
	  'syntax': [
	    'fix(x)'
	  ],
	  'description':
	      'Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.',
	  'examples': [
	    'fix(3.2)',
	    'fix(3.8)',
	    'fix(-4.2)',
	    'fix(-4.8)'
	  ],
	  'seealso': ['ceil', 'floor', 'round']
	};


/***/ }),
/* 200 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'floor',
	  'category': 'Arithmetic',
	  'syntax': [
	    'floor(x)'
	  ],
	  'description':
	      'Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.',
	  'examples': [
	    'floor(3.2)',
	    'floor(3.8)',
	    'floor(-4.2)'
	  ],
	  'seealso': ['ceil', 'fix', 'round']
	};


/***/ }),
/* 201 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'gcd',
	  'category': 'Arithmetic',
	  'syntax': [
	    'gcd(a, b)',
	    'gcd(a, b, c, ...)'
	  ],
	  'description': 'Compute the greatest common divisor.',
	  'examples': [
	    'gcd(8, 12)',
	    'gcd(-4, 6)',
	    'gcd(25, 15, -10)'
	  ],
	  'seealso': [ 'lcm', 'xgcd' ]
	};


/***/ }),
/* 202 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'hypot',
	  'category': 'Arithmetic',
	  'syntax': [
	    'hypot(a, b, c, ...)',
	    'hypot([a, b, c, ...])'
	  ],
	  'description': 'Calculate the hypotenusa of a list with values. ',
	  'examples': [
	    'hypot(3, 4)',
	    'sqrt(3^2 + 4^2)',
	    'hypot(-2)',
	    'hypot([3, 4, 5])'
	  ],
	  'seealso': [ 'abs', 'norm' ]
	};


/***/ }),
/* 203 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'lcm',
	  'category': 'Arithmetic',
	  'syntax': [
	    'lcm(x, y)'
	  ],
	  'description': 'Compute the least common multiple.',
	  'examples': [
	    'lcm(4, 6)',
	    'lcm(6, 21)',
	    'lcm(6, 21, 5)'
	  ],
	  'seealso': [ 'gcd' ]
	};


/***/ }),
/* 204 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'log',
	  'category': 'Arithmetic',
	  'syntax': [
	    'log(x)',
	    'log(x, base)'
	  ],
	  'description': 'Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).',
	  'examples': [
	    'log(3.5)',
	    'a = log(2.4)',
	    'exp(a)',
	    '10 ^ 4',
	    'log(10000, 10)',
	    'log(10000) / log(10)',
	    'b = log(1024, 2)',
	    '2 ^ b'
	  ],
	  'seealso': [
	    'exp',
	    'log10'
	  ]
	};

/***/ }),
/* 205 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'log10',
	  'category': 'Arithmetic',
	  'syntax': [
	    'log10(x)'
	  ],
	  'description': 'Compute the 10-base logarithm of a value.',
	  'examples': [
	    'log10(0.00001)',
	    'log10(10000)',
	    '10 ^ 4',
	    'log(10000) / log(10)',
	    'log(10000, 10)'
	  ],
	  'seealso': [
	    'exp',
	    'log'
	  ]
	};


/***/ }),
/* 206 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'mod',
	  'category': 'Operators',
	  'syntax': [
	    'x % y',
	    'x mod y',
	    'mod(x, y)'
	  ],
	  'description':
	      'Calculates the modulus, the remainder of an integer division.',
	  'examples': [
	    '7 % 3',
	    '11 % 2',
	    '10 mod 4',
	    'function isOdd(x) = x % 2',
	    'isOdd(2)',
	    'isOdd(3)'
	  ],
	  'seealso': ['divide']
	};


/***/ }),
/* 207 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'multiply',
	  'category': 'Operators',
	  'syntax': [
	    'x * y',
	    'multiply(x, y)'
	  ],
	  'description': 'multiply two values.',
	  'examples': [
	    'a = 2.1 * 3.4',
	    'a / 3.4',
	    '2 * 3 + 4',
	    '2 * (3 + 4)',
	    '3 * 2.1 km'
	  ],
	  'seealso': [
	    'divide'
	  ]
	};


/***/ }),
/* 208 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'norm',
	  'category': 'Arithmetic',
	  'syntax': [
	    'norm(x)',
	    'norm(x, p)'
	  ],
	  'description': 'Calculate the norm of a number, vector or matrix.',
	  'examples': [
	    'abs(-3.5)',
	    'norm(-3.5)',
	    'norm(3 - 4i))',
	    'norm([1, 2, -3], Infinity)',
	    'norm([1, 2, -3], -Infinity)',
	    'norm([3, 4], 2)',
	    'norm([[1, 2], [3, 4]], 1)',
	    'norm([[1, 2], [3, 4]], \'inf\')',
	    'norm([[1, 2], [3, 4]], \'fro\')'
	  ]
	};


/***/ }),
/* 209 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'nthRoot',
	  'category': 'Arithmetic',
	  'syntax': [
	    'nthRoot(a)',
	    'nthRoot(a, root)'
	  ],
	  'description': 'Calculate the nth root of a value. ' +
	      'The principal nth root of a positive real number A, ' +
	      'is the positive real solution of the equation "x^root = A".',
	  'examples': [
	    '4 ^ 3',
	    'nthRoot(64, 3)',
	    'nthRoot(9, 2)',
	    'sqrt(9)'
	  ],
	  'seealso': [
	    'sqrt',
	    'pow'
	  ]
	};

/***/ }),
/* 210 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'pow',
	  'category': 'Operators',
	  'syntax': [
	    'x ^ y',
	    'pow(x, y)'
	  ],
	  'description':
	      'Calculates the power of x to y, x^y.',
	  'examples': [
	    '2^3 = 8',
	    '2*2*2',
	    '1 + e ^ (pi * i)'
	  ],
	  'seealso': [ 'multiply' ]
	};


/***/ }),
/* 211 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'round',
	  'category': 'Arithmetic',
	  'syntax': [
	    'round(x)',
	    'round(x, n)'
	  ],
	  'description':
	      'round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.',
	  'examples': [
	    'round(3.2)',
	    'round(3.8)',
	    'round(-4.2)',
	    'round(-4.8)',
	    'round(pi, 3)',
	    'round(123.45678, 2)'
	  ],
	  'seealso': ['ceil', 'floor', 'fix']
	};


/***/ }),
/* 212 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'sign',
	  'category': 'Arithmetic',
	  'syntax': [
	    'sign(x)'
	  ],
	  'description':
	      'Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.',
	  'examples': [
	    'sign(3.5)',
	    'sign(-4.2)',
	    'sign(0)'
	  ],
	  'seealso': [
	    'abs'
	  ]
	};


/***/ }),
/* 213 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'sqrt',
	  'category': 'Arithmetic',
	  'syntax': [
	    'sqrt(x)'
	  ],
	  'description':
	      'Compute the square root value. If x = y * y, then y is the square root of x.',
	  'examples': [
	    'sqrt(25)',
	    '5 * 5',
	    'sqrt(-1)'
	  ],
	  'seealso': [
	    'square',
	    'multiply'
	  ]
	};


/***/ }),
/* 214 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'square',
	  'category': 'Arithmetic',
	  'syntax': [
	    'square(x)'
	  ],
	  'description':
	      'Compute the square of a value. The square of x is x * x.',
	  'examples': [
	    'square(3)',
	    'sqrt(9)',
	    '3^2',
	    '3 * 3'
	  ],
	  'seealso': [
	    'multiply',
	    'pow',
	    'sqrt',
	    'cube'
	  ]
	};


/***/ }),
/* 215 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'subtract',
	  'category': 'Operators',
	  'syntax': [
	    'x - y',
	    'subtract(x, y)'
	  ],
	  'description': 'subtract two values.',
	  'examples': [
	    'a = 5.3 - 2',
	    'a + 2',
	    '2/3 - 1/6',
	    '2 * 3 - 3',
	    '2.1 km - 500m'
	  ],
	  'seealso': [
	    'add'
	  ]
	};


/***/ }),
/* 216 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'unaryMinus',
	  'category': 'Operators',
	  'syntax': [
	    '-x',
	    'unaryMinus(x)'
	  ],
	  'description':
	      'Inverse the sign of a value. Converts booleans and strings to numbers.',
	  'examples': [
	    '-4.5',
	    '-(-5.6)',
	    '-"22"'
	  ],
	  'seealso': [
	    'add', 'subtract', 'unaryPlus'
	  ]
	};


/***/ }),
/* 217 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'unaryPlus',
	  'category': 'Operators',
	  'syntax': [
	    '+x',
	    'unaryPlus(x)'
	  ],
	  'description':
	      'Converts booleans and strings to numbers.',
	  'examples': [
	    '+true',
	    '+"2"'
	  ],
	  'seealso': [
	    'add', 'subtract', 'unaryMinus'
	  ]
	};


/***/ }),
/* 218 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'xgcd',
	  'category': 'Arithmetic',
	  'syntax': [
	    'xgcd(a, b)'
	  ],
	  'description': 'Calculate the extended greatest common divisor for two values',
	  'examples': [
	    'xgcd(8, 12)',
	    'gcd(8, 12)',
	    'xgcd(36163, 21199)'
	  ],
	  'seealso': [ 'gcd', 'lcm' ]
	};


/***/ }),
/* 219 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'bitAnd',
	  'category': 'Bitwise',
	  'syntax': [
	    'x & y',
	    'bitAnd(x, y)'
	  ],
	  'description': 'Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0',
	  'examples': [
	    '5 & 3',
	    'bitAnd(53, 131)',
	    '[1, 12, 31] & 42'
	  ],
	  'seealso': [
	    'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
	  ]
	};


/***/ }),
/* 220 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'bitNot',
	  'category': 'Bitwise',
	  'syntax': [
	    '~x',
	    'bitNot(x)'
	  ],
	  'description': 'Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.',
	  'examples': [
	    '~1',
	    '~2',
	    'bitNot([2, -3, 4])'
	  ],
	  'seealso': [
	    'bitAnd', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
	  ]
	};


/***/ }),
/* 221 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'bitOr',
	  'category': 'Bitwise',
	  'syntax': [
	    'x | y',
	    'bitOr(x, y)'
	  ],
	  'description': 'Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.',
	  'examples': [
	    '5 | 3',
	    'bitOr([1, 2, 3], 4)'
	  ],
	  'seealso': [
	    'bitAnd', 'bitNot', 'bitXor', 'leftShift', 'rightArithShift', 'rightLogShift'
	  ]
	};


/***/ }),
/* 222 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'bitXor',
	  'category': 'Bitwise',
	  'syntax': [
	    'bitXor(x, y)'
	  ],
	  'description': 'Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.',
	  'examples': [
	    'bitOr(1, 2)',
	    'bitXor([2, 3, 4], 4)'
	  ],
	  'seealso': [
	    'bitAnd', 'bitNot', 'bitOr', 'leftShift', 'rightArithShift', 'rightLogShift'
	  ]
	};


/***/ }),
/* 223 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'leftShift',
	  'category': 'Bitwise',
	  'syntax': [
	    'x << y',
	    'leftShift(x, y)'
	  ],
	  'description': 'Bitwise left logical shift of a value x by y number of bits.',
	  'examples': [
	    '4 << 1',
	    '8 >> 1'
	  ],
	  'seealso': [
	    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'rightArithShift', 'rightLogShift'
	  ]
	};


/***/ }),
/* 224 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'rightArithShift',
	  'category': 'Bitwise',
	  'syntax': [
	    'x >> y',
	    'leftShift(x, y)'
	  ],
	  'description': 'Bitwise right arithmetic shift of a value x by y number of bits.',
	  'examples': [
	    '8 >> 1',
	    '4 << 1',
	    '-12 >> 2'
	  ],
	  'seealso': [
	    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightLogShift'
	  ]
	};


/***/ }),
/* 225 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'rightLogShift',
	  'category': 'Bitwise',
	  'syntax': [
	    'x >> y',
	    'leftShift(x, y)'
	  ],
	  'description': 'Bitwise right logical shift of a value x by y number of bits.',
	  'examples': [
	    '8 >>> 1',
	    '4 << 1',
	    '-12 >>> 2'
	  ],
	  'seealso': [
	    'bitAnd', 'bitNot', 'bitOr', 'bitXor', 'leftShift', 'rightArithShift'
	  ]
	};


/***/ }),
/* 226 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'bellNumbers',
	  'category': 'Combinatorics',
	  'syntax': [
	    'bellNumbers(n)'
	  ],
	  'description': 'The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.',
	  'examples': [
	    'bellNumbers(3)',
	    'bellNumbers(8)'
	  ],
	  'seealso': ['stirlingS2']
	};

/***/ }),
/* 227 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'catalan',
	  'category': 'Combinatorics',
	  'syntax': [
	    'catalan(n)'
	  ],
	  'description': 'The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.',
	  'examples': [
	    'catalan(3)',
	    'catalan(8)'
	  ],
	  'seealso': ['bellNumbers']
	};

/***/ }),
/* 228 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'composition',
	  'category': 'Combinatorics',
	  'syntax': [
	    'composition(n, k)'
	  ],
	  'description': 'The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.',
	  'examples': [
	    'composition(5, 3)'
	  ],
	  'seealso': ['combinations']
	};

/***/ }),
/* 229 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'stirlingS2',
	  'category': 'Combinatorics',
	  'syntax': [
	    'stirlingS2(n, k)'
	  ],
	  'description': 'he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.',
	  'examples': [
	    'stirlingS2(5, 3)'
	  ],
	  'seealso': ['bellNumbers']
	};


/***/ }),
/* 230 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'config',
	  'category': 'Core',
	  'syntax': [
	    'config()',
	    'config(options)'
	  ],
	  'description': 'Get configuration or change configuration.',
	  'examples': [
	    'config()',
	    '1/3 + 1/4',
	    'config({number: "Fraction"})',
	    '1/3 + 1/4'
	  ],
	  'seealso': []
	};


/***/ }),
/* 231 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'import',
	  'category': 'Core',
	  'syntax': [
	    'import(functions)',
	    'import(functions, options)'
	  ],
	  'description': 'Import functions or constants from an object.',
	  'examples': [
	    'import({myFn: f(x)=x^2, myConstant: 32 })',
	    'myFn(2)',
	    'myConstant'
	  ],
	  'seealso': []
	};


/***/ }),
/* 232 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'typed',
	  'category': 'Core',
	  'syntax': [
	    'typed(signatures)',
	    'typed(name, signatures)'
	  ],
	  'description': 'Create a typed function.',
	  'examples': [
	    'double = typed({ "number, number": f(x)=x+x })',
	    'double(2)',
	    'double("hello")'
	  ],
	  'seealso': []
	};


/***/ }),
/* 233 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'arg',
	  'category': 'Complex',
	  'syntax': [
	    'arg(x)'
	  ],
	  'description':
	      'Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).',
	  'examples': [
	    'arg(2 + 2i)',
	    'atan2(3, 2)',
	    'arg(2 + 3i)'
	  ],
	  'seealso': [
	    're',
	    'im',
	    'conj',
	    'abs'
	  ]
	};


/***/ }),
/* 234 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'conj',
	  'category': 'Complex',
	  'syntax': [
	    'conj(x)'
	  ],
	  'description':
	      'Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.',
	  'examples': [
	    'conj(2 + 3i)',
	    'conj(2 - 3i)',
	    'conj(-5.2i)'
	  ],
	  'seealso': [
	    're',
	    'im',
	    'abs',
	    'arg'
	  ]
	};


/***/ }),
/* 235 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 're',
	  'category': 'Complex',
	  'syntax': [
	    're(x)'
	  ],
	  'description': 'Get the real part of a complex number.',
	  'examples': [
	    're(2 + 3i)',
	    'im(2 + 3i)',
	    're(-5.2i)',
	    're(2.4)'
	  ],
	  'seealso': [
	    'im',
	    'conj',
	    'abs',
	    'arg'
	  ]
	};


/***/ }),
/* 236 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'im',
	  'category': 'Complex',
	  'syntax': [
	    'im(x)'
	  ],
	  'description': 'Get the imaginary part of a complex number.',
	  'examples': [
	    'im(2 + 3i)',
	    're(2 + 3i)',
	    'im(-5.2i)',
	    'im(2.4)'
	  ],
	  'seealso': [
	    're',
	    'conj',
	    'abs',
	    'arg'
	  ]
	};


/***/ }),
/* 237 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'eval',
	  'category': 'Expression',
	  'syntax': [
	    'eval(expression)',
	    'eval([expr1, expr2, expr3, ...])'
	  ],
	  'description': 'Evaluate an expression or an array with expressions.',
	  'examples': [
	    'eval("2 + 3")',
	    'eval("sqrt(" + 4 + ")")'
	  ],
	  'seealso': []
	};


/***/ }),
/* 238 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'help',
	  'category': 'Expression',
	  'syntax': [
	    'help(object)',
	    'help(string)'
	  ],
	  'description': 'Display documentation on a function or data type.',
	  'examples': [
	    'help(sqrt)',
	    'help("complex")'
	  ],
	  'seealso': []
	};


/***/ }),
/* 239 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'distance',
	  'category': 'Geometry',
	  'syntax': [
	    'distance([x1, y1], [x2, y2])',
	    'distance([[x1, y1], [x2, y2])'
	  ],
	  'description': 'Calculates the Euclidean distance between two points.',
	  'examples': [
	    'distance([0,0], [4,4])',
	    'distance([[0,0], [4,4]])'
	  ],
	  'seealso': []
	};


/***/ }),
/* 240 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'intersect',
	  'category': 'Geometry',
	  'syntax': [
	    'intersect(expr1, expr2, expr3, expr4)',
	    'intersect(expr1, expr2, expr3)'
	  ],
	  'description': 'Computes the intersection point of lines and/or planes.',
	  'examples': [
	    'intersect([0, 0], [10, 10], [10, 0], [0, 10])',
	    'intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])'
	  ],
	  'seealso': []
	};


/***/ }),
/* 241 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'and',
	  'category': 'Logical',
	  'syntax': [
	    'x and y',
	    'and(x, y)'
	  ],
	  'description': 'Logical and. Test whether two values are both defined with a nonzero/nonempty value.',
	  'examples': [
	    'true and false',
	    'true and true',
	    '2 and 4'
	  ],
	  'seealso': [
	    'not', 'or', 'xor'
	  ]
	};


/***/ }),
/* 242 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'not',
	  'category': 'Logical',
	  'syntax': [
	    'not x',
	    'not(x)'
	  ],
	  'description': 'Logical not. Flips the boolean value of given argument.',
	  'examples': [
	    'not true',
	    'not false',
	    'not 2',
	    'not 0'
	  ],
	  'seealso': [
	    'and', 'or', 'xor'
	  ]
	};


/***/ }),
/* 243 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'or',
	  'category': 'Logical',
	  'syntax': [
	    'x or y',
	    'or(x, y)'
	  ],
	  'description': 'Logical or. Test if at least one value is defined with a nonzero/nonempty value.',
	  'examples': [
	    'true or false',
	    'false or false',
	    '0 or 4'
	  ],
	  'seealso': [
	    'not', 'and', 'xor'
	  ]
	};


/***/ }),
/* 244 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'xor',
	  'category': 'Logical',
	  'syntax': [
	    'x or y',
	    'or(x, y)'
	  ],
	  'description': 'Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.',
	  'examples': [
	    'true xor false',
	    'false xor false',
	    'true xor true',
	    '0 or 4'
	  ],
	  'seealso': [
	    'not', 'and', 'or'
	  ]
	};


/***/ }),
/* 245 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'concat',
	  'category': 'Matrix',
	  'syntax': [
	    'concat(A, B, C, ...)',
	    'concat(A, B, C, ..., dim)'
	  ],
	  'description': 'Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.',
	  'examples': [
	    'A = [1, 2; 5, 6]',
	    'B = [3, 4; 7, 8]',
	    'concat(A, B)',
	    'concat(A, B, 1)',
	    'concat(A, B, 2)'
	  ],
	  'seealso': [
	    'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ }),
/* 246 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'cross',
	  'category': 'Matrix',
	  'syntax': [
	    'cross(A, B)'
	  ],
	  'description': 'Calculate the cross product for two vectors in three dimensional space.',
	  'examples': [
	    'cross([1, 1, 0],  [0, 1, 1])',
	    'cross([3, -3, 1], [4, 9, 2])',
	    'cross([2, 3, 4],  [5, 6, 7])'
	  ],
	  'seealso': [
	    'multiply',
	    'dot'
	  ]
	};


/***/ }),
/* 247 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'det',
	  'category': 'Matrix',
	  'syntax': [
	    'det(x)'
	  ],
	  'description': 'Calculate the determinant of a matrix',
	  'examples': [
	    'det([1, 2; 3, 4])',
	    'det([-2, 2, 3; -1, 1, 3; 2, 0, -1])'
	  ],
	  'seealso': [
	    'concat', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ }),
/* 248 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'diag',
	  'category': 'Matrix',
	  'syntax': [
	    'diag(x)',
	    'diag(x, k)'
	  ],
	  'description': 'Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.',
	  'examples': [
	    'diag(1:3)',
	    'diag(1:3, 1)',
	    'a = [1, 2, 3; 4, 5, 6; 7, 8, 9]',
	    'diag(a)'
	  ],
	  'seealso': [
	    'concat', 'det', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ }),
/* 249 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'dot',
	  'category': 'Matrix',
	  'syntax': [
	    'dot(A, B)'
	  ],
	  'description': 'Calculate the dot product of two vectors. ' +
	      'The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] ' +
	      'is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn',
	  'examples': [
	    'dot([2, 4, 1], [2, 2, 3])',
	    '[2, 4, 1] * [2, 2, 3]'
	  ],
	  'seealso': [
	    'multiply',
	    'cross'
	  ]
	};


/***/ }),
/* 250 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'eye',
	  'category': 'Matrix',
	  'syntax': [
	    'eye(n)',
	    'eye(m, n)',
	    'eye([m, n])',
	    'eye'
	  ],
	  'description': 'Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.',
	  'examples': [
	    'eye(3)',
	    'eye(3, 5)',
	    'a = [1, 2, 3; 4, 5, 6]',
	    'eye(size(a))'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ }),
/* 251 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'filter',
	  'category': 'Matrix',
	  'syntax': [
	    'filter(x, test)'
	  ],
	  'description': 'Filter items in a matrix.',
	  'examples': [
	    'isPositive(x) = x > 0',
	    'filter([6, -2, -1, 4, 3], isPositive)',
	    'filter([6, -2, 0, 1, 0], x != 0)'
	  ],
	  'seealso': ['sort', 'map', 'forEach']
	};


/***/ }),
/* 252 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'flatten',
	  'category': 'Matrix',
	  'syntax': [
	    'flatten(x)'
	  ],
	  'description': 'Flatten a multi dimensional matrix into a single dimensional matrix.',
	  'examples': [
	    'a = [1, 2, 3; 4, 5, 6]',
	    'size(a)',
	    'b = flatten(a)',
	    'size(b)'
	  ],
	  'seealso': [
	    'concat', 'resize', 'size', 'squeeze'
	  ]
	};


/***/ }),
/* 253 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'forEach',
	  'category': 'Matrix',
	  'syntax': [
	    'forEach(x, callback)'
	  ],
	  'description': 'Iterates over all elements of a matrix/array, and executes the given callback function.',
	  'examples': [
	    'forEach([1, 2, 3], function(val) { console.log(val) })'
	  ],
	  'seealso': ['map', 'sort', 'filter']
	};


/***/ }),
/* 254 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'inv',
	  'category': 'Matrix',
	  'syntax': [
	    'inv(x)'
	  ],
	  'description': 'Calculate the inverse of a matrix',
	  'examples': [
	    'inv([1, 2; 3, 4])',
	    'inv(4)',
	    '1 / 4'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ }),
/* 255 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'kron',
	  'category': 'Matrix',
	  'syntax': [
	    'math.kron(x, y)'
	  ],
	  'description': 'Calculates the kronecker product of 2 matrices or vectors.',
	  'examples': [
	    'kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])',
	    'kron([1,1], [2,3,4])'
	  ],
	  'seealso': [
	    'multiply', 'dot', 'cross'
	  ]
	};


/***/ }),
/* 256 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'map',
	  'category': 'Matrix',
	  'syntax': [
	    'map(x, callback)'
	  ],
	  'description': 'Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.',
	  'examples': [
	    'map([1, 2, 3], function(val) { return value * value })'
	  ],
	  'seealso': ['filter', 'forEach']
	};


/***/ }),
/* 257 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'ones',
	  'category': 'Matrix',
	  'syntax': [
	    'ones(m)',
	    'ones(m, n)',
	    'ones(m, n, p, ...)',
	    'ones([m])',
	    'ones([m, n])',
	    'ones([m, n, p, ...])',
	    'ones'
	  ],
	  'description': 'Create a matrix containing ones.',
	  'examples': [
	    'ones(3)',
	    'ones(3, 5)',
	    'ones([2,3]) * 4.5',
	    'a = [1, 2, 3; 4, 5, 6]',
	    'ones(size(a))'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ }),
/* 258 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'partitionSelect',
	  'category': 'Matrix',
	  'syntax': [
	    'partitionSelect(x, k)',
	    'partitionSelect(x, k, compare)'
	  ],
	  'description': 'Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.',
	  'examples': [
	    'partitionSelect([5, 10, 1], 2)',
	    'partitionSelect(["C", "B", "A", "D"], 1)'
	  ],
	  'seealso': ['sort']
	};


/***/ }),
/* 259 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'range',
	  'category': 'Type',
	  'syntax': [
	    'start:end',
	    'start:step:end',
	    'range(start, end)',
	    'range(start, end, step)',
	    'range(string)'
	  ],
	  'description':
	      'Create a range. Lower bound of the range is included, upper bound is excluded.',
	  'examples': [
	    '1:5',
	    '3:-1:-3',
	    'range(3, 7)',
	    'range(0, 12, 2)',
	    'range("4:10")',
	    'a = [1, 2, 3, 4; 5, 6, 7, 8]',
	    'a[1:2, 1:2]'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'size', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ }),
/* 260 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'resize',
	  'category': 'Matrix',
	  'syntax': [
	    'resize(x, size)',
	    'resize(x, size, defaultValue)'
	  ],
	  'description': 'Resize a matrix.',
	  'examples': [
	    'resize([1,2,3,4,5], [3])',
	    'resize([1,2,3], [5])',
	    'resize([1,2,3], [5], -1)',
	    'resize(2, [2, 3])',
	    'resize("hello", [8], "!")'
	  ],
	  'seealso': [
	    'size', 'subset', 'squeeze', 'reshape'
	  ]
	};


/***/ }),
/* 261 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'reshape',
	  'category': 'Matrix',
	  'syntax': [
	    'reshape(x, sizes)'
	  ],
	  'description': 'Reshape a multi dimensional array to fit the specified dimensions.',
	  'examples': [
	    'reshape([1, 2, 3, 4, 5, 6], [2, 3])',
	    'reshape([[1, 2], [3, 4]], [1, 4])',
	    'reshape([[1, 2], [3, 4]], [4])'
	  ],
	  'seealso': [
	    'size', 'squeeze', 'resize'
	  ]
	};


/***/ }),
/* 262 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'size',
	  'category': 'Matrix',
	  'syntax': [
	    'size(x)'
	  ],
	  'description': 'Calculate the size of a matrix.',
	  'examples': [
	    'size(2.3)',
	    'size("hello world")',
	    'a = [1, 2; 3, 4; 5, 6]',
	    'size(a)',
	    'size(1:6)'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'squeeze', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ }),
/* 263 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'sort',
	  'category': 'Matrix',
	  'syntax': [
	    'sort(x)',
	    'sort(x, compare)'
	  ],
	  'description': 'Sort the items in a matrix. Compare can be a string "asc" or "desc", or a custom sort function.',
	  'examples': [
	    'sort([5, 10, 1])',
	    'sort(["C", "B", "A", "D"])',
	    'sortByLength(a, b) = size(a)[1] - size(b)[1]',
	    'sort(["Langdon", "Tom", "Sara"], sortByLength)'
	  ],
	  'seealso': ['map', 'filter', 'forEach']
	};


/***/ }),
/* 264 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'squeeze',
	  'category': 'Matrix',
	  'syntax': [
	    'squeeze(x)'
	  ],
	  'description': 'Remove inner and outer singleton dimensions from a matrix.',
	  'examples': [
	    'a = zeros(3,2,1)',
	    'size(squeeze(a))',
	    'b = zeros(1,1,3)',
	    'size(squeeze(b))'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'subset', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ }),
/* 265 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'subset',
	  'category': 'Matrix',
	  'syntax': [
	    'value(index)',
	    'value(index) = replacement',
	    'subset(value, [index])',
	    'subset(value, [index], replacement)'
	  ],
	  'description': 'Get or set a subset of a matrix or string. ' +
	      'Indexes are one-based. ' +
	      'Both the ranges lower-bound and upper-bound are included.',
	  'examples': [
	    'd = [1, 2; 3, 4]',
	    'e = []',
	    'e[1, 1:2] = [5, 6]',
	    'e[2, :] = [7, 8]',
	    'f = d * e',
	    'f[2, 1]',
	    'f[:, 1]'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'trace', 'transpose', 'zeros'
	  ]
	};


/***/ }),
/* 266 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'trace',
	  'category': 'Matrix',
	  'syntax': [
	    'trace(A)'
	  ],
	  'description': 'Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.',
	  'examples': [
	    'A = [1, 2, 3; -1, 2, 3; 2, 0, 3]',
	    'trace(A)'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'transpose', 'zeros'
	  ]
	};


/***/ }),
/* 267 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'transpose',
	  'category': 'Matrix',
	  'syntax': [
	    'x\'',
	    'transpose(x)'
	  ],
	  'description': 'Transpose a matrix',
	  'examples': [
	    'a = [1, 2, 3; 4, 5, 6]',
	    'a\'',
	    'transpose(a)'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'zeros'
	  ]
	};


/***/ }),
/* 268 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'zeros',
	  'category': 'Matrix',
	  'syntax': [
	    'zeros(m)',
	    'zeros(m, n)',
	    'zeros(m, n, p, ...)',
	    'zeros([m])',
	    'zeros([m, n])',
	    'zeros([m, n, p, ...])',
	    'zeros'
	  ],
	  'description': 'Create a matrix containing zeros.',
	  'examples': [
	    'zeros(3)',
	    'zeros(3, 5)',
	    'a = [1, 2, 3; 4, 5, 6]',
	    'zeros(size(a))'
	  ],
	  'seealso': [
	    'concat', 'det', 'diag', 'eye', 'inv', 'ones', 'range', 'size', 'squeeze', 'subset', 'trace', 'transpose'
	  ]
	};


/***/ }),
/* 269 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'combinations',
	  'category': 'Probability',
	  'syntax': [
	    'combinations(n, k)'
	  ],
	  'description': 'Compute the number of combinations of n items taken k at a time',
	  'examples': [
	    'combinations(7, 5)'
	  ],
	  'seealso': ['permutations', 'factorial']
	};


/***/ }),
/* 270 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'factorial',
	  'category': 'Probability',
	  'syntax': [
	    'kldivergence(x, y)'
	  ],
	  'description': 'Compute the factorial of a value',
	  'examples': [
	    '5!',
	    '5 * 4 * 3 * 2 * 1',
	    '3!'
	  ],
	  'seealso': ['combinations', 'permutations', 'gamma']
	};


/***/ }),
/* 271 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'gamma',
	  'category': 'Probability',
	  'syntax': [
	    'gamma(n)'
	  ],
	  'description': 'Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.',
	  'examples': [
	    'gamma(4)',
	    '3!',
	    'gamma(1/2)',
	    'sqrt(pi)'
	  ],
	  'seealso': ['factorial']
	};


/***/ }),
/* 272 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'kldivergence',
	  'category': 'Probability',
	  'syntax': [
	    'n!',
	    'factorial(n)'
	  ],
	  'description': 'Calculate the Kullback-Leibler (KL) divergence  between two distributions.',
	  'examples': [
	    'math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])'
	  ],
	  'seealso': []
	};


/***/ }),
/* 273 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'multinomial',
	  'category': 'Probability',
	  'syntax': [
	    'multinomial(A)'
	  ],
	  'description': 'Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai <= 0.',
	  'examples': [
	    'multinomial([1, 2, 1])'
	  ],
	  'seealso': ['combinations', 'factorial']
	};

/***/ }),
/* 274 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'permutations',
	  'category': 'Probability',
	  'syntax': [
	    'permutations(n)',
	    'permutations(n, k)'
	  ],
	  'description': 'Compute the number of permutations of n items taken k at a time',
	  'examples': [
	    'permutations(5)',
	    'permutations(5, 3)'
	  ],
	  'seealso': ['combinations', 'factorial']
	};


/***/ }),
/* 275 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'pickRandom',
	  'category': 'Probability',
	  'syntax': [
	    'pickRandom(array)',
	    'pickRandom(array, number)',
	    'pickRandom(array, weights)',
	    'pickRandom(array, number, weights)',
	    'pickRandom(array, weights, number)'
	  ],
	  'description':
	      'Pick a random entry from a given array.',
	  'examples': [
	    'pickRandom(0:10)',
	    'pickRandom([1, 3, 1, 6])',
	    'pickRandom([1, 3, 1, 6], 2)',
	    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1])',
	    'pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])',
	    'pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)'
	  ],
	  'seealso': ['random', 'randomInt']
	};


/***/ }),
/* 276 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'random',
	  'category': 'Probability',
	  'syntax': [
	    'random()',
	    'random(max)',
	    'random(min, max)',
	    'random(size)',
	    'random(size, max)',
	    'random(size, min, max)'
	  ],
	  'description':
	      'Return a random number.',
	  'examples': [
	    'random()',
	    'random(10, 20)',
	    'random([2, 3])'
	  ],
	  'seealso': ['pickRandom', 'randomInt']
	};


/***/ }),
/* 277 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'randInt',
	  'category': 'Probability',
	  'syntax': [
	    'randInt(max)',
	    'randInt(min, max)',
	    'randInt(size)',
	    'randInt(size, max)',
	    'randInt(size, min, max)'
	  ],
	  'description':
	      'Return a random integer number',
	  'examples': [
	    'randInt(10, 20)',
	    'randInt([2, 3], 10)'
	  ],
	  'seealso': ['pickRandom', 'random']
	};

/***/ }),
/* 278 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'compare',
	  'category': 'Relational',
	  'syntax': [
	    'compare(x, y)'
	  ],
	  'description':
	      'Compare two values. Returns 1 if x is larger than y, -1 if x is smaller than y, and 0 if x and y are equal.',
	  'examples': [
	    'compare(2, 3)',
	    'compare(3, 2)',
	    'compare(2, 2)',
	    'compare(5cm, 40mm)',
	    'compare(2, [1, 2, 3])'
	  ],
	  'seealso': [
	    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq'
	  ]
	};


/***/ }),
/* 279 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'deepEqual',
	  'category': 'Relational',
	  'syntax': [
	    'deepEqual(x, y)'
	  ],
	  'description':
	      'Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.',
	  'examples': [
	    '[1,3,4] == [1,3,4]',
	    '[1,3,4] == [1,3]'
	  ],
	  'seealso': [
	    'equal', 'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare'
	  ]
	};


/***/ }),
/* 280 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'equal',
	  'category': 'Relational',
	  'syntax': [
	    'x == y',
	    'equal(x, y)'
	  ],
	  'description':
	      'Check equality of two values. Returns true if the values are equal, and false if not.',
	  'examples': [
	    '2+2 == 3',
	    '2+2 == 4',
	    'a = 3.2',
	    'b = 6-2.8',
	    'a == b',
	    '50cm == 0.5m'
	  ],
	  'seealso': [
	    'unequal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'
	  ]
	};


/***/ }),
/* 281 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'larger',
	  'category': 'Relational',
	  'syntax': [
	    'x > y',
	    'larger(x, y)'
	  ],
	  'description':
	      'Check if value x is larger than y. Returns true if x is larger than y, and false if not.',
	  'examples': [
	    '2 > 3',
	    '5 > 2*2',
	    'a = 3.3',
	    'b = 6-2.8',
	    '(a > b)',
	    '(b < a)',
	    '5 cm > 2 inch'
	  ],
	  'seealso': [
	    'equal', 'unequal', 'smaller', 'smallerEq', 'largerEq', 'compare'
	  ]
	};


/***/ }),
/* 282 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'largerEq',
	  'category': 'Relational',
	  'syntax': [
	    'x >= y',
	    'largerEq(x, y)'
	  ],
	  'description':
	      'Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.',
	  'examples': [
	    '2 > 1+1',
	    '2 >= 1+1',
	    'a = 3.2',
	    'b = 6-2.8',
	    '(a > b)'
	  ],
	  'seealso': [
	    'equal', 'unequal', 'smallerEq', 'smaller', 'largerEq', 'compare'
	  ]
	};


/***/ }),
/* 283 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'smaller',
	  'category': 'Relational',
	  'syntax': [
	    'x < y',
	    'smaller(x, y)'
	  ],
	  'description':
	      'Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.',
	  'examples': [
	    '2 < 3',
	    '5 < 2*2',
	    'a = 3.3',
	    'b = 6-2.8',
	    '(a < b)',
	    '5 cm < 2 inch'
	  ],
	  'seealso': [
	    'equal', 'unequal', 'larger', 'smallerEq', 'largerEq', 'compare'
	  ]
	};


/***/ }),
/* 284 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'smallerEq',
	  'category': 'Relational',
	  'syntax': [
	    'x <= y',
	    'smallerEq(x, y)'
	  ],
	  'description':
	      'Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.',
	  'examples': [
	    '2 < 1+1',
	    '2 <= 1+1',
	    'a = 3.2',
	    'b = 6-2.8',
	    '(a < b)'
	  ],
	  'seealso': [
	    'equal', 'unequal', 'larger', 'smaller', 'largerEq', 'compare'
	  ]
	};


/***/ }),
/* 285 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'unequal',
	  'category': 'Relational',
	  'syntax': [
	    'x != y',
	    'unequal(x, y)'
	  ],
	  'description':
	      'Check unequality of two values. Returns true if the values are unequal, and false if they are equal.',
	  'examples': [
	    '2+2 != 3',
	    '2+2 != 4',
	    'a = 3.2',
	    'b = 6-2.8',
	    'a != b',
	    '50cm != 0.5m',
	    '5 cm != 2 inch'
	  ],
	  'seealso': [
	    'equal', 'smaller', 'larger', 'smallerEq', 'largerEq', 'compare', 'deepEqual'
	  ]
	};


/***/ }),
/* 286 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'erf',
	  'category': 'Special',
	  'syntax': [
	    'erf(x)'
	  ],
	  'description': 'Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x',
	  'examples': [
	    'erf(0.2)',
	    'erf(-0.5)',
	    'erf(4)'
	  ],
	  'seealso': []
	};


/***/ }),
/* 287 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'mad',
	  'category': 'Statistics',
	  'syntax': [
	    'mad(a, b, c, ...)',
	    'mad(A)'
	  ],
	  'description': 'Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.',
	  'examples': [
	    'mad(10, 20, 30)',
	    'mad([1, 2, 3])',
	    'mad(10, 20, 30)'
	  ],
	  'seealso': [
	    'mean',
	    'median',
	    'std',
	    'abs'
	  ]
	};


/***/ }),
/* 288 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'max',
	  'category': 'Statistics',
	  'syntax': [
	    'max(a, b, c, ...)',
	    'max(A)',
	    'max(A, dim)'
	  ],
	  'description': 'Compute the maximum value of a list of values.',
	  'examples': [
	    'max(2, 3, 4, 1)',
	    'max([2, 3, 4, 1])',
	    'max([2, 5; 4, 3])',
	    'max([2, 5; 4, 3], 1)',
	    'max([2, 5; 4, 3], 2)',
	    'max(2.7, 7.1, -4.5, 2.0, 4.1)',
	    'min(2.7, 7.1, -4.5, 2.0, 4.1)'
	  ],
	  'seealso': [
	    'mean',
	    'median',
	    'min',
	    'prod',
	    'std',
	    'sum',
	    'var'
	  ]
	};


/***/ }),
/* 289 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'mean',
	  'category': 'Statistics',
	  'syntax': [
	    'mean(a, b, c, ...)',
	    'mean(A)',
	    'mean(A, dim)'
	  ],
	  'description': 'Compute the arithmetic mean of a list of values.',
	  'examples': [
	    'mean(2, 3, 4, 1)',
	    'mean([2, 3, 4, 1])',
	    'mean([2, 5; 4, 3])',
	    'mean([2, 5; 4, 3], 1)',
	    'mean([2, 5; 4, 3], 2)',
	    'mean([1.0, 2.7, 3.2, 4.0])'
	  ],
	  'seealso': [
	    'max',
	    'median',
	    'min',
	    'prod',
	    'std',
	    'sum',
	    'var'
	  ]
	};


/***/ }),
/* 290 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'median',
	  'category': 'Statistics',
	  'syntax': [
	    'median(a, b, c, ...)',
	    'median(A)'
	  ],
	  'description': 'Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.',
	  'examples': [
	    'median(5, 2, 7)',
	    'median([3, -1, 5, 7])'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'min',
	    'prod',
	    'std',
	    'sum',
	    'var',
	    'quantileSeq'
	  ]
	};


/***/ }),
/* 291 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'min',
	  'category': 'Statistics',
	  'syntax': [
	    'min(a, b, c, ...)',
	    'min(A)',
	    'min(A, dim)'
	  ],
	  'description': 'Compute the minimum value of a list of values.',
	  'examples': [
	    'min(2, 3, 4, 1)',
	    'min([2, 3, 4, 1])',
	    'min([2, 5; 4, 3])',
	    'min([2, 5; 4, 3], 1)',
	    'min([2, 5; 4, 3], 2)',
	    'min(2.7, 7.1, -4.5, 2.0, 4.1)',
	    'max(2.7, 7.1, -4.5, 2.0, 4.1)'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'median',
	    'prod',
	    'std',
	    'sum',
	    'var'
	  ]
	};


/***/ }),
/* 292 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'mode',
	  'category': 'Statistics',
	  'syntax': [
	    'mode(a, b, c, ...)',
	    'mode(A)',
	    'mode(A, a, b, B, c, ...)'
	  ],
	  'description': 'Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.',
	  'examples': [
	    'mode(5, 2, 7)',
	    'mode([3, -1, 5, 7])'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'min',
	    'median',
	    'prod',
	    'std',
	    'sum',
	    'var'
	  ]
	};


/***/ }),
/* 293 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'prod',
	  'category': 'Statistics',
	  'syntax': [
	    'prod(a, b, c, ...)',
	    'prod(A)'
	  ],
	  'description': 'Compute the product of all values.',
	  'examples': [
	    'prod(2, 3, 4)',
	    'prod([2, 3, 4])',
	    'prod([2, 5; 4, 3])'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'min',
	    'median',
	    'min',
	    'std',
	    'sum',
	    'var'
	  ]
	};


/***/ }),
/* 294 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'quantileSeq',
	  'category': 'Statistics',
	  'syntax': [
	    'quantileSeq(A, prob[, sorted])',
	    'quantileSeq(A, [prob1, prob2, ...][, sorted])',
	    'quantileSeq(A, N[, sorted])'
	  ],
	  'description': 'Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. \n\nIn case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.',
	  'examples': [
	    'quantileSeq([3, -1, 5, 7], 0.5)',
	    'quantileSeq([3, -1, 5, 7], [1/3, 2/3])',
	    'quantileSeq([3, -1, 5, 7], 2)',
	    'quantileSeq([-1, 3, 5, 7], 0.5, true)'
	  ],
	  'seealso': [
	    'mean',
	    'median',
	    'min',
	    'max',
	    'prod',
	    'std',
	    'sum',
	    'var'
	  ]
	};

/***/ }),
/* 295 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'std',
	  'category': 'Statistics',
	  'syntax': [
	    'std(a, b, c, ...)',
	    'std(A)',
	    'std(A, normalization)'
	  ],
	  'description': 'Compute the standard deviation of all values, defined as std(A) = sqrt(var(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
	  'examples': [
	    'std(2, 4, 6)',
	    'std([2, 4, 6, 8])',
	    'std([2, 4, 6, 8], "uncorrected")',
	    'std([2, 4, 6, 8], "biased")',
	    'std([1, 2, 3; 4, 5, 6])'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'min',
	    'median',
	    'min',
	    'prod',
	    'sum',
	    'var'
	  ]
	};


/***/ }),
/* 296 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'sum',
	  'category': 'Statistics',
	  'syntax': [
	    'sum(a, b, c, ...)',
	    'sum(A)'
	  ],
	  'description': 'Compute the sum of all values.',
	  'examples': [
	    'sum(2, 3, 4, 1)',
	    'sum([2, 3, 4, 1])',
	    'sum([2, 5; 4, 3])'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'median',
	    'min',
	    'prod',
	    'std',
	    'sum',
	    'var'
	  ]
	};


/***/ }),
/* 297 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'var',
	  'category': 'Statistics',
	  'syntax': [
	    'var(a, b, c, ...)',
	    'var(A)',
	    'var(A, normalization)'
	  ],
	  'description': 'Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".',
	  'examples': [
	    'var(2, 4, 6)',
	    'var([2, 4, 6, 8])',
	    'var([2, 4, 6, 8], "uncorrected")',
	    'var([2, 4, 6, 8], "biased")',
	    'var([1, 2, 3; 4, 5, 6])'
	  ],
	  'seealso': [
	    'max',
	    'mean',
	    'min',
	    'median',
	    'min',
	    'prod',
	    'std',
	    'sum'
	  ]
	};


/***/ }),
/* 298 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'acos',
	  'category': 'Trigonometry',
	  'syntax': [
	    'acos(x)'
	  ],
	  'description': 'Compute the inverse cosine of a value in radians.',
	  'examples': [
	    'acos(0.5)',
	    'acos(cos(2.3))'
	  ],
	  'seealso': [
	    'cos',
	    'atan',
	    'asin'
	  ]
	};


/***/ }),
/* 299 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'acosh',
	  'category': 'Trigonometry',
	  'syntax': [
	    'acosh(x)'
	  ],
	  'description': 'Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.',
	  'examples': [
	    'acosh(1.5)'
	  ],
	  'seealso': [
	    'cosh',
	    'asinh',
	    'atanh'
	  ]
	};

/***/ }),
/* 300 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'acot',
	  'category': 'Trigonometry',
	  'syntax': [
	    'acot(x)'
	  ],
	  'description': 'Calculate the inverse cotangent of a value.',
	  'examples': [
	    'acot(0.5)',
	    'acot(cot(0.5))',
	    'acot(2)'
	  ],
	  'seealso': [
	    'cot',
	    'atan'
	  ]
	};


/***/ }),
/* 301 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'acoth',
	  'category': 'Trigonometry',
	  'syntax': [
	    'acoth(x)'
	  ],
	  'description': 'Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.',
	  'examples': [
	    'acoth(0.5)'
	  ],
	  'seealso': [
	    'acsch',
	    'asech'
	  ]
	};

/***/ }),
/* 302 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'acsc',
	  'category': 'Trigonometry',
	  'syntax': [
	    'acsc(x)'
	  ],
	  'description': 'Calculate the inverse cotangent of a value.',
	  'examples': [
	    'acsc(0.5)',
	    'acsc(csc(0.5))',
	    'acsc(2)'
	  ],
	  'seealso': [
	    'csc',
	    'asin',
	    'asec'
	  ]
	};


/***/ }),
/* 303 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'acsch',
	  'category': 'Trigonometry',
	  'syntax': [
	    'acsch(x)'
	  ],
	  'description': 'Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.',
	  'examples': [
	    'acsch(0.5)'
	  ],
	  'seealso': [
	    'asech',
	    'acoth'
	  ]
	};


/***/ }),
/* 304 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'asec',
	  'category': 'Trigonometry',
	  'syntax': [
	    'asec(x)'
	  ],
	  'description': 'Calculate the inverse secant of a value.',
	  'examples': [
	    'asec(0.5)',
	    'asec(sec(0.5))',
	    'asec(2)'
	  ],
	  'seealso': [
	    'acos',
	    'acot',
	    'acsc'
	  ]
	};


/***/ }),
/* 305 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'asech',
	  'category': 'Trigonometry',
	  'syntax': [
	    'asech(x)'
	  ],
	  'description': 'Calculate the inverse secant of a value.',
	  'examples': [
	    'asech(0.5)'
	  ],
	  'seealso': [
	    'acsch',
	    'acoth'
	  ]
	};


/***/ }),
/* 306 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'asin',
	  'category': 'Trigonometry',
	  'syntax': [
	    'asin(x)'
	  ],
	  'description': 'Compute the inverse sine of a value in radians.',
	  'examples': [
	    'asin(0.5)',
	    'asin(sin(2.3))'
	  ],
	  'seealso': [
	    'sin',
	    'acos',
	    'atan'
	  ]
	};


/***/ }),
/* 307 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'asinh',
	  'category': 'Trigonometry',
	  'syntax': [
	    'asinh(x)'
	  ],
	  'description': 'Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.',
	  'examples': [
	    'asinh(0.5)'
	  ],
	  'seealso': [
	    'acosh',
	    'atanh'
	  ]
	};


/***/ }),
/* 308 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'atan',
	  'category': 'Trigonometry',
	  'syntax': [
	    'atan(x)'
	  ],
	  'description': 'Compute the inverse tangent of a value in radians.',
	  'examples': [
	    'atan(0.5)',
	    'atan(tan(2.3))'
	  ],
	  'seealso': [
	    'tan',
	    'acos',
	    'asin'
	  ]
	};


/***/ }),
/* 309 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'atanh',
	  'category': 'Trigonometry',
	  'syntax': [
	    'atanh(x)'
	  ],
	  'description': 'Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.',
	  'examples': [
	    'atanh(0.5)'
	  ],
	  'seealso': [
	    'acosh',
	    'asinh'
	  ]
	};


/***/ }),
/* 310 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'atan2',
	  'category': 'Trigonometry',
	  'syntax': [
	    'atan2(y, x)'
	  ],
	  'description':
	      'Computes the principal value of the arc tangent of y/x in radians.',
	  'examples': [
	    'atan2(2, 2) / pi',
	    'angle = 60 deg in rad',
	    'x = cos(angle)',
	    'y = sin(angle)',
	    'atan2(y, x)'
	  ],
	  'seealso': [
	    'sin',
	    'cos',
	    'tan'
	  ]
	};


/***/ }),
/* 311 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'cos',
	  'category': 'Trigonometry',
	  'syntax': [
	    'cos(x)'
	  ],
	  'description': 'Compute the cosine of x in radians.',
	  'examples': [
	    'cos(2)',
	    'cos(pi / 4) ^ 2',
	    'cos(180 deg)',
	    'cos(60 deg)',
	    'sin(0.2)^2 + cos(0.2)^2'
	  ],
	  'seealso': [
	    'acos',
	    'sin',
	    'tan'
	  ]
	};


/***/ }),
/* 312 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'cosh',
	  'category': 'Trigonometry',
	  'syntax': [
	    'cosh(x)'
	  ],
	  'description': 'Compute the hyperbolic cosine of x in radians.',
	  'examples': [
	    'cosh(0.5)'
	  ],
	  'seealso': [
	    'sinh',
	    'tanh',
	    'coth'
	  ]
	};


/***/ }),
/* 313 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'cot',
	  'category': 'Trigonometry',
	  'syntax': [
	    'cot(x)'
	  ],
	  'description': 'Compute the cotangent of x in radians. Defined as 1/tan(x)',
	  'examples': [
	    'cot(2)',
	    '1 / tan(2)'
	  ],
	  'seealso': [
	    'sec',
	    'csc',
	    'tan'
	  ]
	};


/***/ }),
/* 314 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'coth',
	  'category': 'Trigonometry',
	  'syntax': [
	    'coth(x)'
	  ],
	  'description': 'Compute the hyperbolic cotangent of x in radians.',
	  'examples': [
	    'coth(2)',
	    '1 / tanh(2)'
	  ],
	  'seealso': [
	    'sech',
	    'csch',
	    'tanh'
	  ]
	};


/***/ }),
/* 315 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'csc',
	  'category': 'Trigonometry',
	  'syntax': [
	    'csc(x)'
	  ],
	  'description': 'Compute the cosecant of x in radians. Defined as 1/sin(x)',
	  'examples': [
	    'csc(2)',
	    '1 / sin(2)'
	  ],
	  'seealso': [
	    'sec',
	    'cot',
	    'sin'
	  ]
	};


/***/ }),
/* 316 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'csch',
	  'category': 'Trigonometry',
	  'syntax': [
	    'csch(x)'
	  ],
	  'description': 'Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)',
	  'examples': [
	    'csch(2)',
	    '1 / sinh(2)'
	  ],
	  'seealso': [
	    'sech',
	    'coth',
	    'sinh'
	  ]
	};


/***/ }),
/* 317 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'sec',
	  'category': 'Trigonometry',
	  'syntax': [
	    'sec(x)'
	  ],
	  'description': 'Compute the secant of x in radians. Defined as 1/cos(x)',
	  'examples': [
	    'sec(2)',
	    '1 / cos(2)'
	  ],
	  'seealso': [
	    'cot',
	    'csc',
	    'cos'
	  ]
	};


/***/ }),
/* 318 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'sech',
	  'category': 'Trigonometry',
	  'syntax': [
	    'sech(x)'
	  ],
	  'description': 'Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)',
	  'examples': [
	    'sech(2)',
	    '1 / cosh(2)'
	  ],
	  'seealso': [
	    'coth',
	    'csch',
	    'cosh'
	  ]
	};


/***/ }),
/* 319 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'sin',
	  'category': 'Trigonometry',
	  'syntax': [
	    'sin(x)'
	  ],
	  'description': 'Compute the sine of x in radians.',
	  'examples': [
	    'sin(2)',
	    'sin(pi / 4) ^ 2',
	    'sin(90 deg)',
	    'sin(30 deg)',
	    'sin(0.2)^2 + cos(0.2)^2'
	  ],
	  'seealso': [
	    'asin',
	    'cos',
	    'tan'
	  ]
	};


/***/ }),
/* 320 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'sinh',
	  'category': 'Trigonometry',
	  'syntax': [
	    'sinh(x)'
	  ],
	  'description': 'Compute the hyperbolic sine of x in radians.',
	  'examples': [
	    'sinh(0.5)'
	  ],
	  'seealso': [
	    'cosh',
	    'tanh'
	  ]
	};


/***/ }),
/* 321 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'tan',
	  'category': 'Trigonometry',
	  'syntax': [
	    'tan(x)'
	  ],
	  'description': 'Compute the tangent of x in radians.',
	  'examples': [
	    'tan(0.5)',
	    'sin(0.5) / cos(0.5)',
	    'tan(pi / 4)',
	    'tan(45 deg)'
	  ],
	  'seealso': [
	    'atan',
	    'sin',
	    'cos'
	  ]
	};


/***/ }),
/* 322 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'tanh',
	  'category': 'Trigonometry',
	  'syntax': [
	    'tanh(x)'
	  ],
	  'description': 'Compute the hyperbolic tangent of x in radians.',
	  'examples': [
	    'tanh(0.5)',
	    'sinh(0.5) / cosh(0.5)'
	  ],
	  'seealso': [
	    'sinh',
	    'cosh'
	  ]
	};


/***/ }),
/* 323 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'to',
	  'category': 'Units',
	  'syntax': [
	    'x to unit',
	    'to(x, unit)'
	  ],
	  'description': 'Change the unit of a value.',
	  'examples': [
	    '5 inch to cm',
	    '3.2kg to g',
	    '16 bytes in bits'
	  ],
	  'seealso': []
	};


/***/ }),
/* 324 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'clone',
	  'category': 'Utils',
	  'syntax': [
	    'clone(x)'
	  ],
	  'description': 'Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices',
	  'examples': [
	    'clone(3.5)',
	    'clone(2 - 4i)',
	    'clone(45 deg)',
	    'clone([1, 2; 3, 4])',
	    'clone("hello world")'
	  ],
	  'seealso': []
	};


/***/ }),
/* 325 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'format',
	  'category': 'Utils',
	  'syntax': [
	    'format(value)',
	    'format(value, precision)'
	  ],
	  'description': 'Format a value of any type as string.',
	  'examples': [
	    'format(2.3)',
	    'format(3 - 4i)',
	    'format([])',
	    'format(pi, 3)'
	  ],
	  'seealso': ['print']
	};


/***/ }),
/* 326 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'isNaN',
	  'category': 'Utils',
	  'syntax': [
	    'isNaN(x)'
	  ],
	  'description': 'Test whether a value is NaN (not a number)',
	  'examples': [
	    'isNaN(2)',
	    'isNaN(0 / 0)',
	    'isNaN(NaN)',
	    'isNaN(Infinity)'
	  ],
	  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
	};


/***/ }),
/* 327 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'isInteger',
	  'category': 'Utils',
	  'syntax': [
	    'isInteger(x)'
	  ],
	  'description': 'Test whether a value is an integer number.',
	  'examples': [
	    'isInteger(2)',
	    'isInteger(3.5)',
	    'isInteger([3, 0.5, -2])'
	  ],
	  'seealso': ['isNegative', 'isNumeric', 'isPositive', 'isZero']
	};


/***/ }),
/* 328 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'isNegative',
	  'category': 'Utils',
	  'syntax': [
	    'isNegative(x)'
	  ],
	  'description': 'Test whether a value is negative: smaller than zero.',
	  'examples': [
	    'isNegative(2)',
	    'isNegative(0)',
	    'isNegative(-4)',
	    'isNegative([3, 0.5, -2])'
	  ],
	  'seealso': ['isInteger', 'isNumeric', 'isPositive', 'isZero']
	};


/***/ }),
/* 329 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'isNumeric',
	  'category': 'Utils',
	  'syntax': [
	    'isNumeric(x)'
	  ],
	  'description': 'Test whether a value is a numeric value. ' +
	    'Returns true when the input is a number, BigNumber, Fraction, or boolean.',
	  'examples': [
	    'isNumeric(2)',
	    'isNumeric(0)',
	    'isNumeric(bignumber(500))',
	    'isNumeric(fraction(0.125))',
	    'isNumeric("3")',
	    'isNumeric(2 + 3i)',
	    'isNumeric([2.3, "foo", false])'
	  ],
	  'seealso': ['isInteger', 'isZero', 'isNegative', 'isPositive', 'isNaN']
	};


/***/ }),
/* 330 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'isPositive',
	  'category': 'Utils',
	  'syntax': [
	    'isPositive(x)'
	  ],
	  'description': 'Test whether a value is positive: larger than zero.',
	  'examples': [
	    'isPositive(2)',
	    'isPositive(0)',
	    'isPositive(-4)',
	    'isPositive([3, 0.5, -2])'
	  ],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
	};


/***/ }),
/* 331 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'isPrime',
	  'category': 'Utils',
	  'syntax': [
	    'isPrime(x)'
	  ],
	  'description': 'Test whether a value is prime: has no divisors other than itself and one.',
	  'examples': [
	    'isPrime(3)',
	    'isPrime(-2)',
	    'isPrime([2, 17, 100])'
	  ],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isZero']
	};

/***/ }),
/* 332 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'isZero',
	  'category': 'Utils',
	  'syntax': [
	    'isZero(x)'
	  ],
	  'description': 'Test whether a value is zero.',
	  'examples': [
	    'isZero(2)',
	    'isZero(0)',
	    'isZero(-4)',
	    'isZero([3, 0, -2, 0])'
	  ],
	  'seealso': ['isInteger', 'isNumeric', 'isNegative', 'isPositive']
	};


/***/ }),
/* 333 */
/***/ (function(module, exports) {

	module.exports = {
	  'name': 'typeof',
	  'category': 'Utils',
	  'syntax': [
	    'typeof(x)'
	  ],
	  'description': 'Get the type of a variable.',
	  'examples': [
	    'typeof(3.5)',
	    'typeof(2 - 4i)',
	    'typeof(45 deg)',
	    'typeof("hello world")'
	  ],
	  'seealso': []
	};


/***/ }),
/* 334 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(335),
	  __webpack_require__(359),
	  __webpack_require__(360),
	  __webpack_require__(361),
	  __webpack_require__(362)
	];


/***/ }),
/* 335 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  var parse = load(__webpack_require__(336));
	
	  /**
	   * Parse and compile an expression.
	   * Returns a an object with a function `eval([scope])` to evaluate the
	   * compiled expression.
	   *
	   * Syntax:
	   *
	   *     math.compile(expr)                       // returns one node
	   *     math.compile([expr1, expr2, expr3, ...]) // returns an array with nodes
	   *
	   * Examples:
	   *
	   *     var code = math.compile('sqrt(3^2 + 4^2)');
	   *     code.eval(); // 5
	   *
	   *     var scope = {a: 3, b: 4}
	   *     var code = math.compile('a * b'); // 12
	   *     code.eval(scope); // 12
	   *     scope.a = 5;
	   *     code.eval(scope); // 20
	   *
	   *     var nodes = math.compile(['a = 3', 'b = 4', 'a * b']);
	   *     nodes[2].eval(); // 12
	   *
	   * See also:
	   *
	   *    parse, eval
	   *
	   * @param {string | string[] | Array | Matrix} expr
	   *            The expression to be compiled
	   * @return {{eval: Function} | Array.<{eval: Function}>} code
	   *            An object with the compiled expression
	   * @throws {Error}
	   */
	  return typed('compile', {
	    'string': function (expr) {
	      return parse(expr).compile();
	    },
	
	    'Array | Matrix': function (expr) {
	      return deepMap(expr, function (entry) {
	        return parse(entry).compile();
	      });
	    }
	  });
	}
	
	exports.name = 'compile';
	exports.factory = factory;


/***/ }),
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var ArgumentsError = __webpack_require__(62);
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  var AccessorNode            = load(__webpack_require__(337));
	  var ArrayNode               = load(__webpack_require__(344));
	  var AssignmentNode          = load(__webpack_require__(345));
	  var BlockNode               = load(__webpack_require__(348));
	  var ConditionalNode         = load(__webpack_require__(349));
	  var ConstantNode            = load(__webpack_require__(350));
	  var FunctionAssignmentNode  = load(__webpack_require__(351));
	  var IndexNode               = load(__webpack_require__(352));
	  var ObjectNode              = load(__webpack_require__(355));
	  var OperatorNode            = load(__webpack_require__(356));
	  var ParenthesisNode         = load(__webpack_require__(358));
	  var FunctionNode            = load(__webpack_require__(357));
	  var RangeNode               = load(__webpack_require__(353));
	  var SymbolNode              = load(__webpack_require__(354));
	
	
	  /**
	   * Parse an expression. Returns a node tree, which can be evaluated by
	   * invoking node.eval();
	   *
	   * Syntax:
	   *
	   *     parse(expr)
	   *     parse(expr, options)
	   *     parse([expr1, expr2, expr3, ...])
	   *     parse([expr1, expr2, expr3, ...], options)
	   *
	   * Example:
	   *
	   *     var node = parse('sqrt(3^2 + 4^2)');
	   *     node.compile(math).eval(); // 5
	   *
	   *     var scope = {a:3, b:4}
	   *     var node = parse('a * b'); // 12
	   *     var code = node.compile(math);
	   *     code.eval(scope); // 12
	   *     scope.a = 5;
	   *     code.eval(scope); // 20
	   *
	   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
	   *     nodes[2].compile(math).eval(); // 12
	   *
	   * @param {string | string[] | Matrix} expr
	   * @param {{nodes: Object<string, Node>}} [options]  Available options:
	   *                                                   - `nodes` a set of custom nodes
	   * @return {Node | Node[]} node
	   * @throws {Error}
	   */
	  function parse (expr, options) {
	    if (arguments.length != 1 && arguments.length != 2) {
	      throw new ArgumentsError('parse', arguments.length, 1, 2);
	    }
	
	    // pass extra nodes
	    extra_nodes = (options && options.nodes) ? options.nodes : {};
	
	    if (typeof expr === 'string') {
	      // parse a single expression
	      expression = expr;
	      return parseStart();
	    }
	    else if (Array.isArray(expr) || expr instanceof type.Matrix) {
	      // parse an array or matrix with expressions
	      return deepMap(expr, function (elem) {
	        if (typeof elem !== 'string') throw new TypeError('String expected');
	
	        expression = elem;
	        return parseStart();
	      });
	    }
	    else {
	      // oops
	      throw new TypeError('String or matrix expected');
	    }
	  }
	
	  // token types enumeration
	  var TOKENTYPE = {
	    NULL : 0,
	    DELIMITER : 1,
	    NUMBER : 2,
	    SYMBOL : 3,
	    UNKNOWN : 4
	  };
	
	  // map with all delimiters
	  var DELIMITERS = {
	    ',': true,
	    '(': true,
	    ')': true,
	    '[': true,
	    ']': true,
	    '{': true,
	    '}': true,
	    '\"': true,
	    ';': true,
	
	    '+': true,
	    '-': true,
	    '*': true,
	    '.*': true,
	    '/': true,
	    './': true,
	    '%': true,
	    '^': true,
	    '.^': true,
	    '~': true,
	    '!': true,
	    '&': true,
	    '|': true,
	    '^|': true,
	    '\'': true,
	    '=': true,
	    ':': true,
	    '?': true,
	
	    '==': true,
	    '!=': true,
	    '<': true,
	    '>': true,
	    '<=': true,
	    '>=': true,
	
	    '<<': true,
	    '>>': true,
	    '>>>': true
	  };
	
	  // map with all named delimiters
	  var NAMED_DELIMITERS = {
	    'mod': true,
	    'to': true,
	    'in': true,
	    'and': true,
	    'xor': true,
	    'or': true,
	    'not': true
	  };
	
	  var extra_nodes = {};             // current extra nodes
	  var expression = '';              // current expression
	  var comment = '';                 // last parsed comment
	  var index = 0;                    // current index in expr
	  var c = '';                       // current token character in expr
	  var token = '';                   // current token
	  var token_type = TOKENTYPE.NULL;  // type of the token
	  var nesting_level = 0;            // level of nesting inside parameters, used to ignore newline characters
	  var conditional_level = null;     // when a conditional is being parsed, the level of the conditional is stored here
	
	  /**
	   * Get the first character from the expression.
	   * The character is stored into the char c. If the end of the expression is
	   * reached, the function puts an empty string in c.
	   * @private
	   */
	  function first() {
	    index = 0;
	    c = expression.charAt(0);
	    nesting_level = 0;
	    conditional_level = null;
	  }
	
	  /**
	   * Get the next character from the expression.
	   * The character is stored into the char c. If the end of the expression is
	   * reached, the function puts an empty string in c.
	   * @private
	   */
	  function next() {
	    index++;
	    c = expression.charAt(index);
	  }
	
	  /**
	   * Preview the previous character from the expression.
	   * @return {string} cNext
	   * @private
	   */
	  function prevPreview() {
	    return expression.charAt(index - 1);
	  }
	
	  /**
	   * Preview the next character from the expression.
	   * @return {string} cNext
	   * @private
	   */
	  function nextPreview() {
	    return expression.charAt(index + 1);
	  }
	
	  /**
	   * Preview the second next character from the expression.
	   * @return {string} cNext
	   * @private
	   */
	  function nextNextPreview() {
	    return expression.charAt(index + 2);
	  }
	
	  /**
	   * Get next token in the current string expr.
	   * The token and token type are available as token and token_type
	   * @private
	   */
	  function getToken() {
	    token_type = TOKENTYPE.NULL;
	    token = '';
	    comment = '';
	
	    // skip over whitespaces
	    // space, tab, and newline when inside parameters
	    while (parse.isWhitespace(c, nesting_level)) {
	      next();
	    }
	
	    // skip comment
	    if (c == '#') {
	      while (c != '\n' && c != '') {
	        comment += c;
	        next();
	      }
	    }
	
	    // check for end of expression
	    if (c == '') {
	      // token is still empty
	      token_type = TOKENTYPE.DELIMITER;
	      return;
	    }
	
	    // check for new line character
	    if (c == '\n' && !nesting_level) {
	      token_type = TOKENTYPE.DELIMITER;
	      token = c;
	      next();
	      return;
	    }
	
	    // check for delimiters consisting of 3 characters
	    var c2 = c + nextPreview();
	    var c3 = c2 + nextNextPreview();
	    if (c3.length == 3 && DELIMITERS[c3]) {
	      token_type = TOKENTYPE.DELIMITER;
	      token = c3;
	      next();
	      next();
	      next();
	      return;
	    }
	
	    // check for delimiters consisting of 2 characters
	    if (c2.length == 2 && DELIMITERS[c2]) {
	      token_type = TOKENTYPE.DELIMITER;
	      token = c2;
	      next();
	      next();
	      return;
	    }
	
	    // check for delimiters consisting of 1 character
	    if (DELIMITERS[c]) {
	      token_type = TOKENTYPE.DELIMITER;
	      token = c;
	      next();
	      return;
	    }
	
	    // check for a number
	    if (parse.isDigitDot(c)) {
	      token_type = TOKENTYPE.NUMBER;
	
	      // get number, can have a single dot
	      if (c == '.') {
	        token += c;
	        next();
	
	        if (!parse.isDigit(c)) {
	          // this is no number, it is just a dot (can be dot notation)
	          token_type = TOKENTYPE.DELIMITER;
	        }
	      }
	      else {
	        while (parse.isDigit(c)) {
	          token += c;
	          next();
	        }
	        if (parse.isDecimalMark(c, nextPreview())) {
	          token += c;
	          next();
	        }
	      }
	      while (parse.isDigit(c)) {
	        token += c;
	        next();
	      }
	
	      // check for exponential notation like "2.3e-4", "1.23e50" or "2e+4"
	      c2 = nextPreview();
	      if (c == 'E' || c == 'e') {
	        if (parse.isDigit(c2) || c2 == '-' || c2 == '+') {
	          token += c;
	          next();
	
	          if (c == '+' || c == '-') {
	            token += c;
	            next();
	          }
	
	          // Scientific notation MUST be followed by an exponent
	          if (!parse.isDigit(c)) {
	            throw createSyntaxError('Digit expected, got "' + c + '"');
	          }
	
	          while (parse.isDigit(c)) {
	            token += c;
	            next();
	          }
	
	          if (parse.isDecimalMark(c, nextPreview())) {
	            throw createSyntaxError('Digit expected, got "' + c + '"');
	          }
	        }
	        else if (c2 == '.') {
	          next();
	          throw createSyntaxError('Digit expected, got "' + c + '"');
	        }
	      }
	
	      return;
	    }
	
	    // check for variables, functions, named operators
	    if (parse.isAlpha(c, prevPreview(), nextPreview())) {
	      while (parse.isAlpha(c, prevPreview(), nextPreview()) || parse.isDigit(c)) {
	        token += c;
	        next();
	      }
	
	      if (NAMED_DELIMITERS.hasOwnProperty(token)) {
	        token_type = TOKENTYPE.DELIMITER;
	      }
	      else {
	        token_type = TOKENTYPE.SYMBOL;
	      }
	
	      return;
	    }
	
	    // something unknown is found, wrong characters -> a syntax error
	    token_type = TOKENTYPE.UNKNOWN;
	    while (c != '') {
	      token += c;
	      next();
	    }
	    throw createSyntaxError('Syntax error in part "' + token + '"');
	  }
	
	  /**
	   * Get next token and skip newline tokens
	   */
	  function getTokenSkipNewline () {
	    do {
	      getToken();
	    }
	    while (token == '\n');
	  }
	
	  /**
	   * Open parameters.
	   * New line characters will be ignored until closeParams() is called
	   */
	  function openParams() {
	    nesting_level++;
	  }
	
	  /**
	   * Close parameters.
	   * New line characters will no longer be ignored
	   */
	  function closeParams() {
	    nesting_level--;
	  }
	
	  /**
	   * Checks whether the current character `c` is a valid alpha character:
	   *
	   * - A latin letter (upper or lower case) Ascii: a-z, A-Z
	   * - An underscore                         Ascii: _
	   * - A latin letter with accents          Unicode: \u00C0 - \u02AF
	   * - A greek letter                       Unicode: \u0370 - \u03FF
	   * - A mathematical alphanumeric symbol   Unicode: \u{1D400} - \u{1D7FF} excluding invalid code points
	   *
	   * The previous and next characters are needed to determine whether
	   * this character is part of a unicode surrogate pair.
	   *
	   * @param {string} c      Current character in the expression
	   * @param {string} cPrev  Previous character
	   * @param {string} cNext  Next character
	   * @return {boolean}
	   */
	  parse.isAlpha = function isAlpha (c, cPrev, cNext) {
	    return parse.isValidLatinOrGreek(c)
	        || parse.isValidMathSymbol(c, cNext)
	        || parse.isValidMathSymbol(cPrev, c);
	  };
	
	  /**
	   * Test whether a character is a valid latin, greek, or letter-like character
	   * @param {string} c
	   * @return {boolean}
	   */
	  parse.isValidLatinOrGreek = function isValidLatinOrGreek (c) {
	    return /^[a-zA-Z_\u00C0-\u02AF\u0370-\u03FF\u2100-\u214F]$/.test(c);
	  };
	
	  /**
	   * Test whether two given 16 bit characters form a surrogate pair of a
	   * unicode math symbol.
	   *
	   * http://unicode-table.com/en/
	   * http://www.wikiwand.com/en/Mathematical_operators_and_symbols_in_Unicode
	   *
	   * Note: In ES6 will be unicode aware:
	   * http://stackoverflow.com/questions/280712/javascript-unicode-regexes
	   * https://mathiasbynens.be/notes/es6-unicode-regex
	   *
	   * @param {string} high
	   * @param {string} low
	   * @return {boolean}
	   */
	  parse.isValidMathSymbol = function isValidMathSymbol (high, low) {
	    return /^[\uD835]$/.test(high) &&
	        /^[\uDC00-\uDFFF]$/.test(low) &&
	        /^[^\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]$/.test(low);
	  };
	
	  /**
	   * Check whether given character c is a white space character: space, tab, or enter
	   * @param {string} c
	   * @param {number} nestingLevel
	   * @return {boolean}
	   */
	  parse.isWhitespace = function isWhitespace (c, nestingLevel) {
	    // TODO: also take '\r' carriage return as newline? Or does that give problems on mac?
	    return c == ' ' || c == '\t' || (c == '\n' && nestingLevel > 0);
	  };
	
	  /**
	   * Test whether the character c is a decimal mark (dot).
	   * This is the case when it's not the start of a delimiter '.*', './', or '.^'
	   * @param {string} c
	   * @param {string} cNext
	   * @return {boolean}
	   */
	  parse.isDecimalMark = function isDecimalMark (c, cNext) {
	    return c == '.' && cNext !== '/' && cNext !== '*' && cNext !== '^';
	  };
	
	  /**
	   * checks if the given char c is a digit or dot
	   * @param {string} c   a string with one character
	   * @return {boolean}
	   */
	  parse.isDigitDot = function isDigitDot (c) {
	    return ((c >= '0' && c <= '9') || c == '.');
	  };
	
	  /**
	   * checks if the given char c is a digit
	   * @param {string} c   a string with one character
	   * @return {boolean}
	   */
	  parse.isDigit = function isDigit (c) {
	    return (c >= '0' && c <= '9');
	  };
	
	  /**
	   * Start of the parse levels below, in order of precedence
	   * @return {Node} node
	   * @private
	   */
	  function parseStart () {
	    // get the first character in expression
	    first();
	
	    getToken();
	
	    var node = parseBlock();
	
	    // check for garbage at the end of the expression
	    // an expression ends with a empty character '' and token_type DELIMITER
	    if (token != '') {
	      if (token_type == TOKENTYPE.DELIMITER) {
	        // user entered a not existing operator like "//"
	
	        // TODO: give hints for aliases, for example with "<>" give as hint " did you mean != ?"
	        throw createError('Unexpected operator ' + token);
	      }
	      else {
	        throw createSyntaxError('Unexpected part "' + token + '"');
	      }
	    }
	
	    return node;
	  }
	
	  /**
	   * Parse a block with expressions. Expressions can be separated by a newline
	   * character '\n', or by a semicolon ';'. In case of a semicolon, no output
	   * of the preceding line is returned.
	   * @return {Node} node
	   * @private
	   */
	  function parseBlock () {
	    var node;
	    var blocks = [];
	    var visible;
	
	    if (token != '' && token != '\n' && token != ';') {
	      node = parseAssignment();
	      node.comment = comment;
	    }
	
	    // TODO: simplify this loop
	    while (token == '\n' || token == ';') {
	      if (blocks.length == 0 && node) {
	        visible = (token != ';');
	        blocks.push({
	          node: node,
	          visible: visible
	        });
	      }
	
	      getToken();
	      if (token != '\n' && token != ';' && token != '') {
	        node = parseAssignment();
	        node.comment = comment;
	
	        visible = (token != ';');
	        blocks.push({
	          node: node,
	          visible: visible
	        });
	      }
	    }
	
	    if (blocks.length > 0) {
	      return new BlockNode(blocks);
	    }
	    else {
	      if (!node) {
	        node = new ConstantNode('undefined', 'undefined');
	        node.comment = comment;
	      }
	
	      return node
	    }
	  }
	
	  /**
	   * Assignment of a function or variable,
	   * - can be a variable like 'a=2.3'
	   * - or a updating an existing variable like 'matrix(2,3:5)=[6,7,8]'
	   * - defining a function like 'f(x) = x^2'
	   * @return {Node} node
	   * @private
	   */
	  function parseAssignment () {
	    var name, args, value, valid;
	
	    var node = parseConditional();
	
	    if (token == '=') {
	      if (node && node.isSymbolNode) {
	        // parse a variable assignment like 'a = 2/3'
	        name = node.name;
	        getTokenSkipNewline();
	        value = parseAssignment();
	        return new AssignmentNode(new SymbolNode(name), value);
	      }
	      else if (node && node.isAccessorNode) {
	        // parse a matrix subset assignment like 'A[1,2] = 4'
	        getTokenSkipNewline();
	        value = parseAssignment();
	        return new AssignmentNode(node.object, node.index, value);
	      }
	      else if (node && node.isFunctionNode) {
	        // parse function assignment like 'f(x) = x^2'
	        valid = true;
	        args = [];
	
	        name = node.name;
	        node.args.forEach(function (arg, index) {
	          if (arg && arg.isSymbolNode) {
	            args[index] = arg.name;
	          }
	          else {
	            valid = false;
	          }
	        });
	
	        if (valid) {
	          getTokenSkipNewline();
	          value = parseAssignment();
	          return new FunctionAssignmentNode(name, args, value);
	        }
	      }
	
	      throw createSyntaxError('Invalid left hand side of assignment operator =');
	    }
	
	    return node;
	  }
	
	  /**
	   * conditional operation
	   *
	   *     condition ? truePart : falsePart
	   *
	   * Note: conditional operator is right-associative
	   *
	   * @return {Node} node
	   * @private
	   */
	  function parseConditional () {
	    var node = parseLogicalOr();
	
	    while (token == '?') {
	      // set a conditional level, the range operator will be ignored as long
	      // as conditional_level == nesting_level.
	      var prev = conditional_level;
	      conditional_level = nesting_level;
	      getTokenSkipNewline();
	
	      var condition = node;
	      var trueExpr = parseAssignment();
	
	      if (token != ':') throw createSyntaxError('False part of conditional expression expected');
	
	      conditional_level = null;
	      getTokenSkipNewline();
	
	      var falseExpr = parseAssignment(); // Note: check for conditional operator again, right associativity
	
	      node = new ConditionalNode(condition, trueExpr, falseExpr);
	
	      // restore the previous conditional level
	      conditional_level = prev;
	    }
	
	    return node;
	  }
	
	  /**
	   * logical or, 'x or y'
	   * @return {Node} node
	   * @private
	   */
	  function parseLogicalOr() {
	    var node = parseLogicalXor();
	
	    while (token == 'or') {
	      getTokenSkipNewline();
	      node = new OperatorNode('or', 'or', [node, parseLogicalXor()]);
	    }
	
	    return node;
	  }
	
	  /**
	   * logical exclusive or, 'x xor y'
	   * @return {Node} node
	   * @private
	   */
	  function parseLogicalXor() {
	    var node = parseLogicalAnd();
	
	    while (token == 'xor') {
	      getTokenSkipNewline();
	      node = new OperatorNode('xor', 'xor', [node, parseLogicalAnd()]);
	    }
	
	    return node;
	  }
	
	  /**
	   * logical and, 'x and y'
	   * @return {Node} node
	   * @private
	   */
	  function parseLogicalAnd() {
	    var node = parseBitwiseOr();
	
	    while (token == 'and') {
	      getTokenSkipNewline();
	      node = new OperatorNode('and', 'and', [node, parseBitwiseOr()]);
	    }
	
	    return node;
	  }
	
	  /**
	   * bitwise or, 'x | y'
	   * @return {Node} node
	   * @private
	   */
	  function parseBitwiseOr() {
	    var node = parseBitwiseXor();
	
	    while (token == '|') {
	      getTokenSkipNewline();
	      node = new OperatorNode('|', 'bitOr', [node, parseBitwiseXor()]);
	    }
	
	    return node;
	  }
	
	  /**
	   * bitwise exclusive or (xor), 'x ^| y'
	   * @return {Node} node
	   * @private
	   */
	  function parseBitwiseXor() {
	    var node = parseBitwiseAnd();
	
	    while (token == '^|') {
	      getTokenSkipNewline();
	      node = new OperatorNode('^|', 'bitXor', [node, parseBitwiseAnd()]);
	    }
	
	    return node;
	  }
	
	  /**
	   * bitwise and, 'x & y'
	   * @return {Node} node
	   * @private
	   */
	  function parseBitwiseAnd () {
	    var node = parseRelational();
	
	    while (token == '&') {
	      getTokenSkipNewline();
	      node = new OperatorNode('&', 'bitAnd', [node, parseRelational()]);
	    }
	
	    return node;
	  }
	
	  /**
	   * relational operators
	   * @return {Node} node
	   * @private
	   */
	  function parseRelational () {
	    var node, operators, name, fn, params;
	
	    node = parseShift();
	
	    operators = {
	      '==': 'equal',
	      '!=': 'unequal',
	      '<': 'smaller',
	      '>': 'larger',
	      '<=': 'smallerEq',
	      '>=': 'largerEq'
	    };
	    while (token in operators) {
	      name = token;
	      fn = operators[name];
	
	      getTokenSkipNewline();
	      params = [node, parseShift()];
	      node = new OperatorNode(name, fn, params);
	    }
	
	    return node;
	  }
	
	  /**
	   * Bitwise left shift, bitwise right arithmetic shift, bitwise right logical shift
	   * @return {Node} node
	   * @private
	   */
	  function parseShift () {
	    var node, operators, name, fn, params;
	
	    node = parseConversion();
	
	    operators = {
	      '<<' : 'leftShift',
	      '>>' : 'rightArithShift',
	      '>>>' : 'rightLogShift'
	    };
	
	    while (token in operators) {
	      name = token;
	      fn = operators[name];
	
	      getTokenSkipNewline();
	      params = [node, parseConversion()];
	      node = new OperatorNode(name, fn, params);
	    }
	
	    return node;
	  }
	
	  /**
	   * conversion operators 'to' and 'in'
	   * @return {Node} node
	   * @private
	   */
	  function parseConversion () {
	    var node, operators, name, fn, params;
	
	    node = parseRange();
	
	    operators = {
	      'to' : 'to',
	      'in' : 'to'   // alias of 'to'
	    };
	
	    while (token in operators) {
	      name = token;
	      fn = operators[name];
	
	      getTokenSkipNewline();
	      
	      if (name === 'in' && token === '') {
	        // end of expression -> this is the unit 'in' ('inch')
	        node = new OperatorNode('*', 'multiply', [node, new SymbolNode('in')], true);
	      }
	      else {
	        // operator 'a to b' or 'a in b'
	        params = [node, parseRange()];
	        node = new OperatorNode(name, fn, params);
	      }
	    }
	
	    return node;
	  }
	
	  /**
	   * parse range, "start:end", "start:step:end", ":", "start:", ":end", etc
	   * @return {Node} node
	   * @private
	   */
	  function parseRange () {
	    var node, params = [];
	
	    if (token == ':') {
	      // implicit start=1 (one-based)
	      node = new ConstantNode('1', 'number');
	    }
	    else {
	      // explicit start
	      node = parseAddSubtract();
	    }
	
	    if (token == ':' && (conditional_level !== nesting_level)) {
	      // we ignore the range operator when a conditional operator is being processed on the same level
	      params.push(node);
	
	      // parse step and end
	      while (token == ':' && params.length < 3) {
	        getTokenSkipNewline();
	
	        if (token == ')' || token == ']' || token == ',' || token == '') {
	          // implicit end
	          params.push(new SymbolNode('end'));
	        }
	        else {
	          // explicit end
	          params.push(parseAddSubtract());
	        }
	      }
	
	      if (params.length == 3) {
	        // params = [start, step, end]
	        node = new RangeNode(params[0], params[2], params[1]); // start, end, step
	      }
	      else { // length == 2
	        // params = [start, end]
	        node = new RangeNode(params[0], params[1]); // start, end
	      }
	    }
	
	    return node;
	  }
	
	  /**
	   * add or subtract
	   * @return {Node} node
	   * @private
	   */
	  function parseAddSubtract ()  {
	    var node, operators, name, fn, params;
	
	    node = parseMultiplyDivide();
	
	    operators = {
	      '+': 'add',
	      '-': 'subtract'
	    };
	    while (token in operators) {
	      name = token;
	      fn = operators[name];
	
	      getTokenSkipNewline();
	      params = [node, parseMultiplyDivide()];
	      node = new OperatorNode(name, fn, params);
	    }
	
	    return node;
	  }
	
	  /**
	   * multiply, divide, modulus
	   * @return {Node} node
	   * @private
	   */
	  function parseMultiplyDivide () {
	    var node, last, operators, name, fn;
	
	    node = parseUnary();
	    last = node;
	
	    operators = {
	      '*': 'multiply',
	      '.*': 'dotMultiply',
	      '/': 'divide',
	      './': 'dotDivide',
	      '%': 'mod',
	      'mod': 'mod'
	    };
	
	    while (true) {
	      if (token in operators) {
	        // explicit operators
	        name = token;
	        fn = operators[name];
	
	        getTokenSkipNewline();
	
	        last = parseUnary();
	        node = new OperatorNode(name, fn, [node, last]);
	      }
	      else if ((token_type == TOKENTYPE.SYMBOL) ||
	          (token == 'in' && (node && node.isConstantNode)) ||
	          (token_type == TOKENTYPE.NUMBER &&
	              !last.isConstantNode &&
	              (!last.isOperatorNode || last.op === '!')) ||
	          (token == '(')) {
	        // parse implicit multiplication
	        //
	        // symbol:      implicit multiplication like '2a', '(2+3)a', 'a b'
	        // number:      implicit multiplication like '(2+3)2'
	        // parenthesis: implicit multiplication like '2(3+4)', '(3+4)(1+2)'
	        last = parseUnary();
	        node = new OperatorNode('*', 'multiply', [node, last], true /*implicit*/);
	      }
	      else {
	        break;
	      }
	    }
	
	    return node;
	  }
	
	  /**
	   * Unary plus and minus, and logical and bitwise not
	   * @return {Node} node
	   * @private
	   */
	  function parseUnary () {
	    var name, params;
	    var fn = {
	      '-': 'unaryMinus',
	      '+': 'unaryPlus',
	      '~': 'bitNot',
	      'not': 'not'
	    }[token];
	
	    if (fn) {
	      name = token;
	
	      getTokenSkipNewline();
	      params = [parseUnary()];
	
	      return new OperatorNode(name, fn, params);
	    }
	
	    return parsePow();
	  }
	
	  /**
	   * power
	   * Note: power operator is right associative
	   * @return {Node} node
	   * @private
	   */
	  function parsePow () {
	    var node, name, fn, params;
	
	    node = parseLeftHandOperators();
	
	    if (token == '^' || token == '.^') {
	      name = token;
	      fn = (name == '^') ? 'pow' : 'dotPow';
	
	      getTokenSkipNewline();
	      params = [node, parseUnary()]; // Go back to unary, we can have '2^-3'
	      node = new OperatorNode(name, fn, params);
	    }
	
	    return node;
	  }
	
	  /**
	   * Left hand operators: factorial x!, transpose x'
	   * @return {Node} node
	   * @private
	   */
	  function parseLeftHandOperators ()  {
	    var node, operators, name, fn, params;
	
	    node = parseCustomNodes();
	
	    operators = {
	      '!': 'factorial',
	      '\'': 'transpose'
	    };
	
	    while (token in operators) {
	      name = token;
	      fn = operators[name];
	
	      getToken();
	      params = [node];
	
	      node = new OperatorNode(name, fn, params);
	      node = parseAccessors(node);
	    }
	
	    return node;
	  }
	
	  /**
	   * Parse a custom node handler. A node handler can be used to process
	   * nodes in a custom way, for example for handling a plot.
	   *
	   * A handler must be passed as second argument of the parse function.
	   * - must extend math.expression.node.Node
	   * - must contain a function _compile(defs: Object) : string
	   * - must contain a function find(filter: Object) : Node[]
	   * - must contain a function toString() : string
	   * - the constructor is called with a single argument containing all parameters
	   *
	   * For example:
	   *
	   *     nodes = {
	   *       'plot': PlotHandler
	   *     };
	   *
	   * The constructor of the handler is called as:
	   *
	   *     node = new PlotHandler(params);
	   *
	   * The handler will be invoked when evaluating an expression like:
	   *
	   *     node = math.parse('plot(sin(x), x)', nodes);
	   *
	   * @return {Node} node
	   * @private
	   */
	  function parseCustomNodes () {
	    var params = [];
	
	    if (token_type == TOKENTYPE.SYMBOL && extra_nodes[token]) {
	      var CustomNode = extra_nodes[token];
	
	      getToken();
	
	      // parse parameters
	      if (token == '(') {
	        params = [];
	
	        openParams();
	        getToken();
	
	        if (token != ')') {
	          params.push(parseAssignment());
	
	          // parse a list with parameters
	          while (token == ',') {
	            getToken();
	            params.push(parseAssignment());
	          }
	        }
	
	        if (token != ')') {
	          throw createSyntaxError('Parenthesis ) expected');
	        }
	        closeParams();
	        getToken();
	      }
	
	      // create a new custom node
	      //noinspection JSValidateTypes
	      return new CustomNode(params);
	    }
	
	    return parseSymbol();
	  }
	
	  /**
	   * parse symbols: functions, variables, constants, units
	   * @return {Node} node
	   * @private
	   */
	  function parseSymbol () {
	    var node, name;
	
	    if (token_type == TOKENTYPE.SYMBOL ||
	        (token_type == TOKENTYPE.DELIMITER && token in NAMED_DELIMITERS)) {
	      name = token;
	
	      getToken();
	
	      // parse function parameters and matrix index
	      node = new SymbolNode(name);
	      node = parseAccessors(node);
	      return node;
	    }
	
	    return parseString();
	  }
	
	  /**
	   * parse accessors:
	   * - function invocation in round brackets (...), for example sqrt(2)
	   * - index enclosed in square brackets [...], for example A[2,3]
	   * - dot notation for properties, like foo.bar
	   * @param {Node} node    Node on which to apply the parameters. If there
	   *                       are no parameters in the expression, the node
	   *                       itself is returned
	   * @param {string[]} [types]  Filter the types of notations
	   *                            can be ['(', '[', '.']
	   * @return {Node} node
	   * @private
	   */
	  function parseAccessors (node, types) {
	    var params;
	
	    while ((token == '(' || token == '[' || token == '.') &&
	        (!types || types.indexOf(token) !== -1)) {
	      params = [];
	
	      if (token == '(') {
	        if (node.isSymbolNode || node.isAccessorNode || node.isFunctionNode) {
	          // function invocation like fn(2, 3)
	          openParams();
	          getToken();
	
	          if (token != ')') {
	            params.push(parseAssignment());
	
	            // parse a list with parameters
	            while (token == ',') {
	              getToken();
	              params.push(parseAssignment());
	            }
	          }
	
	          if (token != ')') {
	            throw createSyntaxError('Parenthesis ) expected');
	          }
	          closeParams();
	          getToken();
	
	          node = new FunctionNode(node, params);
	        }
	        else {
	          // implicit multiplication like (2+3)(4+5)
	          // don't parse it here but let it be handled by parseMultiplyDivide
	          // with correct precedence
	          return node;
	        }
	      }
	      else if (token == '[') {
	        // index notation like variable[2, 3]
	        openParams();
	        getToken();
	
	        if (token != ']') {
	          params.push(parseAssignment());
	
	          // parse a list with parameters
	          while (token == ',') {
	            getToken();
	            params.push(parseAssignment());
	          }
	        }
	
	        if (token != ']') {
	          throw createSyntaxError('Parenthesis ] expected');
	        }
	        closeParams();
	        getToken();
	
	        node = new AccessorNode(node, new IndexNode(params));
	      }
	      else {
	        // dot notation like variable.prop
	        getToken();
	
	        if (token_type != TOKENTYPE.SYMBOL) {
	          throw createSyntaxError('Property name expected after dot');
	        }
	        params.push(new ConstantNode(token));
	        getToken();
	
	        var dotNotation = true;
	        node = new AccessorNode(node, new IndexNode(params, dotNotation));
	      }
	    }
	
	    return node;
	  }
	
	  /**
	   * parse a string.
	   * A string is enclosed by double quotes
	   * @return {Node} node
	   * @private
	   */
	  function parseString () {
	    var node, str;
	
	    if (token == '"') {
	      str = parseStringToken();
	
	      // create constant
	      node = new ConstantNode(str, 'string');
	
	      // parse index parameters
	      node = parseAccessors(node);
	
	      return node;
	    }
	
	    return parseMatrix();
	  }
	
	  /**
	   * Parse a string surrounded by double quotes "..."
	   * @return {string}
	   */
	  function parseStringToken () {
	    var str = '';
	
	    while (c != '' && c != '\"') {
	      if (c == '\\') {
	        // escape character
	        str += c;
	        next();
	      }
	
	      str += c;
	      next();
	    }
	
	    getToken();
	    if (token != '"') {
	      throw createSyntaxError('End of string " expected');
	    }
	    getToken();
	
	    return str;
	  }
	
	  /**
	   * parse the matrix
	   * @return {Node} node
	   * @private
	   */
	  function parseMatrix () {
	    var array, params, rows, cols;
	
	    if (token == '[') {
	      // matrix [...]
	      openParams();
	      getToken();
	
	      if (token != ']') {
	        // this is a non-empty matrix
	        var row = parseRow();
	
	        if (token == ';') {
	          // 2 dimensional array
	          rows = 1;
	          params = [row];
	
	          // the rows of the matrix are separated by dot-comma's
	          while (token == ';') {
	            getToken();
	
	            params[rows] = parseRow();
	            rows++;
	          }
	
	          if (token != ']') {
	            throw createSyntaxError('End of matrix ] expected');
	          }
	          closeParams();
	          getToken();
	
	          // check if the number of columns matches in all rows
	          cols = params[0].items.length;
	          for (var r = 1; r < rows; r++) {
	            if (params[r].items.length != cols) {
	              throw createError('Column dimensions mismatch ' +
	                  '(' + params[r].items.length + ' != ' + cols + ')');
	            }
	          }
	
	          array = new ArrayNode(params);
	        }
	        else {
	          // 1 dimensional vector
	          if (token != ']') {
	            throw createSyntaxError('End of matrix ] expected');
	          }
	          closeParams();
	          getToken();
	
	          array = row;
	        }
	      }
	      else {
	        // this is an empty matrix "[ ]"
	        closeParams();
	        getToken();
	        array = new ArrayNode([]);
	      }
	
	      return parseAccessors(array);
	    }
	
	    return parseObject();
	  }
	
	  /**
	   * Parse a single comma-separated row from a matrix, like 'a, b, c'
	   * @return {ArrayNode} node
	   */
	  function parseRow () {
	    var params = [parseAssignment()];
	    var len = 1;
	
	    while (token == ',') {
	      getToken();
	
	      // parse expression
	      params[len] = parseAssignment();
	      len++;
	    }
	
	    return new ArrayNode(params);
	  }
	
	  /**
	   * parse an object, enclosed in angle brackets{...}, for example {value: 2}
	   * @return {Node} node
	   * @private
	   */
	  function parseObject () {
	    if (token == '{') {
	      var key;
	
	      var properties = {};
	      do {
	        getToken();
	
	        if (token != '}') {
	          // parse key
	          if (token == '"') {
	            key = parseStringToken();
	          }
	          else if (token_type == TOKENTYPE.SYMBOL) {
	            key = token;
	            getToken();
	          }
	          else {
	            throw createSyntaxError('Symbol or string expected as object key');
	          }
	
	          // parse key/value separator
	          if (token != ':') {
	            throw createSyntaxError('Colon : expected after object key');
	          }
	          getToken();
	
	          // parse key
	          properties[key] = parseAssignment();
	        }
	      }
	      while (token == ',');
	
	      if (token != '}') {
	        throw createSyntaxError('Comma , or bracket } expected after object value');
	      }
	      getToken();
	
	      var node = new ObjectNode(properties);
	
	      // parse index parameters
	      node = parseAccessors(node);
	
	      return node;
	    }
	
	    return parseNumber();
	  }
	
	  /**
	   * parse a number
	   * @return {Node} node
	   * @private
	   */
	  function parseNumber () {
	    var number;
	
	    if (token_type == TOKENTYPE.NUMBER) {
	      // this is a number
	      number = token;
	      getToken();
	
	      return new ConstantNode(number, 'number');
	    }
	
	    return parseParentheses();
	  }
	
	  /**
	   * parentheses
	   * @return {Node} node
	   * @private
	   */
	  function parseParentheses () {
	    var node;
	
	    // check if it is a parenthesized expression
	    if (token == '(') {
	      // parentheses (...)
	      openParams();
	      getToken();
	
	      node = parseAssignment(); // start again
	
	      if (token != ')') {
	        throw createSyntaxError('Parenthesis ) expected');
	      }
	      closeParams();
	      getToken();
	
	      node = new ParenthesisNode(node);
	      node = parseAccessors(node);
	      return node;
	    }
	
	    return parseEnd();
	  }
	
	  /**
	   * Evaluated when the expression is not yet ended but expected to end
	   * @return {Node} res
	   * @private
	   */
	  function parseEnd () {
	    if (token == '') {
	      // syntax error or unexpected end of expression
	      throw createSyntaxError('Unexpected end of expression');
	    } else {
	      throw createSyntaxError('Value expected');
	    }
	  }
	
	  /**
	   * Shortcut for getting the current row value (one based)
	   * Returns the line of the currently handled expression
	   * @private
	   */
	  /* TODO: implement keeping track on the row number
	  function row () {
	    return null;
	  }
	  */
	
	  /**
	   * Shortcut for getting the current col value (one based)
	   * Returns the column (position) where the last token starts
	   * @private
	   */
	  function col () {
	    return index - token.length + 1;
	  }
	
	  /**
	   * Create an error
	   * @param {string} message
	   * @return {SyntaxError} instantiated error
	   * @private
	   */
	  function createSyntaxError (message) {
	    var c = col();
	    var error = new SyntaxError(message + ' (char ' + c + ')');
	    error['char'] = c;
	
	    return error;
	  }
	
	  /**
	   * Create an error
	   * @param {string} message
	   * @return {Error} instantiated error
	   * @private
	   */
	  function createError (message) {
	    var c = col();
	    var error = new SyntaxError(message + ' (char ' + c + ')');
	    error['char'] = c;
	
	    return error;
	  }
	
	  return parse;
	}
	
	exports.name = 'parse';
	exports.path = 'expression';
	exports.factory = factory;


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var stringify = __webpack_require__(74).stringify;
	var getSafeProperty = __webpack_require__(98).getSafeProperty;
	
	function factory (type, config, load, typed) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	  var access = load(__webpack_require__(341));
	
	  /**
	   * @constructor AccessorNode
	   * @extends {Node}
	   * Access an object property or get a matrix subset
	   *
	   * @param {Node} object                 The object from which to retrieve
	   *                                      a property or subset.
	   * @param {IndexNode} index             IndexNode containing ranges
	   */
	  function AccessorNode(object, index) {
	    if (!(this instanceof AccessorNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    if (!(object && object.isNode)) {
	      throw new TypeError('Node expected for parameter "object"');
	    }
	    if (!(index && index.isIndexNode)) {
	      throw new TypeError('IndexNode expected for parameter "index"');
	    }
	
	    this.object = object || null;
	    this.index = index;
	
	    // readonly property name
	    Object.defineProperty(this, 'name', {
	      get: function () {
	        if (this.index) {
	          return (this.index.isObjectProperty())
	              ? this.index.getObjectProperty()
	              : '';
	        }
	        else {
	          return this.object.name || '';
	        }
	      }.bind(this),
	      set: function () {
	        throw new Error('Cannot assign a new name, name is read-only');
	      }
	    });
	  }
	
	  AccessorNode.prototype = new Node();
	
	  AccessorNode.prototype.type = 'AccessorNode';
	
	  AccessorNode.prototype.isAccessorNode = true;
	
	  /**
	   * Compile the node to javascript code
	   * @param {AccessorNode} node  Node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  function compileAccessorNode(node, defs, args) {
	    defs.access = access;
	    defs.getSafeProperty = getSafeProperty;
	
	    var object = compile(node.object, defs, args);
	    var index = compile(node.index, defs, args);
	
	    if (node.index.isObjectProperty()) {
	      var jsProp = stringify(node.index.getObjectProperty());
	      return 'getSafeProperty(' + object + ', ' + jsProp + ')';
	    }
	    else if (node.index.needsSize()) {
	      // if some parameters use the 'end' parameter, we need to calculate the size
	      return '(function () {' +
	          '  var object = ' + object + ';' +
	          '  var size = math.size(object).valueOf();' +
	          '  return access(object, ' + index + ');' +
	          '})()';
	    }
	    else {
	      return 'access(' + object + ', ' + index + ')';
	    }
	  }
	
	  // register the compile function
	  register(AccessorNode.prototype.type, compileAccessorNode);
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  AccessorNode.prototype.forEach = function (callback) {
	    callback(this.object, 'object', this);
	    callback(this.index, 'index', this);
	  };
	
	  /**
	   * Create a new AccessorNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {AccessorNode} Returns a transformed copy of the node
	   */
	  AccessorNode.prototype.map = function (callback) {
	    return new AccessorNode(
	        this._ifNode(callback(this.object, 'object', this)),
	        this._ifNode(callback(this.index, 'index', this))
	    );
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {AccessorNode}
	   */
	  AccessorNode.prototype.clone = function () {
	    return new AccessorNode(this.object, this.index);
	  };
	
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AccessorNode.prototype._toString = function (options) {
	    var object = this.object.toString(options);
	    if (needParenthesis(this.object)) {
	      object = '(' + object + ')';
	    }
	
	    return object + this.index.toString(options);
	  };
	
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AccessorNode.prototype._toTex = function (options) {
	    var object = this.object.toTex(options);
	    if (needParenthesis(this.object)) {
	      object = '\\left(' + object + '\\right)';
	    }
	
	    return object + this.index.toTex(options);
	  };
	
	  /**
	   * Are parenthesis needed?
	   * @private
	   */
	  function needParenthesis(node) {
	    // TODO: maybe make a method on the nodes which tells whether they need parenthesis?
	    return !(node.isAccessorNode || node.isArrayNode || node.isConstantNode
	        || node.isFunctionNode || node.isObjectNode || node.isParenthesisNode
	        || node.isSymbolNode);
	  }
	
	  return AccessorNode;
	}
	
	exports.name = 'AccessorNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ }),
/* 338 */
/***/ (function(module, exports) {

	// the compile functions which compile a Node into JavaScript are not
	// exposed as class methods for security reasons to prevent being able to
	// override them or create fake Nodes. Instead, only compile functions of
	// registered nodes can be executed
	
	function factory () {
	  // map with node type as key and compile functions as value
	  var compileFunctions = {}
	
	  /**
	   * Register a compile function for a node
	   * @param {string} type
	   * @param {function} compileFunction
	   *                      The compile function, invoked as
	   *                      compileFunction(node, defs, args)
	   */
	  function register(type, compileFunction) {
	    if (compileFunctions[type] === undefined) {
	      compileFunctions[type] = compileFunction;
	    }
	    else {
	      throw new Error('Cannot register type "' + type + '": already exists');
	    }
	  }
	
	  /**
	   * Compile a Node into JavaScript
	   * @param {Node} node
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} Returns JavaScript code
	   */
	  function compile (node, defs, args) {
	    if (Object.hasOwnProperty.call(compileFunctions, node.type)) {
	      var compileFunction = compileFunctions[node.type];
	      return compileFunction(node, defs, args);
	    }
	    else if (typeof node._compile === 'function' &&
	        !Object.hasOwnProperty.call(node, '_compile')) {
	      // Compatibility for CustomNodes
	      // TODO: this is a security risk, change it such that you have to register CustomNodes separately in math.js, like math.expression.node.register(MyCustomNode)
	      return node._compile(defs, args);
	    }
	    else {
	      throw new Error('Cannot compile node: unknown type "' + node.type + '"');
	    }
	  }
	
	  return {
	    register: register,
	    compile: compile
	  }
	}
	
	exports.factory = factory;


/***/ }),
/* 339 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var keywords = __webpack_require__(340);
	var deepEqual= __webpack_require__(55).deepEqual;
	
	function factory (type, config, load, typed, math) {
	  var compile = load(__webpack_require__(338)).compile;
	
	  /**
	   * Node
	   */
	  function Node() {
	    if (!(this instanceof Node)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	  }
	
	  /**
	   * Evaluate the node
	   * @param {Object} [scope]  Scope to read/write variables
	   * @return {*}              Returns the result
	   */
	  Node.prototype.eval = function(scope) {
	    return this.compile().eval(scope);
	  };
	
	  Node.prototype.type = 'Node';
	
	  Node.prototype.isNode = true;
	
	  Node.prototype.comment = '';
	
	  /**
	   * Compile the node to javascript code
	   * @return {{eval: function}} expr  Returns an object with a function 'eval',
	   *                                  which can be invoked as expr.eval([scope]),
	   *                                  where scope is an optional object with
	   *                                  variables.
	   */
	  Node.prototype.compile = function () {
	    // TODO: calling compile(math) is deprecated since version 2.0.0. Remove this warning some day
	    if (arguments.length > 0) {
	      throw new Error('Calling compile(math) is deprecated. Call the function as compile() instead.');
	    }
	
	    // definitions globally available inside the closure of the compiled expressions
	    var defs = {
	      math: math.expression.mathWithTransform,
	      args: {}, // can be filled with names of FunctionAssignment arguments
	      _validateScope: _validateScope
	    };
	
	    // will be used to put local function arguments
	    var args = {};
	
	    var code = compile(this, defs, args);
	
	    var defsCode = Object.keys(defs).map(function (name) {
	      return '    var ' + name + ' = defs["' + name + '"];';
	    });
	
	    var factoryCode =
	        defsCode.join(' ') +
	        'return {' +
	        '  "eval": function (scope) {' +
	        '    if (scope) _validateScope(scope);' +
	        '    scope = scope || {};' +
	        '    return ' + code + ';' +
	        '  }' +
	        '};';
	
	    var factory = new Function('defs', factoryCode);
	    return factory(defs);
	  };
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  Node.prototype.forEach = function (callback) {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot run forEach on a Node interface');
	  };
	
	  /**
	   * Create a new Node having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {OperatorNode} Returns a transformed copy of the node
	   */
	  Node.prototype.map = function (callback) {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot run map on a Node interface');
	  };
	
	  /**
	   * Validate whether an object is a Node, for use with map
	   * @param {Node} node
	   * @returns {Node} Returns the input if it's a node, else throws an Error
	   * @protected
	   */
	  Node.prototype._ifNode = function (node) {
	    if (!(node && node.isNode)) {
	      throw new TypeError('Callback function must return a Node');
	    }
	
	    return node;
	  };
	
	  /**
	   * Recursively traverse all nodes in a node tree. Executes given callback for
	   * this node and each of its child nodes.
	   * @param {function(node: Node, path: string, parent: Node)} callback
	   *          A callback called for every node in the node tree.
	   */
	  Node.prototype.traverse = function (callback) {
	    // execute callback for itself
	    callback(this, null, null);
	
	    // recursively traverse over all childs of a node
	    function _traverse(node, callback) {
	      node.forEach(function (child, path, parent) {
	        callback(child, path, parent);
	        _traverse(child, callback);
	      });
	    }
	
	    _traverse(this, callback);
	  };
	
	  /**
	   * Recursively transform a node tree via a transform function.
	   *
	   * For example, to replace all nodes of type SymbolNode having name 'x' with a
	   * ConstantNode with value 2:
	   *
	   *     var res = Node.transform(function (node, path, parent) {
	   *       if (node && node.isSymbolNode) && (node.name == 'x')) {
	   *         return new ConstantNode(2);
	   *       }
	   *       else {
	   *         return node;
	   *       }
	   *     });
	   *
	   * @param {function(node: Node, path: string, parent: Node) : Node} callback
	   *          A mapping function accepting a node, and returning
	   *          a replacement for the node or the original node.
	   *          Signature: callback(node: Node, index: string, parent: Node) : Node
	   * @return {Node} Returns the original node or its replacement
	   */
	  Node.prototype.transform = function (callback) {
	    // traverse over all childs
	    function _transform (node, callback) {
	      return node.map(function(child, path, parent) {
	        var replacement = callback(child, path, parent);
	        return _transform(replacement, callback);
	      });
	    }
	
	    var replacement = callback(this, null, null);
	    return _transform(replacement, callback);
	  };
	
	  /**
	   * Find any node in the node tree matching given filter function. For example, to
	   * find all nodes of type SymbolNode having name 'x':
	   *
	   *     var results = Node.filter(function (node) {
	   *       return (node && node.isSymbolNode) && (node.name == 'x');
	   *     });
	   *
	   * @param {function(node: Node, path: string, parent: Node) : Node} callback
	   *            A test function returning true when a node matches, and false
	   *            otherwise. Function signature:
	   *            callback(node: Node, index: string, parent: Node) : boolean
	   * @return {Node[]} nodes       An array with nodes matching given filter criteria
	   */
	  Node.prototype.filter = function (callback) {
	    var nodes = [];
	
	    this.traverse(function (node, path, parent) {
	      if (callback(node, path, parent)) {
	        nodes.push(node);
	      }
	    });
	
	    return nodes;
	  };
	
	  // TODO: deprecated since version 1.1.0, remove this some day
	  Node.prototype.find = function () {
	    throw new Error('Function Node.find is deprecated. Use Node.filter instead.');
	  };
	
	  // TODO: deprecated since version 1.1.0, remove this some day
	  Node.prototype.match = function () {
	    throw new Error('Function Node.match is deprecated. See functions Node.filter, Node.transform, Node.traverse.');
	  };
	
	  /**
	   * Create a shallow clone of this node
	   * @return {Node}
	   */
	  Node.prototype.clone = function () {
	    // must be implemented by each of the Node implementations
	    throw new Error('Cannot clone a Node interface');
	  };
	
	  /**
	   * Create a deep clone of this node
	   * @return {Node}
	   */
	  Node.prototype.cloneDeep = function () {
	    return this.map(function (node) {
	      return node.cloneDeep();
	    });
	  };
	
	  /**
	   * Deep compare this node with another node.
	   * @param {Node} other
	   * @return {boolean} Returns true when both nodes are of the same type and
	   *                   contain the same values (as do their childs)
	   */
	  Node.prototype.equals = function (other) {
	    return other
	        ? deepEqual(this, other)
	        : false
	  };
	
	  /**
	   * Get string representation. (wrapper function)
	   *
	   * This function can get an object of the following form:
	   * {
	   *    handler: //This can be a callback function of the form
	   *             // "function callback(node, options)"or
	   *             // a map that maps function names (used in FunctionNodes)
	   *             // to callbacks
	   *    parenthesis: "keep" //the parenthesis option (This is optional)
	   * }
	   *
	   * @param {Object} [options]
	   * @return {string}
	   */
	  Node.prototype.toString = function (options) {
	    var customString;
	    if (options && typeof options == "object") {
	        switch (typeof options.handler) {
	          case 'object':
	          case 'undefined':
	            break;
	          case 'function':
	            customString = options.handler(this, options);
	            break;
	          default:
	            throw new TypeError('Object or function expected as callback');
	        }
	    }
	
	    if (typeof customString !== 'undefined') {
	      return customString;
	    }
	
	    return this._toString(options);
	  };
	
	  /**
	   * Internal function to generate the string output.
	   * This has to be implemented by every Node
	   *
	   * @throws {Error}
	   */
	  Node.prototype._toString = function () {
	    //must be implemented by each of the Node implementations
	    throw new Error('_toString not implemented for ' + this.type);
	  };
	
	  /**
	   * Get LaTeX representation. (wrapper function)
	   *
	   * This function can get an object of the following form:
	   * {
	   *    handler: //This can be a callback function of the form
	   *             // "function callback(node, options)"or
	   *             // a map that maps function names (used in FunctionNodes)
	   *             // to callbacks
	   *    parenthesis: "keep" //the parenthesis option (This is optional)
	   * }
	   *
	   * @param {Object} [options]
	   * @return {string}
	   */
	  Node.prototype.toTex = function (options) {
	    var customTex;
	    if (options && typeof options == 'object') {
	      switch (typeof options.handler) {
	        case 'object':
	        case 'undefined':
	          break;
	        case 'function':
	          customTex = options.handler(this, options);
	          break;
	        default:
	          throw new TypeError('Object or function expected as callback');
	      }
	    }
	
	    if (typeof customTex !== 'undefined') {
	      return customTex;
	    }
	
	    return this._toTex(options);
	  };
	
	  /**
	   * Internal function to generate the LaTeX output.
	   * This has to be implemented by every Node
	   *
	   * @param {Object} [options]
	   * @throws {Error}
	   */
	  Node.prototype._toTex = function (options) {
	    //must be implemented by each of the Node implementations
	    throw new Error('_toTex not implemented for ' + this.type);
	  };
	
	  /**
	   * Get identifier.
	   * @return {string}
	   */
	  Node.prototype.getIdentifier = function () {
	    return this.type;
	  };
	
	  /**
	   * Get the content of the current Node.
	   * @return {Node} node
	   **/
	  Node.prototype.getContent = function () {
	    return this;
	  };
	
	  /**
	   * Validate the symbol names of a scope.
	   * Throws an error when the scope contains an illegal symbol.
	   * @param {Object} scope
	   */
	  function _validateScope(scope) {
	    for (var symbol in scope) {
	      if (Object.hasOwnProperty.call(scope, symbol)) {
	        if (symbol in keywords) {
	          throw new Error('Scope contains an illegal symbol, "' + symbol + '" is a reserved keyword');
	        }
	      }
	    }
	  }
	
	  return Node;
	}
	
	exports.name = 'Node';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;


/***/ }),
/* 340 */
/***/ (function(module, exports) {

	'use strict';
	
	// Reserved keywords not allowed to use in the parser
	module.exports = {
	  end: true
	};


/***/ }),
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var errorTransform = __webpack_require__(342).transform;
	var getSafeProperty = __webpack_require__(98).getSafeProperty;
	
	function factory (type, config, load, typed) {
	  var subset = load(__webpack_require__(343));
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Retrieve part of an object:
	   *
	   * - Retrieve a property from an object
	   * - Retrieve a part of a string
	   * - Retrieve a matrix subset
	   *
	   * @param {Object | Array | Matrix | string} object
	   * @param {Index} index
	   * @return {Object | Array | Matrix | string} Returns the subset
	   */
	  return function access(object, index) {
	    try {
	      if (Array.isArray(object)) {
	        return matrix(object).subset(index).valueOf();
	      }
	      else if (object && typeof object.subset === 'function') { // Matrix
	        return object.subset(index);
	      }
	      else if (typeof object === 'string') {
	        // TODO: move getStringSubset into a separate util file, use that
	        return subset(object, index);
	      }
	      else if (typeof object === 'object') {
	        if (!index.isObjectProperty()) {
	          throw new TypeError('Cannot apply a numeric index as object property');
	        }
	
	        return getSafeProperty(object, index.getObjectProperty());
	      }
	      else {
	        throw new TypeError('Cannot apply index: unsupported type of object');
	      }
	    }
	    catch (err) {
	      throw errorTransform(err);
	    }
	  }
	}
	
	exports.factory = factory;


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

	var IndexError = __webpack_require__(94);
	
	/**
	 * Transform zero-based indices to one-based indices in errors
	 * @param {Error} err
	 * @returns {Error} Returns the transformed error
	 */
	exports.transform = function (err) {
	  if (err && err.isIndexError) {
	    return new IndexError(
	        err.index + 1,
	        err.min + 1,
	        err.max !== undefined ? err.max + 1 : undefined);
	  }
	
	  return err;
	};


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var clone = __webpack_require__(55).clone;
	var validateIndex = __webpack_require__(91).validateIndex;
	var getSafeProperty = __webpack_require__(98).getSafeProperty;
	var setSafeProperty = __webpack_require__(98).setSafeProperty;
	var DimensionError = __webpack_require__(93);
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Get or set a subset of a matrix or string.
	   *
	   * Syntax:
	   *     math.subset(value, index)                                // retrieve a subset
	   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset
	   *
	   * Examples:
	   *
	   *     // get a subset
	   *     var d = [[1, 2], [3, 4]];
	   *     math.subset(d, math.index(1, 0));        // returns 3
	   *     math.subset(d, math.index([0, 2], 1));   // returns [[2], [4]]
	   *
	   *     // replace a subset
	   *     var e = [];
	   *     var f = math.subset(e, math.index(0, [0, 2]), [5, 6]);  // f = [[5, 6]]
	   *     var g = math.subset(f, math.index(1, 1), 7, 0);         // g = [[5, 6], [0, 7]]
	   *
	   * See also:
	   *
	   *     size, resize, squeeze, index
	   *
	   * @param {Array | Matrix | string} matrix  An array, matrix, or string
	   * @param {Index} index                     An index containing ranges for each
	   *                                          dimension
	   * @param {*} [replacement]                 An array, matrix, or scalar.
	   *                                          If provided, the subset is replaced with replacement.
	   *                                          If not provided, the subset is returned
	   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when
	   *                                          the matrix is resized. If not provided,
	   *                                          math.matrix elements will be left undefined.
	   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.
	   */
	  var subset = typed('subset', {
	    // get subset
	    'Array, Index': function (value, index) {
	      var m = matrix(value);
	      var subset = m.subset(index);       // returns a Matrix
	      return subset && subset.valueOf();  // return an Array (like the input)
	    },
	
	    'Matrix, Index': function (value, index) {
	      return value.subset(index);
	    },
	
	    'Object, Index': _getObjectProperty,
	
	    'string, Index': _getSubstring,
	
	    // set subset
	    'Array, Index, any': function (value, index, replacement) {
	      return matrix(clone(value))
	          .subset(index, replacement, undefined)
	          .valueOf();
	    },
	
	    'Array, Index, any, any': function (value, index, replacement, defaultValue) {
	      return matrix(clone(value))
	          .subset(index, replacement, defaultValue)
	          .valueOf();
	    },
	
	    'Matrix, Index, any': function (value, index, replacement) {
	      return value.clone().subset(index, replacement);
	    },
	
	    'Matrix, Index, any, any': function (value, index, replacement, defaultValue) {
	      return value.clone().subset(index, replacement, defaultValue);
	    },
	
	    'string, Index, string': _setSubstring,
	    'string, Index, string, string': _setSubstring,
	    'Object, Index, any': _setObjectProperty
	  });
	
	  subset.toTex = undefined; // use default template
	
	  return subset;
	
	  /**
	   * Retrieve a subset of a string
	   * @param {string} str            string from which to get a substring
	   * @param {Index} index           An index containing ranges for each dimension
	   * @returns {string} substring
	   * @private
	   */
	  function _getSubstring(str, index) {
	    if (!index || index.isIndex !== true) {
	      // TODO: better error message
	      throw new TypeError('Index expected');
	    }
	    if (index.size().length != 1) {
	      throw new DimensionError(index.size().length, 1);
	    }
	
	    // validate whether the range is out of range
	    var strLen = str.length;
	    validateIndex(index.min()[0], strLen);
	    validateIndex(index.max()[0], strLen);
	
	    var range = index.dimension(0);
	
	    var substr = '';
	    range.forEach(function (v) {
	      substr += str.charAt(v);
	    });
	
	    return substr;
	  }
	
	  /**
	   * Replace a substring in a string
	   * @param {string} str            string to be replaced
	   * @param {Index} index           An index containing ranges for each dimension
	   * @param {string} replacement    Replacement string
	   * @param {string} [defaultValue] Default value to be uses when resizing
	   *                                the string. is ' ' by default
	   * @returns {string} result
	   * @private
	   */
	  function _setSubstring(str, index, replacement, defaultValue) {
	    if (!index || index.isIndex !== true) {
	      // TODO: better error message
	      throw new TypeError('Index expected');
	    }
	    if (index.size().length != 1) {
	      throw new DimensionError(index.size().length, 1);
	    }
	    if (defaultValue !== undefined) {
	      if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {
	        throw new TypeError('Single character expected as defaultValue');
	      }
	    }
	    else {
	      defaultValue = ' ';
	    }
	
	    var range = index.dimension(0);
	    var len = range.size()[0];
	
	    if (len != replacement.length) {
	      throw new DimensionError(range.size()[0], replacement.length);
	    }
	
	    // validate whether the range is out of range
	    var strLen = str.length;
	    validateIndex(index.min()[0]);
	    validateIndex(index.max()[0]);
	
	    // copy the string into an array with characters
	    var chars = [];
	    for (var i = 0; i < strLen; i++) {
	      chars[i] = str.charAt(i);
	    }
	
	    range.forEach(function (v, i) {
	      chars[v] = replacement.charAt(i[0]);
	    });
	
	    // initialize undefined characters with a space
	    if (chars.length > strLen) {
	      for (i = strLen - 1, len = chars.length; i < len; i++) {
	        if (!chars[i]) {
	          chars[i] = defaultValue;
	        }
	      }
	    }
	
	    return chars.join('');
	  }
	}
	
	/**
	 * Retrieve a property from an object
	 * @param {Object} object
	 * @param {Index} index
	 * @return {*} Returns the value of the property
	 * @private
	 */
	function _getObjectProperty (object, index) {
	  if (index.size().length !== 1) {
	    throw new DimensionError(index.size(), 1);
	  }
	
	  var key = index.dimension(0);
	  if (typeof key !== 'string') {
	    throw new TypeError('String expected as index to retrieve an object property');
	  }
	
	  return getSafeProperty(object, key);
	}
	
	/**
	 * Set a property on an object
	 * @param {Object} object
	 * @param {Index} index
	 * @param {*} replacement
	 * @return {*} Returns the updated object
	 * @private
	 */
	function _setObjectProperty (object, index, replacement) {
	  if (index.size().length !== 1) {
	    throw new DimensionError(index.size(), 1);
	  }
	
	  var key = index.dimension(0);
	  if (typeof key !== 'string') {
	    throw new TypeError('String expected as index to retrieve an object property');
	  }
	
	  // clone the object, and apply the property to the clone
	  var updated = clone(object);
	  setSafeProperty(updated, key, replacement);
	
	  return updated;
	}
	
	exports.name = 'subset';
	exports.factory = factory;


/***/ }),
/* 344 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	
	  /**
	   * @constructor ArrayNode
	   * @extends {Node}
	   * Holds an 1-dimensional array with items
	   * @param {Node[]} [items]   1 dimensional array with items
	   */
	  function ArrayNode(items) {
	    if (!(this instanceof ArrayNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    this.items = items || [];
	
	    // validate input
	    if (!Array.isArray(this.items)
	        || !this.items.every(function (item) {return item && item.isNode;})) {
	      throw new TypeError('Array containing Nodes expected');
	    }
	
	    // TODO: deprecated since v3, remove some day
	    var deprecated = function () {
	      throw new Error('Property `ArrayNode.nodes` is deprecated, use `ArrayNode.items` instead');
	    };
	    Object.defineProperty(this, 'nodes', { get: deprecated, set: deprecated });
	  }
	
	  ArrayNode.prototype = new Node();
	
	  ArrayNode.prototype.type = 'ArrayNode';
	
	  ArrayNode.prototype.isArrayNode = true;
	
	  /**
	   * Compile the node to javascript code
	   * @param {ArrayNode} node  Node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @private
	   */
	  function compileArrayNode(node, defs, args) {
	    var asMatrix = (defs.math.config().matrix !== 'Array');
	
	    var items = node.items.map(function (item) {
	      return compile(item, defs, args);
	    });
	
	    return (asMatrix ? 'math.matrix([' : '[') +
	        items.join(',') +
	        (asMatrix ? '])' : ']');
	  }
	
	  // register the compile function
	  register(ArrayNode.prototype.type, compileArrayNode);
	
	      /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ArrayNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.items.length; i++) {
	      var node = this.items[i];
	      callback(node, 'items[' + i + ']', this);
	    }
	  };
	
	  /**
	   * Create a new ArrayNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ArrayNode} Returns a transformed copy of the node
	   */
	  ArrayNode.prototype.map = function (callback) {
	    var items = [];
	    for (var i = 0; i < this.items.length; i++) {
	      items[i] = this._ifNode(callback(this.items[i], 'items[' + i + ']', this));
	    }
	    return new ArrayNode(items);
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ArrayNode}
	   */
	  ArrayNode.prototype.clone = function() {
	    return new ArrayNode(this.items.slice(0));
	  };
	
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ArrayNode.prototype._toString = function(options) {
	    var items = this.items.map(function (node) {
	      return node.toString(options);
	    });
	    return '[' + items.join(', ') + ']';
	  };
	
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ArrayNode.prototype._toTex = function(options) {
	    var s = '\\begin{bmatrix}';
	
	    this.items.forEach(function(node) {
	      if (node.items) {
	        s += node.items.map(function(childNode) {
	          return childNode.toTex(options);
	        }).join('&');
	      }
	      else {
	        s += node.toTex(options);
	      }
	
	      // new line
	      s += '\\\\';
	    });
	    s += '\\end{bmatrix}';
	    return s;
	  };
	
	  return ArrayNode;
	}
	
	exports.name = 'ArrayNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ }),
/* 345 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var latex = __webpack_require__(83);
	var stringify = __webpack_require__(74).stringify;
	var getSafeProperty = __webpack_require__(98).getSafeProperty;
	var setSafeProperty = __webpack_require__(98).setSafeProperty;
	
	function factory (type, config, load, typed) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	  var ArrayNode = load(__webpack_require__(344));
	  var matrix = load(__webpack_require__(104));
	  var assign = load(__webpack_require__(346));
	  var access = load(__webpack_require__(341));
	
	  var keywords = __webpack_require__(340);
	  var operators = __webpack_require__(347);
	
	  /**
	   * @constructor AssignmentNode
	   * @extends {Node}
	   *
	   * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or
	   * replace a subset of a matrix like `A[2,2]=42`.
	   *
	   * Syntax:
	   *
	   *     new AssignmentNode(symbol, value)
	   *     new AssignmentNode(object, index, value)
	   *
	   * Usage:
	   *
	   *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2));                      // a=2
	   *    new AssignmentNode(new SymbolNode('a'), new IndexNode('b'), new ConstantNode(2))   // a.b=2
	   *    new AssignmentNode(new SymbolNode('a'), new IndexNode(1, 2), new ConstantNode(3))  // a[1,2]=3
	   *
	   * @param {SymbolNode | AccessorNode} object  Object on which to assign a value
	   * @param {IndexNode} [index=null]            Index, property name or matrix
	   *                                            index. Optional. If not provided
	   *                                            and `object` is a SymbolNode,
	   *                                            the property is assigned to the
	   *                                            global scope.
	   * @param {Node} value                        The value to be assigned
	   */
	  function AssignmentNode(object, index, value) {
	    if (!(this instanceof AssignmentNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    this.object = object;
	    this.index = value ? index : null;
	    this.value = value ? value : index;
	
	    // validate input
	    if (!object || !(object.isSymbolNode || object.isAccessorNode)) {
	      throw new TypeError('SymbolNode or AccessorNode expected as "object"');
	    }
	    if (object && object.isSymbolNode && object.name === 'end') {
	      throw new Error('Cannot assign to symbol "end"');
	    }
	    if (this.index && !this.index.isIndexNode) {
	      throw new TypeError('IndexNode expected as "index"');
	    }
	    if (!this.value || !this.value.isNode) {
	      throw new TypeError('Node expected as "value"');
	    }
	
	    // readonly property name
	    Object.defineProperty(this, 'name', {
	      get: function () {
	        if (this.index) {
	          return (this.index.isObjectProperty())
	              ? this.index.getObjectProperty()
	              : '';
	        }
	        else {
	          return this.object.name || '';
	        }
	      }.bind(this),
	      set: function () {
	        throw new Error('Cannot assign a new name, name is read-only');
	      }
	    });
	  }
	
	  AssignmentNode.prototype = new Node();
	
	  AssignmentNode.prototype.type = 'AssignmentNode';
	
	  AssignmentNode.prototype.isAssignmentNode = true;
	
	  /**
	   * Compile the node to javascript code
	   * @param {AssignmentNode} node The node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @private
	   */
	  function compileAssignmentNode (node, defs, args) {
	    defs.assign = assign;
	    defs.access = access;
	    defs.getSafeProperty = getSafeProperty;
	    defs.setSafeProperty = setSafeProperty;
	
	    var size;
	    var object = compile(node.object, defs, args);
	    var index = node.index ? compile(node.index, defs, args) : null;
	    var value = compile(node.value, defs, args);
	    var jsName = stringify(node.object.name);
	
	    if (!node.index) {
	      // apply a variable to the scope, for example `a=2`
	      if (!node.object.isSymbolNode) {
	        throw new TypeError('SymbolNode expected as object');
	      }
	
	      return 'setSafeProperty(scope, ' + jsName + ', ' + value + ')';
	    }
	    else if (node.index.isObjectProperty()) {
	      // apply an object property for example `a.b=2`
	      var jsProp = stringify(node.index.getObjectProperty());
	      return 'setSafeProperty(' + object + ', ' + jsProp + ', ' + value + ')';
	    }
	    else if (node.object.isSymbolNode) {
	      // update a matrix subset, for example `a[2]=3`
	      size = node.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';
	
	      // apply updated object to scope
	      return '(function () {' +
	          '  var object = ' + object + ';' +
	          '  var value = ' + value + ';' +
	          '  ' + size +
	          '  setSafeProperty(scope, ' + jsName + ', assign(object, ' + index + ', value));' +
	          '  return value;' +
	          '})()';
	    }
	    else { // node.object.isAccessorNode === true
	      // update a matrix subset, for example `a.b[2]=3`
	      size = node.index.needsSize() ? 'var size = math.size(object).valueOf();' : '';
	
	      // we will not use the compile function of the AccessorNode, but compile it
	      // ourselves here as we need the parent object of the AccessorNode:
	      // wee need to apply the updated object to parent object
	      var parentObject = compile(node.object.object, defs, args);
	
	      if (node.object.index.isObjectProperty()) {
	        var jsParentProperty = stringify(node.object.index.getObjectProperty());
	        return '(function () {' +
	            '  var parent = ' + parentObject + ';' +
	            '  var object = getSafeProperty(parent, ' + jsParentProperty + ');' + // parentIndex is a property
	            '  var value = ' + value + ';' +
	            size +
	            '  setSafeProperty(parent, ' + jsParentProperty + ', assign(object, ' + index + ', value));' +
	            '  return value;' +
	            '})()';
	      }
	      else {
	        // if some parameters use the 'end' parameter, we need to calculate the size
	        var parentSize = node.object.index.needsSize() ? 'var size = math.size(parent).valueOf();' : '';
	        var parentIndex = compile(node.object.index, defs, args);
	
	        return '(function () {' +
	            '  var parent = ' + parentObject + ';' +
	            '  ' + parentSize +
	            '  var parentIndex = ' + parentIndex + ';' +
	            '  var object = access(parent, parentIndex);' +
	            '  var value = ' + value + ';' +
	            '  ' + size +
	            '  assign(parent, parentIndex, assign(object, ' + index + ', value));' +
	            '  return value;' +
	            '})()';
	      }
	    }
	  }
	
	  // register the compile function
	  register(AssignmentNode.prototype.type, compileAssignmentNode);
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  AssignmentNode.prototype.forEach = function (callback) {
	    callback(this.object, 'object', this);
	    if (this.index) {
	      callback(this.index, 'index', this);
	    }
	    callback(this.value, 'value', this);
	  };
	
	  /**
	   * Create a new AssignmentNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {AssignmentNode} Returns a transformed copy of the node
	   */
	  AssignmentNode.prototype.map = function (callback) {
	    var object = this._ifNode(callback(this.object, 'object', this));
	    var index = this.index
	        ? this._ifNode(callback(this.index, 'index', this))
	        : null;
	    var value = this._ifNode(callback(this.value, 'value', this));
	
	    return new AssignmentNode(object, index, value);
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {AssignmentNode}
	   */
	  AssignmentNode.prototype.clone = function() {
	    return new AssignmentNode(this.object, this.index, this.value);
	  };
	
	  /*
	   * Is parenthesis needed?
	   * @param {node} node
	   * @param {string} [parenthesis='keep']
	   * @private
	   */
	  function needParenthesis(node, parenthesis) {
	    if (!parenthesis) {
	      parenthesis = 'keep';
	    }
	
	    var precedence = operators.getPrecedence(node, parenthesis);
	    var exprPrecedence = operators.getPrecedence(node.value, parenthesis);
	    return (parenthesis === 'all')
	      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));
	  }
	
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AssignmentNode.prototype._toString = function(options) {
	    var object = this.object.toString(options);
	    var index = this.index ? this.index.toString(options) : '';
	    var value = this.value.toString(options);
	    if (needParenthesis(this, options && options.parenthesis)) {
	      value = '(' + value + ')';
	    }
	
	    return object + index + ' = ' + value;
	  };
	
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string}
	   */
	  AssignmentNode.prototype._toTex = function(options) {
	    var object = this.object.toTex(options);
	    var index = this.index ? this.index.toTex(options) : '';
	    var value = this.value.toTex(options);
	    if (needParenthesis(this, options && options.parenthesis)) {
	      value = '\\left(' + value + '\\right)';
	    }
	
	    return object + index + ':=' + value;
	  };
	
	  return AssignmentNode;
	}
	
	exports.name = 'AssignmentNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ }),
/* 346 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var errorTransform = __webpack_require__(342).transform;
	var setSafeProperty = __webpack_require__(98).setSafeProperty;
	
	function factory (type, config, load, typed) {
	  var subset = load(__webpack_require__(343));
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Replace part of an object:
	   *
	   * - Assign a property to an object
	   * - Replace a part of a string
	   * - Replace a matrix subset
	   *
	   * @param {Object | Array | Matrix | string} object
	   * @param {Index} index
	   * @param {*} value
	   * @return {Object | Array | Matrix | string} Returns the original object
	   *                                            except in case of a string
	   */
	  // TODO: change assign to return the value instead of the object
	  return function assign(object, index, value) {
	    try {
	      if (Array.isArray(object)) {
	        return matrix(object).subset(index, value).valueOf();
	      }
	      else if (object && typeof object.subset === 'function') { // Matrix
	        return object.subset(index, value);
	      }
	      else if (typeof object === 'string') {
	        // TODO: move setStringSubset into a separate util file, use that
	        return subset(object, index, value);
	      }
	      else if (typeof object === 'object') {
	        if (!index.isObjectProperty()) {
	          throw TypeError('Cannot apply a numeric index as object property');
	        }
	        setSafeProperty(object, index.getObjectProperty(), value);
	        return object;
	      }
	      else {
	        throw new TypeError('Cannot apply index: unsupported type of object');
	      }
	    }
	    catch (err) {
	        throw errorTransform(err);
	    }
	  }
	}
	
	exports.factory = factory;


/***/ }),
/* 347 */
/***/ (function(module, exports) {

	'use strict'
	
	//list of identifiers of nodes in order of their precedence
	//also contains information about left/right associativity
	//and which other operator the operator is associative with
	//Example:
	// addition is associative with addition and subtraction, because:
	// (a+b)+c=a+(b+c)
	// (a+b)-c=a+(b-c)
	//
	// postfix operators are left associative, prefix operators 
	// are right associative
	//
	//It's also possible to set the following properties:
	// latexParens: if set to false, this node doesn't need to be enclosed
	//              in parentheses when using LaTeX
	// latexLeftParens: if set to false, this !OperatorNode's! 
	//                  left argument doesn't need to be enclosed
	//                  in parentheses
	// latexRightParens: the same for the right argument
	var properties = [
	  { //assignment
	    'AssignmentNode': {},
	    'FunctionAssignmentNode': {}
	  },
	  { //conditional expression
	    'ConditionalNode': {
	      latexLeftParens: false,
	      latexRightParens: false,
	      latexParens: false
	      //conditionals don't need parentheses in LaTeX because
	      //they are 2 dimensional
	    }
	  },
	  { //logical or
	    'OperatorNode:or': {
	      associativity: 'left',
	      associativeWith: []
	    }
	
	  },
	  { //logical xor
	    'OperatorNode:xor': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //logical and
	    'OperatorNode:and': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //bitwise or
	    'OperatorNode:bitOr': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //bitwise xor
	    'OperatorNode:bitXor': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //bitwise and
	    'OperatorNode:bitAnd': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //relational operators
	    'OperatorNode:equal': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:unequal': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:smaller': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:larger': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:smallerEq': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:largerEq': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //bitshift operators
	    'OperatorNode:leftShift': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:rightArithShift': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:rightLogShift': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //unit conversion
	    'OperatorNode:to': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //range
	    'RangeNode': {}
	  },
	  { //addition, subtraction
	    'OperatorNode:add': {
	      associativity: 'left',
	      associativeWith: ['OperatorNode:add', 'OperatorNode:subtract']
	    },
	    'OperatorNode:subtract': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //multiply, divide, modulus
	    'OperatorNode:multiply': {
	      associativity: 'left',
	      associativeWith: [
	        'OperatorNode:multiply',
	        'OperatorNode:divide',
	        'Operator:dotMultiply',
	        'Operator:dotDivide'
	      ]
	    },
	    'OperatorNode:divide': {
	      associativity: 'left',
	      associativeWith: [],
	      latexLeftParens: false,
	      latexRightParens: false,
	      latexParens: false
	      //fractions don't require parentheses because
	      //they're 2 dimensional, so parens aren't needed
	      //in LaTeX
	    },
	    'OperatorNode:dotMultiply': {
	      associativity: 'left',
	      associativeWith: [
	        'OperatorNode:multiply',
	        'OperatorNode:divide',
	        'OperatorNode:dotMultiply',
	        'OperatorNode:doDivide'
	      ]
	    },
	    'OperatorNode:dotDivide': {
	      associativity: 'left',
	      associativeWith: []
	    },
	    'OperatorNode:mod': {
	      associativity: 'left',
	      associativeWith: []
	    }
	  },
	  { //unary prefix operators
	    'OperatorNode:unaryPlus': {
	      associativity: 'right'
	    },
	    'OperatorNode:unaryMinus': {
	      associativity: 'right'
	    },
	    'OperatorNode:bitNot': {
	      associativity: 'right'
	    },
	    'OperatorNode:not': {
	      associativity: 'right'
	    }
	  },
	  { //exponentiation
	    'OperatorNode:pow': {
	      associativity: 'right',
	      associativeWith: [],
	      latexRightParens: false
	      //the exponent doesn't need parentheses in
	      //LaTeX because it's 2 dimensional
	      //(it's on top)
	    },
	    'OperatorNode:dotPow': {
	      associativity: 'right',
	      associativeWith: []
	    }
	  },
	  { //factorial
	    'OperatorNode:factorial': {
	      associativity: 'left'
	    }
	  },
	  { //matrix transpose
	    'OperatorNode:transpose': {
	      associativity: 'left'
	    }
	  }
	];
	
	/**
	 * Get the precedence of a Node.
	 * Higher number for higher precedence, starting with 0.
	 * Returns null if the precedence is undefined.
	 *
	 * @param {Node}
	 * @param {string} parenthesis
	 * @return {number|null}
	 */
	function getPrecedence (_node, parenthesis) {
	  var node = _node;
	  if (parenthesis !== 'keep') {
	    //ParenthesisNodes are only ignored when not in 'keep' mode
	    node = _node.getContent();
	  }
	  var identifier = node.getIdentifier();
	  for (var i = 0; i < properties.length; i++) {
	    if (identifier in properties[i]) {
	      return i;
	    }
	  }
	  return null;
	}
	
	/**
	 * Get the associativity of an operator (left or right).
	 * Returns a string containing 'left' or 'right' or null if
	 * the associativity is not defined.
	 *
	 * @param {Node}
	 * @param {string} parenthesis
	 * @return {string|null}
	 * @throws {Error}
	 */
	function getAssociativity (_node, parenthesis) {
	  var node = _node;
	  if (parenthesis !== 'keep') {
	    //ParenthesisNodes are only ignored when not in 'keep' mode
	    node = _node.getContent();
	  }
	  var identifier = node.getIdentifier();
	  var index = getPrecedence(node, parenthesis);
	  if (index === null) {
	    //node isn't in the list
	    return null;
	  }
	  var property = properties[index][identifier];
	
	  if (property.hasOwnProperty('associativity')) {
	    if (property.associativity === 'left') {
	      return 'left';
	    }
	    if (property.associativity === 'right') {
	      return 'right';
	    }
	    //associativity is invalid
	    throw Error('\'' + identifier + '\' has the invalid associativity \''
	                + property.associativity + '\'.');
	  }
	
	  //associativity is undefined
	  return null;
	}
	
	/**
	 * Check if an operator is associative with another operator.
	 * Returns either true or false or null if not defined.
	 *
	 * @param {Node} nodeA
	 * @param {Node} nodeB
	 * @param {string} parenthesis
	 * @return {bool|null}
	 */
	function isAssociativeWith (nodeA, nodeB, parenthesis) {
	  var a = nodeA;
	  var b = nodeB;
	  if (parenthesis !== 'keep') {
	    //ParenthesisNodes are only ignored when not in 'keep' mode
	    var a = nodeA.getContent();
	    var b = nodeB.getContent();
	  }
	  var identifierA = a.getIdentifier();
	  var identifierB = b.getIdentifier();
	  var index = getPrecedence(a, parenthesis);
	  if (index === null) {
	    //node isn't in the list
	    return null;
	  }
	  var property = properties[index][identifierA];
	
	  if (property.hasOwnProperty('associativeWith')
	      && (property.associativeWith instanceof Array)) {
	    for (var i = 0; i < property.associativeWith.length; i++) {
	      if (property.associativeWith[i] === identifierB) {
	        return true;
	      }
	    }
	    return false;
	  }
	
	  //associativeWith is not defined
	  return null;
	}
	
	module.exports.properties = properties;
	module.exports.getPrecedence = getPrecedence;
	module.exports.getAssociativity = getAssociativity;
	module.exports.isAssociativeWith = isAssociativeWith;


/***/ }),
/* 348 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	  var ResultSet = load(__webpack_require__(124));
	
	  /**
	   * @constructor BlockNode
	   * @extends {Node}
	   * Holds a set with blocks
	   * @param {Array.<{node: Node} | {node: Node, visible: boolean}>} blocks
	   *            An array with blocks, where a block is constructed as an Object
	   *            with properties block, which is a Node, and visible, which is
	   *            a boolean. The property visible is optional and is true by default
	   */
	  function BlockNode(blocks) {
	    if (!(this instanceof BlockNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    // validate input, copy blocks
	    if (!Array.isArray(blocks)) throw new Error('Array expected');
	    this.blocks = blocks.map(function (block) {
	      var node = block && block.node;
	      var visible = block && block.visible !== undefined ? block.visible : true;
	
	      if (!(node && node.isNode))      throw new TypeError('Property "node" must be a Node');
	      if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');
	
	      return {
	        node: node,
	        visible: visible
	      }
	    });
	  }
	
	  BlockNode.prototype = new Node();
	
	  BlockNode.prototype.type = 'BlockNode';
	
	  BlockNode.prototype.isBlockNode = true;
	
	  /**
	   * Compile the node to javascript code
	   * @param {BlockNode} node  The node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  function compileBlockNode (node, defs, args) {
	    defs.ResultSet = ResultSet;
	    var blocks = node.blocks.map(function (param) {
	      var js = compile(param.node, defs, args);
	      if (param.visible) {
	        return 'results.push(' + js + ');';
	      }
	      else {
	        return js + ';';
	      }
	    });
	
	    return '(function () {' +
	        'var results = [];' +
	        blocks.join('') +
	        'return new ResultSet(results);' +
	        '})()';
	  }
	
	  // register the compile function
	  register(BlockNode.prototype.type, compileBlockNode);
	
	  /**
	   * Execute a callback for each of the child blocks of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  BlockNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.blocks.length; i++) {
	      callback(this.blocks[i].node, 'blocks[' + i + '].node', this);
	    }
	  };
	
	  /**
	   * Create a new BlockNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {BlockNode} Returns a transformed copy of the node
	   */
	  BlockNode.prototype.map = function (callback) {
	    var blocks = [];
	    for (var i = 0; i < this.blocks.length; i++) {
	      var block = this.blocks[i];
	      var node = this._ifNode(callback(block.node, 'blocks[' + i + '].node', this));
	      blocks[i] = {
	        node: node,
	        visible: block.visible
	      };
	    }
	    return new BlockNode(blocks);
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {BlockNode}
	   */
	  BlockNode.prototype.clone = function () {
	    var blocks = this.blocks.map(function (block) {
	      return {
	        node: block.node,
	        visible: block.visible
	      };
	    });
	
	    return new BlockNode(blocks);
	  };
	
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  BlockNode.prototype._toString = function (options) {
	    return this.blocks.map(function (param) {
	      return param.node.toString(options) + (param.visible ? '' : ';');
	    }).join('\n');
	  };
	
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  BlockNode.prototype._toTex = function (options) {
	    return this.blocks.map(function (param) {
	      return param.node.toTex(options) + (param.visible ? '' : ';');
	    }).join('\\;\\;\n');
	  };
	
	  return BlockNode;
	}
	
	exports.name = 'BlockNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ }),
/* 349 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var latex = __webpack_require__(83);
	var operators = __webpack_require__(347);
	
	function factory (type, config, load, typed) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	
	  /**
	   * A lazy evaluating conditional operator: 'condition ? trueExpr : falseExpr'
	   *
	   * @param {Node} condition   Condition, must result in a boolean
	   * @param {Node} trueExpr    Expression evaluated when condition is true
	   * @param {Node} falseExpr   Expression evaluated when condition is true
	   *
	   * @constructor ConditionalNode
	   * @extends {Node}
	   */
	  function ConditionalNode(condition, trueExpr, falseExpr) {
	    if (!(this instanceof ConditionalNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	    if (!(condition && condition.isNode)) throw new TypeError('Parameter condition must be a Node');
	    if (!(trueExpr && trueExpr.isNode))  throw new TypeError('Parameter trueExpr must be a Node');
	    if (!(falseExpr && falseExpr.isNode)) throw new TypeError('Parameter falseExpr must be a Node');
	
	    this.condition = condition;
	    this.trueExpr = trueExpr;
	    this.falseExpr = falseExpr;
	  }
	
	  ConditionalNode.prototype = new Node();
	
	  ConditionalNode.prototype.type = 'ConditionalNode';
	
	  ConditionalNode.prototype.isConditionalNode = true;
	
	  /**
	   * Compile the node to javascript code
	   * @param {ConditionalNode} node  The node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  function compileConditionalNode(node, defs, args) {
	    /**
	     * Test whether a condition is met
	     * @param {*} condition
	     * @returns {boolean} true if condition is true or non-zero, else false
	     */
	    defs.testCondition = function (condition) {
	      if (typeof condition === 'number'
	          || typeof condition === 'boolean'
	          || typeof condition === 'string') {
	        return condition ? true : false;
	      }
	
	      if (condition) {
	        if (condition.isBigNumber === true) {
	          return condition.isZero() ? false : true;
	        }
	
	        if (condition.isComplex === true) {
	          return (condition.re || condition.im) ? true : false;
	        }
	
	        if (condition.isUnit === true) {
	          return condition.value ? true : false;
	        }
	      }
	
	      if (condition === null || condition === undefined) {
	        return false;
	      }
	
	      throw new TypeError('Unsupported type of condition "' + defs.math['typeof'](condition) + '"');
	    };
	
	    return (
	      'testCondition(' + compile(node.condition, defs, args) + ') ? ' +
	      '( ' + compile(node.trueExpr, defs, args) + ') : ' +
	      '( ' + compile(node.falseExpr, defs, args) + ')'
	    );
	  }
	
	  // register the compile function
	  register(ConditionalNode.prototype.type, compileConditionalNode);
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ConditionalNode.prototype.forEach = function (callback) {
	    callback(this.condition, 'condition', this);
	    callback(this.trueExpr, 'trueExpr', this);
	    callback(this.falseExpr, 'falseExpr', this);
	  };
	
	  /**
	   * Create a new ConditionalNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ConditionalNode} Returns a transformed copy of the node
	   */
	  ConditionalNode.prototype.map = function (callback) {
	    return new ConditionalNode(
	        this._ifNode(callback(this.condition, 'condition', this)),
	        this._ifNode(callback(this.trueExpr, 'trueExpr', this)),
	        this._ifNode(callback(this.falseExpr, 'falseExpr', this))
	    );
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ConditionalNode}
	   */
	  ConditionalNode.prototype.clone = function () {
	    return new ConditionalNode(this.condition, this.trueExpr, this.falseExpr);
	  };
	
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConditionalNode.prototype._toString = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var precedence = operators.getPrecedence(this, parenthesis);
	
	    //Enclose Arguments in parentheses if they are an OperatorNode
	    //or have lower or equal precedence
	    //NOTE: enclosing all OperatorNodes in parentheses is a decision
	    //purely based on aesthetics and readability
	    var condition = this.condition.toString(options);
	    var conditionPrecedence = operators.getPrecedence(this.condition, parenthesis);
	    if ((parenthesis === 'all')
	        || (this.condition.type === 'OperatorNode')
	        || ((conditionPrecedence !== null) && (conditionPrecedence <= precedence))) {
	      condition = '(' + condition + ')';
	    }
	
	    var trueExpr = this.trueExpr.toString(options);
	    var truePrecedence = operators.getPrecedence(this.trueExpr, parenthesis);
	    if ((parenthesis === 'all')
	        || (this.trueExpr.type === 'OperatorNode')
	        || ((truePrecedence !== null) && (truePrecedence <= precedence))) {
	      trueExpr = '(' + trueExpr + ')';
	    }
	
	    var falseExpr = this.falseExpr.toString(options);
	    var falsePrecedence = operators.getPrecedence(this.falseExpr, parenthesis);
	    if ((parenthesis === 'all')
	        || (this.falseExpr.type === 'OperatorNode')
	        || ((falsePrecedence !== null) && (falsePrecedence <= precedence))) {
	      falseExpr = '(' + falseExpr + ')';
	    }
	    return condition + ' ? ' + trueExpr + ' : ' + falseExpr;
	  };
	
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConditionalNode.prototype._toTex = function (options) {
	    return '\\begin{cases} {'
	        + this.trueExpr.toTex(options) + '}, &\\quad{\\text{if }\\;'
	        + this.condition.toTex(options)
	        + '}\\\\{' + this.falseExpr.toTex(options)
	        + '}, &\\quad{\\text{otherwise}}\\end{cases}';
	  };
	
	  return ConditionalNode;
	}
	
	exports.name = 'ConditionalNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ }),
/* 350 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var getType = __webpack_require__(92).type;
	var stringify = __webpack_require__(74).stringify;
	
	function factory (type, config, load, typed) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	
	  /**
	   * A ConstantNode holds a constant value like a number or string. A ConstantNode
	   * stores a stringified version of the value and uses this to compile to
	   * JavaScript.
	   *
	   * In case of a stringified number as input, this may be compiled to a BigNumber
	   * when the math instance is configured for BigNumbers.
	   *
	   * Usage:
	   *
	   *     // stringified values with type
	   *     new ConstantNode('2.3', 'number');
	   *     new ConstantNode('true', 'boolean');
	   *     new ConstantNode('hello', 'string');
	   *
	   *     // non-stringified values, type will be automatically detected
	   *     new ConstantNode(2.3);
	   *     new ConstantNode('hello');
	   *
	   * @param {string | number | boolean | null | undefined} value
	   *                            When valueType is provided, value must contain
	   *                            an uninterpreted string representing the value.
	   *                            When valueType is undefined, value can be a
	   *                            number, string, boolean, null, or undefined, and
	   *                            the type will be determined automatically.
	   * @param {string} [valueType]  The type of value. Choose from 'number', 'string',
	   *                              'boolean', 'undefined', 'null'
	   * @constructor ConstantNode
	   * @extends {Node}
	   */
	  function ConstantNode(value, valueType) {
	    if (!(this instanceof ConstantNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    if (valueType) {
	      if (typeof valueType !== 'string') {
	        throw new TypeError('String expected for parameter "valueType"');
	      }
	      if (typeof value !== 'string') {
	        throw new TypeError('String expected for parameter "value"');
	      }
	
	      this.value = value;
	      this.valueType = valueType;
	    }
	    else {
	      // stringify the value and determine the type
	      this.value = value + '';
	      this.valueType = getType(value);
	    }
	
	    if (!SUPPORTED_TYPES[this.valueType]) {
	      throw new TypeError('Unsupported type of value "' + this.valueType + '"');
	    }
	  }
	
	  var SUPPORTED_TYPES = {
	    'number': true,
	    'string': true,
	    'boolean': true,
	    'undefined': true,
	    'null': true
	  };
	
	  ConstantNode.prototype = new Node();
	
	  ConstantNode.prototype.type = 'ConstantNode';
	
	  ConstantNode.prototype.isConstantNode = true;
	
	  /**
	   * Compile the node to javascript code
	   * @param {ConstantNode} node The node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  function compileConstantNode(node, defs, args) {
	    switch (node.valueType) {
	      case 'number':
	        if (config.number === 'BigNumber') {
	          return 'math.bignumber(' + stringify(node.value) + ')';
	        }
	        else if (config.number === 'Fraction') {
	          return 'math.fraction(' + stringify(node.value) + ')';
	        }
	        else {
	          // remove leading zeros like '003.2' which are not allowed by JavaScript
	          validateNumericValue(node.value);
	          return node.value.replace(/^(0*)[0-9]/, function (match, zeros) {
	            return match.substring(zeros.length);
	          });
	        }
	
	      case 'string':
	        // Important to escape unescaped double quotes in the string
	        return stringify(node.value);
	
	      case 'boolean':
	        // prevent invalid values
	        return String(node.value) === 'true' ? 'true' : 'false';
	
	      case 'undefined':
	        return 'undefined';
	
	      case 'null':
	        return 'null';
	
	      default:
	        // TODO: move this error to the constructor?
	        throw new TypeError('Unsupported type of constant "' + node.valueType + '"');
	    }
	  }
	
	  function validateNumericValue (value) {
	    // The following regexp is relatively permissive
	    if (!/^[\-+]?((\d+\.?\d*)|(\d*\.?\d+))([eE][+\-]?\d+)?$/.test(value)) {
	      throw new Error('Invalid numeric value "' + value + '"');
	    }
	  }
	
	  // register the compile function
	  register(ConstantNode.prototype.type, compileConstantNode);
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ConstantNode.prototype.forEach = function (callback) {
	    // nothing to do, we don't have childs
	  };
	
	
	  /**
	   * Create a new ConstantNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {ConstantNode} Returns a clone of the node
	   */
	  ConstantNode.prototype.map = function (callback) {
	    return this.clone();
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ConstantNode}
	   */
	  ConstantNode.prototype.clone = function () {
	    return new ConstantNode(this.value, this.valueType);
	  };
	
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConstantNode.prototype._toString = function (options) {
	    switch (this.valueType) {
	      case 'string':
	        return stringify(this.value);
	
	      default:
	        return this.value;
	    }
	  };
	
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ConstantNode.prototype._toTex = function (options) {
	    var value = this.value,
	        index;
	    switch (this.valueType) {
	      case 'string':
	        return '\\mathtt{' + stringify(value) + '}';
	
	      case 'number':
	        index = value.toLowerCase().indexOf('e');
	        if (index !== -1) {
	          return value.substring(0, index) + '\\cdot10^{' +
	              value.substring(index + 1) + '}';
	        }
	        return value;
	
	      default:
	        return value;
	    }
	  };
	
	  return ConstantNode;
	}
	
	exports.name = 'ConstantNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ }),
/* 351 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var keywords = __webpack_require__(340);
	var stringify = __webpack_require__(74).stringify;
	var latex = __webpack_require__(83);
	var operators = __webpack_require__(347);
	var setSafeProperty = __webpack_require__(98).setSafeProperty;
	
	function factory (type, config, load, typed) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	
	  /**
	   * @constructor FunctionAssignmentNode
	   * @extends {Node}
	   * Function assignment
	   *
	   * @param {string} name           Function name
	   * @param {string[] | Array.<{name: string, type: string}>} params
	   *                                Array with function parameter names, or an
	   *                                array with objects containing the name
	   *                                and type of the parameter
	   * @param {Node} expr             The function expression
	   */
	  function FunctionAssignmentNode(name, params, expr) {
	    if (!(this instanceof FunctionAssignmentNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    // validate input
	    if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
	    if (!Array.isArray(params))  throw new TypeError('Array containing strings or objects expected for parameter "params"');
	    if (!(expr && expr.isNode)) throw new TypeError('Node expected for parameter "expr"');
	    if (name in keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
	
	    this.name = name;
	    this.params = params.map(function (param) {
	      return param && param.name || param;
	    });
	    this.types = params.map(function (param) {
	      return param && param.type || 'any'
	    });
	    this.expr = expr;
	  }
	
	  FunctionAssignmentNode.prototype = new Node();
	
	  FunctionAssignmentNode.prototype.type = 'FunctionAssignmentNode';
	
	  FunctionAssignmentNode.prototype.isFunctionAssignmentNode = true;
	
	  /**
	   * Compile the node to javascript code
	   * @param {FunctionAssignmentNode} node The node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  function compileFunctionAssignmentNode(node, defs, args) {
	    defs.typed = typed;
	    defs.setSafeProperty = setSafeProperty;
	
	    // we extend the original args and add the args to the child object
	    var childArgs = Object.create(args);
	    node.params.forEach(function (variable) {
	      childArgs[variable] = true;
	    });
	
	    // compile the function expression with the child args
	    var jsExpr = compile(node.expr, defs, childArgs);
	    var jsName = stringify(node.name);
	
	    return 'setSafeProperty(scope, ' + jsName + ', ' +
	        '  (function () {' +
	        '    var fn = typed(' + jsName + ', {' +
	        '      ' + stringify(node.types.join(',')) + ': function (' + node.params.join(',') + ') {' +
	        '        return ' + jsExpr + '' +
	        '      }' +
	        '    });' +
	        '    fn.syntax = ' + stringify(node.name + '(' + node.params.join(', ') + ')') + ';' +
	        '    return fn;' +
	        '  })())';
	  }
	
	  // register the compile function
	  register(FunctionAssignmentNode.prototype.type, compileFunctionAssignmentNode);
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  FunctionAssignmentNode.prototype.forEach = function (callback) {
	    callback(this.expr, 'expr', this);
	  };
	
	  /**
	   * Create a new FunctionAssignmentNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {FunctionAssignmentNode} Returns a transformed copy of the node
	   */
	  FunctionAssignmentNode.prototype.map = function (callback) {
	    var expr = this._ifNode(callback(this.expr, 'expr', this));
	
	    return new FunctionAssignmentNode(this.name, this.params.slice(0), expr);
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {FunctionAssignmentNode}
	   */
	  FunctionAssignmentNode.prototype.clone = function () {
	    return new FunctionAssignmentNode(this.name, this.params.slice(0), this.expr);
	  };
	
	  /**
	   * Is parenthesis needed?
	   * @param {Node} node
	   * @param {Object} parenthesis
	   * @private
	   */
	  function needParenthesis(node, parenthesis) {
	    var precedence = operators.getPrecedence(node, parenthesis);
	    var exprPrecedence = operators.getPrecedence(node.expr, parenthesis);
	
	    return (parenthesis === 'all')
	      || ((exprPrecedence !== null) && (exprPrecedence <= precedence));
	  }
	
	  /**
	   * get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionAssignmentNode.prototype._toString = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var expr = this.expr.toString(options);
	    if (needParenthesis(this, parenthesis)) {
	      expr = '(' + expr + ')';
	    }
	    return this.name + '(' + this.params.join(', ') + ') = ' + expr;
	  };
	
	  /**
	   * get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionAssignmentNode.prototype._toTex = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var expr = this.expr.toTex(options);
	    if (needParenthesis(this, parenthesis)) {
	      expr = '\\left(' + expr + '\\right)';
	    }
	
	    return '\\mathrm{' + this.name
	        + '}\\left(' + this.params.map(latex.toSymbol).join(',') + '\\right):=' + expr;
	  };
	
	  return FunctionAssignmentNode;
	}
	exports.name = 'FunctionAssignmentNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ }),
/* 352 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	  var RangeNode = load(__webpack_require__(353));
	  var SymbolNode = load(__webpack_require__(354));
	
	  var Range = load(__webpack_require__(119));
	
	  var isArray = Array.isArray;
	
	  /**
	   * @constructor IndexNode
	   * @extends Node
	   *
	   * Describes a subset of a matrix or an object property.
	   * Cannot be used on its own, needs to be used within an AccessorNode or
	   * AssignmentNode.
	   *
	   * @param {Node[]} dimensions
	   * @param {boolean} [dotNotation=false]  Optional property describing whether
	   *                                       this index was written using dot
	   *                                       notation like `a.b`, or using bracket
	   *                                       notation like `a["b"]` (default).
	   *                                       Used to stringify an IndexNode.
	   */
	  function IndexNode(dimensions, dotNotation) {
	    if (!(this instanceof IndexNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    this.dimensions = dimensions;
	    this.dotNotation = dotNotation || false;
	
	    // validate input
	    if (!isArray(dimensions)
	        || !dimensions.every(function (range) {return range && range.isNode;})) {
	      throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
	    }
	    if (this.dotNotation && !this.isObjectProperty()) {
	      throw new Error('dotNotation only applicable for object properties');
	    }
	
	    // TODO: deprecated since v3, remove some day
	    var deprecated = function () {
	      throw new Error('Property `IndexNode.object` is deprecated, use `IndexNode.fn` instead');
	    };
	    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });
	  }
	
	  IndexNode.prototype = new Node();
	
	  IndexNode.prototype.type = 'IndexNode';
	
	  IndexNode.prototype.isIndexNode = true;
	
	  /**
	   * Compile all range nodes
	   *
	   * When some of the dimensions has `end` defined, the IndexNode requires
	   * a variable `size` to be defined in the current closure, and must contain
	   * the size of the matrix that's being handled. To check whether the `size`
	   * variable is needed, call IndexNode.needsSize().
	   *
	   * @param {IndexNode} node        The node to be compiled
	   * @param {Object} defs           Object which can be used to define functions
	   *                                or constants globally available for the
	   *                                compiled expression
	   * @param {Object} args           Object with local function arguments, the key is
	   *                                the name of the argument, and the value is `true`.
	   *                                The object may not be mutated, but must be
	   *                                extended instead.
	   * @return {string} code
	   */
	  function compileIndexNode(node, defs, args) {
	    // args can be mutated by IndexNode, when dimensions use `end`
	    var childArgs = Object.create(args);
	
	    // helper function to create a Range from start, step and end
	    defs.range = function (start, end, step) {
	      return new Range(
	          (start && start.isBigNumber === true) ? start.toNumber() : start,
	          (end   && end.isBigNumber === true)   ? end.toNumber()   : end,
	          (step  && step.isBigNumber === true)  ? step.toNumber()  : step
	      );
	    };
	
	    // TODO: implement support for bignumber (currently bignumbers are silently
	    //       reduced to numbers when changing the value to zero-based)
	
	    // TODO: Optimization: when the range values are ConstantNodes,
	    //       we can beforehand resolve the zero-based value
	
	    // optimization for a simple object property
	    var dimensions = node.dimensions.map(function (range, i) {
	      if (range && range.isRangeNode) {
	        if (range.needsEnd()) {
	          childArgs.end = true;
	
	          // resolve end and create range
	          return '(function () {' +
	              'var end = size[' + i + ']; ' +
	              'return range(' +
	              compile(range.start, defs, childArgs) + ', ' +
	              compile(range.end, defs, childArgs) + ', ' +
	              (range.step ? compile(range.step, defs, childArgs) : '1') +
	              '); ' +
	              '})()';
	        }
	        else {
	          // create range
	          return 'range(' +
	              compile(range.start, defs, childArgs) + ', ' +
	              compile(range.end, defs, childArgs) + ', ' +
	              (range.step ? compile(range.step, defs, childArgs) : '1') +
	              ')';
	        }
	      }
	      if (range.isSymbolNode && range.name === 'end') {
	        childArgs.end = true;
	
	        // resolve the parameter 'end'
	        return '(function () {' +
	            'var end = size[' + i + ']; ' +
	            'return ' + compile(range, defs, childArgs) + '; ' +
	            '})()'
	      }
	      else { // ConstantNode
	        return compile(range, defs, childArgs);
	      }
	    });
	
	    return 'math.index(' + dimensions.join(', ') + ')';
	  }
	
	  // register the compile function
	  register(IndexNode.prototype.type, compileIndexNode);
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  IndexNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.dimensions.length; i++) {
	      callback(this.dimensions[i], 'dimensions[' + i + ']', this);
	    }
	  };
	
	  /**
	   * Create a new IndexNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {IndexNode} Returns a transformed copy of the node
	   */
	  IndexNode.prototype.map = function (callback) {
	    var dimensions = [];
	    for (var i = 0; i < this.dimensions.length; i++) {
	      dimensions[i] = this._ifNode(callback(this.dimensions[i], 'dimensions[' + i + ']', this));
	    }
	
	    return new IndexNode(dimensions);
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {IndexNode}
	   */
	  IndexNode.prototype.clone = function () {
	    return new IndexNode(this.dimensions.slice(0));
	  };
	
	  /**
	   * Test whether this IndexNode contains a single property name
	   * @return {boolean}
	   */
	  IndexNode.prototype.isObjectProperty = function () {
	    return this.dimensions.length === 1 &&
	        this.dimensions[0].isConstantNode &&
	        this.dimensions[0].valueType === 'string';
	  };
	
	  /**
	   * Returns the property name if IndexNode contains a property.
	   * If not, returns null.
	   * @return {string | null}
	   */
	  IndexNode.prototype.getObjectProperty = function () {
	    return this.isObjectProperty() ? this.dimensions[0].value : null;
	  };
	
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  IndexNode.prototype._toString = function (options) {
	    // format the parameters like "[1, 0:5]"
	    return this.dotNotation
	        ? ('.' + this.getObjectProperty())
	        : ('[' + this.dimensions.join(', ') + ']');
	  };
	
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  IndexNode.prototype._toTex = function (options) {
	    var dimensions = this.dimensions.map(function (range) {
	      return range.toTex(options);
	    });
	
	    return this.dotNotation
	        ? ('.' + this.getObjectProperty() + '')
	        : ('_{' + dimensions.join(',') + '}');
	  };
	
	  /**
	   * Test whether this IndexNode needs the object size, size of the Matrix
	   * @return {boolean}
	   */
	  IndexNode.prototype.needsSize = function () {
	    return this.dimensions.some(function (range) {
	      return (range.isRangeNode && range.needsEnd()) ||
	          (range.isSymbolNode && range.name === 'end');
	    });
	  };
	
	  return IndexNode;
	}
	
	exports.name = 'IndexNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ }),
/* 353 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var operators = __webpack_require__(347);
	
	function factory (type, config, load, typed) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	
	  /**
	   * @constructor RangeNode
	   * @extends {Node}
	   * create a range
	   * @param {Node} start  included lower-bound
	   * @param {Node} end    included upper-bound
	   * @param {Node} [step] optional step
	   */
	  function RangeNode(start, end, step) {
	    if (!(this instanceof RangeNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    // validate inputs
	    if (!(start && start.isNode)) throw new TypeError('Node expected');
	    if (!(end && end.isNode)) throw new TypeError('Node expected');
	    if (step && !(step && step.isNode)) throw new TypeError('Node expected');
	    if (arguments.length > 3) throw new Error('Too many arguments');
	
	    this.start = start;         // included lower-bound
	    this.end = end;           // included upper-bound
	    this.step = step || null;  // optional step
	  }
	
	  RangeNode.prototype = new Node();
	
	  RangeNode.prototype.type = 'RangeNode';
	
	  RangeNode.prototype.isRangeNode = true;
	
	  /**
	   * Check whether the RangeNode needs the `end` symbol to be defined.
	   * This end is the size of the Matrix in current dimension.
	   * @return {boolean}
	   */
	  RangeNode.prototype.needsEnd = function () {
	    // find all `end` symbols in this RangeNode
	    var endSymbols = this.filter(function (node) {
	      return (node && node.isSymbolNode) && (node.name == 'end');
	    });
	
	    return endSymbols.length > 0;
	  };
	
	  /**
	   * Compile the node to javascript code
	   *
	   * When the range has a symbol `end` defined, the RangeNode requires
	   * a variable `end` to be defined in the current closure, which must contain
	   * the length of the of the matrix that's being handled in the range's
	   * dimension. To check whether the `end` variable is needed, call
	   * RangeNode.needsEnd().
	   *
	   * @param {RangeNode} node  The node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  function compileRangeNode(node, defs, args) {
	    return 'math.range(' +
	        compile(node.start, defs, args) + ', ' +
	        compile(node.end, defs, args) +
	        (node.step ? (', ' + compile(node.step, defs, args)) : '') +
	        ')';
	  }
	
	  // register the compile function
	  register(RangeNode.prototype.type, compileRangeNode);
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  RangeNode.prototype.forEach = function (callback) {
	    callback(this.start, 'start', this);
	    callback(this.end, 'end', this);
	    if (this.step) {
	      callback(this.step, 'step', this);
	    }
	  };
	
	  /**
	   * Create a new RangeNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {RangeNode} Returns a transformed copy of the node
	   */
	  RangeNode.prototype.map = function (callback) {
	    return new RangeNode(
	        this._ifNode(callback(this.start, 'start', this)),
	        this._ifNode(callback(this.end, 'end', this)),
	        this.step && this._ifNode(callback(this.step, 'step', this))
	    );
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {RangeNode}
	   */
	  RangeNode.prototype.clone = function () {
	    return new RangeNode(this.start, this.end, this.step && this.step);
	  };
	
	  /**
	   * Calculate the necessary parentheses
	   * @param {Node} node
	   * @param {string} parenthesis
	   * @return {Object} parentheses
	   * @private
	   */
	  function calculateNecessaryParentheses(node, parenthesis) {
	    var precedence = operators.getPrecedence(node, parenthesis);
	    var parens = {};
	
	    var startPrecedence = operators.getPrecedence(node.start, parenthesis);
	    parens.start = ((startPrecedence !== null) && (startPrecedence <= precedence))
	      || (parenthesis === 'all');
	
	    if (node.step) {
	      var stepPrecedence = operators.getPrecedence(node.step, parenthesis);
	      parens.step = ((stepPrecedence !== null) && (stepPrecedence <= precedence))
	        || (parenthesis === 'all');
	    }
	
	    var endPrecedence = operators.getPrecedence(node.end, parenthesis);
	    parens.end = ((endPrecedence !== null) && (endPrecedence <= precedence))
	      || (parenthesis === 'all');
	
	    return parens;
	  }
	
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  RangeNode.prototype._toString = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var parens = calculateNecessaryParentheses(this, parenthesis);
	
	    //format string as start:step:stop
	    var str;
	
	    var start = this.start.toString(options);
	    if (parens.start) {
	      start = '(' + start + ')';
	    }
	    str = start;
	
	    if (this.step) {
	      var step = this.step.toString(options);
	      if (parens.step) {
	        step = '(' + step + ')';
	      }
	      str += ':' + step;
	    }
	
	    var end = this.end.toString(options);
	    if (parens.end) {
	      end = '(' + end + ')';
	    }
	    str += ':' + end;
	
	    return str;
	  };
	
	  /**
	   * Get LaTeX representation
	   * @params {Object} options
	   * @return {string} str
	   */
	  RangeNode.prototype._toTex = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var parens = calculateNecessaryParentheses(this, parenthesis);
	
	    var str = this.start.toTex(options);
	    if (parens.start) {
	      str = '\\left(' + str + '\\right)';
	    }
	
	    if (this.step) {
	      var step = this.step.toTex(options);
	      if (parens.step) {
	        step = '\\left(' + step + '\\right)';
	      }
	      str += ':' + step;
	    }
	
	    var end = this.end.toTex(options);
	    if (parens.end) {
	      end = '\\left(' + end + '\\right)';
	    }
	    str += ':' + end;
	
	    return str;
	  };
	
	  return RangeNode;
	}
	
	exports.name = 'RangeNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ }),
/* 354 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var latex = __webpack_require__(83);
	var stringify = __webpack_require__(74).stringify;
	var getSafeProperty = __webpack_require__(98).getSafeProperty;
	
	function factory (type, config, load, typed, math) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	  var Unit = load(__webpack_require__(127));
	
	  /**
	   * @constructor SymbolNode
	   * @extends {Node}
	   * A symbol node can hold and resolve a symbol
	   * @param {string} name
	   * @extends {Node}
	   */
	  function SymbolNode(name) {
	    if (!(this instanceof SymbolNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    // validate input
	    if (typeof name !== 'string')  throw new TypeError('String expected for parameter "name"');
	
	    this.name = name;
	  }
	
	  SymbolNode.prototype = new Node();
	
	  SymbolNode.prototype.type = 'SymbolNode';
	
	  SymbolNode.prototype.isSymbolNode = true;
	
	  /**
	   * Compile the node to javascript code
	   * @param {SymbolNode} node The node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  function compileSymbolNode(node, defs, args) {
	    // add a function to the definitions
	    defs['undef'] = undef;
	    defs['Unit'] = Unit;
	    defs.getSafeProperty = getSafeProperty;
	
	    var jsName = stringify(node.name); // escaped node name inside double quotes
	
	    if (args[node.name]) {
	      // this is a FunctionAssignment argument
	      // (like an x when inside the expression of a function assignment `f(x) = ...`)
	      return node.name;
	    }
	    else if (node.name in defs.math) {
	      return '(' + jsName + ' in scope ? getSafeProperty(scope, ' + jsName + ') : getSafeProperty(math, ' + jsName + '))';
	    }
	    else {
	      return '(' +
	          jsName + ' in scope ? getSafeProperty(scope, ' + jsName + ') : ' +
	          (Unit.isValuelessUnit(node.name) ?
	          'new Unit(null, ' + jsName + ')' :
	          'undef(' + jsName + ')') +
	          ')';
	    }
	  }
	
	  // register the compile function
	  register(SymbolNode.prototype.type, compileSymbolNode);
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  SymbolNode.prototype.forEach = function (callback) {
	    // nothing to do, we don't have childs
	  };
	
	  /**
	   * Create a new SymbolNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {SymbolNode} Returns a clone of the node
	   */
	  SymbolNode.prototype.map = function (callback) {
	    return this.clone();
	  };
	
	  /**
	   * Throws an error 'Undefined symbol {name}'
	   * @param {string} name
	   */
	  function undef (name) {
	    throw new Error('Undefined symbol ' + name);
	  }
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {SymbolNode}
	   */
	  SymbolNode.prototype.clone = function() {
	    return new SymbolNode(this.name);
	  };
	
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  SymbolNode.prototype._toString = function(options) {
	    return this.name;
	  };
	
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  SymbolNode.prototype._toTex = function(options) {
	    var isUnit = false;
	    if ((typeof math[this.name] === 'undefined') && Unit.isValuelessUnit(this.name)) {
	      isUnit = true;
	    }
	    var symbol = latex.toSymbol(this.name, isUnit);
	    if (symbol[0] === '\\') {
	      //no space needed if the symbol starts with '\'
	      return symbol;
	    }
	    //the space prevents symbols from breaking stuff like '\cdot' if it's written right before the symbol
	    return ' ' + symbol;
	  };
	
	  return SymbolNode;
	}
	
	exports.name = 'SymbolNode';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;


/***/ }),
/* 355 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var stringify = __webpack_require__(74).stringify;
	
	function factory (type, config, load, typed) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	
	  /**
	   * @constructor ObjectNode
	   * @extends {Node}
	   * Holds an object with keys/values
	   * @param {Object.<string, Node>} [properties]   array with key/value pairs
	   */
	  function ObjectNode(properties) {
	    if (!(this instanceof ObjectNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    this.properties = properties || {};
	
	    // validate input
	    if (properties) {
	      if (!(typeof properties === 'object') || Object.keys(properties).some(function (key) {
	            return !properties[key] || !properties[key].isNode;
	          })) {
	        throw new TypeError('Object containing Nodes expected');
	      }
	    }
	  }
	
	  ObjectNode.prototype = new Node();
	
	  ObjectNode.prototype.type = 'ObjectNode';
	
	  ObjectNode.prototype.isObjectNode = true;
	
	  /**
	   * Compile the node to javascript code
	   * @param {ObjectNode} node The node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} code
	   * @private
	   */
	  function compileObjectNode(node, defs, args) {
	    var entries = [];
	    for (var key in node.properties) {
	      // TODO: introduce a helper function hasOwnProperty in object.js
	      if (Object.hasOwnProperty.call(node.properties, key)) {
	        // FIXME: escape the key
	        entries.push(stringify(key) + ': ' + compile(node.properties[key], defs, args));
	      }
	    }
	    return '{' + entries.join(', ') + '}';
	  }
	
	  // register the compile function
	  register(ObjectNode.prototype.type, compileObjectNode);
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ObjectNode.prototype.forEach = function (callback) {
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        callback(this.properties[key], 'properties[' + stringify(key) + ']', this);
	      }
	    }
	  };
	
	  /**
	   * Create a new ObjectNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {ObjectNode} Returns a transformed copy of the node
	   */
	  ObjectNode.prototype.map = function (callback) {
	    var properties = {};
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        properties[key] = this._ifNode(callback(this.properties[key],
	            'properties[' + stringify(key) + ']', this));
	      }
	    }
	    return new ObjectNode(properties);
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ObjectNode}
	   */
	  ObjectNode.prototype.clone = function() {
	    var properties = {};
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        properties[key] = this.properties[key];
	      }
	    }
	    return new ObjectNode(properties);
	  };
	
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ObjectNode.prototype._toString = function(options) {
	    var entries = [];
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        entries.push(stringify(key) + ': ' + this.properties[key].toString(options));
	      }
	    }
	    return '{' + entries.join(', ') + '}';
	  };
	
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  ObjectNode.prototype._toTex = function(options) {
	    var entries = [];
	    for (var key in this.properties) {
	      if (this.properties.hasOwnProperty(key)) {
	        entries.push("\\mathbf{" + key + ':} & ' + this.properties[key].toTex(options) + "\\\\");
	      }
	    }
	    return '\\left\\{\\begin{array}{ll}' + entries.join('\n') + '\\end{array}\\right\\}';
	  };
	
	  return ObjectNode;
	}
	
	exports.name = 'ObjectNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ }),
/* 356 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var latex = __webpack_require__(83);
	var operators = __webpack_require__(347);
	
	function factory (type, config, load, typed, math) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node         = load(__webpack_require__(339));
	  var ConstantNode = load(__webpack_require__(350));
	  var SymbolNode   = load(__webpack_require__(354));
	  var FunctionNode = load(__webpack_require__(357));
	
	  /**
	   * @constructor OperatorNode
	   * @extends {Node}
	   * An operator with two arguments, like 2+3
	   *
	   * @param {string} op           Operator name, for example '+'
	   * @param {string} fn           Function name, for example 'add'
	   * @param {Node[]} args         Operator arguments
	   * @param {boolean} [implicit]  Is this an implicit multiplication?
	   */
	  function OperatorNode(op, fn, args, implicit) {
	    if (!(this instanceof OperatorNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    //validate input
	    if (typeof op !== 'string') {
	      throw new TypeError('string expected for parameter "op"');
	    }
	    if (typeof fn !== 'string') {
	      throw new TypeError('string expected for parameter "fn"');
	    }
	    if (!Array.isArray(args)
	        || !args.every(function (node) {return node && node.isNode;})) {
	      throw new TypeError('Array containing Nodes expected for parameter "args"');
	    }
	
	    this.implicit = (implicit === true);
	    this.op = op;
	    this.fn = fn;
	    this.args = args || [];
	  }
	
	  OperatorNode.prototype = new Node();
	
	  OperatorNode.prototype.type = 'OperatorNode';
	
	  OperatorNode.prototype.isOperatorNode = true;
	
	  /**
	   * Compile the node to javascript code
	   * @param {OperatorNode} node The node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  function compileOperatorNode(node, defs, args) {
	    if (!defs.math[node.fn]) {
	      throw new Error('Function ' + node.fn + ' missing in provided namespace "math"');
	    }
	
	    var jsArgs = node.args.map(function (arg) {
	      return compile(arg, defs, args);
	    });
	
	    // FIXME: escape/validate fn
	    return 'math.' + node.fn + '(' + jsArgs.join(', ') + ')';
	  }
	
	  // register the compile function
	  register(OperatorNode.prototype.type, compileOperatorNode);
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  OperatorNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.args.length; i++) {
	      callback(this.args[i], 'args[' + i + ']', this);
	    }
	  };
	
	  /**
	   * Create a new OperatorNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {OperatorNode} Returns a transformed copy of the node
	   */
	  OperatorNode.prototype.map = function (callback) {
	    var args = [];
	    for (var i = 0; i < this.args.length; i++) {
	      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
	    }
	    return new OperatorNode(this.op, this.fn, args);
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {OperatorNode}
	   */
	  OperatorNode.prototype.clone = function () {
	    return new OperatorNode(this.op, this.fn, this.args.slice(0), this.implicit);
	  };
	
	  /**
	   * Calculate which parentheses are necessary. Gets an OperatorNode
	   * (which is the root of the tree) and an Array of Nodes
	   * (this.args) and returns an array where 'true' means that an argument
	   * has to be enclosed in parentheses whereas 'false' means the opposite.
	   *
	   * @param {OperatorNode} root
	   * @param {string} parenthesis
	   * @param {Node[]} args
	   * @param {boolean} latex
	   * @return {boolean[]}
	   * @private
	   */
	  function calculateNecessaryParentheses(root, parenthesis, args, latex) {
	    //precedence of the root OperatorNode
	    var precedence = operators.getPrecedence(root, parenthesis);
	    var associativity = operators.getAssociativity(root, parenthesis);
	
	    if ((parenthesis === 'all') || ((args.length > 2) && (root.getIdentifier() !== 'OperatorNode:add') && (root.getIdentifier() !== 'OperatorNode:multiply'))) {
	      var parens = args.map(function (arg) {
	        switch (arg.getContent().type) { //Nodes that don't need extra parentheses
	          case 'ArrayNode':
	          case 'ConstantNode':
	          case 'SymbolNode':
	          case 'ParenthesisNode':
	            return false;
	            break;
	          default:
	            return true;
	        }
	      });
	      return parens;
	    }
	
	    if (args.length === 0) {
	      return [];
	    } else if (args.length === 1) { //unary operators
	      //precedence of the operand
	      var operandPrecedence = operators.getPrecedence(args[0], parenthesis);
	
	      //handle special cases for LaTeX, where some of the parentheses aren't needed
	      if (latex && (operandPrecedence !== null)) {
	        var operandIdentifier;
	        var rootIdentifier;
	        if (parenthesis === 'keep') {
	          operandIdentifier = args[0].getIdentifier();
	          rootIdentifier = root.getIdentifier();
	        }
	        else {
	          //Ignore Parenthesis Nodes when not in 'keep' mode
	          operandIdentifier = args[0].getContent().getIdentifier();
	          rootIdentifier = root.getContent().getIdentifier();
	        }
	        if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
	          return [false];
	        }
	
	        if (operators.properties[operandPrecedence][operandIdentifier].latexParens === false) {
	          return [false];
	        }
	      }
	
	      if (operandPrecedence === null) {
	        //if the operand has no defined precedence, no parens are needed
	        return [false];
	      }
	
	      if (operandPrecedence <= precedence) {
	        //if the operands precedence is lower, parens are needed
	        return [true];
	      }
	
	      //otherwise, no parens needed
	      return [false];
	    } else if (args.length === 2) { //binary operators
	      var lhsParens; //left hand side needs parenthesis?
	      //precedence of the left hand side
	      var lhsPrecedence = operators.getPrecedence(args[0], parenthesis);
	      //is the root node associative with the left hand side
	      var assocWithLhs = operators.isAssociativeWith(root, args[0], parenthesis);
	
	      if (lhsPrecedence === null) {
	        //if the left hand side has no defined precedence, no parens are needed
	        //FunctionNode for example
	        lhsParens = false;
	      }
	      else if ((lhsPrecedence === precedence) && (associativity === 'right') && !assocWithLhs) {
	        //In case of equal precedence, if the root node is left associative
	        // parens are **never** necessary for the left hand side.
	        //If it is right associative however, parens are necessary
	        //if the root node isn't associative with the left hand side
	        lhsParens = true;
	      }
	      else if (lhsPrecedence < precedence) {
	        lhsParens = true;
	      }
	      else {
	        lhsParens = false;
	      }
	
	      var rhsParens; //right hand side needs parenthesis?
	      //precedence of the right hand side
	      var rhsPrecedence = operators.getPrecedence(args[1], parenthesis);
	      //is the root node associative with the right hand side?
	      var assocWithRhs = operators.isAssociativeWith(root, args[1], parenthesis);
	
	      if (rhsPrecedence === null) {
	        //if the right hand side has no defined precedence, no parens are needed
	        //FunctionNode for example
	        rhsParens = false;
	      }
	      else if ((rhsPrecedence === precedence) && (associativity === 'left') && !assocWithRhs) {
	        //In case of equal precedence, if the root node is right associative
	        // parens are **never** necessary for the right hand side.
	        //If it is left associative however, parens are necessary
	        //if the root node isn't associative with the right hand side
	        rhsParens = true;
	      }
	      else if (rhsPrecedence < precedence) {
	        rhsParens = true;
	      }
	      else {
	        rhsParens = false;
	      }
	
	      //handle special cases for LaTeX, where some of the parentheses aren't needed
	      if (latex) {
	        var rootIdentifier;
	        var lhsIdentifier;
	        var rhsIdentifier;
	        if (parenthesis === 'keep') {
	          rootIdentifier = root.getIdentifier();
	          lhsIdentifier = root.args[0].getIdentifier();
	          rhsIdentifier = root.args[1].getIdentifier();
	        }
	        else {
	          //Ignore ParenthesisNodes when not in 'keep' mode
	          rootIdentifier = root.getContent().getIdentifier();
	          lhsIdentifier = root.args[0].getContent().getIdentifier();
	          rhsIdentifier = root.args[1].getContent().getIdentifier();
	        }
	
	        if (lhsPrecedence !== null) {
	          if (operators.properties[precedence][rootIdentifier].latexLeftParens === false) {
	            lhsParens = false;
	          }
	
	          if (operators.properties[lhsPrecedence][lhsIdentifier].latexParens === false) {
	            lhsParens = false;
	          }
	        }
	
	        if (rhsPrecedence !== null) {
	          if (operators.properties[precedence][rootIdentifier].latexRightParens === false) {
	            rhsParens = false;
	          }
	
	          if (operators.properties[rhsPrecedence][rhsIdentifier].latexParens === false) {
	            rhsParens = false;
	          }
	        }
	      }
	
	      return [lhsParens, rhsParens];
	    } else if ((args.length > 2) && ((root.getIdentifier() === 'OperatorNode:add') || (root.getIdentifier() === 'OperatorNode:multiply'))) {
	      var parensArray = args.map(function (arg) {
	        var argPrecedence = operators.getPrecedence(arg, parenthesis);
	        var assocWithArg = operators.isAssociativeWith(root, arg, parenthesis);
	        var argAssociativity = operators.getAssociativity(arg, parenthesis);
	        if (argPrecedence === null) {
	          //if the argument has no defined precedence, no parens are needed
	          return false;
	        } else if ((precedence === argPrecedence) && (associativity === argAssociativity) && !assocWithArg) {
	          return true;
	        } else if (argPrecedence < precedence) {
	          return true;
	        }
	
	        return false;
	      });
	      return parensArray;
	    }
	  }
	
	  /**
	   * Get string representation.
	   * @param {Object} options
	   * @return {string} str
	   */
	  OperatorNode.prototype._toString = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var implicit = (options && options.implicit) ? options.implicit : 'hide';
	    var args = this.args;
	    var parens = calculateNecessaryParentheses(this, parenthesis, args, false);
	
	    if (args.length === 1) { //unary operators
	      var assoc = operators.getAssociativity(this, parenthesis);
	
	      var operand = args[0].toString(options);
	      if (parens[0]) {
	        operand = '(' + operand + ')';
	      }
	
	      if (assoc === 'right') { //prefix operator
	        return this.op + operand;
	      }
	      else if (assoc === 'left') { //postfix
	        return operand + this.op;
	      }
	
	      //fall back to postfix
	      return operand + this.op;
	    } else if (args.length == 2) {
	      var lhs = args[0].toString(options); //left hand side
	      var rhs = args[1].toString(options); //right hand side
	      if (parens[0]) { //left hand side in parenthesis?
	        lhs = '(' + lhs + ')';
	      }
	      if (parens[1]) { //right hand side in parenthesis?
	        rhs = '(' + rhs + ')';
	      }
	
	      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit == 'hide')) {
	        return lhs + ' ' + rhs;
	      }
	
	      return lhs + ' ' + this.op + ' ' + rhs;
	    } else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {
	      var stringifiedArgs = args.map(function (arg, index) {
	        arg = arg.toString(options);
	        if (parens[index]) { //put in parenthesis?
	          arg = '(' + arg + ')';
	        }
	
	        return arg;
	      });
	
	      if (this.implicit && (this.getIdentifier() === 'OperatorNode:multiply') && (implicit === 'hide')) {
	        return stringifiedArgs.join(' ');
	      }
	
	      return stringifiedArgs.join(' ' + this.op + ' ');
	    } else {
	      //fallback to formatting as a function call
	      return this.fn + '(' + this.args.join(', ') + ')';
	    }
	  };
	
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  OperatorNode.prototype._toTex = function (options) {
	    var parenthesis = (options && options.parenthesis) ? options.parenthesis : 'keep';
	    var implicit = (options && options.implicit) ? options.implicit : 'hide';
	    var args = this.args;
	    var parens = calculateNecessaryParentheses(this, parenthesis, args, true);
	    var op = latex.operators[this.fn];
	    op = typeof op === 'undefined' ? this.op : op; //fall back to using this.op
	
	    if (args.length === 1) { //unary operators
	      var assoc = operators.getAssociativity(this, parenthesis);
	
	      var operand = args[0].toTex(options);
	      if (parens[0]) {
	        operand = '\\left(' + operand + '\\right)';
	      }
	
	      if (assoc === 'right') { //prefix operator
	        return op + operand;
	      }
	      else if (assoc === 'left') { //postfix operator
	        return operand + op;
	      }
	
	      //fall back to postfix
	      return operand + op;
	    } else if (args.length === 2) { //binary operators
	      var lhs = args[0]; //left hand side
	      var lhsTex = lhs.toTex(options);
	      if (parens[0]) {
	        lhsTex = '\\left(' + lhsTex + '\\right)';
	      }
	
	      var rhs = args[1]; //right hand side
	      var rhsTex = rhs.toTex(options);
	      if (parens[1]) {
	        rhsTex = '\\left(' + rhsTex + '\\right)';
	      }
	
	      //handle some exceptions (due to the way LaTeX works)
	      var lhsIdentifier;
	      if (parenthesis === 'keep') {
	        lhsIdentifier = lhs.getIdentifier();
	      }
	      else {
	        //Ignore ParenthesisNodes if in 'keep' mode
	        lhsIdentifier = lhs.getContent().getIdentifier();
	      }
	      switch (this.getIdentifier()) {
	        case 'OperatorNode:divide':
	          //op contains '\\frac' at this point
	          return op + '{' + lhsTex + '}' + '{' + rhsTex + '}';
	        case 'OperatorNode:pow':
	          lhsTex = '{' + lhsTex + '}';
	          rhsTex = '{' + rhsTex + '}';
	          switch (lhsIdentifier) {
	            case 'ConditionalNode': //
	            case 'OperatorNode:divide':
	              lhsTex = '\\left(' + lhsTex + '\\right)';
	          }
	        case 'OperatorNode:multiply':
	          if (this.implicit && (implicit === 'hide')) {
	            return lhsTex + '~' + rhsTex;
	          }
	      }
	      return lhsTex + op + rhsTex;
	    } else if ((args.length > 2) && ((this.getIdentifier() === 'OperatorNode:add') || (this.getIdentifier() === 'OperatorNode:multiply'))) {
	      var texifiedArgs = args.map(function (arg, index) {
	        arg = arg.toTex(options);
	        if (parens[index]) {
	          arg = '\\left(' + arg + '\\right)';
	        }
	        return arg;
	      });
	
	      if ((this.getIdentifier() === 'OperatorNode:multiply') && this.implicit) {
	        return texifiedArgs.join('~');
	      }
	
	      return texifiedArgs.join(op)
	    } else {
	      //fall back to formatting as a function call
	      //as this is a fallback, it doesn't use
	      //fancy function names
	      return '\\mathrm{' + this.fn + '}\\left('
	          + args.map(function (arg) {
	            return arg.toTex(options);
	          }).join(',') + '\\right)';
	    }
	  };
	
	  /**
	   * Get identifier.
	   * @return {string}
	   */
	  OperatorNode.prototype.getIdentifier = function () {
	    return this.type + ':' + this.fn;
	  };
	
	  return OperatorNode;
	}
	
	exports.name = 'OperatorNode';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;


/***/ }),
/* 357 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var latex = __webpack_require__(83);
	var stringify = __webpack_require__(74).stringify;
	var extend = __webpack_require__(55).extend;
	var validateSafeMethod = __webpack_require__(98).validateSafeMethod;
	
	function factory (type, config, load, typed, math) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	  var SymbolNode = load(__webpack_require__(354));
	
	  /**
	   * @constructor FunctionNode
	   * @extends {./Node}
	   * invoke a list with arguments on a node
	   * @param {./Node | string} fn Node resolving with a function on which to invoke
	   *                             the arguments, typically a SymboNode or AccessorNode
	   * @param {./Node[]} args
	   */
	  function FunctionNode(fn, args) {
	    if (!(this instanceof FunctionNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    if (typeof fn === 'string') {
	      fn = new SymbolNode(fn);
	    }
	
	    // validate input
	    if (!fn || !fn.isNode) throw new TypeError('Node expected as parameter "fn"');
	    if (!Array.isArray(args)
	        || !args.every(function (arg) {return arg && arg.isNode;})) {
	      throw new TypeError('Array containing Nodes expected for parameter "args"');
	    }
	
	    this.fn = fn;
	    this.args = args || [];
	
	    // readonly property name
	    Object.defineProperty(this, 'name', {
	      get: function () {
	        return this.fn.name || '';
	      }.bind(this),
	      set: function () {
	        throw new Error('Cannot assign a new name, name is read-only');
	      }
	    });
	
	    // TODO: deprecated since v3, remove some day
	    var deprecated = function () {
	      throw new Error('Property `FunctionNode.object` is deprecated, use `FunctionNode.fn` instead');
	    };
	    Object.defineProperty(this, 'object', { get: deprecated, set: deprecated });
	  }
	
	  FunctionNode.prototype = new Node();
	
	  FunctionNode.prototype.type = 'FunctionNode';
	
	  FunctionNode.prototype.isFunctionNode = true;
	
	  /**
	   * Compile the node to javascript code
	   * @param {FunctionNode} node The node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  function compileFunctionNode(node, defs, args) {
	    // compile fn and arguments
	    var jsFn = compile(node.fn, defs, args);
	    var jsArgs = node.args.map(function (arg) {
	      return compile(arg, defs, args);
	    });
	    var jsScope = compileScope(defs, args);
	    var argsName;
	
	    if (node.fn.isSymbolNode) {
	      // we can statically determine whether the function has an rawArgs property
	      var name = node.fn.name;
	      var fn = defs.math[name];
	      var isRaw = (typeof fn === 'function') && (fn.rawArgs == true);
	
	      if (isRaw) {
	        // pass unevaluated parameters (nodes) to the function
	        argsName = node._getUniqueArgumentsName(defs);
	        defs[argsName] = node.args;
	
	        return jsFn + '(' + argsName + ', math, ' + jsScope + ')';
	      }
	      else {
	        // "regular" evaluation
	        return jsFn + '(' + jsArgs.join(', ') + ')';
	      }
	    }
	    else if (node.fn.isAccessorNode && node.fn.index.isObjectProperty()) {
	      // execute the function with the right context: the object of the AccessorNode
	      argsName = node._getUniqueArgumentsName(defs);
	      defs[argsName] = node.args;
	      defs.validateSafeMethod = validateSafeMethod
	
	      var jsObject = compile(node.fn.object, defs, args);
	      var jsProp = stringify(node.fn.index.getObjectProperty());
	
	      return '(function () {' +
	          'var object = ' + jsObject + ';' +
	          'validateSafeMethod(object, ' + jsProp + ');' +
	          'return (object[' + jsProp + '] && object[' + jsProp + '].rawArgs) ' +
	          ' ? object[' + jsProp + '](' + argsName + ', math, ' + jsScope + ')' +
	          ' : object[' + jsProp + '](' + jsArgs.join(', ') + ')' +
	          '})()';
	    }
	    else { // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()
	      // we have to dynamically determine whether the function has a rawArgs property
	      argsName = node._getUniqueArgumentsName(defs);
	      defs[argsName] = node.args;
	
	      return '(function () {' +
	          'var fn = ' + jsFn + ';' +
	          'return (fn && fn.rawArgs) ' +
	          ' ? fn(' + argsName + ', math, ' + jsScope + ')' +
	          ' : fn(' + jsArgs.join(', ') + ')' +
	          '})()';
	    }
	  }
	
	  // register the compile function
	  register(FunctionNode.prototype.type, compileFunctionNode);
	
	  /**
	   * Merge function arguments into scope before passing to the actual function.
	   * This is needed when the function has `rawArgs=true`. In that case we have
	   * to pass the `scope` as third argument, including any variables of
	   * enclosing functions.
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  function compileScope (defs, args) {
	    var names = Object.keys(args);
	    if (names.length === 0) {
	      return 'scope';
	    }
	    else {
	      // merge arguments into scope
	      defs.extend = extend;
	
	      var jsArgs = names
	          .map(function (arg) {
	            return stringify(arg) + ': ' + arg;
	          })
	          .join(', ');
	
	      return 'extend(extend({}, scope), {' + jsArgs + '})';
	    }
	  }
	
	  /**
	   * Get a unique name for a arguments to store in defs
	   * @param {Object} defs
	   * @return {string} A string like 'args1', 'args2', ...
	   * @private
	   */
	  FunctionNode.prototype._getUniqueArgumentsName = function (defs) {
	    var argsName;
	    var i = 0;
	
	    do {
	      argsName = 'args' + i;
	      i++;
	    }
	    while (argsName in defs);
	
	    return argsName;
	  };
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  FunctionNode.prototype.forEach = function (callback) {
	    for (var i = 0; i < this.args.length; i++) {
	      callback(this.args[i], 'args[' + i + ']', this);
	    }
	  };
	
	  /**
	   * Create a new FunctionNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node): Node} callback
	   * @returns {FunctionNode} Returns a transformed copy of the node
	   */
	  FunctionNode.prototype.map = function (callback) {
	    var fn = this.fn.map(callback);
	    var args = [];
	    for (var i = 0; i < this.args.length; i++) {
	      args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));
	    }
	    return new FunctionNode(fn, args);
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {FunctionNode}
	   */
	  FunctionNode.prototype.clone = function () {
	    return new FunctionNode(this.fn, this.args.slice(0));
	  };
	
	  //backup Node's toString function
	  //@private
	  var nodeToString = FunctionNode.prototype.toString;
	
	  /**
	   * Get string representation. (wrapper function)
	   * This overrides parts of Node's toString function.
	   * If callback is an object containing callbacks, it
	   * calls the correct callback for the current node,
	   * otherwise it falls back to calling Node's toString
	   * function.
	   *
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  FunctionNode.prototype.toString = function (options) {
	    var customString;
	    var name = this.fn.toString(options);
	    if (options && (typeof options.handler === 'object') && options.handler.hasOwnProperty(name)) {
	      //callback is a map of callback functions
	      customString = options.handler[name](this, options);
	    }
	
	    if (typeof customString !== 'undefined') {
	      return customString;
	    }
	
	    //fall back to Node's toString
	    return nodeToString.call(this, options);
	  };
	
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionNode.prototype._toString = function (options) {
	    var args = this.args.map(function (arg) {
	      return arg.toString(options);
	    });
	
	    // format the arguments like "add(2, 4.2)"
	    return this.fn.toString(options) + '(' + args.join(', ') + ')';
	  };
	
	  /*
	   * Expand a LaTeX template
	   *
	   * @param {string} template
	   * @param {Node} node
	   * @param {Object} options
	   * @private
	   **/
	  function expandTemplate(template, node, options) {
	    var latex = '';
	
	    // Match everything of the form ${identifier} or ${identifier[2]} or $$
	    // while submatching identifier and 2 (in the second case)
	    var regex = new RegExp('\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)', 'ig');
	
	    var inputPos = 0;   //position in the input string
	    var match;
	    while ((match = regex.exec(template)) !== null) {   //go through all matches
	      // add everything in front of the match to the LaTeX string
	      latex += template.substring(inputPos, match.index);
	      inputPos = match.index;
	
	      if (match[0] === '$$') { // escaped dollar sign
	        latex += '$';
	        inputPos++;
	      }
	      else { // template parameter
	        inputPos += match[0].length;
	        var property = node[match[1]];
	        if (!property) {
	          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');
	        }
	        if (match[2] === undefined) { //no square brackets
	          switch (typeof property) {
	            case 'string':
	              latex += property;
	              break;
	            case 'object':
	              if (property.isNode) {
	                latex += property.toTex(options);
	              }
	              else if (Array.isArray(property)) {
	                //make array of Nodes into comma separated list
	                latex += property.map(function (arg, index) {
	                  if (arg && arg.isNode) {
	                    return arg.toTex(options);
	                  }
	                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');
	                }).join(',');
	              }
	              else {
	                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
	              }
	              break;
	            default:
	              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');
	          }
	        }
	        else { //with square brackets
	          if (property[match[2]] && property[match[2]].isNode) {
	            latex += property[match[2]].toTex(options);
	          }
	          else {
	            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');
	          }
	        }
	      }
	    }
	    latex += template.slice(inputPos);  //append rest of the template
	
	    return latex;
	  }
	
	  //backup Node's toTex function
	  //@private
	  var nodeToTex = FunctionNode.prototype.toTex;
	
	  /**
	   * Get LaTeX representation. (wrapper function)
	   * This overrides parts of Node's toTex function.
	   * If callback is an object containing callbacks, it
	   * calls the correct callback for the current node,
	   * otherwise it falls back to calling Node's toTex
	   * function.
	   *
	   * @param {Object} options
	   * @return {string}
	   */
	  FunctionNode.prototype.toTex = function (options) {
	    var customTex;
	    if (options && (typeof options.handler === 'object') && options.handler.hasOwnProperty(this.name)) {
	      //callback is a map of callback functions
	      customTex = options.handler[this.name](this, options);
	    }
	
	    if (typeof customTex !== 'undefined') {
	      return customTex;
	    }
	
	    //fall back to Node's toTex
	    return nodeToTex.call(this, options);
	  };
	
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   */
	  FunctionNode.prototype._toTex = function (options) {
	    var args = this.args.map(function (arg) { //get LaTeX of the arguments
	      return arg.toTex(options);
	    });
	
	    var latexConverter;
	
	    if (math[this.name] && ((typeof math[this.name].toTex === 'function') || (typeof math[this.name].toTex === 'object') || (typeof math[this.name].toTex === 'string'))) {
	      //.toTex is a callback function
	      latexConverter = math[this.name].toTex;
	    }
	
	    var customToTex;
	    switch (typeof latexConverter) {
	      case 'function': //a callback function
	        customToTex = latexConverter(this, options);
	        break;
	      case 'string': //a template string
	        customToTex = expandTemplate(latexConverter, this, options);
	        break;
	      case 'object': //an object with different "converters" for different numbers of arguments
	        switch (typeof latexConverter[args.length]) {
	          case 'function':
	            customToTex = latexConverter[args.length](this, options);
	            break;
	          case 'string':
	            customToTex = expandTemplate(latexConverter[args.length], this, options);
	            break;
	        }
	    }
	
	    if (typeof customToTex !== 'undefined') {
	      return customToTex;
	    }
	
	    return expandTemplate(latex.defaultTemplate, this, options);
	  };
	
	  /**
	   * Get identifier.
	   * @return {string}
	   */
	  FunctionNode.prototype.getIdentifier = function () {
	    return this.type + ':' + this.name;
	  };
	
	  return FunctionNode;
	}
	
	exports.name = 'FunctionNode';
	exports.path = 'expression.node';
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.factory = factory;


/***/ }),
/* 358 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var register = load(__webpack_require__(338)).register;
	  var compile = load(__webpack_require__(338)).compile;
	  var Node = load(__webpack_require__(339));
	
	  /**
	   * @constructor ParenthesisNode
	   * @extends {Node}
	   * A parenthesis node describes manual parenthesis from the user input
	   * @param {Node} content
	   * @extends {Node}
	   */
	  function ParenthesisNode(content) {
	    if (!(this instanceof ParenthesisNode)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    // validate input
	    if (!(content && content.isNode)) {
	      throw new TypeError('Node expected for parameter "content"');
	    }
	
	    this.content = content;
	  }
	
	  ParenthesisNode.prototype = new Node();
	
	  ParenthesisNode.prototype.type = 'ParenthesisNode';
	
	  ParenthesisNode.prototype.isParenthesisNode = true;
	
	  /**
	   * Compile the node to javascript code
	   * @param {ParenthesisNode} node The node to be compiled
	   * @param {Object} defs     Object which can be used to define functions
	   *                          or constants globally available for the compiled
	   *                          expression
	   * @param {Object} args     Object with local function arguments, the key is
	   *                          the name of the argument, and the value is `true`.
	   *                          The object may not be mutated, but must be
	   *                          extended instead.
	   * @return {string} js
	   * @private
	   */
	  function compileParenthesisNode(node, defs, args) {
	    return compile(node.content, defs, args);
	  }
	
	  // register the compile function
	  register(ParenthesisNode.prototype.type, compileParenthesisNode);
	
	  /**
	   * Get the content of the current Node.
	   * @return {Node} content
	   * @override
	   **/
	  ParenthesisNode.prototype.getContent = function () {
	    return this.content.getContent();
	  };
	
	  /**
	   * Execute a callback for each of the child nodes of this node
	   * @param {function(child: Node, path: string, parent: Node)} callback
	   */
	  ParenthesisNode.prototype.forEach = function (callback) {
	    callback(this.content, 'content', this);
	  };
	
	  /**
	   * Create a new ParenthesisNode having it's childs be the results of calling
	   * the provided callback function for each of the childs of the original node.
	   * @param {function(child: Node, path: string, parent: Node) : Node} callback
	   * @returns {ParenthesisNode} Returns a clone of the node
	   */
	  ParenthesisNode.prototype.map = function (callback) {
	    var content = callback(this.content, 'content', this);
	    return new ParenthesisNode(content);
	  };
	
	  /**
	   * Create a clone of this node, a shallow copy
	   * @return {ParenthesisNode}
	   */
	  ParenthesisNode.prototype.clone = function() {
	    return new ParenthesisNode(this.content);
	  };
	
	  /**
	   * Get string representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ParenthesisNode.prototype._toString = function(options) {
	    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {
	      return '(' + this.content.toString(options) + ')';
	    }
	    return this.content.toString(options);
	  };
	
	  /**
	   * Get LaTeX representation
	   * @param {Object} options
	   * @return {string} str
	   * @override
	   */
	  ParenthesisNode.prototype._toTex = function(options) {
	    if ((!options) || (options && !options.parenthesis) || (options && options.parenthesis === 'keep')) {
	      return '\\left(' + this.content.toTex(options) + '\\right)';
	    }
	    return this.content.toTex(options);
	  };
	
	  return ParenthesisNode;
	}
	
	exports.name = 'ParenthesisNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ }),
/* 359 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  var parse = load(__webpack_require__(336));
	
	  /**
	   * Evaluate an expression.
	   *
	   * Note the evaluating arbitrary expressions may involve security risks,
	   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.
	   *
	   * Syntax:
	   *
	   *     math.eval(expr)
	   *     math.eval(expr, scope)
	   *     math.eval([expr1, expr2, expr3, ...])
	   *     math.eval([expr1, expr2, expr3, ...], scope)
	   *
	   * Example:
	   *
	   *     math.eval('(2+3)/4');                // 1.25
	   *     math.eval('sqrt(3^2 + 4^2)');        // 5
	   *     math.eval('sqrt(-4)');               // 2i
	   *     math.eval(['a=3', 'b=4', 'a*b']);,   // [3, 4, 12]
	   *
	   *     var scope = {a:3, b:4};
	   *     math.eval('a * b', scope);           // 12
	   *
	   * See also:
	   *
	   *    parse, compile
	   *
	   * @param {string | string[] | Matrix} expr   The expression to be evaluated
	   * @param {Object} [scope]                    Scope to read/write variables
	   * @return {*} The result of the expression
	   * @throws {Error}
	   */
	  return typed('compile', {
	    'string': function (expr) {
	      var scope = {};
	      return parse(expr).compile().eval(scope);
	    },
	
	    'string, Object': function (expr, scope) {
	      return parse(expr).compile().eval(scope);
	    },
	
	    'Array | Matrix': function (expr) {
	      var scope = {};
	      return deepMap(expr, function (entry) {
	        return parse(entry).compile().eval(scope);
	      });
	    },
	
	    'Array | Matrix, Object': function (expr, scope) {
	      return deepMap(expr, function (entry) {
	        return parse(entry).compile().eval(scope);
	      });
	    }
	  });
	}
	
	exports.name = 'eval';
	exports.factory = factory;

/***/ }),
/* 360 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed, math) {
	  var docs = load(__webpack_require__(151));
	
	  /**
	   * Retrieve help on a function or data type.
	   * Help files are retrieved from the documentation in math.expression.docs.
	   *
	   * Syntax:
	   *
	   *    math.help(search)
	   *
	   * Examples:
	   *
	   *    console.log(math.help('sin').toString());
	   *    console.log(math.help(math.add).toString());
	   *    console.log(math.help(math.add).toJSON());
	   *
	   * @param {Function | string | Object} search   A function or function name
	   *                                              for which to get help
	   * @return {Help} A help object
	   */
	  return typed('help', {
	    'any': function (search) {
	      var prop;
	      var name = search;
	
	      if (typeof search !== 'string') {
	        for (prop in math) {
	          // search in functions and constants
	          if (math.hasOwnProperty(prop) && (search === math[prop])) {
	            name = prop;
	            break;
	          }
	        }
	
	        /* TODO: implement help for data types
	         if (!text) {
	         // search data type
	         for (prop in math.type) {
	         if (math.type.hasOwnProperty(prop)) {
	         if (search === math.type[prop]) {
	         text = prop;
	         break;
	         }
	         }
	         }
	         }
	         */
	      }
	
	      var doc = docs[name];
	      if (!doc) {
	        throw new Error('No documentation found on "' + name + '"');
	      }
	      return new type.Help(doc);
	    }
	  });
	}
	
	exports.math = true; // request access to the math namespace as 5th argument of the factory function
	exports.name = 'help';
	exports.factory = factory;


/***/ }),
/* 361 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var parse = load(__webpack_require__(336));
	
	  /**
	   * Parse an expression. Returns a node tree, which can be evaluated by
	   * invoking node.eval();
	   *
	   * Note the evaluating arbitrary expressions may involve security risks,
	   * see [http://mathjs.org/docs/expressions/security.html](http://mathjs.org/docs/expressions/security.html) for more information.
	   *
	   * Syntax:
	   *
	   *     math.parse(expr)
	   *     math.parse(expr, options)
	   *     math.parse([expr1, expr2, expr3, ...])
	   *     math.parse([expr1, expr2, expr3, ...], options)
	   *
	   * Example:
	   *
	   *     var node = math.parse('sqrt(3^2 + 4^2)');
	   *     node.compile().eval(); // 5
	   *
	   *     var scope = {a:3, b:4}
	   *     var node = math.parse('a * b'); // 12
	   *     var code = node.compile();
	   *     code.eval(scope); // 12
	   *     scope.a = 5;
	   *     code.eval(scope); // 20
	   *
	   *     var nodes = math.parse(['a = 3', 'b = 4', 'a * b']);
	   *     nodes[2].compile().eval(); // 12
	   *
	   * See also:
	   *
	   *     eval, compile
	   *
	   * @param {string | string[] | Matrix} expr          Expression to be parsed
	   * @param {{nodes: Object<string, Node>}} [options]  Available options:
	   *                                                   - `nodes` a set of custom nodes
	   * @return {Node | Node[]} node
	   * @throws {Error}
	   */
	  return typed('parse', {
	    'string | Array | Matrix': parse,
	    'string | Array | Matrix, Object': parse
	  });
	}
	
	exports.name = 'parse';
	exports.factory = factory;


/***/ }),
/* 362 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed, math) {
	  var Parser = load(__webpack_require__(363));
	
	  /**
	   * Create a parser. The function creates a new `math.expression.Parser` object.
	   *
	   * Syntax:
	   *
	   *    math.parser()
	   *
	   * Examples:
	   *
	   *     var parser = new math.parser();
	   *
	   *     // evaluate expressions
	   *     var a = parser.eval('sqrt(3^2 + 4^2)'); // 5
	   *     var b = parser.eval('sqrt(-4)');        // 2i
	   *     var c = parser.eval('2 inch in cm');    // 5.08 cm
	   *     var d = parser.eval('cos(45 deg)');     // 0.7071067811865476
	   *
	   *     // define variables and functions
	   *     parser.eval('x = 7 / 2');               // 3.5
	   *     parser.eval('x + 3');                   // 6.5
	   *     parser.eval('function f(x, y) = x^y');  // f(x, y)
	   *     parser.eval('f(2, 3)');                 // 8
	   *
	   *     // get and set variables and functions
	   *     var x = parser.get('x');                // 7
	   *     var f = parser.get('f');                // function
	   *     var g = f(3, 2);                        // 9
	   *     parser.set('h', 500);
	   *     var i = parser.eval('h / 2');           // 250
	   *     parser.set('hello', function (name) {
	   *       return 'hello, ' + name + '!';
	   *     });
	   *     parser.eval('hello("user")');           // "hello, user!"
	   *
	   *     // clear defined functions and variables
	   *     parser.clear();
	   *
	   * See also:
	   *
	   *    eval, compile, parse
	   *
	   * @return {Parser} Parser
	   */
	  return typed('parser', {
	    '': function () {
	      return new Parser(math);
	    }
	  });
	}
	
	exports.name = 'parser';
	exports.factory = factory;
	exports.math = true; // requires the math namespace as 5th argument


/***/ }),
/* 363 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var extend = __webpack_require__(55).extend;
	var customs = __webpack_require__(98);
	
	function factory (type, config, load, typed, math) {
	  var _parse = load(__webpack_require__(336));
	
	  /**
	   * @constructor Parser
	   * Parser contains methods to evaluate or parse expressions, and has a number
	   * of convenience methods to get, set, and remove variables from memory. Parser
	   * keeps a scope containing variables in memory, which is used for all
	   * evaluations.
	   *
	   * Methods:
	   *    var result = parser.eval(expr);    // evaluate an expression
	   *    var value = parser.get(name);      // retrieve a variable from the parser
	   *    var values = parser.getAll();      // retrieve all defined variables
	   *    parser.set(name, value);           // set a variable in the parser
	   *    parser.remove(name);               // clear a variable from the
	   *                                       // parsers scope
	   *    parser.clear();                    // clear the parsers scope
	   *
	   * Example usage:
	   *    var parser = new Parser();
	   *    // Note: there is a convenience method which can be used instead:
	   *    // var parser = new math.parser();
	   *
	   *    // evaluate expressions
	   *    parser.eval('sqrt(3^2 + 4^2)');         // 5
	   *    parser.eval('sqrt(-4)');                // 2i
	   *    parser.eval('2 inch in cm');            // 5.08 cm
	   *    parser.eval('cos(45 deg)');             // 0.7071067811865476
	   *
	   *    // define variables and functions
	   *    parser.eval('x = 7 / 2');               // 3.5
	   *    parser.eval('x + 3');                   // 6.5
	   *    parser.eval('function f(x, y) = x^y');  // f(x, y)
	   *    parser.eval('f(2, 3)');                 // 8
	   *
	   *    // get and set variables and functions
	   *    var x = parser.get('x');                // 7
	   *    var f = parser.get('f');                // function
	   *    var g = f(3, 2);                        // 9
	   *    parser.set('h', 500);
	   *    var i = parser.eval('h / 2');           // 250
	   *    parser.set('hello', function (name) {
	   *        return 'hello, ' + name + '!';
	   *    });
	   *    parser.eval('hello("user")');           // "hello, user!"
	   *
	   *    // clear defined functions and variables
	   *    parser.clear();
	   *
	   */
	  function Parser() {
	    if (!(this instanceof Parser)) {
	      throw new SyntaxError(
	          'Constructor must be called with the new operator');
	    }
	    this.scope = {};
	  }
	
	  /**
	   * Attach type information
	   */
	  Parser.prototype.type = 'Parser';
	  Parser.prototype.isParser = true;
	
	  /**
	   * Parse an expression and return the parsed function node.
	   * The node tree can be compiled via `code = node.compile(math)`,
	   * and the compiled code can be executed as `code.eval([scope])`
	   * @param {string} expr
	   * @return {Node} node
	   * @throws {Error}
	   */
	  Parser.prototype.parse = function (expr) {
	    throw new Error('Parser.parse is deprecated. Use math.parse instead.');
	  };
	
	  /**
	   * Parse and compile an expression, return the compiled javascript code.
	   * The node can be evaluated via code.eval([scope])
	   * @param {string} expr
	   * @return {{eval: function}} code
	   * @throws {Error}
	   */
	  Parser.prototype.compile = function (expr) {
	    throw new Error('Parser.compile is deprecated. Use math.compile instead.');
	  };
	
	  /**
	   * Parse and evaluate the given expression
	   * @param {string} expr   A string containing an expression, for example "2+3"
	   * @return {*} result     The result, or undefined when the expression was empty
	   * @throws {Error}
	   */
	  Parser.prototype.eval = function (expr) {
	    // TODO: validate arguments
	    return _parse(expr)
	        .compile()
	        .eval(this.scope);
	  };
	
	  /**
	   * Get a variable (a function or variable) by name from the parsers scope.
	   * Returns undefined when not found
	   * @param {string} name
	   * @return {* | undefined} value
	   */
	  Parser.prototype.get = function (name) {
	    // TODO: validate arguments
	    return name in this.scope
	        ? customs.getSafeProperty(this.scope, name)
	        : undefined;
	  };
	
	  /**
	   * Get a map with all defined variables
	   * @return {Object} values
	   */
	  Parser.prototype.getAll = function () {
	    return extend({}, this.scope);
	  };
	
	  /**
	   * Set a symbol (a function or variable) by name from the parsers scope.
	   * @param {string} name
	   * @param {* | undefined} value
	   */
	  Parser.prototype.set = function (name, value) {
	    // TODO: validate arguments
	    return customs.setSafeProperty(this.scope, name, value);
	  };
	
	  /**
	   * Remove a variable from the parsers scope
	   * @param {string} name
	   */
	  Parser.prototype.remove = function (name) {
	    // TODO: validate arguments
	    delete this.scope[name];
	  };
	
	  /**
	   * Clear the scope with variables and functions
	   */
	  Parser.prototype.clear = function () {
	    for (var name in this.scope) {
	      if (this.scope.hasOwnProperty(name)) {
	        delete this.scope[name];
	      }
	    }
	  };
	
	  return Parser;
	}
	
	exports.name = 'Parser';
	exports.path = 'expression';
	exports.factory = factory;
	exports.math = true; // requires the math namespace as 5th argument


/***/ }),
/* 364 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(337),
	  __webpack_require__(344),
	  __webpack_require__(345),
	  __webpack_require__(348),
	  __webpack_require__(349),
	  __webpack_require__(350),
	  __webpack_require__(352),
	  __webpack_require__(351),
	  __webpack_require__(357),
	  __webpack_require__(339),
	  __webpack_require__(355),
	  __webpack_require__(356),
	  __webpack_require__(358),
	  __webpack_require__(353),
	  __webpack_require__(354),
	  __webpack_require__(365)
	];


/***/ }),
/* 365 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  /**
	   * @constructor UpdateNode
	   */
	  function UpdateNode() {
	    // TODO: deprecated since v3. Cleanup some day
	    throw new Error('UpdateNode is deprecated. Use AssignmentNode instead.');
	  }
	
	  return UpdateNode;
	}
	
	exports.name = 'UpdateNode';
	exports.path = 'expression.node';
	exports.factory = factory;


/***/ }),
/* 366 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(367),
	  __webpack_require__(369),
	  __webpack_require__(371),
	  __webpack_require__(373),
	  __webpack_require__(374),
	  __webpack_require__(376),
	  __webpack_require__(382),
	  __webpack_require__(387),
	  __webpack_require__(389),
	  __webpack_require__(391)
	];


/***/ }),
/* 367 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var errorTransform = __webpack_require__(342).transform;
	
	/**
	 * Attach a transform function to math.range
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function concat
	 * from one-based to zero based
	 */
	function factory (type, config, load, typed) {
	  var concat = load(__webpack_require__(368));
	
	  // @see: comment of concat itself
	 return typed('concat', {
	    '...any': function (args) {
	      // change last argument from one-based to zero-based
	      var lastIndex = args.length - 1;
	      var last = args[lastIndex];
	      if (typeof last === 'number') {
	        args[lastIndex] = last - 1;
	      }
	      else if (last && last.isBigNumber === true) {
	        args[lastIndex] = last.minus(1);
	      }
	
	      try {
	        return concat.apply(null, args);
	      }
	      catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}
	
	exports.name = 'concat';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ }),
/* 368 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var clone = __webpack_require__(55).clone;
	var isInteger = __webpack_require__(58).isInteger;
	var array = __webpack_require__(91);
	var IndexError = __webpack_require__(94);
	var DimensionError = __webpack_require__(93);
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Concatenate two or more matrices.
	   *
	   * Syntax:
	   *
	   *     math.concat(A, B, C, ...)
	   *     math.concat(A, B, C, ..., dim)
	   *
	   * Where:
	   *
	   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.
	   *   By default the last dimension of the matrices.
	   *
	   * Examples:
	   *
	   *    var A = [[1, 2], [5, 6]];
	   *    var B = [[3, 4], [7, 8]];
	   *
	   *    math.concat(A, B);                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]
	   *    math.concat(A, B, 0);               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]
	   *    math.concat('hello', ' ', 'world'); // returns 'hello world'
	   *
	   * See also:
	   *
	   *    size, squeeze, subset, transpose
	   *
	   * @param {... Array | Matrix} args     Two or more matrices
	   * @return {Array | Matrix} Concatenated matrix
	   */
	  var concat = typed('concat', {
	    // TODO: change signature to '...Array | Matrix, dim?' when supported
	    '...Array | Matrix | number | BigNumber': function (args) {
	      var i;
	      var len = args.length;
	      var dim = -1;  // zero-based dimension
	      var prevDim;
	      var asMatrix = false;
	      var matrices = [];  // contains multi dimensional arrays
	
	      for (i = 0; i < len; i++) {
	        var arg = args[i];
	
	        // test whether we need to return a Matrix (if not we return an Array)
	        if (arg && arg.isMatrix === true) {
	          asMatrix = true;
	        }
	
	        if (typeof arg === 'number' || (arg && arg.isBigNumber === true)) {
	          if (i !== len - 1) {
	            throw new Error('Dimension must be specified as last argument');
	          }
	
	          // last argument contains the dimension on which to concatenate
	          prevDim = dim;
	          dim = arg.valueOf(); // change BigNumber to number
	
	          if (!isInteger(dim)) {
	            throw new TypeError('Integer number expected for dimension');
	          }
	
	          if (dim < 0 || (i > 0 && dim > prevDim)) {
	            // TODO: would be more clear when throwing a DimensionError here
	            throw new IndexError(dim, prevDim + 1);
	          }
	        }
	        else {
	          // this is a matrix or array
	          var m = clone(arg).valueOf();
	          var size = array.size(m);
	          matrices[i] = m;
	          prevDim = dim;
	          dim = size.length - 1;
	
	          // verify whether each of the matrices has the same number of dimensions
	          if (i > 0 && dim != prevDim) {
	            throw new DimensionError(prevDim + 1, dim + 1);
	          }
	        }
	      }
	
	      if (matrices.length == 0) {
	        throw new SyntaxError('At least one matrix expected');
	      }
	
	      var res = matrices.shift();
	      while (matrices.length) {
	        res = _concat(res, matrices.shift(), dim, 0);
	      }
	
	      return asMatrix ? matrix(res) : res;
	    },
	
	    '...string': function (args) {
	      return args.join('');
	    }
	  });
	
	  concat.toTex = undefined; // use default template
	
	  return concat;
	}
	
	/**
	 * Recursively concatenate two matrices.
	 * The contents of the matrices is not cloned.
	 * @param {Array} a             Multi dimensional array
	 * @param {Array} b             Multi dimensional array
	 * @param {number} concatDim    The dimension on which to concatenate (zero-based)
	 * @param {number} dim          The current dim (zero-based)
	 * @return {Array} c            The concatenated matrix
	 * @private
	 */
	function _concat(a, b, concatDim, dim) {
	  if (dim < concatDim) {
	    // recurse into next dimension
	    if (a.length != b.length) {
	      throw new DimensionError(a.length, b.length);
	    }
	
	    var c = [];
	    for (var i = 0; i < a.length; i++) {
	      c[i] = _concat(a[i], b[i], concatDim, dim + 1);
	    }
	    return c;
	  }
	  else {
	    // concatenate this dimension
	    return a.concat(b);
	  }
	}
	
	exports.name = 'concat';
	exports.factory = factory;


/***/ }),
/* 369 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Attach a transform function to math.filter
	 * Adds a property transform containing the transform function.
	 *
	 * This transform adds support for equations as test function for math.filter,
	 * so you can do something like 'filter([3, -2, 5], x > 0)'.
	 */
	function factory (type, config, load, typed) {
	  var filter = load(__webpack_require__(370));
	  var SymbolNode = load(__webpack_require__(354));
	
	  function filterTransform(args, math, scope) {
	    var x, test;
	
	    if (args[0]) {
	      x = args[0].compile().eval(scope);
	    }
	
	    if (args[1]) {
	      if (args[1] && args[1].isSymbolNode) {
	        // a function pointer, like filter([3, -2, 5], myTestFunction);
	        test = args[1].compile().eval(scope);
	      }
	      else {
	        // an equation like filter([3, -2, 5], x > 0)
	
	        // find an undefined symbol
	        var _scope = scope || {};
	        var symbol = args[1]
	            .filter(function (node) {
	              return (node && node.isSymbolNode) &&
	                  !(node.name in math) &&
	                  !(node.name in _scope);
	            })[0];
	
	        // create a test function for this equation
	        var sub = Object.create(_scope);
	        var eq = args[1].compile();
	        if (symbol) {
	          var name = symbol.name;
	          test = function (x) {
	            sub[name] = x;
	            return eq.eval(sub);
	          }
	        }
	        else {
	          throw new Error('No undefined variable found in filter equation');
	        }
	      }
	    }
	
	    return filter(x, test);
	  }
	
	  filterTransform.rawArgs = true;
	
	  return filterTransform;
	}
	
	exports.name = 'filter';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ }),
/* 370 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var size = __webpack_require__(91).size;
	var maxArgumentCount = __webpack_require__(96).maxArgumentCount;
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	  
	  /**
	   * Filter the items in an array or one dimensional matrix.
	   *
	   * Syntax:
	   *
	   *    math.filter(x, test)
	   *
	   * Examples:
	   *
	   *    function isPositive (x) {
	   *      return x > 0;
	   *    }
	   *    math.filter([6, -2, -1, 4, 3], isPositive); // returns [6, 4, 3]
	   *
	   *    math.filter(["23", "foo", "100", "55", "bar"], /[0-9]+/); // returns ["23", "100", "55"]
	   *
	   * See also:
	   *
	   *    forEach, map, sort
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to filter
	   * @param {Function | RegExp} test
	   *        A function or regular expression to test items.
	   *        All entries for which `test` returns true are returned.
	   *        When `test` is a function, it is invoked with three parameters:
	   *        the value of the element, the index of the element, and the
	   *        matrix/array being traversed. The function must return a boolean.
	   * @return {Matrix | Array} Returns the filtered matrix.
	   */
	  var filter = typed('filter', {
	    'Array, function': _filterCallback,
	
	    'Array, RegExp': _filterRegExp,
	
	    'Matrix, function': function (x, test) {
	      return matrix(_filterCallback(x.toArray(), test));
	    },
	
	    'Matrix, RegExp': function (x, test) {
	      return matrix(_filterRegExp(x.toArray(), test));
	    }
	  });
	
	  filter.toTex = undefined; // use default template
	
	  return filter;
	}
	
	/**
	 * Filter values in a callback given a callback function
	 * @param {Array} x
	 * @param {Function} callback
	 * @return {Array} Returns the filtered array
	 * @private
	 */
	function _filterCallback (x, callback) {
	  if (size(x).length !== 1) {
	    throw new Error('Only one dimensional matrices supported');
	  }
	
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount(callback);
	
	  return x.filter(function (value, index, array) {
	    // invoke the callback function with the right number of arguments
	    if (args === 1) {
	      return callback(value);
	    }
	    else if (args === 2) {
	      return callback(value, [index]);
	    }
	    else { // 3 or -1
	      return callback(value, [index], array);
	    }
	  });
	}
	
	/**
	 * Filter values in a callback given a regular expression
	 * @param {Array} x
	 * @param {Function} regexp
	 * @return {Array} Returns the filtered array
	 * @private
	 */
	function _filterRegExp (x, regexp) {
	  if (size(x).length !== 1) {
	    throw new Error('Only one dimensional matrices supported');
	  }
	
	  return x.filter(function (entry) {
	    return regexp.test(entry);
	  });
	}
	
	exports.name = 'filter';
	exports.factory = factory;


/***/ }),
/* 371 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var maxArgumentCount = __webpack_require__(96).maxArgumentCount;
	
	/**
	 * Attach a transform function to math.forEach
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */
	function factory (type, config, load, typed) {
	  var forEach = load(__webpack_require__(372));
	
	  return typed('forEach', {
	    'Array | Matrix, function': function (array, callback) {
	      // figure out what number of arguments the callback function expects
	      var args = maxArgumentCount(callback);
	
	      var recurse = function (value, index) {
	        if (Array.isArray(value)) {
	          value.forEach(function (child, i) {
	            // we create a copy of the index array and append the new index value
	            recurse(child, index.concat(i + 1)); // one based index, hence i+1
	          });
	        }
	        else {
	          // invoke the callback function with the right number of arguments
	          if (args === 1) {
	            callback(value);
	          }
	          else if (args === 2) {
	            callback(value, index);
	          }
	          else { // 3 or -1
	            callback(value, index, array);
	          }
	        }
	      };
	      recurse(array.valueOf(), []); // pass Array
	    }
	  });
	}
	
	exports.name = 'forEach';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ }),
/* 372 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var maxArgumentCount = __webpack_require__(96).maxArgumentCount;
	
	function factory (type, config, load, typed) {
	  /**
	   * Iterate over all elements of a matrix/array, and executes the given callback function.
	   *
	   * Syntax:
	   *
	   *    math.forEach(x, callback)
	   *
	   * Examples:
	   *
	   *    math.forEach([1, 2, 3], function(value) {
	   *      console.log(value);
	   *    });
	   *    // outputs 1, 2, 3
	   *
	   * See also:
	   *
	   *    filter, map, sort
	   *
	   * @param {Matrix | Array} x    The matrix to iterate on.
	   * @param {Function} callback   The callback function is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the Matrix/array being traversed.
	   */
	  var forEach = typed('forEach', {
	    'Array, function': _forEach,
	
	    'Matrix, function': function (x, callback) {
	      return x.forEach(callback);
	    }
	  });
	
	  forEach.toTex = undefined; // use default template
	
	  return forEach;
	}
	
	/**
	 * forEach for a multi dimensional array
	 * @param {Array} array
	 * @param {Function} callback
	 * @private
	 */
	function _forEach (array, callback) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount(callback);
	
	  var recurse = function (value, index) {
	    if (Array.isArray(value)) {
	      value.forEach(function (child, i) {
	        // we create a copy of the index array and append the new index value
	        recurse(child, index.concat(i));
	      });
	    }
	    else {
	      // invoke the callback function with the right number of arguments
	      if (args === 1) {
	        callback(value);
	      }
	      else if (args === 2) {
	        callback(value, index);
	      }
	      else { // 3 or -1
	        callback(value, index, array);
	      }
	    }
	  };
	  recurse(array, []);
	}
	
	exports.name = 'forEach';
	exports.factory = factory;


/***/ }),
/* 373 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Attach a transform function to math.index
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */
	function factory (type, config, load) {
	
	  return function indexTransform() {
	    var args = [];
	    for (var i = 0, ii = arguments.length; i < ii; i++) {
	      var arg = arguments[i];
	
	      // change from one-based to zero based, and convert BigNumber to number
	      if (arg && arg.isRange === true) {
	        arg.start--;
	        arg.end -= (arg.step > 0 ? 0 : 2);
	      }
	      else if (arg && arg.isSet === true) {
	        arg = arg.map(function (v) { return v - 1; });
	      }
	      else if (arg && (arg.isArray === true || arg.isMatrix)) {
	        arg = arg.map(function (v) { return v - 1; });
	      }
	      else if (typeof arg === 'number') {
	        arg--;
	      }
	      else if (arg && arg.isBigNumber === true) {
	        arg = arg.toNumber() - 1;
	      }
	      else if (typeof arg === 'string') {
	        // leave as is
	      }
	      else {
	        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
	      }
	
	      args[i] = arg;
	    }
	
	    var res = new type.Index();
	    type.Index.apply(res, args);
	    return res;
	  };
	}
	
	exports.name = 'index';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ }),
/* 374 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var maxArgumentCount = __webpack_require__(96).maxArgumentCount;
	
	/**
	 * Attach a transform function to math.map
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a one-based index instead of a zero-based index
	 */
	function factory (type, config, load, typed) {
	  var map = load(__webpack_require__(375));
	  var matrix = load(__webpack_require__(104));
	
	  return typed('max', {
	    'Array, function': function (x, callback) {
	      return _map(x, callback, x);
	    },
	
	    'Matrix, function': function (x, callback) {
	      return matrix(_map(x.valueOf(), callback, x));
	    }
	  });
	}
	
	/**
	 * Map for a multi dimensional array. One-based indexes
	 * @param {Array} array
	 * @param {function} callback
	 * @param {Array} orig
	 * @return {Array}
	 * @private
	 */
	function _map (array, callback, orig) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount(callback);
	
	  function recurse(value, index) {
	    if (Array.isArray(value)) {
	      return value.map(function (child, i) {
	        // we create a copy of the index array and append the new index value
	        return recurse(child, index.concat(i + 1)); // one based index, hence i + 1
	      });
	    }
	    else {
	      // invoke the callback function with the right number of arguments
	      if (args === 1) {
	        return callback(value);
	      }
	      else if (args === 2) {
	        return callback(value, index);
	      }
	      else { // 3 or -1
	        return callback(value, index, orig);
	      }
	    }
	  }
	
	  return recurse(array, []);
	}
	
	exports.name = 'map';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ }),
/* 375 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var maxArgumentCount = __webpack_require__(96).maxArgumentCount;
	
	function factory (type, config, load, typed) {
	  /**
	   * Create a new matrix or array with the results of the callback function executed on
	   * each entry of the matrix/array.
	   *
	   * Syntax:
	   *
	   *    math.map(x, callback)
	   *
	   * Examples:
	   *
	   *    math.map([1, 2, 3], function(value) {
	   *      return value * value;
	   *    });  // returns [1, 4, 9]
	   *
	   * See also:
	   *
	   *    filter, forEach, sort
	   *
	   * @param {Matrix | Array} x    The matrix to iterate on.
	   * @param {Function} callback   The callback method is invoked with three
	   *                              parameters: the value of the element, the index
	   *                              of the element, and the matrix being traversed.
	   * @return {Matrix | array}     Transformed map of x
	   */
	  var map = typed('map', {
	    'Array, function': _map,
	
	    'Matrix, function': function (x, callback) {
	      return x.map(callback);
	    }
	  });
	
	  map.toTex = undefined; // use default template
	
	  return map;
	}
	
	/**
	 * Map for a multi dimensional array
	 * @param {Array} array
	 * @param {Function} callback
	 * @return {Array}
	 * @private
	 */
	function _map (array, callback) {
	  // figure out what number of arguments the callback function expects
	  var args = maxArgumentCount(callback);
	
	  var recurse = function (value, index) {
	    if (Array.isArray(value)) {
	      return value.map(function (child, i) {
	        // we create a copy of the index array and append the new index value
	        return recurse(child, index.concat(i));
	      });
	    }
	    else {
	      // invoke the callback function with the right number of arguments
	      if (args === 1) {
	        return callback(value);
	      }
	      else if (args === 2) {
	        return callback(value, index);
	      }
	      else { // 3 or -1
	        return callback(value, index, array);
	      }
	    }
	  };
	
	  return recurse(array, []);
	}
	
	exports.name = 'map';
	exports.factory = factory;


/***/ }),
/* 376 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var errorTransform = __webpack_require__(342).transform;
	var isCollection = __webpack_require__(377);
	
	/**
	 * Attach a transform function to math.max
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function max
	 * from one-based to zero based
	 */
	function factory (type, config, load, typed) {
	  var max = load(__webpack_require__(378));
	
	  return typed('max', {
	    '...any': function (args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length == 2 && isCollection(args[0])) {
	        var dim = args[1];
	        if (typeof dim === 'number') {
	          args[1] = dim - 1;
	        }
	        else if (dim && dim.isBigNumber === true) {
	          args[1] = dim.minus(1);
	        }
	      }
	
	      try {
	        return max.apply(null, args);
	      }
	      catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}
	
	exports.name = 'max';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ }),
/* 377 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Test whether a value is a collection: an Array or Matrix
	 * @param {*} x
	 * @returns {boolean} isCollection
	 */
	module.exports = function isCollection (x) {
	  return (Array.isArray(x) || (x && x.isMatrix === true));
	};


/***/ }),
/* 378 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepForEach = __webpack_require__(379);
	var reduce = __webpack_require__(380);
	var containsCollections = __webpack_require__(381);
	
	function factory (type, config, load, typed) {
	  var larger = load(__webpack_require__(116));
	
	  /**
	   * Compute the maximum value of a matrix or a  list with values.
	   * In case of a multi dimensional array, the maximum of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.max(a, b, c, ...)
	   *     math.max(A)
	   *     math.max(A, dim)
	   *
	   * Examples:
	   *
	   *     math.max(2, 1, 4, 3);                  // returns 4
	   *     math.max([2, 1, 4, 3]);                // returns 4
	   *
	   *     // maximum over a specified dimension (zero-based)
	   *     math.max([[2, 5], [4, 3], [1, 7]], 0); // returns [4, 7]
	   *     math.max([[2, 5], [4, 3]], [1, 7], 1); // returns [5, 4, 7]
	   *
	   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1
	   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5
	   *
	   * See also:
	   *
	   *    mean, median, min, prod, std, sum, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The maximum value
	   */
	  var max = typed('max', {
	    // max([a, b, c, d, ...])
	    'Array | Matrix': _max,
	
	    // max([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function (array, dim) {
	      return reduce(array, dim.valueOf(), _largest);
	    },
	
	    // max(a, b, c, d, ...)
	    '...': function (args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function max');
	      }
	
	      return _max(args);
	    }
	  });
	
	  max.toTex = '\\max\\left(${args}\\right)';
	
	  return max;
	
	  /**
	   * Return the largest of two values
	   * @param {*} x
	   * @param {*} y
	   * @returns {*} Returns x when x is largest, or y when y is largest
	   * @private
	   */
	  function _largest(x, y){
	    return larger(x, y) ? x : y;
	  }
	
	  /**
	   * Recursively calculate the maximum value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} max
	   * @private
	   */
	  function _max(array) {
	    var max = undefined;
	
	    deepForEach(array, function (value) {
	      if (max === undefined || larger(value, max)) {
	        max = value;
	      }
	    });
	
	    if (max === undefined) {
	      throw new Error('Cannot calculate max of an empty array');
	    }
	
	    return max;
	  }
	}
	
	exports.name = 'max';
	exports.factory = factory;


/***/ }),
/* 379 */
/***/ (function(module, exports) {

	'use strict';
	
	/**
	 * Recursively loop over all elements in a given multi dimensional array
	 * and invoke the callback on each of the elements.
	 * @param {Array | Matrix} array
	 * @param {Function} callback     The callback method is invoked with one
	 *                                parameter: the current element in the array
	 */
	module.exports = function deepForEach (array, callback) {
	  if (array && array.isMatrix === true) {
	    array = array.valueOf();
	  }
	
	  for (var i = 0, ii = array.length; i < ii; i++) {
	    var value = array[i];
	
	    if (Array.isArray(value)) {
	      deepForEach(value, callback);
	    }
	    else {
	      callback(value);
	    }
	  }
	};


/***/ }),
/* 380 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var arraySize = __webpack_require__(91).size;
	var IndexError = __webpack_require__(94);
	
	/**
	 * Reduce a given matrix or array to a new matrix or
	 * array with one less dimension, applying the given
	 * callback in the selected dimension.
	 * @param {Array | Matrix} mat
	 * @param {number} dim
	 * @param {Function} callback
	 * @return {Array | Matrix} res
	 */
	module.exports = function(mat, dim, callback) {
	  var size = Array.isArray(mat) ? arraySize(mat) : mat.size();
	  if (dim < 0 || (dim >= size.length)) {
	    // TODO: would be more clear when throwing a DimensionError here
	    throw new IndexError(dim, size.length);
	  }
	
	  if (mat && mat.isMatrix === true) {
	    return mat.create(_reduce(mat.valueOf(), dim, callback));
	  }else {
	    return _reduce(mat, dim, callback);
	  }
	};
	
	/**
	 * Recursively reduce a matrix
	 * @param {Array} mat
	 * @param {number} dim
	 * @param {Function} callback
	 * @returns {Array} ret
	 * @private
	 */
	function _reduce(mat, dim, callback){
	  var i, ret, val, tran;
	
	  if(dim<=0){
	    if( !Array.isArray(mat[0]) ){
	      val = mat[0];
	      for(i=1; i<mat.length; i++){
	        val = callback(val, mat[i]);
	      }
	      return val;
	    }else{
	      tran = _switch(mat);
	      ret = [];
	      for(i=0; i<tran.length; i++){
	        ret[i] = _reduce(tran[i], dim-1, callback);
	      }
	      return ret;
	    }
	  }else{
	    ret = [];
	    for(i=0; i<mat.length; i++){
	      ret[i] = _reduce(mat[i], dim-1, callback);
	    }
	    return ret;
	  }
	}
	
	/**
	 * Transpose a matrix
	 * @param {Array} mat
	 * @returns {Array} ret
	 * @private
	 */
	function _switch(mat){
	  var I = mat.length;
	  var J = mat[0].length;
	  var i, j;
	  var ret = [];
	  for( j=0; j<J; j++) {
	    var tmp = [];
	    for( i=0; i<I; i++) {
	      tmp.push(mat[i][j]);
	    }
	    ret.push(tmp);
	  }
	  return ret;
	}


/***/ }),
/* 381 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isCollection = __webpack_require__(377);
	
	/**
	 * Test whether an array contains collections
	 * @param {Array} array
	 * @returns {boolean} Returns true when the array contains one or multiple
	 *                    collections (Arrays or Matrices). Returns false otherwise.
	 */
	module.exports = function containsCollections (array) {
	  for (var i = 0; i < array.length; i++) {
	    if (isCollection(array[i])) {
	      return true;
	    }
	  }
	  return false;
	};


/***/ }),
/* 382 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var errorTransform = __webpack_require__(342).transform;
	var isCollection = __webpack_require__(377);
	
	/**
	 * Attach a transform function to math.mean
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function mean
	 * from one-based to zero based
	 */
	function factory (type, config, load, typed) {
	  var mean = load(__webpack_require__(383));
	
	  return typed('mean', {
	    '...any': function (args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length == 2 && isCollection(args[0])) {
	        var dim = args[1];
	        if (typeof dim === 'number') {
	          args[1] = dim - 1;
	        }
	        else if (dim && dim.isBigNumber === true) {
	          args[1] = dim.minus(1);
	        }
	      }
	
	      try {
	        return mean.apply(null, args);
	      }
	      catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}
	
	exports.name = 'mean';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ }),
/* 383 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var size = __webpack_require__(91).size;
	var deepForEach = __webpack_require__(379);
	var reduce = __webpack_require__(380);
	var containsCollections = __webpack_require__(381);
	
	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(103));
	  var divide = load(__webpack_require__(384));
	
	  /**
	   * Compute the mean value of matrix or a list with values.
	   * In case of a multi dimensional array, the mean of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.mean(a, b, c, ...)
	   *     math.mean(A)
	   *     math.mean(A, dim)
	   *
	   * Examples:
	   *
	   *     math.mean(2, 1, 4, 3);                     // returns 2.5
	   *     math.mean([1, 2.7, 3.2, 4]);               // returns 2.725
	   *
	   *     math.mean([[2, 5], [6, 3], [1, 7]], 0);    // returns [3, 5]
	   *     math.mean([[2, 5], [6, 3], [1, 7]], 1);    // returns [3.5, 4.5, 4]
	   *
	   * See also:
	   *
	   *     median, min, max, sum, prod, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The mean of all values
	   */
	  var mean = typed('mean', {
	      // mean([a, b, c, d, ...])
	    'Array | Matrix': _mean,
	
	      // mean([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': _nmean,
	
	    // mean(a, b, c, d, ...)
	    '...': function (args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function mean');
	      }
	
	      return _mean(args);
	    }
	  });
	
	  mean.toTex = undefined; // use default template
	
	  return mean;
	
	  /**
	   * Calculate the mean value in an n-dimensional array, returning a
	   * n-1 dimensional array
	   * @param {Array} array
	   * @param {number} dim
	   * @return {number} mean
	   * @private
	   */
	  function _nmean(array, dim){
	    var sum = reduce(array, dim, add);
	    var s = Array.isArray(array) ? size(array) : array.size();
	    return divide(sum, s[dim]);
	  }
	
	  /**
	   * Recursively calculate the mean value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} mean
	   * @private
	   */
	  function _mean(array) {
	    var sum = 0;
	    var num = 0;
	
	    deepForEach(array, function (value) {
	      sum = add(sum, value);
	      num++;
	    });
	
	    if (num === 0) {
	      throw new Error('Cannot calculate mean of an empty array');
	    }
	
	    return divide(sum, num);
	  }
	}
	
	exports.name = 'mean';
	exports.factory = factory;


/***/ }),
/* 384 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var extend = __webpack_require__(55).extend;
	
	function factory (type, config, load, typed) {
	
	  var divideScalar = load(__webpack_require__(133));
	  var multiply     = load(__webpack_require__(136));
	  var inv          = load(__webpack_require__(385));
	  var matrix       = load(__webpack_require__(104));
	
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm14 = load(__webpack_require__(110));
	  
	  /**
	   * Divide two values, `x / y`.
	   * To divide matrices, `x` is multiplied with the inverse of `y`: `x * inv(y)`.
	   *
	   * Syntax:
	   *
	   *    math.divide(x, y)
	   *
	   * Examples:
	   *
	   *    math.divide(2, 3);            // returns number 0.6666666666666666
	   *
	   *    var a = math.complex(5, 14);
	   *    var b = math.complex(4, 1);
	   *    math.divide(a, b);            // returns Complex 2 + 3i
	   *
	   *    var c = [[7, -6], [13, -4]];
	   *    var d = [[1, 2], [4, 3]];
	   *    math.divide(c, d);            // returns Array [[-9, 4], [-11, 6]]
	   *
	   *    var e = math.unit('18 km');
	   *    math.divide(e, 4.5);          // returns Unit 4 km
	   *
	   * See also:
	   *
	   *    multiply
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x   Numerator
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} y          Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                      Quotient, `x / y`
	   */
	  var divide = typed('divide', extend({
	    // we extend the signatures of divideScalar with signatures dealing with matrices
	
	    'Array | Matrix, Array | Matrix': function (x, y) {
	      // TODO: implement matrix right division using pseudo inverse
	      // http://www.mathworks.nl/help/matlab/ref/mrdivide.html
	      // http://www.gnu.org/software/octave/doc/interpreter/Arithmetic-Ops.html
	      // http://stackoverflow.com/questions/12263932/how-does-gnu-octave-matrix-division-work-getting-unexpected-behaviour
	      return multiply(x, inv(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	
	      // process storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, divideScalar, false);
	          break;
	        case 'dense':
	          c = algorithm14(x, y, divideScalar, false);
	          break;
	      }
	      return c;
	    },
	    
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
	    },
	
	    'any, Array | Matrix': function (x, y) {
	      return multiply(x, inv(y));
	    }
	  }, divideScalar.signatures));
	
	  divide.toTex = {2: '\\frac{${args[0]}}{${args[1]}}'};
	
	  return divide;
	}
	
	exports.name = 'divide';
	exports.factory = factory;


/***/ }),
/* 385 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(90);
	
	function factory (type, config, load, typed) {
	  var matrix       = load(__webpack_require__(104));
	  var divideScalar = load(__webpack_require__(133));
	  var addScalar    = load(__webpack_require__(105));
	  var multiply     = load(__webpack_require__(136));
	  var unaryMinus   = load(__webpack_require__(130));
	  var det          = load(__webpack_require__(386));
	  var eye          = load(__webpack_require__(135));
	
	  /**
	   * Calculate the inverse of a square matrix.
	   *
	   * Syntax:
	   *
	   *     math.inv(x)
	   *
	   * Examples:
	   *
	   *     math.inv([[1, 2], [3, 4]]);  // returns [[-2, 1], [1.5, -0.5]]
	   *     math.inv(4);                 // returns 0.25
	   *     1 / 4;                       // returns 0.25
	   *
	   * See also:
	   *
	   *     det, transpose
	   *
	   * @param {number | Complex | Array | Matrix} x     Matrix to be inversed
	   * @return {number | Complex | Array | Matrix} The inverse of `x`.
	   */
	  var inv = typed('inv', {
	    'Array | Matrix': function (x) {
	      var size = (x.isMatrix === true) ? x.size() : util.array.size(x);
	      switch (size.length) {
	        case 1:
	          // vector
	          if (size[0] == 1) {
	            if (x.isMatrix === true) {
	              return matrix([
	                divideScalar(1, x.valueOf()[0])
	              ]);
	            }
	            else {
	              return [
	                divideScalar(1, x[0])
	              ];
	            }
	          }
	          else {
	            throw new RangeError('Matrix must be square ' +
	            '(size: ' + util.string.format(size) + ')');
	          }
	
	        case 2:
	          // two dimensional array
	          var rows = size[0];
	          var cols = size[1];
	          if (rows == cols) {
	            if (x.isMatrix === true) {
	              return matrix(
	                  _inv(x.valueOf(), rows, cols),
	                  x.storage()
	              );
	            }
	            else {
	              // return an Array
	              return _inv(x, rows, cols);
	            }
	          }
	          else {
	            throw new RangeError('Matrix must be square ' +
	            '(size: ' + util.string.format(size) + ')');
	          }
	
	        default:
	          // multi dimensional array
	          throw new RangeError('Matrix must be two dimensional ' +
	          '(size: ' + util.string.format(size) + ')');
	      }
	    },
	
	    'any': function (x) {
	      // scalar
	      return divideScalar(1, x); // FIXME: create a BigNumber one when configured for bignumbers
	    }
	  });
	
	  /**
	   * Calculate the inverse of a square matrix
	   * @param {Array[]} mat     A square matrix
	   * @param {number} rows     Number of rows
	   * @param {number} cols     Number of columns, must equal rows
	   * @return {Array[]} inv    Inverse matrix
	   * @private
	   */
	  function _inv (mat, rows, cols){
	    var r, s, f, value, temp;
	
	    if (rows == 1) {
	      // this is a 1 x 1 matrix
	      value = mat[0][0];
	      if (value == 0) {
	        throw Error('Cannot calculate inverse, determinant is zero');
	      }
	      return [[
	        divideScalar(1, value)
	      ]];
	    }
	    else if (rows == 2) {
	      // this is a 2 x 2 matrix
	      var d = det(mat);
	      if (d == 0) {
	        throw Error('Cannot calculate inverse, determinant is zero');
	      }
	      return [
	        [
	          divideScalar(mat[1][1], d),
	          divideScalar(unaryMinus(mat[0][1]), d)
	        ],
	        [
	          divideScalar(unaryMinus(mat[1][0]), d),
	          divideScalar(mat[0][0], d)
	        ]
	      ];
	    }
	    else {
	      // this is a matrix of 3 x 3 or larger
	      // calculate inverse using gauss-jordan elimination
	      //      http://en.wikipedia.org/wiki/Gaussian_elimination
	      //      http://mathworld.wolfram.com/MatrixInverse.html
	      //      http://math.uww.edu/~mcfarlat/inverse.htm
	
	      // make a copy of the matrix (only the arrays, not of the elements)
	      var A = mat.concat();
	      for (r = 0; r < rows; r++) {
	        A[r] = A[r].concat();
	      }
	
	      // create an identity matrix which in the end will contain the
	      // matrix inverse
	      var B = eye(rows).valueOf();
	
	      // loop over all columns, and perform row reductions
	      for (var c = 0; c < cols; c++) {
	        // element Acc should be non zero. if not, swap content
	        // with one of the lower rows
	        r = c;
	        while (r < rows && A[r][c] == 0) {
	          r++;
	        }
	        if (r == rows || A[r][c] == 0) {
	          // TODO: in case of zero det, just return a matrix wih Infinity values? (like octave)
	          throw Error('Cannot calculate inverse, determinant is zero');
	        }
	        if (r != c) {
	          temp = A[c]; A[c] = A[r]; A[r] = temp;
	          temp = B[c]; B[c] = B[r]; B[r] = temp;
	        }
	
	        // eliminate non-zero values on the other rows at column c
	        var Ac = A[c],
	            Bc = B[c];
	        for (r = 0; r < rows; r++) {
	          var Ar = A[r],
	              Br = B[r];
	          if(r != c) {
	            // eliminate value at column c and row r
	            if (Ar[c] != 0) {
	              f = divideScalar(unaryMinus(Ar[c]), Ac[c]);
	
	              // add (f * row c) to row r to eliminate the value
	              // at column c
	              for (s = c; s < cols; s++) {
	                Ar[s] = addScalar(Ar[s], multiply(f, Ac[s]));
	              }
	              for (s = 0; s < cols; s++) {
	                Br[s] = addScalar(Br[s],  multiply(f, Bc[s]));
	              }
	            }
	          }
	          else {
	            // normalize value at Acc to 1,
	            // divide each value on row r with the value at Acc
	            f = Ac[c];
	            for (s = c; s < cols; s++) {
	              Ar[s] = divideScalar(Ar[s], f);
	            }
	            for (s = 0; s < cols; s++) {
	              Br[s] = divideScalar(Br[s], f);
	            }
	          }
	        }
	      }
	      return B;
	    }
	  }
	
	  inv.toTex = {1: '\\left(${args[0]}\\right)^{-1}'};
	
	  return inv;
	}
	
	exports.name = 'inv';
	exports.factory = factory;


/***/ }),
/* 386 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(90);
	var object = util.object;
	var string = util.string;
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	  var add = load(__webpack_require__(103));
	  var subtract = load(__webpack_require__(129));
	  var multiply = load(__webpack_require__(136));
	  var unaryMinus = load(__webpack_require__(130));
	
	  /**
	   * Calculate the determinant of a matrix.
	   *
	   * Syntax:
	   *
	   *    math.det(x)
	   *
	   * Examples:
	   *
	   *    math.det([[1, 2], [3, 4]]); // returns -2
	   *
	   *    var A = [
	   *      [-2, 2, 3],
	   *      [-1, 1, 3],
	   *      [2, 0, -1]
	   *    ]
	   *    math.det(A); // returns 6
	   *
	   * See also:
	   *
	   *    inv
	   *
	   * @param {Array | Matrix} x  A matrix
	   * @return {number} The determinant of `x`
	   */
	  var det = typed('det', {
	    'any': function (x) {
	      return object.clone(x);
	    },
	
	    'Array | Matrix': function det (x) {
	      var size;
	      if (x && x.isMatrix === true) {
	        size = x.size();
	      }
	      else if (Array.isArray(x)) {
	        x = matrix(x);
	        size = x.size();
	      }
	      else {
	        // a scalar
	        size = [];
	      }
	
	      switch (size.length) {
	        case 0:
	          // scalar
	          return object.clone(x);
	
	        case 1:
	          // vector
	          if (size[0] == 1) {
	            return object.clone(x.valueOf()[0]);
	          }
	          else {
	            throw new RangeError('Matrix must be square ' +
	            '(size: ' + string.format(size) + ')');
	          }
	
	        case 2:
	          // two dimensional array
	          var rows = size[0];
	          var cols = size[1];
	          if (rows == cols) {
	            return _det(x.clone().valueOf(), rows, cols);
	          }
	          else {
	            throw new RangeError('Matrix must be square ' +
	            '(size: ' + string.format(size) + ')');
	          }
	
	        default:
	          // multi dimensional array
	          throw new RangeError('Matrix must be two dimensional ' +
	          '(size: ' + string.format(size) + ')');
	      }
	    }
	  });
	
	  det.toTex = {1: '\\det\\left(${args[0]}\\right)'};
	
	  return det;
	
	  /**
	   * Calculate the determinant of a matrix
	   * @param {Array[]} matrix  A square, two dimensional matrix
	   * @param {number} rows     Number of rows of the matrix (zero-based)
	   * @param {number} cols     Number of columns of the matrix (zero-based)
	   * @returns {number} det
	   * @private
	   */
	  function _det (matrix, rows, cols) {
	    if (rows == 1) {
	      // this is a 1 x 1 matrix
	      return object.clone(matrix[0][0]);
	    }
	    else if (rows == 2) {
	      // this is a 2 x 2 matrix
	      // the determinant of [a11,a12;a21,a22] is det = a11*a22-a21*a12
	      return subtract(
	          multiply(matrix[0][0], matrix[1][1]),
	          multiply(matrix[1][0], matrix[0][1])
	      );
	    }
	    else {
	      // this is an n x n matrix
	      var compute_mu = function (matrix) {
	        var i, j;
	
	        // Compute the matrix with zero lower triangle, same upper triangle,
	        // and diagonals given by the negated sum of the below diagonal
	        // elements.
	        var mu = new Array(matrix.length);
	        var sum = 0;
	        for (i = 1; i < matrix.length; i++) {
	          sum = add(sum, matrix[i][i]);
	        }
	
	        for (i = 0; i < matrix.length; i++) {
	          mu[i] = new Array(matrix.length);
	          mu[i][i] = unaryMinus(sum);
	
	          for (j = 0; j < i; j++) {
	            mu[i][j] = 0; // TODO: make bignumber 0 in case of bignumber computation
	          }
	
	          for (j = i + 1; j < matrix.length; j++) {
	            mu[i][j] = matrix[i][j];
	          }
	
	          if (i+1 < matrix.length) {
	            sum = subtract(sum, matrix[i + 1][i + 1]);
	          }
	        }
	
	        return mu;
	      };
	
	      var fa = matrix;
	      for (var i = 0; i < rows - 1; i++) {
	        fa = multiply(compute_mu(fa), matrix);
	      }
	
	      if (rows % 2 == 0) {
	        return unaryMinus(fa[0][0]);
	      } else {
	        return fa[0][0];
	      }
	    }
	  }
	}
	
	exports.name = 'det';
	exports.factory = factory;
	


/***/ }),
/* 387 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var errorTransform = __webpack_require__(342).transform;
	var isCollection = __webpack_require__(377);
	
	/**
	 * Attach a transform function to math.min
	 * Adds a property transform containing the transform function.
	 *
	 * This transform changed the last `dim` parameter of function min
	 * from one-based to zero based
	 */
	function factory (type, config, load, typed) {
	  var min = load(__webpack_require__(388));
	
	  return typed('min', {
	    '...any': function (args) {
	      // change last argument dim from one-based to zero-based
	      if (args.length == 2 && isCollection(args[0])) {
	        var dim = args[1];
	        if (typeof dim === 'number') {
	          args[1] = dim - 1;
	        }
	        else if (dim && dim.isBigNumber === true) {
	          args[1] = dim.minus(1);
	        }
	      }
	
	      try {
	        return min.apply(null, args);
	      }
	      catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}
	
	exports.name = 'min';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ }),
/* 388 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepForEach = __webpack_require__(379);
	var reduce = __webpack_require__(380);
	var containsCollections = __webpack_require__(381);
	
	function factory (type, config, load, typed) {
	  var smaller = load(__webpack_require__(112));
	  
	  /**
	   * Compute the maximum value of a matrix or a  list of values.
	   * In case of a multi dimensional array, the maximum of the flattened array
	   * will be calculated. When `dim` is provided, the maximum over the selected
	   * dimension will be calculated. Parameter `dim` is zero-based.
	   *
	   * Syntax:
	   *
	   *     math.min(a, b, c, ...)
	   *     math.min(A)
	   *     math.min(A, dim)
	   *
	   * Examples:
	   *
	   *     math.min(2, 1, 4, 3);                  // returns 1
	   *     math.min([2, 1, 4, 3]);                // returns 1
	   *
	   *     // maximum over a specified dimension (zero-based)
	   *     math.min([[2, 5], [4, 3], [1, 7]], 0); // returns [1, 3]
	   *     math.min([[2, 5], [4, 3], [1, 7]], 1); // returns [2, 3, 1]
	   *
	   *     math.max(2.7, 7.1, -4.5, 2.0, 4.1);    // returns 7.1
	   *     math.min(2.7, 7.1, -4.5, 2.0, 4.1);    // returns -4.5
	   *
	   * See also:
	   *
	   *    mean, median, max, prod, std, sum, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The minimum value
	   */
	  var min = typed('min', {
	    // min([a, b, c, d, ...])
	    'Array | Matrix': _min,
	
	    // min([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function (array, dim) {
	      return reduce(array, dim.valueOf(), _smallest);
	    },
	
	    // min(a, b, c, d, ...)
	    '...': function (args) {
	      if (containsCollections(args)) {
	        throw new TypeError('Scalar values expected in function min');
	      }
	
	      return _min(args);
	    }
	  });
	
	  min.toTex = '\\min\\left(${args}\\right)';
	
	  return min;
	
	  /**
	   * Return the smallest of two values
	   * @param {*} x
	   * @param {*} y
	   * @returns {*} Returns x when x is smallest, or y when y is smallest
	   * @private
	   */
	  function _smallest(x, y) {
	    return smaller(x, y) ? x : y;
	  }
	
	  /**
	   * Recursively calculate the minimum value in an n-dimensional array
	   * @param {Array} array
	   * @return {number} min
	   * @private
	   */
	  function _min(array) {
	    var min = undefined;
	
	    deepForEach(array, function (value) {
	      if (min === undefined || smaller(value, min)) {
	        min = value;
	      }
	    });
	
	    if (min === undefined) {
	      throw new Error('Cannot calculate min of an empty array');
	    }
	
	    return min;
	  }
	}
	
	exports.name = 'min';
	exports.factory = factory;


/***/ }),
/* 389 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	/**
	 * Attach a transform function to math.range
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a range which includes the end value
	 */
	function factory (type, config, load, typed) {
	  var range = load(__webpack_require__(390));
	
	  return typed('range', {
	    '...any': function (args) {
	      var lastIndex = args.length - 1;
	      var last = args[lastIndex];
	      if (typeof last !== 'boolean') {
	        // append a parameter includeEnd=true
	        args.push(true);
	      }
	
	      return range.apply(null, args);
	    }
	  });
	}
	
	exports.name = 'range';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ }),
/* 390 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	
	  var ZERO = new type.BigNumber(0);
	  var ONE = new type.BigNumber(1);
	
	  /**
	   * Create an array from a range.
	   * By default, the range end is excluded. This can be customized by providing
	   * an extra parameter `includeEnd`.
	   *
	   * Syntax:
	   *
	   *     math.range(str [, includeEnd])               // Create a range from a string,
	   *                                                  // where the string contains the
	   *                                                  // start, optional step, and end,
	   *                                                  // separated by a colon.
	   *     math.range(start, end [, includeEnd])        // Create a range with start and
	   *                                                  // end and a step size of 1.
	   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,
	   *                                                  // and end.
	   *
	   * Where:
	   *
	   * - `str: string`
	   *   A string 'start:end' or 'start:step:end'
	   * - `start: {number | BigNumber}`
	   *   Start of the range
	   * - `end: number | BigNumber`
	   *   End of the range, excluded by default, included when parameter includeEnd=true
	   * - `step: number | BigNumber`
	   *   Step size. Default value is 1.
	   * - `includeEnd: boolean`
	   *   Option to specify whether to include the end or not. False by default.
	   *
	   * Examples:
	   *
	   *     math.range(2, 6);        // [2, 3, 4, 5]
	   *     math.range(2, -3, -1);   // [2, 1, 0, -1, -2]
	   *     math.range('2:1:6');     // [2, 3, 4, 5]
	   *     math.range(2, 6, true);  // [2, 3, 4, 5, 6]
	   *
	   * See also:
	   *
	   *     ones, zeros, size, subset
	   *
	   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.
	   * @return {Array | Matrix} range
	   */
	  var range = typed('range', {
	    // TODO: simplify signatures when typed-function supports default values and optional arguments
	
	    // TODO: a number or boolean should not be converted to string here
	    'string': _strRange,
	    'string, boolean': _strRange,
	
	    'number, number':  function (start, end) {
	      return _out(_rangeEx(start, end, 1));
	    },
	    'number, number, number': function (start, end, step) {
	      return _out(_rangeEx(start, end, step));
	    },
	    'number, number, boolean': function (start, end, includeEnd) {
	      return includeEnd
	          ? _out(_rangeInc(start, end, 1))
	          : _out(_rangeEx(start, end, 1));
	    },
	    'number, number, number, boolean': function (start, end, step, includeEnd) {
	      return includeEnd
	          ? _out(_rangeInc(start, end, step))
	          : _out(_rangeEx(start, end, step));
	    },
	
	    'BigNumber, BigNumber':  function (start, end) {
	      return _out(_bigRangeEx(start, end, ONE));
	    },
	    'BigNumber, BigNumber, BigNumber': function (start, end, step) {
	      return _out(_bigRangeEx(start, end, step));
	    },
	    'BigNumber, BigNumber, boolean': function (start, end, includeEnd) {
	      return includeEnd
	          ? _out(_bigRangeInc(start, end, ONE))
	          : _out(_bigRangeEx(start, end, ONE));
	    },
	    'BigNumber, BigNumber, BigNumber, boolean': function (start, end, step, includeEnd) {
	      return includeEnd
	          ? _out(_bigRangeInc(start, end, step))
	          : _out(_bigRangeEx(start, end, step));
	    }
	
	  });
	
	  range.toTex = undefined; // use default template
	
	  return range;
	
	  function _out(arr) {
	    return config.matrix === 'Array' ? arr : matrix(arr);
	  }
	
	  function _strRange (str, includeEnd) {
	    var r = _parse(str);
	    if (!r){
	      throw new SyntaxError('String "' + str + '" is no valid range');
	    }
	
	    var fn;
	    if (config.number === 'BigNumber') {
	      fn = includeEnd ? _bigRangeInc : _bigRangeEx;
	      return _out(fn(
	          new type.BigNumber(r.start),
	          new type.BigNumber(r.end),
	          new type.BigNumber(r.step)));
	    }
	    else {
	      fn = includeEnd ? _rangeInc : _rangeEx;
	      return _out(fn(r.start, r.end, r.step));
	    }
	  }
	
	  /**
	   * Create a range with numbers. End is excluded
	   * @param {number} start
	   * @param {number} end
	   * @param {number} step
	   * @returns {Array} range
	   * @private
	   */
	  function _rangeEx (start, end, step) {
	    var array = [],
	        x = start;
	    if (step > 0) {
	      while (x < end) {
	        array.push(x);
	        x += step;
	      }
	    }
	    else if (step < 0) {
	      while (x > end) {
	        array.push(x);
	        x += step;
	      }
	    }
	
	    return array;
	  }
	
	  /**
	   * Create a range with numbers. End is included
	   * @param {number} start
	   * @param {number} end
	   * @param {number} step
	   * @returns {Array} range
	   * @private
	   */
	  function _rangeInc (start, end, step) {
	    var array = [],
	        x = start;
	    if (step > 0) {
	      while (x <= end) {
	        array.push(x);
	        x += step;
	      }
	    }
	    else if (step < 0) {
	      while (x >= end) {
	        array.push(x);
	        x += step;
	      }
	    }
	
	    return array;
	  }
	
	  /**
	   * Create a range with big numbers. End is excluded
	   * @param {BigNumber} start
	   * @param {BigNumber} end
	   * @param {BigNumber} step
	   * @returns {Array} range
	   * @private
	   */
	  function _bigRangeEx (start, end, step) {
	    var array = [],
	        x = start;
	    if (step.gt(ZERO)) {
	      while (x.lt(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }
	    else if (step.lt(ZERO)) {
	      while (x.gt(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }
	
	    return array;
	  }
	
	  /**
	   * Create a range with big numbers. End is included
	   * @param {BigNumber} start
	   * @param {BigNumber} end
	   * @param {BigNumber} step
	   * @returns {Array} range
	   * @private
	   */
	  function _bigRangeInc (start, end, step) {
	    var array = [],
	        x = start;
	    if (step.gt(ZERO)) {
	      while (x.lte(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }
	    else if (step.lt(ZERO)) {
	      while (x.gte(end)) {
	        array.push(x);
	        x = x.plus(step);
	      }
	    }
	
	    return array;
	  }
	
	  /**
	   * Parse a string into a range,
	   * The string contains the start, optional step, and end, separated by a colon.
	   * If the string does not contain a valid range, null is returned.
	   * For example str='0:2:11'.
	   * @param {string} str
	   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step
	   * @private
	   */
	  function _parse (str) {
	    var args = str.split(':');
	
	    // number
	    var nums = args.map(function (arg) {
	      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string
	      return Number(arg);
	    });
	
	    var invalid = nums.some(function (num) {
	      return isNaN(num);
	    });
	    if(invalid) {
	      return null;
	    }
	
	    switch (nums.length) {
	      case 2:
	        return {
	          start: nums[0],
	          end: nums[1],
	          step: 1
	        };
	
	      case 3:
	        return {
	          start: nums[0],
	          end: nums[2],
	          step: nums[1]
	        };
	
	      default:
	        return null;
	    }
	  }
	
	}
	
	exports.name = 'range';
	exports.factory = factory;


/***/ }),
/* 391 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var errorTransform = __webpack_require__(342).transform;
	
	/**
	 * Attach a transform function to math.subset
	 * Adds a property transform containing the transform function.
	 *
	 * This transform creates a range which includes the end value
	 */
	function factory (type, config, load, typed) {
	  var subset = load(__webpack_require__(343));
	
	  return typed('subset', {
	    '...any': function (args) {
	      try {
	        return subset.apply(null, args);
	      }
	      catch (err) {
	        throw errorTransform(err);
	      }
	    }
	  });
	}
	
	exports.name = 'subset';
	exports.path = 'expression.transform';
	exports.factory = factory;


/***/ }),
/* 392 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var object = __webpack_require__(55);
	var string = __webpack_require__(74);
	
	function factory (type, config, load, typed) {
	  var parser = load(__webpack_require__(362))();
	
	  /**
	   * Documentation object
	   * @param {Object} doc  Object containing properties:
	   *                      {string} name
	   *                      {string} category
	   *                      {string} description
	   *                      {string[]} syntax
	   *                      {string[]} examples
	   *                      {string[]} seealso
	   * @constructor
	   */
	  function Help(doc) {
	    if (!(this instanceof Help)) {
	      throw new SyntaxError('Constructor must be called with the new operator');
	    }
	
	    if (!doc)  throw new Error('Argument "doc" missing');
	
	    this.doc = doc;
	  }
	
	  /**
	   * Attach type information
	   */
	  Help.prototype.type = 'Help';
	  Help.prototype.isHelp = true;
	
	  /**
	   * Generate a string representation of the Help object
	   * @return {string} Returns a string
	   * @private
	   */
	  Help.prototype.toString = function () {
	    var doc = this.doc || {};
	    var desc = '\n';
	
	    if (doc.name) {
	      desc += 'Name: ' + doc.name + '\n\n';
	    }
	    if (doc.category) {
	      desc += 'Category: ' + doc.category + '\n\n';
	    }
	    if (doc.description) {
	      desc += 'Description:\n    ' + doc.description + '\n\n';
	    }
	    if (doc.syntax) {
	      desc += 'Syntax:\n    ' + doc.syntax.join('\n    ') + '\n\n';
	    }
	    if (doc.examples) {
	      desc += 'Examples:\n';
	      for (var i = 0; i < doc.examples.length; i++) {
	        var expr = doc.examples[i];
	        desc += '    ' + expr + '\n';
	
	        var res;
	        try {
	          res = parser.eval(expr);
	        }
	        catch (e) {
	          res = e;
	        }
	        if (res && !res.isHelp) {
	          desc += '        ' + string.format(res, {precision: 14}) + '\n';
	        }
	      }
	      desc += '\n';
	    }
	    if (doc.seealso) {
	      desc += 'See also: ' + doc.seealso.join(', ') + '\n';
	    }
	
	    return desc;
	  };
	
	  /**
	   * Export the help object to JSON
	   */
	  Help.prototype.toJSON = function () {
	    var obj = object.clone(this.doc);
	    obj.mathjs = 'Help';
	    return obj;
	  };
	
	  /**
	   * Instantiate a Help object from a JSON object
	   * @param {Object} json
	   * @returns {Help} Returns a new Help object
	   */
	  Help.fromJSON = function (json) {
	    var doc = {};
	    for (var prop in json) {
	      if (prop !== 'mathjs') { // ignore mathjs field
	        doc[prop] = json[prop];
	      }
	    }
	    return new Help(doc);
	  };
	
	  /**
	   * Returns a string representation of the Help object
	   */
	  Help.prototype.valueOf = Help.prototype.toString;
	
	  return Help;
	}
	
	exports.name = 'Help';
	exports.path = 'type';
	exports.factory = factory;


/***/ }),
/* 393 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(394),
	  __webpack_require__(434),
	  __webpack_require__(461),
	  __webpack_require__(477),
	  __webpack_require__(486),
	  __webpack_require__(490),
	  __webpack_require__(493),
	  __webpack_require__(498),
	  __webpack_require__(512),
	  __webpack_require__(523),
	  __webpack_require__(526),
	  __webpack_require__(528),
	  __webpack_require__(536),
	  __webpack_require__(538),
	  __webpack_require__(564),
	  __webpack_require__(566)
	];


/***/ }),
/* 394 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(395),
	
	  // simplify
	  __webpack_require__(396),
	
	  // decomposition
	  __webpack_require__(399),
	  __webpack_require__(408),
	  __webpack_require__(409),
	
	  // solver
	  __webpack_require__(429),
	  __webpack_require__(431),
	  __webpack_require__(433)
	];


/***/ }),
/* 395 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var parse = load(__webpack_require__(336));
	  var simplify = load(__webpack_require__(396));
	  var ConstantNode = load(__webpack_require__(350));
	  var FunctionNode = load(__webpack_require__(357));
	  var OperatorNode = load(__webpack_require__(356));
	  var ParenthesisNode = load(__webpack_require__(358));
	  var SymbolNode = load(__webpack_require__(354));
	
	  /**
	   * Takes the derivative of an expression expressed in parser Nodes.
	   * The derivative will be taken over the supplied variable in the
	   * second parameter. If there are multiple variables in the expression,
	   * it will return a partial derivative.
	   *
	   * This uses rules of differentiation which can be found here:
	   *
	   * - [Differentiation rules (Wikipedia)](http://en.wikipedia.org/wiki/Differentiation_rules)
	   *
	   * Syntax:
	   *
	   *     derivative(expr, variable)
	   *     derivative(expr, variable, options)
	   *
	   * Examples:
	   *
	   *     math.derivative('x^2', 'x');                     // Node {2 * x}
	   *     math.derivative('x^2', 'x', {simplify: false});  // Node {2 * 1 * x ^ (2 - 1)
	   *     math.derivative('sin(2x)', 'x'));                // Node {2 * cos(2 * x)}
	   *     math.derivative('2*x', 'x').eval();              // number 2
	   *     math.derivative('x^2', 'x').eval({x: 4});        // number 8
	   *     var f = math.parse('x^2');
	   *     var x = math.parse('x');
	   *     math.derivative(f, x);                           // Node {2 * x}
	   *
	   * See also:
	   *
	   *     simplify, parse, eval
	   *
	   * @param  {Node | string} expr           The expression to differentiate
	   * @param  {SymbolNode | string} variable The variable over which to differentiate
	   * @param  {{simplify: boolean}} [options]
	   *                         There is one option available, `simplify`, which
	   *                         is true by default. When false, output will not
	   *                         be simplified.
	   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
	   */
	  var derivative = typed('derivative', {
	    'Node, SymbolNode, Object': function (expr, variable, options) {
	      var constNodes = {};
	      constTag(constNodes, expr, variable.name);
	      var res = _derivative(expr, constNodes);
	      return options.simplify ? simplify(res) : res;
	    },
	    'Node, SymbolNode': function (expr, variable) {
	      return derivative(expr, variable, {simplify: true})
	    },
	
	    'string, SymbolNode': function (expr, variable) {
	      return derivative(parse(expr), variable)
	    },
	    'string, SymbolNode, Object': function (expr, variable, options) {
	      return derivative(parse(expr), variable, options)
	    },
	
	    'string, string': function (expr, variable) {
	      return derivative(parse(expr), parse(variable))
	    },
	    'string, string, Object': function (expr, variable, options) {
	      return derivative(parse(expr), parse(variable), options)
	    },
	
	    'Node, string': function (expr, variable) {
	      return derivative(expr, parse(variable))
	    },
	    'Node, string, Object': function (expr, variable, options) {
	      return derivative(expr, parse(variable), options)
	    }
	
	    // TODO: replace the 8 signatures above with 4 as soon as typed-function supports optional arguments
	
	    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}
	    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {
	      var res = expr;
	      for (var i = 0; i < order; i++) {
	        var constNodes = {};
	        constTag(constNodes, expr, variable.name);
	        res = _derivative(res, constNodes);
	      }
	      return res;
	    }
	    */
	  });
	
	  derivative._simplify = true
	
	  derivative.toTex = function(deriv) {
	    return _derivTex.apply(null, deriv.args);
	  }
	
	  var _derivTex = typed('_derivTex', {
	    'Node, SymbolNode': function (expr, x) {
	      return _derivTex(expr.toString(), x.toString(), 1);
	    },
	    'Node, SymbolNode, ConstantNode': function (expr, x, order) {
	      return _derivTex(expr.toString(), x.name, order.value);
	    },
	    'string, string, number': function (expr, x, order) {
	      var d;
	      if (order === 1) {
	        d = "{d\\over d" + x + "}";
	      }
	      else {
	        d = "{d^{" + order + "}\\over d" + x + "^{" + order + "}}";
	      }
	      return d + "\\left[" + expr + "\\right]"
	    }
	  });
	
	  /**
	   * Does a depth-first search on the expression tree to identify what Nodes
	   * are constants (e.g. 2 + 2), and stores the ones that are constants in
	   * constNodes. Classification is done as follows:
	   *
	   *   1. ConstantNodes are constants.
	   *   2. If there exists a SymbolNode, of which we are differentiating over,
	   *      in the subtree it is not constant.
	   *
	   * @param  {Object} constNodes  Holds the nodes that are constant
	   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
	   * @param  {string} varName     Variable that we are differentiating
	   * @return {boolean}  if node is constant
	   */
	  // TODO: can we rewrite constTag into a pure function?
	  var constTag = typed('constTag', {
	    'Object, ConstantNode, string': function (constNodes, node) {
	      return constNodes[node] = true;
	    },
	
	    'Object, SymbolNode, string': function (constNodes, node, varName) {
	      // Treat other variables like constants. For reasoning, see:
	      //   https://en.wikipedia.org/wiki/Partial_derivative
	      if (node.name != varName) {
	        return constNodes[node] = true;
	      }
	      return false;
	    },
	
	    'Object, ParenthesisNode, string': function (constNodes, node, varName) {
	      return constTag(constNodes, node.content, varName);
	    },
	
	    'Object, FunctionAssignmentNode, string': function (constNodes, node, varName) {
	      if (node.params.indexOf(varName) == -1) {
	        return constNodes[node] = true;
	      }
	      return constTag(constNodes, node.expr, varName);
	    },
	
	    'Object, FunctionNode | OperatorNode, string': function (constNodes, node, varName) {
	      if (node.args.length != 0) {
	        var isConst = constTag(constNodes, node.args[0], varName);
	        for (var i = 1; i < node.args.length; ++i) {
	          isConst = constTag(constNodes, node.args[i], varName) && isConst;
	        }
	
	        if (isConst) {
	          return constNodes[node] = true;
	        }
	      }
	      return false;
	    }
	  });
	
	  /**
	   * Applies differentiation rules.
	   *
	   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
	   * @param  {Object} constNodes  Holds the nodes that are constant
	   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`
	   */
	  var _derivative = typed('_derivative', {
	    'ConstantNode, Object': function (node) {
	       return new ConstantNode('0', node.valueType);
	    },
	
	    'SymbolNode, Object': function (node, constNodes) {
	      if (constNodes[node] !== undefined) {
	        return new ConstantNode('0', config.number);
	      }
	      return new ConstantNode('1', config.number);
	    },
	
	    'ParenthesisNode, Object': function (node, constNodes) {
	      return new ParenthesisNode(_derivative(node.content, constNodes));
	    },
	
	    'FunctionAssignmentNode, Object': function (node, constNodes) {
	      if (constNodes[node] !== undefined) {
	        return new ConstantNode('0', config.number);
	      }
	      return _derivative(node.expr, constNodes);
	    },
	
	    'FunctionNode, Object': function (node, constNodes) {
	      if (node.args.length != 1) {
	        funcArgsCheck(node);
	      }
	
	      if (constNodes[node] !== undefined) {
	        return new ConstantNode('0', config.number);
	      }
	
	      var arg1 = node.args[0];
	      var arg2;
	
	      var div = false;       // is output a fraction?
	      var negative = false;  // is output negative?
	
	      var funcDerivative;
	      switch (node.name) {
	        case 'cbrt':
	          // d/dx(cbrt(x)) = 1 / (3x^(2/3))
	          div = true;
	          funcDerivative = new OperatorNode('*', 'multiply', [
	            new ConstantNode('3', config.number),
	            new OperatorNode('^', 'pow', [
	              arg1,
	              new OperatorNode('/', 'divide', [
	                new ConstantNode('2', config.number),
	                new ConstantNode('3', config.number)
	              ])
	            ])
	          ]);
	          break;
	        case 'sqrt':
	        case 'nthRoot':
	          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))
	          if (node.args.length == 1) {
	            div = true;
	            funcDerivative = new OperatorNode('*', 'multiply', [
	              new ConstantNode('2', config.number),
	              new FunctionNode('sqrt', [arg1])
	            ]);
	            break;
	          }
	
	          // Rearrange from nthRoot(x, a) -> x^(1/a)
	          arg2 = new OperatorNode('/', 'divide', [
	            new ConstantNode('1', config.number),
	            node.args[1]
	          ]);
	
	          // Is a variable?
	          constNodes[arg2] = constNodes[node.args[1]];
	
	          return _derivative(new OperatorNode('^', 'pow', [arg1, arg2]), constNodes);
	        case 'log10':
	          arg2 = new ConstantNode('10', config.number);
	        case 'log':
	          if (!arg2 && node.args.length == 1) {
	            // d/dx(log(x)) = 1 / x
	            funcDerivative = arg1.clone();
	          } else if (arg2 || constNodes[node.args[1]] !== undefined) {
	            // d/dx(log(x, c)) = 1 / (x*ln(c))
	            funcDerivative = new OperatorNode('*', 'multiply', [
	              arg1.clone(),
	              new FunctionNode('log', [arg2 || node.args[1]])
	            ]);
	          } else {
	            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))
	            return _derivative(new OperatorNode('/', 'divide', [
	                new FunctionNode('log', [arg1]),
	                new FunctionNode('log', [node.args[1]])
	              ]), constNodes);
	          }
	
	          div = true;
	          break;
	        case 'exp':
	          // d/dx(e^x) = e^x
	          funcDerivative = new FunctionNode('exp', [arg1.clone()]);
	          break;
	        case 'sin':
	          // d/dx(sin(x)) = cos(x)
	          funcDerivative = new FunctionNode('cos', [arg1.clone()]);
	          break;
	        case 'cos':
	          // d/dx(cos(x)) = -sin(x)
	          funcDerivative = new OperatorNode('-', 'unaryMinus', [
	            new FunctionNode('sin', [arg1.clone()])
	          ]);
	          break;
	        case 'tan':
	          // d/dx(tan(x)) = sec(x)^2
	          funcDerivative = new OperatorNode('^', 'pow', [
	            new FunctionNode('sec', [arg1.clone()]),
	            new ConstantNode('2', config.number)
	          ]);
	          break;
	        case 'sec':
	          // d/dx(sec(x)) = sec(x)tan(x)
	          funcDerivative = new OperatorNode('*', 'multiply', [
	            node,
	            new FunctionNode('tan', [arg1.clone()])
	          ]);
	          break;
	        case 'csc':
	          // d/dx(csc(x)) = -csc(x)cot(x)
	          negative = true;
	          funcDerivative = new OperatorNode('*', 'multiply', [
	            node,
	            new FunctionNode('cot', [arg1.clone()])
	          ]);
	          break;
	        case 'cot':
	          // d/dx(cot(x)) = -csc(x)^2
	          negative = true;
	          funcDerivative = new OperatorNode('^', 'pow', [
	            new FunctionNode('csc', [arg1.clone()]),
	            new ConstantNode('2', config.number)
	          ]);
	          break;
	        case 'asin':
	          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)
	          div = true;
	          funcDerivative = new FunctionNode('sqrt', [
	            new OperatorNode('-', 'subtract', [
	              new ConstantNode('1', config.number),
	              new OperatorNode('^', 'pow', [
	                arg1.clone(),
	                new ConstantNode('2', config.number)
	              ])
	            ])
	          ]);
	          break;
	        case 'acos':
	          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)
	          div = true;
	          negative = true;
	          funcDerivative = new FunctionNode('sqrt', [
	            new OperatorNode('-', 'subtract', [
	              new ConstantNode('1', config.number),
	              new OperatorNode('^', 'pow', [
	                arg1.clone(),
	                new ConstantNode('2', config.number)
	              ])
	            ])
	          ]);
	          break;
	        case 'atan':
	          // d/dx(atan(x)) = 1 / (x^2 + 1)
	          div = true;
	          funcDerivative = new OperatorNode('+', 'add', [
	            new OperatorNode('^', 'pow', [
	              arg1.clone(),
	              new ConstantNode('2', config.number)
	            ]),
	            new ConstantNode('1', config.number)
	          ]);
	          break;
	        case 'asec':
	          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))
	          div = true;
	          funcDerivative = new OperatorNode('*', 'multiply', [
	            new FunctionNode('abs', [arg1.clone()]),
	            new FunctionNode('sqrt', [
	              new OperatorNode('-', 'subtract', [
	                new OperatorNode('^', 'pow', [
	                  arg1.clone(),
	                  new ConstantNode('2', config.number)
	                ]),
	                new ConstantNode('1', config.number)
	              ])
	            ])
	          ]);
	          break;
	        case 'acsc':
	          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode('*', 'multiply', [
	            new FunctionNode('abs', [arg1.clone()]),
	            new FunctionNode('sqrt', [
	              new OperatorNode('-', 'subtract', [
	                new OperatorNode('^', 'pow', [
	                  arg1.clone(),
	                  new ConstantNode('2', config.number)
	                ]),
	                new ConstantNode('1', config.number)
	              ])
	            ])
	          ]);
	          break;
	        case 'acot':
	          // d/dx(acot(x)) = -1 / (x^2 + 1)
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode('+', 'add', [
	            new OperatorNode('^', 'pow', [
	              arg1.clone(),
	              new ConstantNode('2', config.number)
	            ]),
	            new ConstantNode('1', config.number)
	          ]);
	          break;
	        case 'sinh':
	          // d/dx(sinh(x)) = cosh(x)
	          funcDerivative = new FunctionNode('cosh', [arg1.clone()]);
	          break;
	        case 'cosh':
	          // d/dx(cosh(x)) = sinh(x)
	          funcDerivative = new FunctionNode('sinh', [arg1.clone()]);
	          break;
	        case 'tanh':
	          // d/dx(tanh(x)) = sech(x)^2
	          funcDerivative = new OperatorNode('^', 'pow', [
	            new FunctionNode('sech', [arg1.clone()]),
	            new ConstantNode('2', config.number)
	          ]);
	          break;
	        case 'sech':
	          // d/dx(sech(x)) = -sech(x)tanh(x)
	          negative = true;
	          funcDerivative = new OperatorNode('*', 'multiply', [
	            node,
	            new FunctionNode('tanh', [arg1.clone()])
	          ]);
	          break;
	        case 'csch':
	          // d/dx(csch(x)) = -csch(x)coth(x)
	          negative = true;
	          funcDerivative = new OperatorNode('*', 'multiply', [
	            node,
	            new FunctionNode('coth', [arg1.clone()])
	          ]);
	          break;
	        case 'coth':
	          // d/dx(coth(x)) = -csch(x)^2
	          negative = true;
	          funcDerivative = new OperatorNode('^', 'pow', [
	            new FunctionNode('csch', [arg1.clone()]),
	            new ConstantNode('2', config.number)
	          ]);
	          break;
	        case 'asinh':
	          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)
	          div = true;
	          funcDerivative = new FunctionNode('sqrt', [
	            new OperatorNode('+', 'add', [
	              new OperatorNode('^', 'pow', [
	                arg1.clone(),
	                new ConstantNode('2', config.number)
	              ]),
	              new ConstantNode('1', config.number)
	            ])
	          ]);
	          break;
	        case 'acosh':
	          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)
	          div = true;
	          funcDerivative = new FunctionNode('sqrt', [
	            new OperatorNode('-', 'subtract', [
	              new OperatorNode('^', 'pow', [
	                arg1.clone(),
	                new ConstantNode('2', config.number)
	              ]),
	              new ConstantNode('1', config.number),
	            ])
	          ]);
	          break;
	        case 'atanh':
	          // d/dx(atanh(x)) = 1 / (1 - x^2)
	          div = true;
	          funcDerivative = new OperatorNode('-', 'subtract', [
	            new ConstantNode('1', config.number),
	            new OperatorNode('^', 'pow', [
	              arg1.clone(),
	              new ConstantNode('2', config.number)
	            ])
	          ]);
	          break;
	        case 'asech':
	          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode('*', 'multiply', [
	            arg1.clone(),
	            new FunctionNode('sqrt', [
	              new OperatorNode('-', 'subtract', [
	                new ConstantNode('1', config.number),
	                new OperatorNode('^', 'pow', [
	                  arg1.clone(),
	                  new ConstantNode('2', config.number)
	                ])
	              ])
	            ])
	          ]);
	          break;
	        case 'acsch':
	          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode('*', 'multiply', [
	            new FunctionNode('abs', [arg1.clone()]),
	            new FunctionNode('sqrt', [
	              new OperatorNode('+', 'add', [
	                new OperatorNode('^', 'pow', [
	                  arg1.clone(),
	                  new ConstantNode('2', config.number)
	                ]),
	                new ConstantNode('1', config.number)
	              ])
	            ])
	          ]);
	          break;
	        case 'acoth':
	          // d/dx(acoth(x)) = -1 / (1 - x^2)
	          div = true;
	          negative = true;
	          funcDerivative = new OperatorNode('-', 'subtract', [
	            new ConstantNode('1', config.number),
	            new OperatorNode('^', 'pow', [
	              arg1.clone(),
	              new ConstantNode('2', config.number)
	            ])
	          ]);
	          break;
	        case 'gamma':  // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)
	        default: throw new Error('Function "' + node.name + '" not supported by derivative');
	      }
	
	      var op, func;
	      if (div) {
	        op = '/';
	        func = 'divide';
	      } else {
	        op = '*';
	        func = 'multiply';
	      }
	
	      /* Apply chain rule to all functions:
	         F(x)  = f(g(x))
	         F'(x) = g'(x)*f'(g(x)) */
	      var chainDerivative = _derivative(arg1, constNodes);
	      if (negative) {
	        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);
	      }
	      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);
	    },
	
	    'OperatorNode, Object': function (node, constNodes) {
	      if (constNodes[node] !== undefined) {
	        return new ConstantNode('0', config.number);
	      }
	
	      var arg1 = node.args[0];
	      var arg2 = node.args[1];
	
	      switch (node.op) {
	        case '+':
	        case '-':
	          // d/dx(+/-f(x)) = +/-f'(x)
	          if (node.args.length == 1) {
	            return new OperatorNode(node.op, node.fn, [_derivative(arg1, constNodes)]);
	          }
	
	          // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)
	          return new OperatorNode(node.op, node.fn, [
	            _derivative(arg1, constNodes),
	            _derivative(arg2, constNodes)
	          ]);
	        case '*':
	          // d/dx(c*f(x)) = c*f'(x)
	          if (constNodes[arg1] !== undefined || constNodes[arg2] !== undefined) {
	            var newArgs = (constNodes[arg1] !== undefined)
	              ? [arg1.clone(), _derivative(arg2, constNodes)]
	              : [arg2.clone(), _derivative(arg1, constNodes)];
	
	            return new OperatorNode('*', 'multiply', newArgs);
	          }
	
	          // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)
	          return new OperatorNode('+', 'add', [
	            new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), arg2.clone()]),
	            new OperatorNode('*', 'multiply', [arg1.clone(), _derivative(arg2, constNodes)])
	          ]);
	        case '/':
	          // d/dx(f(x) / c) = f'(x) / c
	          if (constNodes[arg2] !== undefined) {
	            return new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), arg2]);
	          }
	
	          // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)
	          if (constNodes[arg1] !== undefined) {
	            return new OperatorNode('*', 'multiply', [
	              new OperatorNode('-', 'unaryMinus', [arg1]),
	              new OperatorNode('/', 'divide', [
	                _derivative(arg2, constNodes),
	                new OperatorNode('^', 'pow', [arg2.clone(), new ConstantNode('2', config.number)])
	              ])
	            ]);
	          }
	
	          // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2
	          return new OperatorNode('/', 'divide', [
	            new OperatorNode('-', 'subtract', [
	              new OperatorNode('*', 'multiply', [_derivative(arg1, constNodes), arg2.clone()]),
	              new OperatorNode('*', 'multiply', [arg1.clone(), _derivative(arg2, constNodes)])
	            ]),
	            new OperatorNode('^', 'pow', [arg2.clone(), new ConstantNode('2', config.number)])
	          ]);
	        case '^':
	          if (constNodes[arg1] !== undefined) {
	            // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1
	            if (arg1.isConstantNode && (arg1.value == '0' || arg1.value == '1')) {
	              return new ConstantNode('0', config.number);
	            }
	
	            // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)
	            return new OperatorNode('*', 'multiply', [
	              node,
	              new OperatorNode('*', 'multiply', [
	                new FunctionNode('log', [arg1.clone()]),
	                _derivative(arg2.clone(), constNodes)
	              ])
	            ]);
	          }
	
	          if (constNodes[arg2] !== undefined) {
	            if (arg2.isConstantNode) {
	              var expValue = arg2.value;
	
	              // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0
	              if (expValue == '0') {
	                return new ConstantNode('0', config.number);
	              }
	              // Ignore exponent; f(x)^1 = f(x)
	              if (expValue == '1') {
	                return _derivative(arg1, constNodes);
	              }
	            }
	
	            // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)
	            var powMinusOne = new OperatorNode('^', 'pow', [
	              arg1.clone(),
	              new OperatorNode('-', 'subtract', [
	                arg2,
	                new ConstantNode('1', config.number)
	              ])
	            ]);
	
	            return new OperatorNode('*', 'multiply', [
	              arg2.clone(),
	              new OperatorNode('*', 'multiply', [
	                _derivative(arg1, constNodes),
	                powMinusOne
	              ]),
	            ]);
	          }
	
	          // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]
	          return new OperatorNode('*', 'multiply', [
	            new OperatorNode('^', 'pow', [arg1.clone(), arg2.clone()]),
	            new OperatorNode('+', 'add', [
	              new OperatorNode('*', 'multiply', [
	                _derivative(arg1, constNodes),
	                new OperatorNode('/', 'divide', [arg2.clone(), arg1.clone()])
	              ]),
	              new OperatorNode('*', 'multiply', [
	                _derivative(arg2, constNodes),
	                new FunctionNode('log', [arg1.clone()])
	              ])
	            ])
	          ]);
	        case '%':
	        case 'mod':
	        default: throw new Error('Operator "' + node.op + '" not supported by derivative');
	      }
	    }
	  });
	
	  /**
	   * Ensures the number of arguments for a function are correct,
	   * and will throw an error otherwise.
	   *
	   * @param {FunctionNode} node
	   */
	  function funcArgsCheck(node) {
	    //TODO add min, max etc
	    if ((node.name == 'log' || node.name == 'nthRoot') && node.args.length == 2) {
	      return;
	    }
	
	    // There should be an incorrect number of arguments if we reach here
	
	    // Change all args to constants to avoid unidentified
	    // symbol error when compiling function
	    for (var i = 0; i < node.args.length; ++i) {
	      node.args[i] = new ConstantNode(0);
	    }
	
	    node.compile().eval();
	    throw new Error('Expected TypeError, but none found');
	  }
	
	
	  return derivative;
	}
	
	exports.name = 'derivative';
	exports.factory = factory;


/***/ }),
/* 396 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	
	function factory (type, config, load, typed) {
	  var parse = load(__webpack_require__(336));
	  var ConstantNode = load(__webpack_require__(350));
	  var FunctionNode = load(__webpack_require__(357));
	  var OperatorNode = load(__webpack_require__(356));
	  var ParenthesisNode = load(__webpack_require__(358));
	  var SymbolNode = load(__webpack_require__(354));
	  var Node = load(__webpack_require__(339));
	  var simplifyConstant = load(__webpack_require__(397));
	
	  var util = load(__webpack_require__(398));
	  var isCommutative = util.isCommutative;
	  var isAssociative = util.isAssociative;
	  var flatten = util.flatten;
	  var unflattenr = util.unflattenr;
	  var unflattenl = util.unflattenl;
	  var createMakeNodeFunction = util.createMakeNodeFunction;
	
	  /**
	   * Simplify an expression tree.
	   *
	   * It's possible to pass a custom set of rules to the function as second
	   * argument. A rule can be specified as an object, string, or function:
	   *
	   *     var rules = [
	   *       { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
	   *       'n1*n3 + n2*n3 -> (n1+n2)*n3',
	   *       function (node) {
	   *         // ... return a new node or return the node unchanged
	   *         return node
	   *       }
	   *     ]
	   *
	   *
	   * The default list with rules is exposed on the function as `simplify.rules`
	   * and can be used as a basis to built a set of custom rules.
	   *
	   * For more details on the theory, see:
	   *
	   * - [Strategies for simplifying math expressions (Stackoverflow)](http://stackoverflow.com/questions/7540227/strategies-for-simplifying-math-expressions)
	   * - [Symbolic computation - Simplification (Wikipedia)](https://en.wikipedia.org/wiki/Symbolic_computation#Simplification)
	   *
	   * Syntax:
	   *
	   *     simplify(expr)
	   *     simplify(expr, rules)
	   *
	   * Examples:
	   *
	   *     math.simplify('2 * 1 * x ^ (2 - 1)');      // Node {2 * x}
	   *     var f = math.parse('2 * 1 * x ^ (2 - 1)');
	   *     math.simplify(f);                          // Node {2 * x}
	   *
	   * See also:
	   *
	   *     derivative, parse, eval
	   *
	   * @param {Node | string} expr
	   *            The expression to be simplified
	   * @param {Array<{l:string, r: string} | string | function>} [rules]
	   *            Optional list with custom rules
	   * @return {Node} Returns the simplified form of `expr`
	   */
	  var simplify = typed('simplify', {
	    'string': function (expr) {
	      return simplify(parse(expr), simplify.rules);
	    },
	
	    'string, Array': function (expr, rules) {
	      return simplify(parse(expr), rules);
	    },
	
	    'Node': function (expr) {
	      return simplify(expr, simplify.rules);
	    },
	
	    'Node, Array': function (expr, rules) {
	      rules = _buildRules(rules);
	
	      var res = removeParens(expr);
	      var after = res.toString({parenthesis: 'all'});
	      var before = null;
	      while(before != after) {
	        lastsym = 0;
	        before = after;
	        for (var i=0; i<rules.length; i++) {
	          if (typeof rules[i] === 'function') {
	            res = rules[i](res);
	          }
	          else {
	            flatten(res);
	            res = applyRule(res, rules[i]);
	          }
	          unflattenl(res); // using left-heavy binary tree here since custom rule functions may expect it
	        }
	        after = res.toString({parenthesis: 'all'});
	      }
	
	      return res;
	    }
	  });
	
	  function removeParens(node) {
	    return node.transform(function(node, path, parent) {
	      if(node.isParenthesisNode) {
	        return node.content;
	      }
	      else {
	        return node;
	      }
	    });
	  }
	
	  // Array of strings, used to build the ruleSet.
	  // Each l (left side) and r (right side) are parsed by
	  // the expression parser into a node tree.
	  // Left hand sides are matched to subtrees within the
	  // expression to be parsed and replaced with the right
	  // hand side.
	  // TODO: Add support for constraints on constants (either in the form of a '=' expression or a callback [callback allows things like comparing symbols alphabetically])
	  // To evaluate lhs constants for rhs constants, use: { l: 'c1+c2', r: 'c3', evaluate: 'c3 = c1 + c2' }. Multiple assignments are separated by ';' in block format.
	  // It is possible to get into an infinite loop with conflicting rules
	  simplify.rules = [
	    { l: 'n+0', r: 'n' },
	    { l: 'n^0', r: '1' },
	    { l: '0*n', r: '0' },
	    { l: 'n/n', r: '1'},
	    { l: 'n^1', r: 'n' },
	    { l: '+n1', r:'n1' },
	    { l: 'n--n1', r:'n+n1' },
	    { l: 'log(e)', r:'1' },
	
	    // temporary rules
	    { l: 'n-n1', r:'n+-n1' }, // temporarily replace 'subtract' so we can further flatten the 'add' operator
	    { l: '-(c*C)', r: '(-c) * C' }, // make non-constant terms positive
	    { l: '-C', r: '(-1) * C' },
	    { l: 'n/n1^n2', r:'n*n1^-n2' }, // temporarily replace 'divide' so we can further flatten the 'multiply' operator
	    { l: 'n/n1', r:'n*n1^-1' },
	
	    // collect like factors
	    { l: 'n*n', r: 'n^2' },
	    { l: 'n * n^n1', r: 'n^(n1+1)' },
	    { l: 'n^n1 * n^n2', r: 'n^(n1+n2)' },
	
	    // collect like terms
	    { l: 'n+n', r: '2*n' },
	    { l: 'n+-n', r: '0' },
	    { l: 'n1*n2 + n2', r: '(n1+1)*n2' },
	    { l: 'n1*n3 + n2*n3', r: '(n1+n2)*n3' },
	
	    simplifyConstant,
	
	    { l: '(-n)*n1', r: '-(n*n1)' }, // make factors positive (and undo 'make non-constant terms positive')
	
	    // ordering of constants
	    { l: 'c+C', r: 'C+c', context: { 'add': { commutative:false } } },
	    { l: 'C*c', r: 'c*C', context: { 'multiply': { commutative:false } } },
	
	    // undo temporary rules
	    { l: '(-1) * n', r: '-n' },
	    { l: 'n+-n1', r:'n-n1' },  // undo replace 'subtract'
	    { l: 'n*(n1^-1)', r:'n/n1' },  // undo replace 'divide'
	    { l: 'n*n1^-n2', r:'n/n1^n2' },
	    { l: 'n1^-1', r:'1/n1' },
	
	    { l: 'n*(n1/n2)', r:'(n*n1)/n2' }, // '*' before '/'
	    { l: 'n-(n1+n2)', r:'n-n1-n2' }, // '-' before '+'
	    // { l: '(n1/n2)/n3', r: 'n1/(n2*n3)' },
	    // { l: '(n*n1)/(n*n2)', r: 'n1/n2' },
	
	    { l: '1*n', r: 'n' } // this pattern can be produced by simplifyConstant
	
	  ];
	
	  /**
	   * Parse the string array of rules into nodes
	   *
	   * Example syntax for rules:
	   *
	   * Position constants to the left in a product:
	   * { l: 'n1 * c1', r: 'c1 * n1' }
	   * n1 is any Node, and c1 is a ConstantNode.
	   *
	   * Apply difference of squares formula:
	   * { l: '(n1 - n2) * (n1 + n2)', r: 'n1^2 - n2^2' }
	   * n1, n2 mean any Node.
	   *
	   * Short hand notation:
	   * 'n1 * c1 -> c1 * n1'
	   */
	  function _buildRules(rules) {
	    // Array of rules to be used to simplify expressions
	    var ruleSet = [];
	    for(var i=0; i<rules.length; i++) {
	      var rule = rules[i];
	      var newRule;
	      var ruleType = typeof rule;
	      switch (ruleType) {
	        case 'string':
	          var lr = rule.split('->');
	          if (lr.length !== 2) {
	            throw SyntaxError('Could not parse rule: ' + rule);
	          }
	          rule = {l: lr[0], r: lr[1]};
	          /* falls through */
	        case 'object':
	          newRule = {
	            l: removeParens(parse(rule.l)),
	            r: removeParens(parse(rule.r)),
	          }
	          if(rule.context) {
	            newRule.evaluate = rule.context;
	          }
	          if(rule.evaluate) {
	            newRule.evaluate = parse(rule.evaluate);
	          }
	
	          if (newRule.l.isOperatorNode && isAssociative(newRule.l)) {
	            var makeNode = createMakeNodeFunction(newRule.l);
	            var expandsym = _getExpandPlaceholderSymbol();
	            newRule.expanded = {};
	            newRule.expanded.l = makeNode([newRule.l.clone(), expandsym]);
	            // Push the expandsym into the deepest possible branch.
	            // This helps to match the newRule against nodes returned from getSplits() later on.
	            flatten(newRule.expanded.l);
	            unflattenr(newRule.expanded.l);
	            newRule.expanded.r = makeNode([newRule.r, expandsym]);
	          }
	          break;
	        case 'function':
	          newRule = rule;
	          break;
	        default:
	          throw TypeError('Unsupported type of rule: ' + ruleType);
	      }
	     // console.log('Adding rule: ' + rules[i]);
	     // console.log(newRule);
	      ruleSet.push(newRule);
	    }
	    return ruleSet;
	  }
	
	  var lastsym = 0;
	  function _getExpandPlaceholderSymbol() {
	    return new SymbolNode('_p'+lastsym++);
	  }
	
	  /**
	   * Returns a simplfied form of node, or the original node if no simplification was possible.
	   *
	   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
	   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} The simplified form of `expr`, or the original node if no simplification was possible.
	   */
	  var applyRule = typed('applyRule', {
	    'Node, Object': function (node, rule) {
	
	      //console.log('Entering applyRule(' + node.toString() + ')');
	
	      // Do not clone node unless we find a match
	      var res = node;
	
	      // First replace our child nodes with their simplified versions
	      // If a child could not be simplified, the assignments will have
	      // no effect since the node is returned unchanged
	      if (res instanceof OperatorNode || res instanceof FunctionNode) {
	        if (res.args) {
	          for(var i=0; i<res.args.length; i++) {
	            res.args[i] = applyRule(res.args[i], rule);
	          }
	        }
	      }
	      else if(res instanceof ParenthesisNode) {
	        if(res.content) {
	          res.content = applyRule(res.content, rule);
	        }
	      }
	
	      // Try to match a rule against this node
	      var repl = rule.r;
	      var matches = _ruleMatch(rule.l, res)[0];
	
	      // If the rule is associative operator, we can try matching it while allowing additional terms.
	      // This allows us to match rules like 'n+n' to the expression '(1+x)+x' or even 'x+1+x' if the operator is commutative.
	      if (!matches && rule.expanded) {
	        repl = rule.expanded.r;
	        matches = _ruleMatch(rule.expanded.l, res)[0];
	      }
	
	      if (matches) {
	        // var before = res.toString({parenthesis: 'all'});
	
	        // Create a new node by cloning the rhs of the matched rule
	        res = repl.clone();
	
	        // Replace placeholders with their respective nodes
	        //console.log('Traversing rule ' + res);
	        res = res.transform(function(n, path, parent) {
	          if(n.isSymbolNode) {
	            if(matches.placeholders.hasOwnProperty(n.name)) {
	              var replace = matches.placeholders[n.name].clone();
	              return replace;
	            }
	          }
	          return n;
	        });
	
	        // var after = res.toString({parenthesis: 'all'});
	        // console.log('Simplified ' + before + ' to ' + after);
	      }
	
	      return res;
	    }
	  });
	
	  /**
	   * Get (binary) combinations of a flattened binary node
	   * e.g. +(node1, node2, node3) -> [
	   *        +(node1,  +(node2, node3)),
	   *        +(node2,  +(node1, node3)),
	   *        +(node3,  +(node1, node2))]
	   *
	   */
	  function getSplits(node, context) {
	    var res = [];
	    var right, rightArgs;
	    var makeNode = createMakeNodeFunction(node);
	    if (isCommutative(node, context)) {
	      for (var i=0; i<node.args.length; i++) {
	        rightArgs = node.args.slice(0);
	        rightArgs.splice(i, 1);
	        right = (rightArgs.length === 1) ? rightArgs[0] : makeNode(rightArgs);
	        res.push(makeNode([node.args[i], right]));
	      }
	    }
	    else {
	      rightArgs = node.args.slice(1);
	      right = (rightArgs.length === 1) ? rightArgs[0] : makeNode(rightArgs);
	      res.push(makeNode([node.args[0], right]));
	    }
	    return res;
	  }
	
	  /**
	   * Returns the set union of two match-placeholders or null if there is a conflict.
	   */
	  function mergeMatch(match1, match2) {
	    var res = {placeholders:{}};
	
	    // Some matches may not have placeholders; this is OK
	    if (!match1.placeholders && !match2.placeholders) {
	      return res;
	    }
	    else if (!match1.placeholders) {
	      return match2;
	    }
	    else if (!match2.placeholders) {
	      return match1;
	    }
	
	    // Placeholders with the same key must match exactly
	    for (var key in match1.placeholders) {
	      res.placeholders[key] = match1.placeholders[key];
	      if (match2.placeholders.hasOwnProperty(key)) {
	        if (!_exactMatch(match1.placeholders[key], match2.placeholders[key] )) {
	          return null;
	        }
	      }
	    }
	
	    for (var key in match2.placeholders) {
	      res.placeholders[key] = match2.placeholders[key];
	    }
	
	    return res;
	  }
	
	  /**
	   * Combine two lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
	   * Each list represents matches found in one child of a node.
	   */
	  function combineChildMatches(list1, list2) {
	    var res = [];
	
	    if (list1.length === 0 || list2.length === 0) {
	      return res;
	    }
	
	    var merged;
	    for (var i1 = 0; i1 < list1.length; i1++) {
	      for (var i2 = 0; i2 < list2.length; i2++) {
	        merged = mergeMatch(list1[i1], list2[i2]);
	        if (merged) {
	          res.push(merged);
	        }
	      }
	    }
	    return res;
	  }
	
	  /**
	   * Combine multiple lists of matches by applying mergeMatch to the cartesian product of two lists of matches.
	   * Each list represents matches found in one child of a node.
	   * Returns a list of unique matches.
	   */
	  function mergeChildMatches(childMatches) {
	    if (childMatches.length === 0) {
	      return childMatches;
	    }
	
	    var sets = childMatches.reduce(combineChildMatches);
	    var uniqueSets = [];
	    var unique = {};
	    for(var i = 0; i < sets.length; i++) {
	      var s = JSON.stringify(sets[i]);
	      if (!unique[s]) {
	        unique[s] = true;
	        uniqueSets.push(sets[i]);
	      }
	    }
	    return uniqueSets;
	  }
	
	  /**
	   * Determines whether node matches rule.
	   *
	   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} rule
	   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node
	   * @return {Object} Information about the match, if it exists.
	   */
	  function _ruleMatch(rule, node, isSplit) {
	//    console.log('Entering _ruleMatch(' + JSON.stringify(rule) + ', ' + JSON.stringify(node) + ')');
	//    console.log('rule = ' + rule);
	//    console.log('node = ' + node);
	
	//    console.log('Entering _ruleMatch(' + rule.toString() + ', ' + node.toString() + ')');
	    var res = [{placeholders:{}}];
	
	    if (rule instanceof OperatorNode && node instanceof OperatorNode
	     || rule instanceof FunctionNode && node instanceof FunctionNode) {
	
	      // If the rule is an OperatorNode or a FunctionNode, then node must match exactly
	      if (rule instanceof OperatorNode) {
	        if (rule.op !== node.op || rule.fn !== node.fn) {
	          return [];
	        }
	      }
	      else if (rule instanceof FunctionNode) {
	        if (rule.name !== node.name) {
	          return [];
	        }
	      }
	
	      // rule and node match. Search the children of rule and node.
	      if (node.args.length === 1 && rule.args.length === 1 || !isAssociative(node) || isSplit) {
	        // Expect non-associative operators to match exactly
	        var childMatches = [];
	        for (var i = 0; i < rule.args.length; i++) {
	          var childMatch = _ruleMatch(rule.args[i], node.args[i]);
	          if (childMatch.length === 0) {
	            // Child did not match, so stop searching immediately
	            return [];
	          }
	          // The child matched, so add the information returned from the child to our result
	          childMatches.push(childMatch);
	        }
	        res = mergeChildMatches(childMatches);
	      }
	      else if (node.args.length >= 2 && rule.args.length === 2) { // node is flattened, rule is not
	        // Associative operators/functions can be split in different ways so we check if the rule matches each
	        // them and return their union.
	        var splits = getSplits(node, rule.context);
	        var splitMatches = [];
	        for(var i = 0; i < splits.length; i++) {
	          var matchSet = _ruleMatch(rule, splits[i], true); // recursing at the same tree depth here
	          splitMatches = splitMatches.concat(matchSet);
	        }
	        return splitMatches;
	      }
	      else if (rule.args.length > 2) {
	        throw Error('Unexpected non-binary associative function: ' + rule.toString());
	      }
	      else {
	        // Incorrect number of arguments in rule and node, so no match
	        return [];
	      }
	    }
	    else if (rule instanceof SymbolNode) {
	      // If the rule is a SymbolNode, then it carries a special meaning
	      // according to the first character of the symbol node name.
	      // c.* matches a ConstantNode
	      // n.* matches any node
	      if (rule.name.length === 0) {
	        throw new Error('Symbol in rule has 0 length...!?');
	      }
	      if (rule.name[0] == 'n' || rule.name.substring(0,2) == '_p') {
	        // rule matches _anything_, so assign this node to the rule.name placeholder
	        // Assign node to the rule.name placeholder.
	        // Our parent will check for matches among placeholders.
	        res[0].placeholders[rule.name] = node;
	      }
	      else if (rule.name[0] == 'v') {
	        // rule matches any variable thing (not a ConstantNode)
	        if(!node.isConstantNode) {
	          res[0].placeholders[rule.name] = node;
	        }
	        else {
	          // Mis-match: rule was expecting something other than a ConstantNode
	          return [];
	        }
	      }
	      else if (rule.name[0] == 'C') {
	        // rule matches anything but a ConstantNode
	        if(node instanceof ConstantNode) {
	          // Mis-match: rule was expecting not a ConstantNode
	          return [];
	        }
	        else {
	          res[0].placeholders[rule.name] = node;
	        }
	      }
	      else if (rule.name[0] == 'c') {
	        // rule matches any ConstantNode
	        if(node instanceof ConstantNode) {
	          res[0].placeholders[rule.name] = node;
	        }
	        else {
	          // Mis-match: rule was expecting a ConstantNode
	          return [];
	        }
	      }
	      else {
	        throw new Error('Invalid symbol in rule: ' + rule.name);
	      }
	    }
	    else if (rule instanceof ConstantNode) {
	      // Literal constant in our rule, so much match node exactly
	      if(rule.value === node.value) {
	        // The constants match
	      }
	      else {
	        return [];
	      }
	    }
	    else {
	      // Some other node was encountered which we aren't prepared for, so no match
	      return [];
	    }
	
	    // It's a match!
	
	    // console.log('_ruleMatch(' + rule.toString() + ', ' + node.toString() + ') found a match');
	    return res;
	  }
	
	
	  /**
	   * Determines whether p and q (and all their children nodes) are identical.
	   *
	   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} p
	   * @param {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} q
	   * @return {Object} Information about the match, if it exists.
	   */
	  function _exactMatch(p, q) {
	    if(p instanceof ConstantNode && q instanceof ConstantNode) {
	      if(p.value !== q.value) {
	        return false;
	      }
	    }
	    else if(p instanceof SymbolNode && q instanceof SymbolNode) {
	      if(p.name !== q.name) {
	        return false;
	      }
	    }
	    else if(p instanceof OperatorNode && q instanceof OperatorNode
	         || p instanceof FunctionNode && q instanceof FunctionNode) {
	      if (p instanceof OperatorNode) {
	        if (p.op !== q.op || p.fn !== q.fn) {
	          return false;
	        }
	      }
	      else if (p instanceof FunctionNode) {
	        if (p.name !== q.name) {
	          return false;
	        }
	      }
	
	      if(p.args.length !== q.args.length) {
	        return false;
	      }
	
	      for(var i=0; i<p.args.length; i++) {
	        if(!_exactMatch(p.args[i], q.args[i])) {
	          return false;
	        }
	      }
	    }
	    else {
	      return false;
	    }
	
	    return true;
	  }
	
	  return simplify;
	}
	
	exports.name = 'simplify';
	exports.factory = factory;


/***/ }),
/* 397 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var digits = __webpack_require__(58).digits;
	// TODO this could be improved by simplifying seperated constants under associative and commutative operators
	function factory(type, config, load, typed, math) {
	  var util = load(__webpack_require__(398));
	  var isCommutative = util.isCommutative;
	  var isAssociative = util.isAssociative;
	  var allChildren = util.allChildren;
	  var createMakeNodeFunction = util.createMakeNodeFunction;
	  var ConstantNode = math.expression.node.ConstantNode;
	  var OperatorNode = math.expression.node.OperatorNode;
	
	  function simplifyConstant(expr) {
	    var res = foldFraction(expr);
	    return res.isNode ? res : _toNode(res);
	  }
	
	  function _eval(fnname, args) {
	    try {
	      return _toNumber(math[fnname].apply(null, args));
	    }
	    catch (ignore) {
	    // sometimes the implicit type conversion causes the evaluation to fail, so we'll try again using just numbers
	      args = args.map(function(x){ return x.valueOf(); });
	      return _toNumber(math[fnname].apply(null, args));
	    }
	  }
	
	  var _toNode = typed({
	    'Fraction': _fractionToNode,
	    'number': _numberToNode,
	    'BigNumber': function(s) {
	      return _numberToNode(s._toNumber());
	    },
	    'Complex': function(s) {
	      throw 'Cannot convert Complex number to Node';
	    }
	  });
	
	  var _toNumber = typed({
	    'Fraction': function(s) { return s; },
	    'BigNumber': function(s) {
	      if (s.decimalPlaces() <= 15) {
	        return math.fraction(s.toNumber())
	      }
	      return s.toNumber();
	    },
	    'number': function(s) {
	      if (digits(s) <= 15) {
	        return math.fraction(s);
	      }
	      return s;
	    },
	    'Complex': function(s) {
	      if (s.im !== 0) {
	        return s;
	      }
	      if (digits(s.re) <= 15) {
	        return math.fraction(s.re);
	      }
	      return s.re;
	    },
	  });
	
	  function _numberToNode(n) {
	    if (n < 0) {
	      return new OperatorNode('-', 'unaryMinus', [new ConstantNode(-n)])
	    }
	    return new ConstantNode(n);
	  }
	  function _fractionToNode(f) {
	    var n;
	    var vn = f.s*f.n;
	    if (vn < 0) {
	      n = new OperatorNode('-', 'unaryMinus', [new ConstantNode(-vn)])
	    }
	    else {
	      n = new ConstantNode(vn);
	    }
	
	    if (f.d === 1) {
	      return n;
	    }
	    return new OperatorNode('/', 'divide', [n, new ConstantNode(f.d)]);
	  }
	
	  /*
	   * Create a binary tree from a list of Fractions and Nodes.
	   * Tries to fold Fractions by evaluating them until the first Node in the list is hit, so
	   * `args` should be sorted to have the Fractions at the start (if the operator is commutative).
	   * @param args - list of Fractions and Nodes
	   * @param fn - evaluator for the binary operation evaluator that accepts two Fractions
	   * @param makeNode - creates a binary OperatorNode/FunctionNode from a list of child Nodes
	   * if args.length is 1, returns args[0]
	   * @return - Either a Node representing a binary expression or Fraction
	   */
	  function foldOp(fn, args, makeNode) {
	    return args.reduce(function(a, b) {
	      if (!a.isNode && !b.isNode) {
	        try {
	          return _eval(fn, [a,b]);
	        }
	        catch (ignoreandcontinue) {}
	        a = _toNode(a);
	        b = _toNode(b);
	      }
	      else if (!a.isNode) {
	        a = _toNode(a);
	      }
	      else if (!b.isNode) {
	        b = _toNode(b);
	      }
	
	      return makeNode([a, b]);
	    });
	  }
	
	  // destroys the original node and returns a folded one
	  function foldFraction(node) {
	    switch(node.type) {
	      case 'SymbolNode':
	        return node;
	      case 'ConstantNode':
	        return _toNumber(node.value);
	      case 'FunctionNode':
	        if (math[node.name] && math[node.name].rawArgs) {
	          return node;
	        }
	        /* falls through */
	      case 'OperatorNode':
	        var fn = node.fn.toString();
	        var args;
	        var res;
	        var makeNode = createMakeNodeFunction(node);
	        if (node.args.length === 1) {
	          args = [foldFraction(node.args[0])];
	          if (!args[0].isNode) {
	            res = _eval(fn, args);
	          }
	          else {
	            res = makeNode(args);
	          }
	        }
	        else if (isAssociative(node)) {
	          args = allChildren(node);
	          args = args.map(foldFraction);
	
	          if (isCommutative(fn)) {
	            // commutative binary operator
	            var consts = [], vars = [];
	
	            for (var i=0; i < args.length; i++) {
	              if (!args[i].isNode) {
	                consts.push(args[i]);
	              }
	              else {
	                vars.push(args[i]);
	              }
	            }
	
	            if (consts.length > 1) {
	              res = foldOp(fn, consts, makeNode);
	              vars.unshift(res);
	              res = foldOp(fn, vars, makeNode);
	            }
	            else {
	              // we won't change the children order since it's not neccessary
	              res = foldOp(fn, args, makeNode);
	            }
	          }
	          else {
	            // non-commutative binary operator
	            res = foldOp(fn, args, makeNode);
	          }
	        }
	        else {
	          // non-associative binary operator
	          args = node.args.map(foldFraction);
	          res = foldOp(fn, args, makeNode);
	        }
	        return res;
	      case 'ParenthesisNode':
	        // remove the uneccessary parenthesis
	        return foldFraction(node.content);
	      case 'AccessorNode':
	        /* falls through */
	      case 'ArrayNode':
	        /* falls through */
	      case 'AssignmentNode':
	        /* falls through */
	      case 'BlockNode':
	        /* falls through */
	      case 'FunctionAssignmentNode':
	        /* falls through */
	      case 'IndexNode':
	        /* falls through */
	      case 'ObjectNode':
	        /* falls through */
	      case 'RangeNode':
	        /* falls through */
	      case 'UpdateNode':
	        /* falls through */
	      case 'ConditionalNode':
	        /* falls through */
	      default:
	        throw 'Unimplemented node type in simplifyConstant: '+node.type;
	    }
	  }
	
	  return simplifyConstant;
	}
	
	exports.math = true;
	exports.name = 'simplifyConstant';
	exports.path = 'algebra.simplify';
	exports.factory = factory;


/***/ }),
/* 398 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory(type, config, load, typed, math) {
	  var FunctionNode = math.expression.node.FunctionNode;
	  var OperatorNode = math.expression.node.OperatorNode;
	  var SymbolNode = math.expression.node.SymbolNode;
	
	  // TODO commutative/associative properties rely on the arguments
	  // e.g. multiply is not commutative for matrices
	  // The properties should be calculated from an argument to simplify, or possibly something in math.config
	  // the other option is for typed() to specify a return type so that we can evaluate the type of arguments
	  var commutative = {
	    'add': true,
	    'multiply': true
	  }
	  var associative = {
	    'add': true,
	    'multiply': true
	  }
	
	
	  function isCommutative(node, context) {
	    if (!node.args || node.args.length <=1) {
	      return true;
	    }
	    var name = node.fn.toString();
	    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('commutative')) {
	      return context[name].commutative;
	    }
	    return commutative[name] || false;
	  }
	
	  function isAssociative(node, context) {
	    if (!node.args || node.args.length <=1) {
	      return true;
	    }
	    var name = node.fn.toString();
	    if (context && context.hasOwnProperty(name) && context[name].hasOwnProperty('associative')) {
	      return context[name].associative;
	    }
	    return associative[name] || false;
	  }
	
	  /**
	   * Flatten all associative operators in an expression tree.
	   * Assumes parentheses have already been removed.
	   */
	  function flatten(node) {
	    if (!node.args || node.args.length === 0) {
	      return node;
	    }
	    node.args = allChildren(node);
	    for (var i=0; i<node.args.length; i++) {
	      flatten(node.args[i]);
	    }
	  }
	
	  /**
	   * Get the children of a node as if it has been flattened.
	   * TODO implement for FunctionNodes
	   */
	  function allChildren(node) {
	    var op;
	    var children = [];
	    var findChildren = function(node) {
	      for (var i = 0; i < node.args.length; i++) {
	        var child = node.args[i];
	        if (child.isOperatorNode && op === child.op) {
	          findChildren(child);
	        }
	        else {
	          children.push(child);
	        }
	      }
	    };
	
	    if (node.isOperatorNode && isAssociative(node)) {
	      op = node.op;
	      findChildren(node);
	      return children;
	    }
	    else {
	      return node.args;
	    }
	  }
	
	  /**
	   *  Unflatten all flattened operators to a right-heavy binary tree.
	   */
	  function unflattenr(node) {
	    if (!node.args || node.args.length === 0) {
	      return;
	    }
	    var makeNode = createMakeNodeFunction(node);
	    var l = node.args.length;
	    for (var i = 0; i < l; i++) {
	      unflattenr(node.args[i])
	    }
	    if (l > 2 && isAssociative(node)) {
	      var curnode = node.args.pop();
	      while (node.args.length > 0) {
	        curnode = makeNode([node.args.pop(), curnode]);
	      }
	      node.args = curnode.args;
	    }
	  }
	
	  /**
	   *  Unflatten all flattened operators to a left-heavy binary tree.
	   */
	  function unflattenl(node) {
	    if (!node.args || node.args.length === 0) {
	      return;
	    }
	    var makeNode = createMakeNodeFunction(node);
	    var l = node.args.length;
	    for (var i = 0; i < l; i++) {
	      unflattenl(node.args[i])
	    }
	    if (l > 2 && isAssociative(node)) {
	      var curnode = node.args.shift();
	      while (node.args.length > 0) {
	        curnode = makeNode([curnode, node.args.shift()]);
	      }
	      node.args = curnode.args;
	    }
	  }
	
	  function createMakeNodeFunction(node) {
	    if (node.isOperatorNode) {
	      return function(args){
	        try{
	          return new OperatorNode(node.op, node.fn, args);
	        } catch(err){
	          console.error(err);
	          return [];
	        }
	      };
	    }
	    else {
	      return function(args){
	        return new FunctionNode(new SymbolNode(node.name), args);
	      };
	    }
	  }
	  return {
	    createMakeNodeFunction: createMakeNodeFunction,
	    isCommutative: isCommutative,
	    isAssociative: isAssociative,
	    flatten: flatten,
	    allChildren: allChildren,
	    unflattenr: unflattenr,
	    unflattenl: unflattenl
	  };
	}
	
	exports.factory = factory;
	exports.math = true;

/***/ }),
/* 399 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	  var zeros = load(__webpack_require__(400));
	  var eye = load(__webpack_require__(135));
	  var clone = load(__webpack_require__(401));
	  
	  var isZero = load(__webpack_require__(402));
	  var isPositive = load(__webpack_require__(403));
	  var unequal = load(__webpack_require__(404));
	    
	  var abs = load(__webpack_require__(138));
	  var sign = load(__webpack_require__(405));
	  var sqrt = load(__webpack_require__(406));
	  var conj = load(__webpack_require__(407));
	  
	  var unaryMinus = load(__webpack_require__(130)); 
	  var addScalar = load(__webpack_require__(105));  
	  var divideScalar = load(__webpack_require__(133));
	  var multiplyScalar = load(__webpack_require__(132));  
	  var subtract = load(__webpack_require__(129));
	    
	  
	  /**
	   * Calculate the Matrix QR decomposition. Matrix `A` is decomposed in 
	   * two matrices (`Q`, `R`) where `Q` is an 
	   * orthogonal matrix and `R` is an upper triangular matrix.
	   *
	   * Syntax:
	   *
	   *    math.qr(A);
	   *
	   * Example:
	   *
	   *    var m = [
	   *      [1, -1,  4],
	   *      [1,  4, -2],
	   *      [1,  4,  2],
	   *      [1,  -1, 0]
	   *    ];
	   *    var result = math.qr(m);
	   *    // r = {
	   *    //   Q: [
	   *    //     [0.5, -0.5,   0.5],
	   *    //     [0.5,  0.5,  -0.5],
	   *    //     [0.5,  0.5,   0.5],
	   *    //     [0.5, -0.5,  -0.5],
	   *    //   ],
	   *    //   R: [
	   *    //     [2, 3,  2],
	   *    //     [0, 5, -2],
	   *    //     [0, 0,  4],
	   *    //     [0, 0,  0]
	   *    //   ]
	   *    // }
	   *
	   * See also:
	   *
	   *    lu
	   *
	   * @param {Matrix | Array} A    A two dimensional matrix or array 
	   * for which to get the QR decomposition.
	   *
	   * @return {{Q: Array | Matrix, R: Array | Matrix}} Q: the orthogonal
	   * matrix and R: the upper triangular matrix
	   */
	  var qr = typed('qr', {
	
	    'DenseMatrix': function (m) {
	      return _denseQR(m);
	    },
	    
	    'SparseMatrix': function (m) {
	      return _sparseQR(m);
	    },
	
	    'Array': function (a) {
	      // create dense matrix from array
	      var m = matrix(a);
	      // lup, use matrix implementation
	      var r = _denseQR(m);
	      // result
	      return {
	        Q: r.Q.valueOf(),
	        R: r.R.valueOf()
	      };
	    }
	  });
	
	  var _denseQR = function (m) {
	    
	    // rows & columns (m x n)
	    var rows = m._size[0]; // m
	    var cols = m._size[1]; // n
	            
	    var Q = eye([rows], 'dense');
	    var Qdata = Q._data;
	    
	    var R = m.clone();
	    var Rdata = R._data;
	    
	    // vars
	    var i, j, k;
	        
	    var w = zeros([rows], '');
	    
	    for (k = 0; k < Math.min(cols, rows); ++k) {
	      
	      /*
	       * **k-th Household matrix**
	       *
	       * The matrix I - 2*v*transpose(v)
	       * x     = first column of A
	       * x1    = first element of x
	       * alpha = x1 / |x1| * |x|
	       * e1    = tranpose([1, 0, 0, ...])
	       * u     = x - alpha * e1
	       * v     = u / |u|
	       *
	       * Household matrix = I - 2 * v * tranpose(v)
	       *
	       *  * Initially Q = I and R = A.
	       *  * Household matrix is a reflection in a plane normal to v which 
	       *    will zero out all but the top right element in R.
	       *  * Appplying reflection to both Q and R will not change product.
	       *  * Repeat this process on the (1,1) minor to get R as an upper 
	       *    triangular matrix.
	       *  * Reflections leave the magnitude of the columns of Q unchanged 
	       *    so Q remains othoganal.
	       *
	       */  
	      
	      var pivot = Rdata[k][k];          
	      var sgn = unaryMinus(sign(pivot));
	      var conjSgn = conj(sgn);
	      
	      var alphaSquared = 0;
	
	      for(i = k; i < rows; i++) {
	        alphaSquared = addScalar(alphaSquared, multiplyScalar(Rdata[i][k], conj(Rdata[i][k])));        
	      }
	      
	      var alpha = multiplyScalar(sgn, sqrt(alphaSquared));
	      
	      
	      if (!isZero(alpha)) {
	          
	        // first element in vector u
	        var u1 = subtract(pivot, alpha);
	        
	        // w = v * u1 / |u|    (only elements k to (rows-1) are used)    
	        w[k] = 1;
	        
	        for (i = k+1; i < rows; i++) {
	          w[i] = divideScalar(Rdata[i][k], u1);
	        }        
	         
	        // tau = - conj(u1 / alpha)
	        var tau = unaryMinus(conj(divideScalar(u1, alpha)));
	        
	        var s;
	        
	        /*
	         * tau and w have been choosen so that
	         * 
	         * 2 * v * tranpose(v) = tau * w * tranpose(w)
	         */
	         
	        /*
	         * -- calculate R = R - tau * w * tranpose(w) * R --
	         * Only do calculation with rows k to (rows-1)
	         * Additionally columns 0 to (k-1) will not be changed by this
	         *   multiplication so do not bother recalculating them
	         */
	        for (j = k; j < cols; j++) {
	          s = 0.0;
	          
	          // calculate jth element of [tranpose(w) * R]
	          for (i = k; i < rows; i++) {
	            s = addScalar(s, multiplyScalar(conj(w[i]), Rdata[i][j]));
	          }
	          
	          // calculate the jth element of [tau * transpose(w) * R]
	          s = multiplyScalar(s, tau);
	          
	          for (i = k; i < rows; i++) {
	            Rdata[i][j] = multiplyScalar(
	              subtract(Rdata[i][j], multiplyScalar(w[i], s)), 
	              conjSgn
	            );            
	          }          
	        }
	        /*
	         * -- calculate Q = Q - tau * Q * w * transpose(w) --
	         * Q is a square matrix (rows x rows)
	         * Only do calculation with columns k to (rows-1)
	         * Additionally rows 0 to (k-1) will not be changed by this
	         *   multiplication so do not bother recalculating them
	         */
	        for (i = 0; i < rows; i++) {
	          s = 0.0;
	          
	          // calculate ith element of [Q * w]
	          for (j = k; j < rows; j++) {
	            s = addScalar(s, multiplyScalar(Qdata[i][j], w[j]));
	          }
	          
	          // calculate the ith element of [tau * Q * w]
	          s = multiplyScalar(s, tau);
	          
	          for (j = k; j < rows; ++j) {
	            Qdata[i][j] = divideScalar(
	              subtract(Qdata[i][j], multiplyScalar(s, conj(w[j]))), 
	              conjSgn
	            );
	          }
	          
	        }
	      }
	      
	    }
	    
	    // coerse almost zero elements to zero
	    // TODO I feel uneasy just zeroing these values
	    for (i = 0; i < rows; ++i) {
	      for (j = 0; j < i && j < cols; ++j) {
	        if (unequal(0, divideScalar(Rdata[i][j], 1e5))) {
	          throw new Error('math.qr(): unknown error - ' + 
	           'R is not lower triangular (element (' + 
	            i + ', ' + j + ')  = ' + Rdata[i][j] + ')'
	          );
	        }
	        Rdata[i][j] = multiplyScalar(Rdata[i][j], 0);
	      }
	    }
	    
	    // return matrices
	    return { 
	      Q: Q,
	      R: R,
	      toString: function () {
	        return 'Q: ' + this.Q.toString() + '\nR: ' + this.R.toString();
	      }
	    };
	  };
	  
	  var _sparseQR = function (m) {
	    
	    throw new Error('qr not implemented for sparse matrices yet');
	  
	  };
	  
	  return qr;
	}
	
	exports.name = 'qr';
	exports.factory = factory;


/***/ }),
/* 400 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	var resize = __webpack_require__(91).resize;
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Create a matrix filled with zeros. The created matrix can have one or
	   * multiple dimensions.
	   *
	   * Syntax:
	   *
	   *    math.zeros(m)
	   *    math.zeros(m, format)
	   *    math.zeros(m, n)
	   *    math.zeros(m, n, format)
	   *    math.zeros([m, n])
	   *    math.zeros([m, n], format)
	   *
	   * Examples:
	   *
	   *    math.zeros(3);                  // returns [0, 0, 0]
	   *    math.zeros(3, 2);               // returns [[0, 0], [0, 0], [0, 0]]
	   *    math.zeros(3, 'dense');         // returns [0, 0, 0]
	   *
	   *    var A = [[1, 2, 3], [4, 5, 6]];
	   *    math.zeros(math.size(A));       // returns [[0, 0, 0], [0, 0, 0]]
	   *
	   * See also:
	   *
	   *    ones, eye, size, range
	   *
	   * @param {...number | Array} size    The size of each dimension of the matrix
	   * @param {string} [format]           The Matrix storage format
	   *
	   * @return {Array | Matrix}           A matrix filled with zeros
	   */
	  var zeros = typed('zeros', {
	    '': function () {
	      return (config.matrix === 'Array')
	          ? _zeros([])
	          : _zeros([], 'default');
	    },
	
	    // math.zeros(m, n, p, ..., format)
	    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
	    '...number | BigNumber | string': function (size) {
	      var last = size[size.length - 1];
	      if (typeof last === 'string') {
	        var format = size.pop();
	        return _zeros(size, format);
	      }
	      else if (config.matrix === 'Array') {
	        return _zeros(size);
	      }
	      else {
	        return _zeros(size, 'default');
	      }
	    },
	
	    'Array': _zeros,
	
	    'Matrix': function (size) {
	      var format = size.storage();
	      return _zeros(size.valueOf(), format);
	    },
	
	    'Array | Matrix, string': function (size, format) {
	      return _zeros (size.valueOf(), format);
	    }
	  });
	
	  zeros.toTex = undefined; // use default template
	
	  return zeros;
	
	  /**
	   * Create an Array or Matrix with zeros
	   * @param {Array} size
	   * @param {string} [format='default']
	   * @return {Array | Matrix}
	   * @private
	   */
	  function _zeros(size, format) {
	    var hasBigNumbers = _normalize(size);
	    var defaultValue = hasBigNumbers ? new type.BigNumber(0) : 0;
	    _validate(size);
	
	    if (format) {
	      // return a matrix
	      var m = matrix(format);
	      if (size.length > 0) {
	        return m.resize(size, defaultValue);
	      }
	      return m;
	    }
	    else {
	      // return an Array
	      var arr = [];
	      if (size.length > 0) {
	        return resize(arr, size, defaultValue);
	      }
	      return arr;
	    }
	  }
	
	  // replace BigNumbers with numbers, returns true if size contained BigNumbers
	  function _normalize(size) {
	    var hasBigNumbers = false;
	    size.forEach(function (value, index, arr) {
	      if (value && value.isBigNumber === true) {
	        hasBigNumbers = true;
	        arr[index] = value.toNumber();
	      }
	    });
	    return hasBigNumbers;
	  }
	
	  // validate arguments
	  function _validate (size) {
	    size.forEach(function (value) {
	      if (typeof value !== 'number' || !isInteger(value) || value < 0) {
	        throw new Error('Parameters in function zeros must be positive integers');
	      }
	    });
	  }
	}
	
	// TODO: zeros contains almost the same code as ones. Reuse this?
	
	exports.name = 'zeros';
	exports.factory = factory;


/***/ }),
/* 401 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var object= __webpack_require__(55);
	
	function factory (type, config, load, typed) {
	  /**
	   * Clone an object.
	   *
	   * Syntax:
	   *
	   *     math.clone(x)
	   *
	   * Examples:
	   *
	   *    math.clone(3.5);                   // returns number 3.5
	   *    math.clone(math.complex('2-4i'); // returns Complex 2 - 4i
	   *    math.clone(math.unit(45, 'deg'));  // returns Unit 45 deg
	   *    math.clone([[1, 2], [3, 4]]);      // returns Array [[1, 2], [3, 4]]
	   *    math.clone("hello world");         // returns string "hello world"
	   *
	   * @param {*} x   Object to be cloned
	   * @return {*} A clone of object x
	   */
	  var clone = typed('clone', {
	    'any': object.clone
	  });
	
	  clone.toTex = undefined; // use default template
	
	  return clone;
	}
	
	exports.name = 'clone';
	exports.factory = factory;


/***/ }),
/* 402 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	var number = __webpack_require__(58);
	
	function factory (type, config, load, typed) {
	  /**
	   * Test whether a value is zero.
	   * The function can check for zero for types `number`, `BigNumber`, `Fraction`,
	   * `Complex`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isZero(x)
	   *
	   * Examples:
	   *
	   *    math.isZero(0);                     // returns true
	   *    math.isZero(2);                     // returns false
	   *    math.isZero(0.5);                   // returns false
	   *    math.isZero(math.bignumber(0));     // returns true
	   *    math.isZero(math.fraction(0));      // returns true
	   *    math.isZero(math.fraction(1,3));    // returns false
	   *    math.isZero(math.complex('2 - 4i'); // returns false
	   *    math.isZero(math.complex('0i');     // returns true
	   *    math.isZero('0');                   // returns true
	   *    math.isZero('2');                   // returns false
	   *    math.isZero([2, 0, -3]');           // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Complex | Fraction | Unit | Array | Matrix} x       Value to be tested
	   * @return {boolean}  Returns true when `x` is zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isZero = typed('isZero', {
	    'number': function (x) {
	      return x === 0;
	    },
	
	    'BigNumber': function (x) {
	      return x.isZero();
	    },
	
	    'Complex': function (x) {
	      return x.re === 0 && x.im === 0;
	    },
	
	    'Fraction': function (x) {
	      return x.d === 1 && x.n === 0;
	    },
	
	    'Unit': function (x) {
	      return isZero(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, isZero);
	    }
	  });
	
	  return isZero;
	}
	
	exports.name = 'isZero';
	exports.factory = factory;


/***/ }),
/* 403 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	var number = __webpack_require__(58);
	
	function factory (type, config, load, typed) {
	  /**
	   * Test whether a value is positive: larger than zero.
	   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isPositive(x)
	   *
	   * Examples:
	   *
	   *    math.isPositive(3);                     // returns true
	   *    math.isPositive(-2);                    // returns false
	   *    math.isPositive(0);                     // returns false
	   *    math.isPositive(-0);                    // returns false
	   *    math.isPositive(0.5);                   // returns true
	   *    math.isPositive(math.bignumber(2));     // returns true
	   *    math.isPositive(math.fraction(-2, 5));  // returns false
	   *    math.isPositive(math.fraction(1,3));    // returns false
	   *    math.isPositive('2');                   // returns true
	   *    math.isPositive([2, 0, -3]');           // returns [true, false, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isZero, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isPositive = typed('isPositive', {
	    'number': function (x) {
	      return x > 0;
	    },
	
	    'BigNumber': function (x) {
	      return !x.isNeg() && !x.isZero() && !x.isNaN();
	    },
	
	    'Fraction': function (x) {
	      return x.s > 0 && x.n > 0;
	    },
	
	    'Unit': function (x) {
	      return isPositive(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, isPositive);
	    }
	  });
	
	  return isPositive;
	}
	
	exports.name = 'isPositive';
	exports.factory = factory;


/***/ }),
/* 404 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var nearlyEqual = __webpack_require__(58).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(101);
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm07 = load(__webpack_require__(114));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  var latex = __webpack_require__(83);
	
	  /**
	   * Test whether two values are unequal.
	   *
	   * The function tests whether the relative difference between x and y is
	   * larger than the configured epsilon. The function cannot be used to compare
	   * values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.
	   *
	   * Values `null` and `undefined` are compared strictly, thus `null` is unequal
	   * with everything except `null`, and `undefined` is unequal with everying
	   * except. `undefined`.
	   *
	   * Syntax:
	   *
	   *    math.unequal(x, y)
	   *
	   * Examples:
	   *
	   *    math.unequal(2 + 2, 3);       // returns true
	   *    math.unequal(2 + 2, 4);       // returns false
	   *
	   *    var a = math.unit('50 cm');
	   *    var b = math.unit('5 m');
	   *    math.unequal(a, b);           // returns false
	   *
	   *    var c = [2, 5, 1];
	   *    var d = [2, 7, 1];
	   *
	   *    math.unequal(c, d);           // returns [false, true, false]
	   *    math.deepEqual(c, d);         // returns false
	   *
	   *    math.unequal(0, null);        // returns true
	   * See also:
	   *
	   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false
	   */
	  var unequal = typed('unequal', {
	    
	    'any, any': function (x, y) {
	      // strict equality for null and undefined?
	      if (x === null) { return y !== null; }
	      if (y === null) { return x !== null; }
	      if (x === undefined) { return y !== undefined; }
	      if (y === undefined) { return x !== undefined; }
	
	      return _unequal(x, y);
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, _unequal);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, _unequal, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, _unequal, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, _unequal);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return unequal(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return unequal(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return unequal(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, _unequal, false);
	          break;
	        default:
	          c = algorithm14(x, y, _unequal, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, _unequal, true);
	          break;
	        default:
	          c = algorithm14(y, x, _unequal, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, _unequal, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, _unequal, true).valueOf();
	    }
	  });
	
	  var _unequal = typed('_unequal', {
	
	    'boolean, boolean': function (x, y) {
	      return x !== y;
	    },
	
	    'number, number': function (x, y) {
	      return !nearlyEqual(x, y, config.epsilon);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return !bigNearlyEqual(x, y, config.epsilon);
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      return !x.equals(y);
	    },
	
	    'Complex, Complex': function (x, y) {
	      return !x.equals(y);
	    },
	
	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return unequal(x.value, y.value);
	    },
	
	    'string, string': function (x, y) {
	      return x !== y;
	    }
	  });
	
	  unequal.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['unequal'] + '${args[1]}\\right)'
	  };
	
	  return unequal;
	}
	
	exports.name = 'unequal';
	exports.factory = factory;


/***/ }),
/* 405 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var number = __webpack_require__(58);
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Compute the sign of a value. The sign of a value x is:
	   *
	   * -  1 when x > 1
	   * - -1 when x < 0
	   * -  0 when x == 0
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sign(x)
	   *
	   * Examples:
	   *
	   *    math.sign(3.5);               // returns 1
	   *    math.sign(-4.2);              // returns -1
	   *    math.sign(0);                 // returns 0
	   *
	   *    math.sign([3, 5, -2, 0, 2]);  // returns [1, 1, -1, 0, 1]
	   *
	   * See also:
	   *
	   *    abs
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            The number for which to determine the sign
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}e
	   *            The sign of `x`
	   */
	  var sign = typed('sign', {
	    'number': number.sign,
	
	    'Complex': function (x) {
	      return x.sign();
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(x.cmp(0));
	    },
	
	    'Fraction': function (x) {
	      return new type.Fraction(x.s, 1);
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since sign(0) = 0
	      return deepMap(x, sign, true);
	    },
	
	    'Unit': function(x) {
	      return sign(x.value);
	    }
	  });
	
	  sign.toTex = {1: '\\mathrm{${name}}\\left(${args[0]}\\right)'};
	
	  return sign;
	}
	
	exports.name = 'sign';
	exports.factory = factory;
	


/***/ }),
/* 406 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the square root of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sqrt(x)
	   *
	   * Examples:
	   *
	   *    math.sqrt(25);                // returns 5
	   *    math.square(5);               // returns 25
	   *    math.sqrt(-4);                // returns Complex 2i
	   *
	   * See also:
	   *
	   *    square, multiply, cube, cbrt
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix | Unit} x
	   *            Value for which to calculate the square root.
	   * @return {number | BigNumber | Complex | Array | Matrix | Unit}
	   *            Returns the square root of `x`
	   */
	  var sqrt = typed('sqrt', {
	    'number': _sqrtNumber,
	
	    'Complex': function (x) {
	        return x.sqrt();
	    },
	
	    'BigNumber': function (x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.sqrt();
	      }
	      else {
	        // negative value -> downgrade to number to do complex value computation
	        return _sqrtNumber(x.toNumber());
	      }
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since sqrt(0) = 0
	      return deepMap(x, sqrt, true);
	    },
	
	    'Unit': function (x) {
	      // Someday will work for complex units when they are implemented
	      return x.pow(0.5);
	    }
	
	  });
	
	  /**
	   * Calculate sqrt for a number
	   * @param {number} x
	   * @returns {number | Complex} Returns the square root of x
	   * @private
	   */
	  function _sqrtNumber(x) {
	    if (x >= 0 || config.predictable) {
	      return Math.sqrt(x);
	    }
	    else {
	      return new type.Complex(x, 0).sqrt();
	    }
	  }
	
	  sqrt.toTex = {1: '\\sqrt{${args[0]}}'};
	
	  return sqrt;
	}
	
	exports.name = 'sqrt';
	exports.factory = factory;


/***/ }),
/* 407 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Compute the complex conjugate of a complex value.
	   * If `x = a+bi`, the complex conjugate of `x` is `a - bi`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.conj(x)
	   *
	   * Examples:
	   *
	   *    math.conj(math.complex('2 + 3i'));  // returns Complex 2 - 3i
	   *    math.conj(math.complex('2 - 3i'));  // returns Complex 2 + 3i
	   *    math.conj(math.complex('-5.2i'));  // returns Complex 5.2i
	   *
	   * See also:
	   *
	   *    re, im, arg, abs
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            The complex conjugate of x
	   */
	  var conj = typed('conj', {
	    'number': function (x) {
	      return x;
	    },
	
	    'BigNumber': function (x) {
	      return x;
	    },
	
	    'Complex': function (x) {
	      return x.conjugate();
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, conj);
	    }
	  });
	
	  conj.toTex = {1: '\\left(${args[0]}\\right)^*'};
	
	  return conj;
	}
	
	exports.name = 'conj';
	exports.factory = factory;


/***/ }),
/* 408 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(90);
	
	var object = util.object;
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	  var abs = load(__webpack_require__(138));
	  var addScalar = load(__webpack_require__(105));
	  var divideScalar = load(__webpack_require__(133));
	  var multiplyScalar = load(__webpack_require__(132));
	  var subtract = load(__webpack_require__(129));
	  var larger = load(__webpack_require__(116));
	  var equalScalar = load(__webpack_require__(100));
	  var unaryMinus = load(__webpack_require__(130));
	  
	  var SparseMatrix = type.SparseMatrix;
	  var DenseMatrix = type.DenseMatrix;
	  var Spa = type.Spa;
	  
	  /**
	   * Calculate the Matrix LU decomposition with partial pivoting. Matrix `A` is decomposed in two matrices (`L`, `U`) and a
	   * row permutation vector `p` where `A[p,:] = L * U`
	   *
	   * Syntax:
	   *
	   *    math.lup(A);
	   *
	   * Example:
	   *
	   *    var m = [[2, 1], [1, 4]];
	   *    var r = math.lup(m);
	   *    // r = {
	   *    //   L: [[1, 0], [0.5, 1]],
	   *    //   U: [[2, 1], [0, 3.5]],
	   *    //   P: [0, 1]
	   *    // }
	   *
	   * See also:
	   *
	   *    slu, lsolve, lusolve, usolve
	   *
	   * @param {Matrix | Array} A    A two dimensional matrix or array for which to get the LUP decomposition.
	   *
	   * @return {{L: Array | Matrix, U: Array | Matrix, P: Array.<number>}} The lower triangular matrix, the upper triangular matrix and the permutation matrix.
	   */
	  var lup = typed('lup', {
	
	    'DenseMatrix': function (m) {
	      return _denseLUP(m);
	    },
	    
	    'SparseMatrix': function (m) {
	      return _sparseLUP(m);
	    },
	
	    'Array': function (a) {
	      // create dense matrix from array
	      var m = matrix(a);
	      // lup, use matrix implementation
	      var r = _denseLUP(m);
	      // result
	      return {
	        L: r.L.valueOf(),
	        U: r.U.valueOf(),
	        p: r.p
	      };
	    }
	  });
	
	  var _denseLUP = function (m) {
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // minimum rows and columns
	    var n = Math.min(rows, columns);
	    // matrix array, clone original data
	    var data = object.clone(m._data);
	    // l matrix arrays
	    var ldata = [];
	    var lsize = [rows, n];
	    // u matrix arrays
	    var udata = [];
	    var usize = [n, columns];
	    // vars
	    var i, j, k;
	    // permutation vector    
	    var p = [];
	    for (i = 0; i < rows; i++)
	      p[i] = i;    
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // skip first column in upper triangular matrix
	      if (j > 0) {
	        // loop rows
	        for (i = 0; i < rows; i++) {
	          // min i,j
	          var min = Math.min(i, j);
	          // v[i, j]
	          var s = 0;
	          // loop up to min
	          for (k = 0; k < min; k++) {
	            // s = l[i, k] - data[k, j]
	            s = addScalar(s, multiplyScalar(data[i][k], data[k][j]));
	          }
	          data[i][j] = subtract(data[i][j], s);
	        }
	      }      
	      // row with larger value in cvector, row >= j
	      var pi = j;
	      var pabsv = 0;
	      var vjj = 0;
	      // loop rows
	      for (i = j; i < rows; i++) {
	        // data @ i, j
	        var v = data[i][j];
	        // absolute value
	        var absv = abs(v);
	        // value is greater than pivote value
	        if (larger(absv, pabsv)) {
	          // store row
	          pi = i;
	          // update max value
	          pabsv = absv;
	          // value @ [j, j]
	          vjj = v;
	        }
	      }
	      // swap rows (j <-> pi)
	      if (j !== pi) {
	        // swap values j <-> pi in p
	        p[j] = [p[pi], p[pi] = p[j]][0];
	        // swap j <-> pi in data
	        DenseMatrix._swapRows(j, pi, data);
	      }
	      // check column is in lower triangular matrix
	      if (j < rows) {
	        // loop rows (lower triangular matrix)
	        for (i = j + 1; i < rows; i++) {
	          // value @ i, j
	          var vij = data[i][j];
	          if (!equalScalar(vij, 0)) {
	            // update data
	            data[i][j] = divideScalar(data[i][j], vjj);
	          }
	        }
	      }
	    }
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // loop rows
	      for (i = 0; i < rows; i++) {
	        // initialize row in arrays
	        if (j === 0) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i] = [];
	          }
	          // L
	          ldata[i] = [];
	        }
	        // check we are in the upper triangular matrix
	        if (i < j) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i][j] = data[i][j];
	          }
	          // check column exists in lower triangular matrix
	          if (j < rows) {
	            // L
	            ldata[i][j] = 0;
	          }
	          continue;
	        }
	        // diagonal value
	        if (i === j) {
	          // check row exists in upper triangular matrix
	          if (i < columns) {
	            // U
	            udata[i][j] = data[i][j];
	          }
	          // check column exists in lower triangular matrix
	          if (j < rows) {
	            // L
	            ldata[i][j] = 1;
	          }
	          continue;
	        }
	        // check row exists in upper triangular matrix
	        if (i < columns) {
	          // U
	          udata[i][j] = 0;
	        }
	        // check column exists in lower triangular matrix
	        if (j < rows) {
	          // L
	          ldata[i][j] = data[i][j];
	        }
	      }
	    }
	    // l matrix
	    var l =  new DenseMatrix({
	      data: ldata,
	      size: lsize
	    });
	    // u matrix
	    var u =  new DenseMatrix({
	      data: udata,
	      size: usize
	    });
	    // p vector
	    var pv = [];
	    for (i = 0, n = p.length; i < n; i++)
	      pv[p[i]] = i;
	    // return matrices
	    return { 
	      L: l, 
	      U: u, 
	      p: pv, 
	      toString: function () {
	        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
	      }
	    };
	  };
	  
	  var _sparseLUP = function (m) {
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // minimum rows and columns
	    var n = Math.min(rows, columns);
	    // matrix arrays (will not be modified, thanks to permutation vector)
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // l matrix arrays
	    var lvalues = [];
	    var lindex = [];
	    var lptr = [];
	    var lsize = [rows, n];
	    // u matrix arrays
	    var uvalues = [];
	    var uindex = [];
	    var uptr = [];
	    var usize = [n, columns];
	    // vars
	    var i, j, k;
	    // permutation vectors, (current index -> original index) and (original index -> current index)
	    var pv_co = [];
	    var pv_oc = [];
	    for (i = 0; i < rows; i++) {
	      pv_co[i] = i;
	      pv_oc[i] = i;
	    }
	    // swap indices in permutation vectors (condition x < y)!
	    var swapIndeces = function (x, y) {      
	      // find pv indeces getting data from x and y
	      var kx = pv_oc[x];
	      var ky = pv_oc[y];
	      // update permutation vector current -> original
	      pv_co[kx] = y;
	      pv_co[ky] = x;
	      // update permutation vector original -> current
	      pv_oc[x] = ky;
	      pv_oc[y] = kx;
	    };
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // sparse accumulator
	      var spa = new Spa();            
	      // check lower triangular matrix has a value @ column j
	      if (j < rows) {
	        // update ptr
	        lptr.push(lvalues.length);
	        // first value in j column for lower triangular matrix
	        lvalues.push(1);
	        lindex.push(j);
	      }
	      // update ptr
	      uptr.push(uvalues.length);
	      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	      var k0 = ptr[j];
	      var k1 = ptr[j + 1];
	      // copy column j into sparse accumulator
	      for (k = k0; k < k1; k++) {
	        // row
	        i = index[k];
	        // copy column values into sparse accumulator (use permutation vector)
	        spa.set(pv_co[i], values[k]);
	      }
	      // skip first column in upper triangular matrix
	      if (j > 0) {
	        // loop rows in column j (above diagonal)
	        spa.forEach(0, j - 1, function (k, vkj) {
	          // loop rows in column k (L)
	          SparseMatrix._forEachRow(k, lvalues, lindex, lptr, function (i, vik) {
	            // check row is below k
	            if (i > k) {
	              // update spa value
	              spa.accumulate(i, unaryMinus(multiplyScalar(vik, vkj)));
	            }
	          });
	        });        
	      }
	      // row with larger value in spa, row >= j
	      var pi = j;
	      var vjj = spa.get(j);
	      var pabsv = abs(vjj);      
	      // loop values in spa (order by row, below diagonal)
	      spa.forEach(j + 1, rows - 1, function (x, v) {
	        // absolute value
	        var absv = abs(v);
	        // value is greater than pivote value
	        if (larger(absv, pabsv)) {
	          // store row
	          pi = x;
	          // update max value
	          pabsv = absv;
	          // value @ [j, j]
	          vjj = v;
	        }
	      });
	      // swap rows (j <-> pi)
	      if (j !== pi) {
	        // swap values j <-> pi in L
	        SparseMatrix._swapRows(j, pi, lsize[1], lvalues, lindex, lptr);
	        // swap values j <-> pi in U
	        SparseMatrix._swapRows(j, pi, usize[1], uvalues, uindex, uptr);
	        // swap values in spa
	        spa.swap(j, pi);
	        // update permutation vector (swap values @ j, pi)
	        swapIndeces(j, pi);
	      }
	      // loop values in spa (order by row)
	      spa.forEach(0, rows - 1, function (x, v) {
	        // check we are above diagonal
	        if (x <= j) {
	          // update upper triangular matrix
	          uvalues.push(v);
	          uindex.push(x);
	        }
	        else {
	          // update value
	          v = divideScalar(v, vjj);
	          // check value is non zero
	          if (!equalScalar(v, 0)) {
	            // update lower triangular matrix
	            lvalues.push(v);
	            lindex.push(x);
	          }
	        }
	      });
	    }
	    // update ptrs
	    uptr.push(uvalues.length);
	    lptr.push(lvalues.length);
	
	    // return matrices
	    return {
	      L: new SparseMatrix({
	        values: lvalues,
	        index: lindex,
	        ptr: lptr,
	        size: lsize
	      }), 
	      U: new SparseMatrix({
	        values: uvalues,
	        index: uindex,
	        ptr: uptr,
	        size: usize
	      }),
	      p: pv_co,
	      toString: function () {
	        return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\nP: ' + this.p;
	      }
	    };
	  };
	  
	  return lup;
	}
	
	exports.name = 'lup';
	exports.factory = factory;


/***/ }),
/* 409 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(90);
	
	var number = util.number,
	    
	    isInteger = number.isInteger;
	
	function factory (type, config, load, typed) {
	
	  var cs_sqr = load(__webpack_require__(410));
	  var cs_lu = load(__webpack_require__(421));
	
	  /**
	   * Calculate the Sparse Matrix LU decomposition with full pivoting. Sparse Matrix `A` is decomposed in two matrices (`L`, `U`) and two permutation vectors (`pinv`, `q`) where
	   *
	   * `P * A * Q = L * U`
	   *
	   * Syntax:
	   *
	   *    math.slu(A, order, threshold);
	   *
	   * See also:
	   *
	   *    lup, lsolve, usolve, lusolve
	   *
	   * @param {SparseMatrix} A              A two dimensional sparse matrix for which to get the LU decomposition.
	   * @param {Number}       order          The Symbolic Ordering and Analysis order:
	   *                                       0 - Natural ordering, no permutation vector q is returned
	   *                                       1 - Matrix must be square, symbolic ordering and analisis is performed on M = A + A'
	   *                                       2 - Symbolic ordering and analisis is performed on M = A' * A. Dense columns from A' are dropped, A recreated from A'. 
	   *                                           This is appropriatefor LU factorization of unsymmetric matrices.
	   *                                       3 - Symbolic ordering and analisis is performed on M = A' * A. This is best used for LU factorization is matrix M has no dense rows.
	   *                                           A dense row is a row with more than 10*sqr(columns) entries.
	   * @param {Number}       threshold       Partial pivoting threshold (1 for partial pivoting)
	   *
	   * @return {Object} The lower triangular matrix, the upper triangular matrix and the permutation vectors.
	   */
	  var slu = typed('slu', {
	
	    'SparseMatrix, number, number': function (a, order, threshold) {
	      // verify order
	      if (!isInteger(order) || order < 0 || order > 3)
	        throw new Error('Symbolic Ordering and Analysis order must be an integer number in the interval [0, 3]');
	      // verify threshold
	      if (threshold < 0 || threshold > 1)
	        throw new Error('Partial pivoting threshold must be a number from 0 to 1');
	      
	      // perform symbolic ordering and analysis
	      var s = cs_sqr(order, a, false);
	      
	      // perform lu decomposition
	      var f = cs_lu(a, s, threshold);
	      
	      // return decomposition
	      return {
	        L: f.L,
	        U: f.U,
	        p: f.pinv,
	        q: s.q,
	        toString: function () {
	          return 'L: ' + this.L.toString() + '\nU: ' + this.U.toString() + '\np: ' + this.p.toString() + (this.q ? '\nq: ' + this.q.toString() : '') + '\n';
	        }
	      };
	    }
	  });
	
	  return slu;
	}
	
	exports.name = 'slu';
	exports.factory = factory;


/***/ }),
/* 410 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load) {
	
	  var cs_amd = load(__webpack_require__(411));
	  var cs_permute = load(__webpack_require__(416));
	  var cs_etree = load(__webpack_require__(417));
	  var cs_post = load(__webpack_require__(418));
	  var cs_counts = load(__webpack_require__(419));
	
	  /**
	   * Symbolic ordering and analysis for QR and LU decompositions.
	   *
	   * @param {Number}  order           The ordering strategy (see cs_amd for more details)
	   * @param {Matrix}  a               The A matrix
	   * @param {boolean} qr              Symbolic ordering and analysis for QR decomposition (true) or
	   *                                  symbolic ordering and analysis for LU decomposition (false)
	   *
	   * @return {Object}                 The Symbolic ordering and analysis for matrix A
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_sqr = function (order, a, qr) {
	    // a arrays
	    var aptr = a._ptr;
	    var asize = a._size;
	    // columns
	    var n = asize[1];
	    // vars
	    var k;
	    // symbolic analysis result
	    var s = {};    
	    // fill-reducing ordering
	    s.q = cs_amd(order, a);
	    // validate results
	    if (order && !s.q) 
	      return null;
	    // QR symbolic analysis
	    if (qr) {
	      // apply permutations if needed
	      var c = order ? cs_permute(a, null, s.q, 0) : a;
	      // etree of C'*C, where C=A(:,q)
	      s.parent = cs_etree(c, 1);
	      // post order elimination tree
	      var post = cs_post (s.parent, n);
	      // col counts chol(C'*C)
	      s.cp = cs_counts(c, s.parent, post, 1);
	      // check we have everything needed to calculate number of nonzero elements
	      if (c && s.parent && s.cp && _vcount(c, s)) {
	        // calculate number of nonzero elements
	        for (s.unz = 0, k = 0; k < n; k++) 
	          s.unz += s.cp[k];
	      }
	    }
	    else {
	      // for LU factorization only, guess nnz(L) and nnz(U)
	      s.unz = 4 * (aptr[n]) + n;
	      s.lnz = s.unz;
	    }
	    // return result S
	    return s;
	  };
	  
	  /**
	   * Compute nnz(V) = s.lnz, s.pinv, s.leftmost, s.m2 from A and s.parent
	   */
	  var _vcount = function (a, s) {
	    // a arrays
	    var aptr = a._ptr;
	    var aindex = a._index;
	    var asize = a._size;
	    // rows & columns
	    var m = asize[0];
	    var n = asize[1];
	    // initialize s arrays
	    s.pinv = []; // (m + n);
	    s.leftmost = []; // (m);
	    // vars
	    var parent = s.parent;
	    var pinv = s.pinv;
	    var leftmost = s.leftmost;
	    // workspace, next: first m entries, head: next n entries, tail: next n entries, nque: next n entries
	    var w = []; // (m + 3 * n);
	    var next = 0;
	    var head = m;
	    var tail = m + n;
	    var nque = m + 2 * n;
	    // vars
	    var i, k, p, p0, p1;
	    // initialize w
	    for (k = 0; k < n; k++) {
	      // queue k is empty
	      w[head + k] = -1;
	      w[tail + k] = -1;
	      w[nque + k] = 0;
	    }
	    // initialize row arrays
	    for (i = 0; i < m; i++) 
	      leftmost[i] = -1;
	    // loop columns backwards    
	    for (k = n - 1; k >= 0; k--) {
	      // values & index for column k
	      for (p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
	        // leftmost[i] = min(find(A(i,:)))
	        leftmost[aindex[p]] = k;
	      }
	    }
	    // scan rows in reverse order
	    for (i = m - 1; i >= 0; i--) {
	      // row i is not yet ordered
	      pinv[i] = -1;
	      k = leftmost[i];
	      // check row i is empty
	      if (k == -1) 
	        continue;
	      // first row in queue k
	      if (w[nque + k]++ === 0) 
	        w[tail + k] = i;
	      // put i at head of queue k
	      w[next + i] = w[head + k];
	      w[head + k] = i;
	    }
	    s.lnz = 0;
	    s.m2 = m;
	    // find row permutation and nnz(V)
	    for (k = 0; k < n; k++) {
	      // remove row i from queue k
	      i = w[head + k];
	      // count V(k,k) as nonzero
	      s.lnz++;
	      // add a fictitious row
	      if (i < 0) 
	        i = s.m2++;
	      // associate row i with V(:,k)
	      pinv[i] = k;
	      // skip if V(k+1:m,k) is empty
	      if (--nque[k] <= 0) 
	        continue;
	      // nque[k] is nnz (V(k+1:m,k))
	      s.lnz += w[nque + k];
	      // move all rows to parent of k
	      var pa = parent[k];
	      if (pa != -1) {
	        if (w[nque + pa] === 0) 
	          w[tail + pa] = w[tail + k];
	        w[next + w[tail + k]] = w[head + pa];
	        w[head + pa] = w[next + i];
	        w[nque + pa] += w[nque + k];
	      }
	    }
	    for (i = 0; i < m; i++) {
	      if (pinv[i] < 0) 
	        pinv[i] = k++;
	    }
	    return true;
	  };
	
	  return cs_sqr;
	}
	
	exports.name = 'cs_sqr';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 411 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load) {
	
	  var cs_flip = load(__webpack_require__(412));
	  var cs_fkeep = load(__webpack_require__(413));
	  var cs_tdfs = load(__webpack_require__(414));
	  
	  var add       = load(__webpack_require__(103));
	  var multiply  = load(__webpack_require__(136));
	  var transpose = load(__webpack_require__(415));
	
	  /**
	   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used 
	   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization
	   * than A. It is a gready method that selects the sparsest pivot row and column during the course
	   * of a right looking sparse Cholesky factorization.
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   *
	   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR
	   * @param {Matrix} m        Sparse Matrix
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_amd = function (order, a) {
	    // check input parameters
	    if (!a || order <= 0 || order > 3)
	      return null;
	    // a matrix arrays
	    var asize = a._size;
	    // rows and columns
	    var m = asize[0];
	    var n = asize[1];    
	    // initialize vars
	    var lemax = 0;
	    // dense threshold
	    var dense = Math.max(16, 10 * Math.sqrt(n));
	    dense = Math.min(n - 2, dense);
	    // create target matrix C
	    var cm = _createTargetMatrix(order, a, m, n, dense);
	    // drop diagonal entries
	    cs_fkeep(cm, _diag, null);
	    // C matrix arrays
	    var cindex = cm._index;
	    var cptr = cm._ptr;
	
	    // number of nonzero elements in C
	    var cnz = cptr[n];
	    
	    // allocate result (n+1)
	    var P = [];
	    
	    // create workspace (8 * (n + 1))
	    var W = [];
	    var len = 0; // first n + 1 entries
	    var nv = n + 1; // next n + 1 entries
	    var next = 2 * (n + 1); // next n + 1 entries
	    var head = 3 * (n + 1);  // next n + 1 entries
	    var elen = 4 * (n + 1);  // next n + 1 entries
	    var degree = 5 * (n + 1);  // next n + 1 entries
	    var w = 6 * (n + 1);  // next n + 1 entries
	    var hhead = 7 * (n + 1);  // last n + 1 entries    
	
	    // use P as workspace for last
	    var last = P;
	    
	    // initialize quotient graph
	    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);
	    
	    // initialize degree lists
	    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);
	    
	    // minimum degree node
	    var mindeg = 0;
	    
	    // vars
	    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;
	    
	    // while (selecting pivots) do
	    while (nel < n) {
	      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first
	      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow
	      // many nodes have been eliminated.
	      for (k = -1; mindeg < n && (k = W[head + mindeg]) == -1; mindeg++);      
	      if (W[next + k] != -1) 
	        last[W[next + k]] = -1;
	      // remove k from degree list
	      W[head + mindeg] = W[next + k];
	      // elenk = |Ek|
	      var elenk = W[elen + k];
	      // # of nodes k represents
	      var nvk = W[nv + k];
	      // W[nv + k] nodes of A eliminated
	      nel += nvk;
	
	      // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is 
	      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the
	      // degree lists. All elements e in Ek are absorved into element k.
	      var dk = 0;
	      // flag k as in Lk
	      W[nv + k] = -nvk;
	      var p = cptr[k];
	      // do in place if W[elen + k] == 0
	      var pk1 = (elenk === 0) ? p : cnz;
	      var pk2 = pk1;
	      for (k1 = 1; k1 <= elenk + 1; k1++) {
	        if (k1 > elenk) {
	          // search the nodes in k
	          e = k;
	          // list of nodes starts at cindex[pj]
	          pj = p;
	          // length of list of nodes in k
	          ln = W[len + k] - elenk;
	        }
	        else {
	          // search the nodes in e
	          e = cindex[p++];
	          pj = cptr[e];
	          // length of list of nodes in e
	          ln = W[len + e];
	        }
	        for (k2 = 1; k2 <= ln; k2++) {
	          i = cindex[pj++];
	          // check  node i dead, or seen
	          if ((nvi = W[nv + i]) <= 0) 
	            continue;
	          // W[degree + Lk] += size of node i
	          dk += nvi;
	          // negate W[nv + i] to denote i in Lk
	          W[nv + i] = -nvi;
	          // place i in Lk
	          cindex[pk2++] = i;
	          if (W[next + i] != -1) 
	            last[W[next + i]] = last[i];
	          // check we need to remove i from degree list
	          if (last[i] != -1) 
	            W[next + last[i]] = W[next + i];
	          else
	            W[head + W[degree + i]] = W[next + i];
	        }
	        if (e != k) {
	          // absorb e into k
	          cptr[e] = cs_flip(k);
	          // e is now a dead element
	          W[w + e] = 0;
	        }
	      }
	      // cindex[cnz...nzmax] is free
	      if (elenk !== 0) 
	        cnz = pk2;
	      // external degree of k - |Lk\i|
	      W[degree + k] = dk;
	      // element k is in cindex[pk1..pk2-1]
	      cptr[k] = pk1;
	      W[len + k] = pk2 - pk1;
	      // k is now an element
	      W[elen + k] = -2;
	            
	      // Find set differences. The scan1 function now computes the set differences |Le \ Lk| for all elements e. At the start of the
	      // scan, no entry in the w array is greater than or equal to mark.
	      
	      // clear w if necessary
	      mark = _wclear(mark, lemax, W, w, n);
	      // scan 1: find |Le\Lk|
	      for (pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk];
	        // check if W[elen + i] empty, skip it
	        if ((eln = W[elen + i]) <= 0) 
	          continue;
	        // W[nv + i] was negated
	        nvi = -W[nv + i];
	        var wnvi = mark - nvi;
	        // scan Ei
	        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {
	          e = cindex[p];
	          if (W[w + e] >= mark) {
	            // decrement |Le\Lk|
	            W[w + e] -= nvi;
	          }
	          else if (W[w + e] !== 0) {
	            // ensure e is a live element, 1st time e seen in scan 1
	            W[w + e] = W[degree + e] + wnvi;
	          }
	        }
	      }
	      
	      // degree update
	      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash
	      // function h(i) for all nodes in Lk.
	      
	      // scan2: degree update
	      for (pk = pk1; pk < pk2; pk++) {
	        // consider node i in Lk
	        i = cindex[pk];
	        p1 = cptr[i];
	        p2 = p1 + W[elen + i] - 1;
	        pn = p1;
	        // scan Ei
	        for (h = 0, d = 0, p = p1; p <= p2; p++) {
	          e = cindex[p];
	          // check e is an unabsorbed element
	          if (W[w + e] !== 0) {
	            // dext = |Le\Lk|
	            var dext = W[w + e] - mark;
	            if (dext > 0) {
	              // sum up the set differences
	              d += dext;
	              // keep e in Ei
	              cindex[pn++] = e;
	              // compute the hash of node i
	              h += e;
	            }
	            else {
	              // aggressive absorb. e->k
	              cptr[e] = cs_flip(k);
	              // e is a dead element
	              W[w + e] = 0;
	            }
	          }
	        }
	        // W[elen + i] = |Ei|
	        W[elen + i] = pn - p1 + 1;
	        var p3 = pn;
	        var p4 = p1 + W[len + i];
	        // prune edges in Ai
	        for (p = p2 + 1; p < p4; p++) {
	          j = cindex[p];
	          // check node j dead or in Lk
	          var nvj = W[nv + j];
	          if (nvj <= 0) 
	            continue;
	          // degree(i) += |j|
	          d += nvj;
	          // place j in node list of i
	          cindex[pn++] = j;
	          // compute hash for node i
	          h += j;
	        }
	        // check for mass elimination
	        if (d === 0) {
	          // absorb i into k
	          cptr[i] = cs_flip(k);
	          nvi = -W[nv + i];
	          // |Lk| -= |i|
	          dk -= nvi;
	          // |k| += W[nv + i]
	          nvk += nvi;
	          nel += nvi;
	          W[nv + i] = 0;
	          // node i is dead
	          W[elen + i] = -1;
	        }
	        else {
	          // update degree(i)
	          W[degree + i] = Math.min(W[degree + i], d);
	          // move first node to end
	          cindex[pn] = cindex[p3];
	          // move 1st el. to end of Ei
	          cindex[p3] = cindex[p1];
	          // add k as 1st element in of Ei
	          cindex[p1] = k;
	          // new len of adj. list of node i
	          W[len + i] = pn - p1 + 1;
	          // finalize hash of i
	          h = (h < 0 ? -h : h) % n;
	          // place i in hash bucket
	          W[next + i] = W[hhead + h];
	          W[hhead + h] = i;
	          // save hash of i in last[i]
	          last[i] = h;
	        }
	      }
	      // finalize |Lk|
	      W[degree + k] = dk;
	      lemax = Math.max(lemax, dk);
	      // clear w
	      mark = _wclear(mark + lemax, lemax, W, w, n);
	      
	      // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.
	      // If two nodes have identical adjacency lists, their hash functions wil be identical.
	      for (pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk];
	        // check i is dead, skip it
	        if (W[nv + i] >= 0) 
	          continue;
	        // scan hash bucket of node i
	        h = last[i];
	        i = W[hhead + h];
	        // hash bucket will be empty
	        W[hhead + h] = -1;
	        for (; i != -1 && W[next + i] != -1; i = W[next + i], mark++) {
	          ln = W[len + i];
	          eln = W[elen + i];
	          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) 
	            W[w + cindex[p]] = mark;
	          var jlast = i;
	          // compare i with all j
	          for (j = W[next + i]; j != -1; ) {
	            var ok = W[len + j] === ln && W[elen + j] === eln;
	            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {
	              // compare i and j
	              if (W[w + cindex[p]] != mark) 
	                ok = 0;
	            }
	            // check i and j are identical
	            if (ok) {
	              // absorb j into i
	              cptr[j] = cs_flip(i);
	              W[nv + i] += W[nv + j];
	              W[nv + j] = 0;
	              // node j is dead
	              W[elen + j] = -1;
	              // delete j from hash bucket
	              j = W[next + j];
	              W[next + jlast] = j;
	            }
	            else {
	              // j and i are different
	              jlast = j;
	              j = W[next + j];
	            }
	          }
	        }
	      }
	      
	      // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.
	      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.
	      for (p = pk1, pk = pk1; pk < pk2; pk++) {
	        i = cindex[pk];
	        // check  i is dead, skip it
	        if ((nvi = -W[nv + i]) <= 0) 
	          continue;
	        // restore W[nv + i]
	        W[nv + i] = nvi;
	        // compute external degree(i)
	        d = W[degree + i] + dk - nvi;
	        d = Math.min(d, n - nel - nvi);
	        if (W[head + d] != -1) 
	          last[W[head + d]] = i;
	        // put i back in degree list
	        W[next + i] = W[head + d];
	        last[i] = -1;
	        W[head + d] = i;
	        // find new minimum degree
	        mindeg = Math.min(mindeg, d);
	        W[degree + i] = d;
	        // place i in Lk
	        cindex[p++] = i;
	      }
	      // # nodes absorbed into k
	      W[nv + k] = nvk;
	      // length of adj list of element k
	      if ((W[len + k] = p - pk1) === 0) {
	        // k is a root of the tree
	        cptr[k] = -1;
	        // k is now a dead element
	        W[w + k] = 0;
	      }
	      if (elenk !== 0) {
	        // free unused space in Lk
	        cnz = p;
	      }
	    }
	    
	    // Postordering. The elimination is complete, but no permutation has been computed. All that is left 
	    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if
	    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation
	    // is computed. The tree is restored by unflipping all of ptr.
	    
	    // fix assembly tree
	    for (i = 0; i < n; i++) 
	      cptr[i] = cs_flip(cptr[i]);
	    for (j = 0; j <= n; j++) 
	      W[head + j] = -1;
	    // place unordered nodes in lists
	    for (j = n; j >= 0; j--) {
	      // skip if j is an element
	      if (W[nv + j] > 0)
	        continue;
	      // place j in list of its parent
	      W[next + j] = W[head + cptr[j]];
	      W[head + cptr[j]] = j;
	    }
	    // place elements in lists
	    for (e = n; e >= 0; e--) {
	      // skip unless e is an element
	      if (W[nv + e] <= 0)
	        continue;
	      if (cptr[e] != -1) {
	        // place e in list of its parent
	        W[next + e] = W[head + cptr[e]];
	        W[head + cptr[e]] = e;
	      }
	    }
	    // postorder the assembly tree
	    for (k = 0, i = 0; i <= n; i++) {
	      if (cptr[i] == -1) 
	        k = cs_tdfs(i, k, W, head, next, P, w);
	    }
	    // remove last item in array
	    P.splice(P.length - 1, 1);
	    // return P
	    return P;
	  };
	  
	  /**
	   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation
	   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.
	   *
	   * Order: 0
	   *   A natural ordering P=null matrix is returned.
	   *
	   * Order: 1
	   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.
	   *   P = M + M'
	   *
	   * Order: 2
	   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.
	   *   P = M' * M
	   * 
	   * Order: 3
	   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.
	   *   P = M' * M
	   */
	  var _createTargetMatrix = function (order, a, m, n, dense) {
	    // compute A'
	    var at = transpose(a);
	
	    // check order = 1, matrix must be square
	    if (order === 1 && n === m) {
	      // C = A + A'
	      return add(a, at);
	    }
	    
	    // check order = 2, drop dense columns from M'
	    if (order == 2) {
	      // transpose arrays
	      var tindex = at._index;
	      var tptr = at._ptr;
	      // new column index
	      var p2 = 0;
	      // loop A' columns (rows)
	      for (var j = 0; j < m; j++) {
	        // column j of AT starts here
	        var p = tptr[j];
	        // new column j starts here
	        tptr[j] = p2;
	        // skip dense col j
	        if (tptr[j + 1] - p > dense) 
	          continue;
	        // map rows in column j of A
	        for (var p1 = tptr[j + 1]; p < p1; p++) 
	          tindex[p2++] = tindex[p];
	      }
	      // finalize AT
	      tptr[m] = p2;
	      // recreate A from new transpose matrix
	      a = transpose(at);
	      // use A' * A
	      return multiply(at, a);
	    }
	    
	    // use A' * A, square or rectangular matrix
	    return multiply(at, a);
	  };
	
	  /**
	   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:
	   *
	   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.
	   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).
	   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.
	   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).
	   */
	  var _initializeQuotientGraph = function (n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {
	    // Initialize quotient graph
	    for (var k = 0; k < n; k++) 
	      W[len + k] = cptr[k + 1] - cptr[k];
	    W[len + n] = 0;
	    // initialize workspace
	    for (var i = 0; i <= n; i++) {
	      // degree list i is empty
	      W[head + i] = -1;
	      last[i] = -1;
	      W[next + i] = -1;
	      // hash list i is empty
	      W[hhead + i] = -1;
	      // node i is just one node
	      W[nv + i] = 1;
	      // node i is alive
	      W[w + i] = 1;
	      // Ek of node i is empty
	      W[elen + i] = 0;
	      // degree of node i
	      W[degree + i] = W[len + i];
	    }
	    // clear w
	    var mark = _wclear(0, 0, W, w, n);
	    // n is a dead element
	    W[elen + n] = -2;
	    // n is a root of assembly tree
	    cptr[n] = -1;
	    // n is a dead element
	    W[w + n] = 0;
	    // return mark
	    return mark;
	  };
	
	  /**
	   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with 
	   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the
	   * output permutation p.
	   */
	  var _initializeDegreeLists = function (n, cptr, W, degree, elen, w, dense, nv, head, last, next) {
	    // result
	    var nel = 0;
	    // loop columns
	    for (var i = 0; i < n; i++) {
	      // degree @ i
	      var d = W[degree + i];
	      // check node i is empty
	      if (d === 0) {
	        // element i is dead
	        W[elen + i] = -2;
	        nel++;
	        // i is a root of assembly tree
	        cptr[i] = -1;
	        W[w + i] = 0;
	      }
	      else if (d > dense) {
	        // absorb i into element n
	        W[nv + i] = 0;
	        // node i is dead
	        W[elen + i] = -1;
	        nel++;
	        cptr[i] = cs_flip(n);
	        W[nv + n]++;
	      }
	      else {
	        var h = W[head + d];
	        if (h != -1)
	          last[h] = i;
	        // put node i in degree list d
	        W[next + i] = W[head + d];
	        W[head + d] = i;
	      }
	    }
	    return nel;
	  };
	
	  var _wclear = function(mark, lemax, W, w, n) {
	    if (mark < 2 || (mark + lemax < 0)) {
	      for (var k = 0; k < n; k++) {
	        if (W[w + k] !== 0)
	          W[w + k] = 1;
	      }
	      mark = 2 ;
	    }
	    // at this point, W [0..n-1] < mark holds
	    return mark;
	  };
	  
	  var _diag = function (i, j) { 
	    return i != j;
	  };
	  
	  return cs_amd;
	}
	
	exports.name = 'cs_amd';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 412 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory () {
	
	  /**
	   * This function "flips" its input about the integer -1.
	   *
	   * @param {Number}  i               The value to flip
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_flip = function (i) {
	    // flip the value
	    return -i - 2;
	  };
	
	  return cs_flip;
	}
	
	exports.name = 'cs_flip';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 413 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory () {
	
	  /**
	   * Keeps entries in the matrix when the callback function returns true, removes the entry otherwise
	   *
	   * @param {Matrix}   a              The sparse matrix
	   * @param {function} callback       The callback function, function will be invoked with the following args:
	   *                                    - The entry row
	   *                                    - The entry column
	   *                                    - The entry value
	   *                                    - The state parameter
	   * @param {any}      other          The state
	   *
	   * @return                          The number of nonzero elements in the matrix
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_fkeep = function (a, callback, other) {
	    // a arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    // columns
	    var n = asize[1];
	    // nonzero items
	    var nz = 0;
	    // loop columns
	    for (var j = 0; j < n; j++) {
	      // get current location of col j
	      var p = aptr[j];
	      // record new location of col j
	      aptr[j] = nz;
	      for (; p < aptr[j+1]; p++) {
	        // check we need to keep this item
	        if (callback(aindex[p], j, avalues ? avalues[p] : 1, other)) {
	          // keep A(i,j)
	          aindex[nz] = aindex[p];
	          // check we need to process values (pattern only)
	          if (avalues) 
	            avalues[nz] = avalues[p];
	          // increment nonzero items
	          nz++;
	        }
	      }
	    }
	    // finalize A
	    aptr[n] = nz;
	    // trim arrays
	    aindex.splice(nz, aindex.length - nz);
	    // check we need to process values (pattern only)
	    if (avalues)
	      avalues.splice(nz, avalues.length - nz);    
	    // return number of nonzero items
	    return (nz);
	  };
	  
	  return cs_fkeep;
	}
	
	exports.name = 'cs_fkeep';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 414 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory () {
	
	  /**
	   * Depth-first search and postorder of a tree rooted at node j
	   *
	   * @param {Number}  j               The tree node
	   * @param {Number}  k               
	   * @param {Array}   w               The workspace array
	   * @param {Number}  head            The index offset within the workspace for the head array
	   * @param {Number}  next            The index offset within the workspace for the next array
	   * @param {Array}   post            The post ordering array
	   * @param {Number}  stack           The index offset within the workspace for the stack array
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_tdfs = function (j, k, w, head, next, post, stack) {
	    // variables
	    var top = 0;
	    // place j on the stack
	    w[stack] = j;
	    // while (stack is not empty) 
	    while (top >= 0) {
	      // p = top of stack
	      var p = w[stack + top];
	      // i = youngest child of p
	      var i = w[head + p];
	      if (i == -1) {
	        // p has no unordered children left
	        top--;
	        // node p is the kth postordered node
	        post[k++] = p;
	      }
	      else {
	        // remove i from children of p
	        w[head + p] = w[next + i];
	        // increment top
	        ++top;
	        // start dfs on child node i
	        w[stack + top] = i;
	      }
	    }
	    return k;
	  };
	
	  return cs_tdfs;
	}
	
	exports.name = 'cs_tdfs';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 415 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var clone = __webpack_require__(55).clone;
	var format = __webpack_require__(74).format;
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  var matrix = load(__webpack_require__(104));
	
	  var DenseMatrix = type.DenseMatrix,
	      SparseMatrix = type.SparseMatrix;
	
	  /**
	   * Transpose a matrix. All values of the matrix are reflected over its
	   * main diagonal. Only applicable to two dimensional matrices containing
	   * a vector (i.e. having size `[1,n]` or `[n,1]`). One dimensional
	   * vectors and scalars return the input unchanged.
	   *
	   * Syntax:
	   *
	   *     math.transpose(x)
	   *
	   * Examples:
	   *
	   *     var A = [[1, 2, 3], [4, 5, 6]];
	   *     math.transpose(A);               // returns [[1, 4], [2, 5], [3, 6]]
	   *
	   * See also:
	   *
	   *     diag, inv, subset, squeeze
	   *
	   * @param {Array | Matrix} x  Matrix to be transposed
	   * @return {Array | Matrix}   The transposed matrix
	   */
	  var transpose = typed('transpose', {
	
	    'Array': function (x) {
	      // use dense matrix implementation
	      return transpose(matrix(x)).valueOf();
	    },
	
	    'Matrix': function (x) {
	      // matrix size
	      var size = x.size();
	
	      // result
	      var c;
	      
	      // process dimensions
	      switch (size.length) {
	        case 1:
	          // vector
	          c = x.clone();
	          break;
	
	        case 2:
	          // rows and columns
	          var rows = size[0];
	          var columns = size[1];
	
	          // check columns
	          if (columns === 0) {
	            // throw exception
	            throw new RangeError('Cannot transpose a 2D matrix with no columns (size: ' + format(size) + ')');
	          }
	
	          // process storage format
	          switch (x.storage()) {
	            case 'dense':
	              c = _denseTranspose(x, rows, columns);
	              break;
	            case 'sparse':
	              c = _sparseTranspose(x, rows, columns);
	              break;
	          }
	          break;
	          
	        default:
	          // multi dimensional
	          throw new RangeError('Matrix must be a vector or two dimensional (size: ' + format(this._size) + ')');
	      }
	      return c;
	    },
	
	    // scalars
	    'any': function (x) {
	      return clone(x);
	    }
	  });
	
	  var _denseTranspose = function (m, rows, columns) {
	    // matrix array
	    var data = m._data;
	    // transposed matrix data
	    var transposed = [];
	    var transposedRow;
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // initialize row
	      transposedRow = transposed[j] = [];
	      // loop rows
	      for (var i = 0; i < rows; i++) {
	        // set data
	        transposedRow[i] = clone(data[i][j]);
	      }
	    }
	    // return matrix
	    return new DenseMatrix({
	      data: transposed,
	      size: [columns, rows],
	      datatype: m._datatype
	    });
	  };
	
	  var _sparseTranspose = function (m, rows, columns) {
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // result matrices
	    var cvalues = values ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // row counts
	    var w = [];
	    for (var x = 0; x < rows; x++)
	      w[x] = 0;
	    // vars
	    var p, l, j;
	    // loop values in matrix
	    for (p = 0, l = index.length; p < l; p++) {
	      // number of values in row
	      w[index[p]]++;
	    }
	    // cumulative sum
	    var sum = 0;
	    // initialize cptr with the cummulative sum of row counts
	    for (var i = 0; i < rows; i++) {
	      // update cptr
	      cptr.push(sum);
	      // update sum
	      sum += w[i];
	      // update w
	      w[i] = cptr[i];
	    }
	    // update cptr
	    cptr.push(sum);
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // values & index in column
	      for (var k0 = ptr[j], k1 = ptr[j + 1], k = k0; k < k1; k++) {
	        // C values & index
	        var q = w[index[k]]++;
	        // C[j, i] = A[i, j]
	        cindex[q] = j;
	        // check we need to process values (pattern matrix)
	        if (values)
	          cvalues[q] = clone(values[k]);
	      }
	    }
	    // return matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [columns, rows],
	      datatype: m._datatype
	    });
	  };
	
	  transpose.toTex = {1: '\\left(${args[0]}\\right)' + latex.operators['transpose']};
	
	  return transpose;
	}
	
	exports.name = 'transpose';
	exports.factory = factory;


/***/ }),
/* 416 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory (type) {
	
	  var SparseMatrix = type.SparseMatrix;
	
	  /**
	   * Permutes a sparse matrix C = P * A * Q
	   *
	   * @param {Matrix}  a               The Matrix A
	   * @param {Array}   pinv            The row permutation vector
	   * @param {Array}   q               The column permutation vector
	   * @param {boolean} values          Create a pattern matrix (false), values and pattern otherwise
	   *
	   * @return {Matrix}                 C = P * A * Q, null on error
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_permute = function (a, pinv, q, values) {
	    // a arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // rows & columns
	    var m = asize[0];
	    var n = asize[1];
	    // c arrays
	    var cvalues = values && a._values ? [] : null;
	    var cindex = []; // (aptr[n]);
	    var cptr = []; // (n + 1);
	    // initialize vars
	    var nz = 0;
	    // loop columns    
	    for (var k = 0; k < n; k++) {
	      // column k of C is column q[k] of A
	      cptr[k] = nz;
	      // apply column permutation
	      var j = q ? (q[k]) : k;
	      // loop values in column j of A
	      for (var t0 = aptr[j], t1 = aptr[j + 1], t = t0; t < t1; t++) {
	        // row i of A is row pinv[i] of C
	        var r = pinv ? pinv[aindex[t]] : aindex[t];
	        // index
	        cindex[nz] = r;
	        // check we need to populate values
	        if (cvalues) 
	          cvalues[nz] = avalues[t];
	        // increment number of nonzero elements
	        nz++;
	      }
	    }
	    // finalize the last column of C
	    cptr[n] = nz;
	    // return C matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [m, n],
	      datatype: adt
	    });
	  };
	
	  return cs_permute;
	}
	
	exports.name = 'cs_permute';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 417 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory () {
	
	  /**
	   * Computes the elimination tree of Matrix A (using triu(A)) or the 
	   * elimination tree of A'A without forming A'A.
	   *
	   * @param {Matrix}  a               The A Matrix
	   * @param {boolean} ata             A value of true the function computes the etree of A'A
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_etree = function (a, ata) {
	    // check inputs
	    if (!a)
	      return null;
	    // a arrays
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    // rows & columns
	    var m = asize[0];
	    var n = asize[1];
	    
	    // allocate result
	    var parent = []; // (n)
	    
	    // allocate workspace
	    var w = []; // (n + (ata ? m : 0))
	    var ancestor = 0; // first n entries in w
	    var prev = n; // last m entries (ata = true)
	    
	    var i, inext;
	    
	    // check we are calculating A'A
	    if (ata) {
	      // initialize workspace
	      for (i = 0; i < m; i++) 
	        w[prev + i] = -1;
	    }
	    // loop columns
	    for (var k = 0; k < n; k++) {
	      // node k has no parent yet
	      parent[k] = -1;
	      // nor does k have an ancestor
	      w[ancestor + k] = -1;
	      // values in column k
	      for (var p0 = aptr[k], p1 = aptr[k + 1], p = p0; p < p1; p++) {
	        // row
	        var r = aindex[p];
	        // node
	        i = ata ? (w[prev + r]) : r;
	        // traverse from i to k 
	        for (; i != -1 && i < k; i = inext) {
	          // inext = ancestor of i
	          inext = w[ancestor + i];
	          // path compression
	          w[ancestor + i] = k;
	          // check no anc., parent is k
	          if (inext == -1) 
	            parent[i] = k;
	        }
	        if (ata) 
	          w[prev + r] = k;
	      }
	    }
	    return parent;
	  };
	
	  return cs_etree;
	}
	
	exports.name = 'cs_etree';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 418 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load) {
	
	  var cs_tdfs = load(__webpack_require__(414));
	
	  /**
	   * Post order a tree of forest
	   *
	   * @param {Array}   parent          The tree or forest
	   * @param {Number}  n               Number of columns
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_post = function (parent, n) {
	    // check inputs
	    if (!parent) 
	      return null;
	    // vars 
	    var k = 0;
	    var j;
	    // allocate result
	    var post = []; // (n);
	    // workspace, head: first n entries, next: next n entries, stack: last n entries
	    var w = []; // (3 * n);
	    var head = 0; 
	    var next = n; 
	    var stack = 2 * n;
	    // initialize workspace
	    for (j = 0; j < n; j++) {
	      // empty linked lists
	      w[head + j] = -1;
	    }
	    // traverse nodes in reverse order
	    for (j = n-1; j >= 0; j--) {
	      // check j is a root
	      if (parent[j] == -1) 
	        continue;
	      // add j to list of its parent
	      w[next + j] = w[head + parent[j]];
	      w[head + parent[j]] = j;
	    }
	    // loop nodes
	    for (j = 0; j < n; j++) {
	      // skip j if it is not a root
	      if (parent[j] != -1) 
	        continue;
	      // depth-first search
	      k = cs_tdfs(j, k, w, head, next, post, stack);
	    }
	    return post;
	  };
	
	  return cs_post;
	}
	
	exports.name = 'cs_post';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 419 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load) {
	
	  var transpose = load(__webpack_require__(415));
	  
	  var cs_leaf = load(__webpack_require__(420));
	
	  /**
	   * Computes the column counts using the upper triangular part of A.
	   * It transposes A internally, none of the input parameters are modified.
	   *
	   * @param {Matrix} a           The sparse matrix A
	   *
	   * @param {Matrix} ata         Count the columns of A'A instead
	   *
	   * @return                     An array of size n of the column counts or null on error
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_counts = function (a, parent, post, ata) {
	    // check inputs
	    if (!a || !parent || !post) 
	      return null;
	    // a matrix arrays
	    var asize = a._size;
	    // rows and columns
	    var m = asize[0];
	    var n = asize[1];   
	    // variables
	    var i, j, k,  J,  p, p0, p1;
	    
	    // workspace size
	    var s = 4 * n + (ata ? (n + m + 1) : 0);
	    // allocate workspace
	    var w = []; // (s)
	    var ancestor = 0; // first n entries
	    var maxfirst = n; // next n entries
	    var prevleaf = 2 * n; // next n entries
	    var first = 3 * n; // next n entries
	    var head = 4 * n; // next n + 1 entries (used when ata is true)
	    var next = 5 * n + 1; // last entries in workspace
	    // clear workspace w[0..s-1]
	    for (k = 0; k < s; k++) 
	      w[k] = -1;
	    
	    // allocate result
	    var colcount = []; // (n);
	    
	    // AT = A'
	    var at = transpose(a);
	    // at arrays
	    var tindex = at._index;
	    var tptr = at._ptr;
	
	    // find w[first + j]
	    for (k = 0; k < n; k++) {
	      j = post[k];
	      // colcount[j]=1 if j is a leaf
	      colcount[j] = (w[first + j] == -1) ? 1 : 0;
	      for (; j != -1 && w[first + j] == -1; j = parent[j]) 
	        w[first + j] = k;
	    }
	
	    // initialize ata if needed
	    if (ata) {
	      // invert post
	      for (k = 0; k < n; k++) 
	        w[post[k]] = k;
	      // loop rows (columns in AT)
	      for (i = 0; i < m; i++) {
	        // values in column i of AT
	        for (k = n, p0 = tptr[i], p1 = tptr[i + 1], p = p0; p < p1; p++) 
	          k = Math.min(k, w[tindex[p]]);
	        // place row i in linked list k
	        w[next + i] = w[head + k];
	        w[head + k] = i;
	      }
	    }
	    
	    // each node in its own set
	    for (i = 0; i < n; i++) 
	      w[ancestor + i] = i;
	    
	    for (k = 0; k < n; k++) {
	      // j is the kth node in postordered etree
	      j = post[k];
	      // check j is not a root
	      if (parent[j] != -1) 
	        colcount[parent[j]]--;
	      
	      // J=j for LL'=A case
	      for (J = (ata ? w[head + k] : j); J != -1; J = (ata ? w[next + J] : -1)) {
	        for (p = tptr[J]; p < tptr[J+1]; p++) {
	          i = tindex[p];
	          var r = cs_leaf(i, j, w, first, maxfirst, prevleaf, ancestor);
	          // check A(i,j) is in skeleton
	          if (r.jleaf >= 1) 
	            colcount[j]++;
	          // check account for overlap in q
	          if (r.jleaf == 2) 
	            colcount[r.q]--;
	        }
	      }
	      if (parent[j] != -1) 
	        w[ancestor + j] = parent[j];
	    }
	    // sum up colcount's of each child
	    for (j = 0; j < n; j++) {
	      if (parent[j] != -1) 
	        colcount[parent[j]] += colcount[j];
	    }
	    return colcount;
	  };
	
	  return cs_counts;
	}
	
	exports.name = 'cs_counts';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 420 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory () {
	
	  /**
	   * This function determines if j is a leaf of the ith row subtree.
	   * Consider A(i,j), node j in ith row subtree and return lca(jprev,j)
	   *
	   * @param {Number}  i               The ith row subtree
	   * @param {Number}  j               The node to test
	   * @param {Array}   w               The workspace array
	   * @param {Number}  first           The index offset within the workspace for the first array
	   * @param {Number}  maxfirst        The index offset within the workspace for the maxfirst array
	   * @param {Number}  prevleaf        The index offset within the workspace for the prevleaf array
	   * @param {Number}  ancestor        The index offset within the workspace for the ancestor array
	   *
	   * @return {Object}
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_leaf = function (i, j, w, first, maxfirst, prevleaf, ancestor) {
	    
	    var s, sparent, jprev;
	    
	    // our result
	    var jleaf = 0;
	    var q;
	    
	    // check j is a leaf
	    if (i <= j || w[first + j] <= w[maxfirst + i]) 
	      return (-1);
	    // update max first[j] seen so far
	    w[maxfirst + i] = w[first + j];
	    // jprev = previous leaf of ith subtree
	    jprev = w[prevleaf + i];
	    w[prevleaf + i] = j;
	    
	    // check j is first or subsequent leaf
	    if (jprev === -1) {
	      // 1st leaf, q = root of ith subtree
	      jleaf = 1;
	      q = i;
	    }
	    else {
	      // update jleaf
	      jleaf = 2;
	      // q = least common ancester (jprev,j)
	      for (q = jprev; q != w[ancestor + q]; q = w[ancestor + q]);
	      for (s = jprev; s != q; s = sparent) {
	        // path compression
	        sparent = w[ancestor + s];
	        w[ancestor + s] = q;
	      }      
	    }
	    return {
	      jleaf: jleaf,
	      q: q
	    };
	  };
	
	  return cs_leaf;
	}
	
	exports.name = 'cs_leaf';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 421 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load) {
	
	  var abs = load(__webpack_require__(138));
	  var divideScalar = load(__webpack_require__(133));
	  var multiply = load(__webpack_require__(136));
	  
	  var larger = load(__webpack_require__(116));
	  var largerEq = load(__webpack_require__(422));
	  
	  var cs_spsolve = load(__webpack_require__(423));
	
	  var SparseMatrix = type.SparseMatrix;
	
	  /**
	   * Computes the numeric LU factorization of the sparse matrix A. Implements a Left-looking LU factorization
	   * algorithm that computes L and U one column at a tume. At the kth step, it access columns 1 to k-1 of L 
	   * and column k of A. Given the fill-reducing column ordering q (see parameter s) computes L, U and pinv so
	   * L * U = A(p, q), where p is the inverse of pinv.
	   *
	   * @param {Matrix}  m               The A Matrix to factorize
	   * @param {Object}  s               The symbolic analysis from cs_sqr(). Provides the fill-reducing 
	   *                                  column ordering q
	   * @param {Number}  tol             Partial pivoting threshold (1 for partial pivoting)
	   *
	   * @return {Number}                 The numeric LU factorization of A or null
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_lu = function (m, s, tol) {
	    // validate input
	    if (!m)
	      return null;
	    // m arrays
	    var size = m._size;
	    // columns
	    var n = size[1];
	    // symbolic analysis result
	    var q;
	    var lnz = 100;
	    var unz = 100;
	    // update symbolic analysis parameters
	    if (s) {
	      q = s.q;
	      lnz = s.lnz || lnz;
	      unz = s.unz || unz;
	    }
	    // L arrays
	    var lvalues = []; // (lnz)
	    var lindex = []; // (lnz);
	    var lptr = []; // (n + 1);
	    // L
	    var L = new SparseMatrix({
	      values: lvalues,
	      index: lindex,
	      ptr: lptr,
	      size: [n, n]
	    });
	    // U arrays
	    var uvalues = []; // (unz);
	    var uindex = []; // (unz);
	    var uptr = []; // (n + 1);
	    // U
	    var U = new SparseMatrix({
	      values: uvalues,
	      index: uindex,
	      ptr: uptr,
	      size: [n, n]
	    });
	    // inverse of permutation vector
	    var pinv = []; // (n);
	    // vars 
	    var i, p;
	    // allocate arrays
	    var x = []; // (n);
	    var xi = []; // (2 * n);
	    // initialize variables
	    for (i = 0; i < n; i++) {
	      // clear workspace
	      x[i] = 0;
	      // no rows pivotal yet
	      pinv[i] = -1;
	      // no cols of L yet
	      lptr[i + 1] = 0;
	    }
	    // reset number of nonzero elements in L and U
	    lnz = 0;
	    unz = 0;
	    // compute L(:,k) and U(:,k)
	    for (var k = 0; k < n; k++) {
	      // update ptr
	      lptr[k] = lnz;
	      uptr[k] = unz;
	      // apply column permutations if needed
	      var col = q ? q[k] : k;
	      // solve triangular system, x = L\A(:,col)
	      var top = cs_spsolve(L, m, col, xi, x, pinv, 1);
	      // find pivot
	      var ipiv = -1;
	      var a = -1;
	      // loop xi[] from top -> n
	      for (p = top; p < n; p++) {
	        // x[i] is nonzero
	        i = xi[p];
	        // check row i is not yet pivotal
	        if (pinv[i] < 0) {
	          // absolute value of x[i]          
	          var xabs = abs(x[i]);
	          // check absoulte value is greater than pivot value
	          if (larger(xabs, a)) {
	            // largest pivot candidate so far
	            a = xabs;
	            ipiv = i;
	          }
	        }
	        else {
	          // x(i) is the entry U(pinv[i],k)
	          uindex[unz] = pinv[i];
	          uvalues[unz++] = x[i];
	        }
	      }
	      // validate we found a valid pivot
	      if (ipiv == -1 || a <= 0) 
	        return null;
	      // update actual pivot column, give preference to diagonal value
	      if (pinv[col] < 0 && largerEq(abs(x[col]), multiply(a, tol)))
	        ipiv = col;
	      // the chosen pivot
	      var pivot = x[ipiv];
	      // last entry in U(:,k) is U(k,k)
	      uindex[unz] = k;
	      uvalues[unz++] = pivot;
	      // ipiv is the kth pivot row
	      pinv[ipiv] = k;
	      // first entry in L(:,k) is L(k,k) = 1
	      lindex[lnz] = ipiv;
	      lvalues[lnz++] = 1;
	      // L(k+1:n,k) = x / pivot      
	      for (p = top; p < n; p++) {
	        // row
	        i = xi[p];
	        // check x(i) is an entry in L(:,k)
	        if (pinv[i] < 0) {
	          // save unpermuted row in L
	          lindex[lnz] = i;
	          // scale pivot column
	          lvalues[lnz++] = divideScalar(x[i], pivot);
	        }
	        // x[0..n-1] = 0 for next k
	        x[i] = 0;
	      }
	    }
	    // update ptr
	    lptr[n] = lnz;
	    uptr[n] = unz;
	    // fix row indices of L for final pinv
	    for (p = 0; p < lnz; p++) 
	      lindex[p] = pinv[lindex[p]];
	    // trim arrays
	    lvalues.splice(lnz, lvalues.length - lnz);
	    lindex.splice(lnz, lindex.length - lnz);
	    uvalues.splice(unz, uvalues.length - unz);
	    uindex.splice(unz, uindex.length - unz);    
	    // return LU factor
	    return {
	      L: L,
	      U: U,
	      pinv: pinv
	    };
	  };
	
	  return cs_lu;
	}
	
	exports.name = 'cs_lu';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 422 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var nearlyEqual = __webpack_require__(58).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(101);
	
	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm07 = load(__webpack_require__(114));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  var latex = __webpack_require__(83);
	
	  /**
	   * Test whether value x is larger or equal to y.
	   *
	   * The function returns true when x is larger than y or the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.largerEq(x, y)
	   *
	   * Examples:
	   *
	   *    math.larger(2, 1 + 1);         // returns false
	   *    math.largerEq(2, 1 + 1);       // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, larger, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is larger or equal to y, else returns false
	   */
	  var largerEq = typed('largerEq', {
	
	    'boolean, boolean': function (x, y) {
	      return x >= y;
	    },
	
	    'number, number': function (x, y) {
	      return x >= y || nearlyEqual(x, y, config.epsilon);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return x.gte(y) || bigNearlyEqual(x, y, config.epsilon);
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      return x.compare(y) !== -1;
	    },
	
	    'Complex, Complex': function () {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },
	
	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return largerEq(x.value, y.value);
	    },
	
	    'string, string': function (x, y) {
	      return x >= y;
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, largerEq);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, largerEq, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, largerEq, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, largerEq);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return largerEq(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return largerEq(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return largerEq(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, largerEq, false);
	          break;
	        default:
	          c = algorithm14(x, y, largerEq, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, largerEq, true);
	          break;
	        default:
	          c = algorithm14(y, x, largerEq, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, largerEq, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, largerEq, true).valueOf();
	    }
	  });
	
	  largerEq.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['largerEq'] + '${args[1]}\\right)'
	  };
	
	  return largerEq;
	}
	
	exports.name = 'largerEq';
	exports.factory = factory;


/***/ }),
/* 423 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load) {
	
	  var divideScalar = load(__webpack_require__(133));
	  var multiply = load(__webpack_require__(136));
	  var subtract = load(__webpack_require__(129));
	
	  var cs_reach = load(__webpack_require__(424));
	
	  /**
	   * The function cs_spsolve() computes the solution to G * x = bk, where bk is the
	   * kth column of B. When lo is true, the function assumes G = L is lower triangular with the
	   * diagonal entry as the first entry in each column. When lo is true, the function assumes G = U 
	   * is upper triangular with the diagonal entry as the last entry in each column.
	   *
	   * @param {Matrix}  g               The G matrix
	   * @param {Matrix}  b               The B matrix
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   x               The soluton to the linear system G * x = b
	   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
	   * @param {boolean} lo              The lower (true) upper triangular (false) flag
	   *
	   * @return {Number}                 The index for the nonzero pattern
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_spsolve = function (g, b, k, xi, x, pinv, lo) {
	    // g arrays
	    var gvalues = g._values;
	    var gindex = g._index;
	    var gptr = g._ptr;
	    var gsize = g._size;
	    // columns
	    var n = gsize[1];
	    // b arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    // vars
	    var p, p0, p1, q;
	    // xi[top..n-1] = cs_reach(B(:,k))
	    var top = cs_reach(g, b, k, xi, pinv);
	    // clear x
	    for (p = top; p < n; p++) 
	      x[xi[p]] = 0;
	    // scatter b
	    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) 
	      x[bindex[p]] = bvalues[p];
	    // loop columns
	    for (var px = top; px < n; px++) {
	      // x array index for px
	      var j = xi[px];
	      // apply permutation vector (U x = b), j maps to column J of G
	      var J = pinv ? pinv[j] : j;
	      // check column J is empty
	      if (J < 0)
	        continue;
	      // column value indeces in G, p0 <= p < p1
	      p0 = gptr[J];
	      p1 = gptr[J + 1];
	      // x(j) /= G(j,j)
	      x[j] = divideScalar(x[j], gvalues[lo ? p0 : (p1 - 1)]);
	      // first entry L(j,j)
	      p = lo ? (p0 + 1) : p0;
	      q = lo ? (p1) : (p1 - 1);
	      // loop
	      for ( ; p < q ; p++) {
	        // row
	        var i = gindex[p];
	        // x(i) -= G(i,j) * x(j)
	        x[i] = subtract(x[i], multiply(gvalues[p], x[j]));
	      }
	    }
	    // return top of stack
	    return top;
	  };
	  
	  return cs_spsolve;
	}
	
	exports.name = 'cs_spsolve';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 424 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load) {
	
	  var cs_dfs = load(__webpack_require__(425));
	  var cs_marked = load(__webpack_require__(426));
	  var cs_mark = load(__webpack_require__(427));
	
	  /**
	   * The cs_reach function computes X = Reach(B), where B is the nonzero pattern of the n-by-1 
	   * sparse column of vector b. The function returns the set of nodes reachable from any node in B. The
	   * nonzero pattern xi of the solution x to the sparse linear system Lx=b is given by X=Reach(B).
	   *
	   * @param {Matrix}  g               The G matrix
	   * @param {Matrix}  b               The B matrix
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   pinv            The inverse row permutation vector
	   *
	   * @return {Number}                 The index for the nonzero pattern
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_reach = function (g, b, k, xi, pinv) {
	    // g arrays
	    var gptr = g._ptr;
	    var gsize = g._size;
	    // b arrays
	    var bindex = b._index;
	    var bptr = b._ptr;
	    // columns
	    var n = gsize[1];
	    // vars
	    var p, p0, p1;
	    // initialize top
	    var top = n;
	    // loop column indeces in B
	    for (p0 = bptr[k], p1 = bptr[k + 1], p = p0; p < p1; p++) {
	      // node i
	      var i = bindex[p];
	      // check node i is marked
	      if (!cs_marked(gptr, i)) {
	        // start a dfs at unmarked node i
	        top = cs_dfs(i, g, top, xi, pinv);
	      }
	    }
	    // loop columns from top -> n - 1
	    for (p = top; p < n; p++) {
	      // restore G
	      cs_mark(gptr, xi[p]);
	    }
	    return top;
	  };
	
	  return cs_reach;
	}
	
	exports.name = 'cs_reach';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 425 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load) {
	
	  var cs_marked = load(__webpack_require__(426));
	  var cs_mark   = load(__webpack_require__(427));
	  var cs_unflip = load(__webpack_require__(428));
	
	  /**
	   * Depth-first search computes the nonzero pattern xi of the directed graph G (Matrix) starting
	   * at nodes in B (see cs_reach()).
	   *
	   * @param {Number}  j               The starting node for the DFS algorithm
	   * @param {Matrix}  g               The G matrix to search, ptr array modified, then restored
	   * @param {Number}  top             Start index in stack xi[top..n-1]
	   * @param {Number}  k               The kth column in B
	   * @param {Array}   xi              The nonzero pattern xi[top] .. xi[n - 1], an array of size = 2 * n
	   *                                  The first n entries is the nonzero pattern, the last n entries is the stack
	   * @param {Array}   pinv            The inverse row permutation vector, must be null for L * x = b
	   *
	   * @return {Number}                 New value of top
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_dfs = function (j, g, top, xi, pinv) {
	    // g arrays
	    var index = g._index;
	    var ptr = g._ptr;
	    var size = g._size;
	    // columns
	    var n = size[1];
	    // vars
	    var i, p, p2;
	    // initialize head
	    var head = 0;
	    // initialize the recursion stack
	    xi[0] = j;
	    // loop
	    while (head >= 0) {
	      // get j from the top of the recursion stack
	      j = xi[head];
	      // apply permutation vector
	      var jnew = pinv ? pinv[j] : j;
	      // check node j is marked
	      if (!cs_marked(ptr, j)) {
	        // mark node j as visited
	        cs_mark(ptr, j);
	        // update stack (last n entries in xi)
	        xi[n + head] = jnew < 0 ? 0 : cs_unflip(ptr[jnew]);
	      }
	      // node j done if no unvisited neighbors
	      var done = 1;
	      // examine all neighbors of j, stack (last n entries in xi)
	      for (p = xi[n + head], p2 = jnew < 0 ? 0 : cs_unflip(ptr[jnew+1]); p < p2; p++) {
	        // consider neighbor node i
	        i = index[p];
	        // check we have visited node i, skip it
	        if (cs_marked(ptr, i)) 
	          continue;
	        // pause depth-first search of node j, update stack (last n entries in xi)
	        xi[n + head] = p;
	        // start dfs at node i
	        xi[++head] = i;
	        // node j is not done
	        done = 0;
	        // break, to start dfs(i)
	        break;
	      }
	      // check depth-first search at node j is done
	      if (done) {
	        // remove j from the recursion stack
	        head--;
	        // and place in the output stack
	        xi[--top] = j;
	      }
	    }
	    return top;    
	  };
	
	  return cs_dfs;
	}
	
	exports.name = 'cs_dfs';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 426 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory () {
	
	  /**
	   * Checks if the node at w[j] is marked
	   *
	   * @param {Array}   w               The array
	   * @param {Number}  j               The array index
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_marked = function (w, j) {
	    // check node is marked
	    return w[j] < 0;
	  };
	
	  return cs_marked;
	}
	
	exports.name = 'cs_marked';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 427 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load) {
	
	  var cs_flip = load(__webpack_require__(412));
	
	  /**
	   * Marks the node at w[j]
	   *
	   * @param {Array}   w               The array
	   * @param {Number}  j               The array index
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_mark = function (w, j) {
	    // mark w[j]
	    w[j] = cs_flip(w [j]);
	  };
	
	  return cs_mark;
	}
	
	exports.name = 'cs_mark';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 428 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load) {
	
	  var cs_flip = load(__webpack_require__(412));
	  
	  /**
	   * Flips the value if it is negative of returns the same value otherwise.
	   *
	   * @param {Number}  i               The value to flip
	   *
	   * Reference: http://faculty.cse.tamu.edu/davis/publications.html
	   */
	  var cs_unflip = function (i) {
	    // flip the value if it is negative
	    return i < 0 ? cs_flip(i) : i;
	  };
	
	  return cs_unflip;
	}
	
	exports.name = 'cs_unflip';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 429 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	  var divideScalar = load(__webpack_require__(133));
	  var multiplyScalar = load(__webpack_require__(132));
	  var subtract = load(__webpack_require__(129));
	  var equalScalar = load(__webpack_require__(100));
	
	  var solveValidation = load(__webpack_require__(430));
	
	  var DenseMatrix = type.DenseMatrix;
	
	  /** 
	   * Solves the linear equation system by forwards substitution. Matrix must be a lower triangular matrix.
	   *
	   * `L * x = b`
	   *
	   * Syntax:
	   *
	   *    math.lsolve(L, b);
	   *
	   * Examples:
	   *
	   *    var a = [[-2, 3], [2, 1]];
	   *    var b = [11, 9];
	   *    var x = lsolve(a, b);  // [[-5.5], [20]]
	   *
	   * See also:
	   *
	   *    lup, slu, usolve, lusolve
	   *
	   * @param {Matrix, Array} L       A N x N matrix or array (L)
	   * @param {Matrix, Array} b       A column vector with the b values
	   *
	   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
	   */
	  var lsolve = typed('lsolve', {
	
	    'SparseMatrix, Array | Matrix': function (m, b) {
	      // process matrix
	      return _sparseForwardSubstitution(m, b);
	    },
	    
	    'DenseMatrix, Array | Matrix': function (m, b) {
	      // process matrix
	      return _denseForwardSubstitution(m, b);
	    },
	    
	    'Array, Array | Matrix': function (a, b) {
	      // create dense matrix from array
	      var m = matrix(a);
	      // use matrix implementation
	      var r = _denseForwardSubstitution(m, b);
	      // result
	      return r.valueOf();
	    }
	  });
	
	  var _denseForwardSubstitution = function (m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // result
	    var x = [];
	    // data
	    var data = m._data;
	    // forward solve m * x = b, loop columns
	    for (var j = 0; j < columns; j++) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // x[j]
	      var xj;
	      // forward substitution (outer product) avoids inner looping when bj == 0
	      if (!equalScalar(bj, 0)) {
	        // value @ [j, j]
	        var vjj = data[j][j];
	        // check vjj
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        xj = divideScalar(bj, vjj);
	        // loop rows
	        for (var i = j + 1; i < rows; i++) {
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
	        }
	      }
	      else {
	        // zero @ j
	        xj = 0;
	      }
	      // update x
	      x[j] = [xj];
	    }
	    // return vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  };
	
	  var _sparseForwardSubstitution = function (m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // vars
	    var i, k;
	    // result
	    var x = [];
	    // forward solve m * x = b, loop columns
	    for (var j = 0; j < columns; j++) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // forward substitution (outer product) avoids inner looping when bj == 0
	      if (!equalScalar(bj, 0)) {
	        // value @ [j, j]
	        var vjj = 0;
	        // lower triangular matrix values & index (column j)
	        var jvalues = [];
	        var jindex = [];
	        // last index in column
	        var l = ptr[j + 1];
	        // values in column, find value @ [j, j]
	        for (k = ptr[j]; k < l; k++) {
	          // row
	          i = index[k];
	          // check row (rows are not sorted!)
	          if (i === j) {
	            // update vjj
	            vjj = values[k];
	          }
	          else if (i > j) {
	            // store lower triangular
	            jvalues.push(values[k]);
	            jindex.push(i);
	          }
	        }
	        // at this point we must have a value @ [j, j]
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved, there is no value @ [j, j]
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        var xj = divideScalar(bj, vjj);
	        // loop lower triangular
	        for (k = 0, l = jindex.length; k < l; k++) {
	          // row
	          i = jindex[k];
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, jvalues[k]))];
	        }
	        // update x
	        x[j] = [xj];
	      }
	      else {
	        // update x
	        x[j] = [0];
	      }
	    }
	    // return vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  };
	
	  return lsolve;
	}
	
	exports.name = 'lsolve';
	exports.factory = factory;


/***/ }),
/* 430 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var util = __webpack_require__(90);
	
	var string = util.string;
	var array = util.array;
	
	var isArray = Array.isArray;
	
	function factory (type) {
	  
	  var DenseMatrix = type.DenseMatrix;
	
	  /**
	   * Validates matrix and column vector b for backward/forward substitution algorithms.
	   *
	   * @param {Matrix} m            An N x N matrix
	   * @param {Array | Matrix} b    A column vector
	   * @param {Boolean} copy        Return a copy of vector b
	   *
	   * @return {DenseMatrix}        Dense column vector b
	   */
	  var solveValidation = function (m, b, copy) {
	    // matrix size
	    var size = m.size();
	    // validate matrix dimensions
	    if (size.length !== 2)
	      throw new RangeError('Matrix must be two dimensional (size: ' + string.format(size) + ')');
	    // rows & columns
	    var rows = size[0];
	    var columns = size[1];    
	    // validate rows & columns
	    if (rows !== columns) 
	      throw new RangeError('Matrix must be square (size: ' + string.format(size) + ')');
	    // vars
	    var data, i, bdata;
	    // check b is matrix
	    if (b && b.isMatrix === true) {
	      // matrix size
	      var msize = b.size();
	      // vector
	      if (msize.length === 1) {
	        // check vector length
	        if (msize[0] !== rows)
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        // create data array
	        data = [];
	        // matrix data (DenseMatrix)
	        bdata = b._data;
	        // loop b data
	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [bdata[i]];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1],
	          datatype: b._datatype
	        });
	      }
	      // two dimensions
	      if (msize.length === 2) {
	        // array must be a column vector
	        if (msize[0] !== rows || msize[1] !== 1)
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        // check matrix type
	        if (b.isDenseMatrix === true) {
	          // check a copy is needed
	          if (copy) {
	            // create data array
	            data = [];
	            // matrix data (DenseMatrix)
	            bdata = b._data;
	            // loop b data
	            for (i = 0; i < rows; i++) {
	              // row array
	              data[i] = [bdata[i][0]];
	            }
	            // return Dense Matrix
	            return new DenseMatrix({
	              data: data,
	              size: [rows, 1],
	              datatype: b._datatype
	            });
	          }
	          // b is already a column vector
	          return b;
	        }
	        // create data array
	        data = [];
	        for (i = 0; i < rows; i++)
	          data[i] = [0];
	        // sparse matrix arrays
	        var values = b._values;
	        var index = b._index;
	        var ptr = b._ptr;
	        // loop values in column 0
	        for (var k1 = ptr[1], k = ptr[0]; k < k1; k++) {
	          // row
	          i = index[k];
	          // add to data
	          data[i][0] = values[k]; 
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1],
	          datatype: b._datatype
	        });
	      }
	      // throw error
	      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	    }
	    // check b is array
	    if (isArray(b)) {
	      // size
	      var asize = array.size(b);
	      // check matrix dimensions, vector
	      if (asize.length === 1) {
	        // check vector length
	        if (asize[0] !== rows)
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');        
	        // create data array
	        data = [];
	        // loop b
	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [b[i]];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1]
	        });
	      }
	      if (asize.length === 2) {
	        // array must be a column vector
	        if (asize[0] !== rows || asize[1] !== 1)
	          throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');
	        // create data array
	        data = [];
	        // loop b data
	        for (i = 0; i < rows; i++) {
	          // row array
	          data[i] = [b[i][0]];
	        }
	        // return Dense Matrix
	        return new DenseMatrix({
	          data: data,
	          size: [rows, 1]
	        });
	      }
	      // throw error
	      throw new RangeError('Dimension mismatch. Matrix columns must match vector length.');      
	    }
	  };
	  
	  return solveValidation;
	}
	
	exports.factory = factory;

/***/ }),
/* 431 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isArray = Array.isArray;
	
	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(104));
	  var lup = load(__webpack_require__(408));
	  var slu = load(__webpack_require__(409));
	  var cs_ipvec = load(__webpack_require__(432));
	
	  var solveValidation = load(__webpack_require__(430));
	
	  var usolve = load(__webpack_require__(433));
	  var lsolve = load(__webpack_require__(429));
	
	  /**
	   * Solves the linear system `A * x = b` where `A` is an [n x n] matrix and `b` is a [n] column vector.
	   *
	   * Syntax:
	   *
	   *    math.lusolve(A, b)     // returns column vector with the solution to the linear system A * x = b
	   *    math.lusolve(lup, b)   // returns column vector with the solution to the linear system A * x = b, lup = math.lup(A)
	   *
	   * Examples:
	   *
	   *    var m = [[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]];
	   *
	   *    var x = math.lusolve(m, [-1, -1, -1, -1]);        // x = [[-1], [-0.5], [-1/3], [-0.25]]
	   *
	   *    var f = math.lup(m);
	   *    var x1 = math.lusolve(f, [-1, -1, -1, -1]);       // x1 = [[-1], [-0.5], [-1/3], [-0.25]]
	   *    var x2 = math.lusolve(f, [1, 2, 1, -1]);          // x2 = [[1], [1], [1/3], [-0.25]]
	   *
	   *    var a = [[-2, 3], [2, 1]];
	   *    var b = [11, 9];
	   *    var x = lusolve(a, b);  // [[-5.5], [20]]
	   *
	   * See also:
	   *
	   *    lup, slu, lsolve, usolve
	   *
	   * @param {Matrix | Array | Object} A      Invertible Matrix or the Matrix LU decomposition
	   * @param {Matrix | Array} b               Column Vector
	   * @param {number} [order]                 The Symbolic Ordering and Analysis order, see slu for details. Matrix must be a SparseMatrix
	   * @param {Number} [threshold]             Partial pivoting threshold (1 for partial pivoting), see slu for details. Matrix must be a SparseMatrix.
	   *
	   * @return {DenseMatrix | Array}           Column vector with the solution to the linear system A * x = b
	   */
	  var lusolve = typed('lusolve', {
	    
	    'Array, Array | Matrix': function (a, b) {
	      // convert a to matrix
	      a = matrix(a);
	      // matrix lup decomposition
	      var d = lup(a);
	      // solve
	      var x = _lusolve(d.L, d.U, d.p, null, b);
	      // convert result to array
	      return x.valueOf();
	    },
	    
	    'DenseMatrix, Array | Matrix': function (a, b) {
	      // matrix lup decomposition
	      var d = lup(a);
	      // solve
	      return _lusolve(d.L, d.U, d.p, null, b);
	    },
	    
	    'SparseMatrix, Array | Matrix': function (a, b) {
	      // matrix lup decomposition
	      var d = lup(a);
	      // solve
	      return _lusolve(d.L, d.U, d.p, null, b);
	    },
	    
	    'SparseMatrix, Array | Matrix, number, number': function (a, b, order, threshold) {
	      // matrix lu decomposition
	      var d = slu(a, order, threshold);
	      // solve
	      return _lusolve(d.L, d.U, d.p, d.q, b);
	    },
	
	    'Object, Array | Matrix': function (d, b) {
	      // solve
	      return _lusolve(d.L, d.U, d.p, d.q, b);
	    }
	  });
	  
	  var _toMatrix = function (a) {
	    // check it is a matrix
	    if (a && a.isMatrix === true)
	      return a;
	    // check array
	    if (isArray(a))
	      return matrix(a);
	    // throw
	    throw new TypeError('Invalid Matrix LU decomposition');
	  };
	  
	  var _lusolve = function (l, u, p, q, b) {
	    // verify L, U, P
	    l = _toMatrix(l);
	    u = _toMatrix(u);
	    // validate matrix and vector
	    b = solveValidation(l, b, false);
	    // apply row permutations if needed (b is a DenseMatrix)
	    if (p)
	      b._data = cs_ipvec(p, b._data);
	    // use forward substitution to resolve L * y = b
	    var y = lsolve(l, b);
	    // use backward substitution to resolve U * x = y
	    var x = usolve(u, y);
	    // apply column permutations if needed (x is a DenseMatrix)
	    if (q)
	      x._data = cs_ipvec(q, x._data);
	    // return solution
	    return x;
	  };
	
	  return lusolve;
	}
	
	exports.name = 'lusolve';
	exports.factory = factory;


/***/ }),
/* 432 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory () {
	
	  /**
	   * Permutes a vector; x = P'b. In MATLAB notation, x(p)=b.
	   *
	   * @param {Array} p           The permutation vector of length n. null value denotes identity
	   * @param {Array} b           The input vector
	   *
	   * @return {Array}            The output vector x = P'b
	   */
	  var cs_ipvec = function (p, b, n) {
	    // vars 
	    var k;
	    var n = b.length;
	    var x = [];
	    // check permutation vector was provided, p = null denotes identity
	    if (p) {
	      // loop vector
	      for (k = 0; k < n; k++) {
	        // apply permutation
	        x[p[k]] = b[k];
	      }
	    }
	    else {
	      // loop vector
	      for (k = 0; k < n; k++) {
	        // x[i] = b[i]
	        x[k] = b[k];
	      }
	    }
	    return x;
	  };
	
	  return cs_ipvec;
	}
	
	exports.name = 'cs_ipvec';
	exports.path = 'sparse';
	exports.factory = factory;


/***/ }),
/* 433 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	  var divideScalar = load(__webpack_require__(133));
	  var multiplyScalar = load(__webpack_require__(132));
	  var subtract = load(__webpack_require__(129));
	  var equalScalar = load(__webpack_require__(100));
	
	  var solveValidation = load(__webpack_require__(430));
	  
	  var DenseMatrix = type.DenseMatrix;
	
	  /**
	   * Solves the linear equation system by backward substitution. Matrix must be an upper triangular matrix.
	   *
	   * `U * x = b`
	   *
	   * Syntax:
	   *
	   *    math.usolve(U, b);
	   *
	   * Examples:
	   *
	   *    var a = [[-2, 3], [2, 1]];
	   *    var b = [11, 9];
	   *    var x = usolve(a, b);  // [[8], [9]]
	   *
	   * See also:
	   *
	   *    lup, slu, usolve, lusolve
	   *
	   * @param {Matrix, Array} U       A N x N matrix or array (U)
	   * @param {Matrix, Array} b       A column vector with the b values
	   *
	   * @return {DenseMatrix | Array}  A column vector with the linear system solution (x)
	   */
	  var usolve = typed('usolve', {
	    
	    'SparseMatrix, Array | Matrix': function (m, b) {
	      // process matrix
	      return _sparseBackwardSubstitution(m, b);
	    },
	
	    'DenseMatrix, Array | Matrix': function (m, b) {
	      // process matrix
	      return _denseBackwardSubstitution(m, b);
	    },
	
	    'Array, Array | Matrix': function (a, b) {
	      // create dense matrix from array
	      var m = matrix(a);
	      // use matrix implementation
	      var r = _denseBackwardSubstitution(m, b);
	      // result
	      return r.valueOf();
	    }
	  });
	
	  var _denseBackwardSubstitution = function (m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // result
	    var x = [];
	    // arrays
	    var data = m._data;
	    // backward solve m * x = b, loop columns (backwards)
	    for (var j = columns - 1; j >= 0 ; j--) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // x[j]
	      var xj;
	      // backward substitution (outer product) avoids inner looping when bj == 0
	      if (!equalScalar(bj, 0)) {
	        // value @ [j, j]
	        var vjj = data[j][j];
	        // check vjj
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        xj = divideScalar(bj, vjj);        
	        // loop rows
	        for (var i = j - 1; i >= 0; i--) {
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0] || 0, multiplyScalar(xj, data[i][j]))];
	        }
	      }
	      else {
	        // zero value @ j
	        xj = 0;
	      }
	      // update x
	      x[j] = [xj];
	    }
	    // return column vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  };
	  
	  var _sparseBackwardSubstitution = function (m, b) {
	    // validate matrix and vector, return copy of column vector b
	    b = solveValidation(m, b, true);
	    // column vector data
	    var bdata = b._data;
	    // rows & columns
	    var rows = m._size[0];
	    var columns = m._size[1];
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    // vars
	    var i, k;
	    // result
	    var x = [];
	    // backward solve m * x = b, loop columns (backwards)
	    for (var j = columns - 1; j >= 0 ; j--) {
	      // b[j]
	      var bj = bdata[j][0] || 0;
	      // backward substitution (outer product) avoids inner looping when bj == 0
	      if (!equalScalar(bj, 0)) {
	        // value @ [j, j]
	        var vjj = 0;
	        // upper triangular matrix values & index (column j)
	        var jvalues = [];
	        var jindex = [];
	        // first & last indeces in column
	        var f = ptr[j];
	        var l = ptr[j + 1];
	        // values in column, find value @ [j, j], loop backwards
	        for (k = l - 1; k >= f; k--) {
	          // row
	          i = index[k];
	          // check row
	          if (i === j) {
	            // update vjj
	            vjj = values[k];
	          }
	          else if (i < j) {
	            // store upper triangular
	            jvalues.push(values[k]);
	            jindex.push(i);
	          }
	        }
	        // at this point we must have a value @ [j, j]
	        if (equalScalar(vjj, 0)) {
	          // system cannot be solved, there is no value @ [j, j]
	          throw new Error('Linear system cannot be solved since matrix is singular');
	        }
	        // calculate xj
	        var xj = divideScalar(bj, vjj);
	        // loop upper triangular
	        for (k = 0, l = jindex.length; k < l; k++) {
	          // row
	          i = jindex[k];
	          // update copy of b
	          bdata[i] = [subtract(bdata[i][0], multiplyScalar(xj, jvalues[k]))];
	        }
	        // update x
	        x[j] = [xj];
	      }
	      else {
	        // update x
	        x[j] = [0];
	      }
	    }
	    // return vector
	    return new DenseMatrix({
	      data: x,
	      size: [rows, 1]
	    });
	  };
	  
	  return usolve;
	}
	
	exports.name = 'usolve';
	exports.factory = factory;


/***/ }),
/* 434 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(138),
	  __webpack_require__(103),
	  __webpack_require__(105),
	  __webpack_require__(435),
	  __webpack_require__(437),
	  __webpack_require__(438),
	  __webpack_require__(384),
	  __webpack_require__(439),
	  __webpack_require__(441),
	  __webpack_require__(443),
	  __webpack_require__(444),
	  __webpack_require__(139),
	  __webpack_require__(445),
	  __webpack_require__(446),
	  __webpack_require__(447),
	  __webpack_require__(448),
	  __webpack_require__(451),
	  __webpack_require__(452),
	  __webpack_require__(453),
	  __webpack_require__(136),
	  __webpack_require__(454),
	  __webpack_require__(456),
	  __webpack_require__(134),
	  __webpack_require__(457),
	  __webpack_require__(405),
	  __webpack_require__(406),
	  __webpack_require__(458),
	  __webpack_require__(129),
	  __webpack_require__(130),
	  __webpack_require__(459),
	  __webpack_require__(460)
	];


/***/ }),
/* 435 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  var unaryMinus = load(__webpack_require__(130));
	  var isNegative = load(__webpack_require__(436));
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Calculate the cubic root of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cbrt(x)
	   *    math.cbrt(x, allRoots)
	   *
	   * Examples:
	   *
	   *    math.cbrt(27);                  // returns 3
	   *    math.cube(3);                   // returns 27
	   *    math.cbrt(-64);                 // returns -4
	   *    math.cbrt(math.unit('27 m^3')); // returns Unit 3 m
	   *    math.cbrt([27, 64, 125]);       // returns [3, 4, 5]
	   *
	   *    var x = math.complex('8i');
	   *    math.cbrt(x);                   // returns Complex 1.7320508075689 + i
	   *    math.cbrt(x, true);             // returns Matrix [
	   *                                    //    1.7320508075689 + i
	   *                                    //   -1.7320508075689 + i
	   *                                    //   -2i
	   *                                    // ]
	   *
	   * See also:
	   *
	   *    square, sqrt, cube
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x
	   *            Value for which to calculate the cubic root.
	   * @param {boolean} [allRoots]  Optional, false by default. Only applicable
	   *            when `x` is a number or complex number. If true, all complex
	   *            roots are returned, if false (default) the principal root is
	   *            returned.
	   * @return {number | BigNumber | Complex | Unit | Array | Matrix}
	   *            Returns the cubic root of `x`
	   */
	  var cbrt = typed('cbrt', {
	    'number': _cbrtNumber,
	    // note: signature 'number, boolean' is also supported,
	    //       created by typed as it knows how to convert number to Complex
	
	    'Complex': _cbrtComplex,
	
	    'Complex, boolean': _cbrtComplex,
	
	    'BigNumber': function (x) {
	      return x.cbrt();
	    },
	
	    'Unit': _cbrtUnit,
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since cbrt(0) = 0
	      return deepMap(x, cbrt, true);
	    }
	  });
	
	  /**
	   * Calculate the cubic root for a complex number
	   * @param {Complex} x
	   * @param {boolean} [allRoots]   If true, the function will return an array
	   *                               with all three roots. If false or undefined,
	   *                               the principal root is returned.
	   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x
	   * @private
	   */
	  function _cbrtComplex(x, allRoots) {
	    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers
	
	    var arg_3 = x.arg() / 3;
	    var abs = x.abs();
	
	    // principal root:
	    var principal = new type.Complex(_cbrtNumber(abs), 0).mul(
	        new type.Complex(0, arg_3).exp());
	
	    if (allRoots) {
	      var all = [
	          principal,
	          new type.Complex(_cbrtNumber(abs), 0).mul(
	            new type.Complex(0, arg_3 + Math.PI * 2 / 3).exp()),
	          new type.Complex(_cbrtNumber(abs), 0).mul(
	            new type.Complex(0, arg_3 - Math.PI * 2 / 3).exp())
	      ];
	
	      return (config.matrix === 'Array') ? all : matrix(all);
	    }
	    else {
	      return principal;
	    }
	  }
	
	  /**
	   * Calculate the cubic root for a Unit
	   * @param {Unit} x
	   * @return {Unit} Returns the cubic root of x
	   * @private
	   */
	  function _cbrtUnit(x) {
	    if(x.value && x.value.isComplex) {
	      var result = x.clone();
	      result.value = 1.0;
	      result = result.pow(1.0/3);           // Compute the units
	      result.value = _cbrtComplex(x.value); // Compute the value
	      return result;
	    }
	    else {
	      var negate = isNegative(x.value);
	      if (negate) {
	        x.value = unaryMinus(x.value);
	      }
	
	      // TODO: create a helper function for this
	      var third;
	      if (x.value && x.value.isBigNumber) {
	        third = new type.BigNumber(1).div(3);
	      }
	      else if (x.value && x.value.isFraction) {
	        third = new type.Fraction(1, 3);
	      }
	      else {
	        third = 1/3;
	      }
	
	      var result = x.pow(third);
	
	      if (negate) {
	        result.value = unaryMinus(result.value);
	      }
	
	      return result;
	    }
	  }
	
	  cbrt.toTex = {1: '\\sqrt[3]{${args[0]}}'};
	
	  return cbrt;
	}
	
	/**
	 * Calculate cbrt for a number
	 *
	 * Code from es6-shim.js:
	 *   https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1564-L1577
	 *
	 * @param {number} x
	 * @returns {number | Complex} Returns the cubic root of x
	 * @private
	 */
	var _cbrtNumber = Math.cbrt || function (x) {
	  if (x === 0) {
	    return x;
	  }
	
	  var negate = x < 0;
	  var result;
	  if (negate) {
	    x = -x;
	  }
	
	  if (isFinite(x)) {
	    result = Math.exp(Math.log(x) / 3);
	    // from http://en.wikipedia.org/wiki/Cube_root#Numerical_methods
	    result = (x / (result * result) + (2 * result)) / 3;
	  } else {
	    result = x;
	  }
	
	  return negate ? -result : result;
	};
	
	exports.name = 'cbrt';
	exports.factory = factory;


/***/ }),
/* 436 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	var number = __webpack_require__(58);
	
	function factory (type, config, load, typed) {
	  /**
	   * Test whether a value is negative: smaller than zero.
	   * The function supports types `number`, `BigNumber`, `Fraction`, and `Unit`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNegative(x)
	   *
	   * Examples:
	   *
	   *    math.isNegative(3);                     // returns false
	   *    math.isNegative(-2);                    // returns true
	   *    math.isNegative(0);                     // returns false
	   *    math.isNegative(-0);                    // returns false
	   *    math.isNegative(math.bignumber(2));     // returns false
	   *    math.isNegative(math.fraction(-2, 5));  // returns true
	   *    math.isNegative('-2');                  // returns true
	   *    math.isNegative([2, 0, -3]');           // returns [false, false, true]
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isZero, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isNegative = typed('isNegative', {
	    'number': function (x) {
	      return x < 0;
	    },
	
	    'BigNumber': function (x) {
	      return x.isNeg() && !x.isZero() && !x.isNaN();
	    },
	
	    'Fraction': function (x) {
	      return x.s < 0; // It's enough to decide on the sign
	    },
	
	    'Unit': function (x) {
	      return isNegative(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, isNegative);
	    }
	  });
	
	  return isNegative;
	}
	
	exports.name = 'isNegative';
	exports.factory = factory;


/***/ }),
/* 437 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Round a value towards plus infinity
	   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.ceil(x)
	   *
	   * Examples:
	   *
	   *    math.ceil(3.2);               // returns number 4
	   *    math.ceil(3.8);               // returns number 4
	   *    math.ceil(-4.2);              // returns number -4
	   *    math.ceil(-4.7);              // returns number -4
	   *
	   *    var c = math.complex(3.2, -2.7);
	   *    math.ceil(c);                 // returns Complex 4 - 2i
	   *
	   *    math.ceil([3.2, 3.8, -4.7]);  // returns Array [4, 4, -4]
	   *
	   * See also:
	   *
	   *    floor, fix, round
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var ceil = typed('ceil', {
	    'number': Math.ceil,
	
	    'Complex': function (x) {
	      return x.ceil();
	    },
	
	    'BigNumber': function (x) {
	      return x.ceil();
	    },
	
	    'Fraction': function (x) {
	      return x.ceil();
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since ceil(0) = 0
	      return deepMap(x, ceil, true);
	    }
	  });
	
	  ceil.toTex = {1: '\\left\\lceil${args[0]}\\right\\rceil'};
	
	  return ceil;
	}
	
	exports.name = 'ceil';
	exports.factory = factory;


/***/ }),
/* 438 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Compute the cube of a value, `x * x * x`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cube(x)
	   *
	   * Examples:
	   *
	   *    math.cube(2);            // returns number 8
	   *    math.pow(2, 3);          // returns number 8
	   *    math.cube(4);            // returns number 64
	   *    4 * 4 * 4;               // returns number 64
	   *
	   *    math.cube([1, 2, 3, 4]); // returns Array [1, 8, 27, 64]
	   *
	   * See also:
	   *
	   *    multiply, square, pow, cbrt
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x  Number for which to calculate the cube
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} Cube of x
	   */
	  var cube = typed('cube', {
	    'number': function (x) {
	      return x * x * x;
	    },
	
	    'Complex': function (x) {
	      return x.mul(x).mul(x); // Is faster than pow(x, 3)
	    },
	
	    'BigNumber': function (x) {
	      return x.times(x).times(x);
	    },
	
	    'Fraction': function (x) {
	      return x.pow(3); // Is faster than mul()mul()mul()
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since cube(0) = 0
	      return deepMap(x, cube, true);
	    },
	
	    'Unit': function(x) {
	      return x.pow(3);
	    }
	  });
	
	  cube.toTex = {1: '\\left(${args[0]}\\right)^3'};
	
	  return cube;
	}
	
	exports.name = 'cube';
	exports.factory = factory;


/***/ }),
/* 439 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	  var divideScalar = load(__webpack_require__(133));
	  var latex = __webpack_require__(83);
	  
	  var algorithm02 = load(__webpack_require__(440));
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm07 = load(__webpack_require__(114));
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Divide two matrices element wise. The function accepts both matrices and
	   * scalar values.
	   *
	   * Syntax:
	   *
	   *    math.dotDivide(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotDivide(2, 4);   // returns 0.5
	   *
	   *    a = [[9, 5], [6, 1]];
	   *    b = [[3, 2], [5, 2]];
	   *
	   *    math.dotDivide(a, b);   // returns [[3, 2.5], [1.2, 0.5]]
	   *    math.divide(a, b);      // returns [[1.75, 0.75], [-1.75, 2.25]]
	   *
	   * See also:
	   *
	   *    divide, multiply, dotMultiply
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Numerator
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Denominator
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Quotient, `x ./ y`
	   */
	  var dotDivide = typed('dotDivide', {
	    
	    'any, any': divideScalar,
	    
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse ./ sparse
	              c = algorithm07(x, y, divideScalar, false);
	              break;
	            default:
	              // sparse ./ dense
	              c = algorithm02(y, x, divideScalar, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense ./ sparse
	              c = algorithm03(x, y, divideScalar, false);
	              break;
	            default:
	              // dense ./ dense
	              c = algorithm13(x, y, divideScalar);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return dotDivide(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return dotDivide(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return dotDivide(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, divideScalar, false);
	          break;
	        default:
	          c = algorithm14(x, y, divideScalar, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, divideScalar, true);
	          break;
	        default:
	          c = algorithm14(y, x, divideScalar, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, divideScalar, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, divideScalar, true).valueOf();
	    }
	  });
	
	  dotDivide.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['dotDivide'] + '${args[1]}\\right)'
	  };
	  
	  return dotDivide;
	}
	
	exports.name = 'dotDivide';
	exports.factory = factory;


/***/ }),
/* 440 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DimensionError = __webpack_require__(93);
	
	function factory (type, config, load, typed) {
	
	  var equalScalar = load(__webpack_require__(100));
	
	  var SparseMatrix = type.SparseMatrix;
	
	  /**
	   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij). 
	   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).
	   *
	   *
	   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0
	   * C(i,j) = ┤
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)
	   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)
	   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)
	   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571
	   */
	  var algorithm02 = function (denseMatrix, sparseMatrix, callback, inverse) {
	    // dense matrix arrays
	    var adata = denseMatrix._data;
	    var asize = denseMatrix._size;
	    var adt = denseMatrix._datatype;
	    // sparse matrix arrays
	    var bvalues = sparseMatrix._values;
	    var bindex = sparseMatrix._index;
	    var bptr = sparseMatrix._ptr;
	    var bsize = sparseMatrix._size;
	    var bdt = sparseMatrix._datatype;
	
	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);
	
	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	
	    // sparse matrix cannot be a Pattern matrix
	    if (!bvalues)
	      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');
	
	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	    
	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	
	    // result (SparseMatrix)
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	
	    // loop columns in b
	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // values in column j
	      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        var i = bindex[k];
	        // update C(i,j)
	        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);
	        // check for nonzero
	        if (!eq(cij, zero)) {
	          // push i & v
	          cindex.push(i);
	          cvalues.push(cij);
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;
	
	    // return sparse matrix
	    return new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	  };
	  
	  return algorithm02;
	}
	
	exports.name = 'algorithm02';
	exports.factory = factory;


/***/ }),
/* 441 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	  var multiplyScalar = load(__webpack_require__(132));
	  var latex = __webpack_require__(83);
	
	  var algorithm02 = load(__webpack_require__(440));
	  var algorithm09 = load(__webpack_require__(442));
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Multiply two matrices element wise. The function accepts both matrices and
	   * scalar values.
	   *
	   * Syntax:
	   *
	   *    math.dotMultiply(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotMultiply(2, 4); // returns 8
	   *
	   *    a = [[9, 5], [6, 1]];
	   *    b = [[3, 2], [5, 2]];
	   *
	   *    math.dotMultiply(a, b); // returns [[27, 10], [30, 2]]
	   *    math.multiply(a, b);    // returns [[52, 28], [23, 14]]
	   *
	   * See also:
	   *
	   *    multiply, divide, dotDivide
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x Left hand value
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Right hand value
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}                    Multiplication of `x` and `y`
	   */
	  var dotMultiply = typed('dotMultiply', {
	    
	    'any, any': multiplyScalar,
	    
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse .* sparse
	              c = algorithm09(x, y, multiplyScalar, false);
	              break;
	            default:
	              // sparse .* dense
	              c = algorithm02(y, x, multiplyScalar, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense .* sparse
	              c = algorithm02(x, y, multiplyScalar, false);
	              break;
	            default:
	              // dense .* dense
	              c = algorithm13(x, y, multiplyScalar);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	    
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return dotMultiply(matrix(x), matrix(y)).valueOf();
	    },
	    
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return dotMultiply(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return dotMultiply(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, multiplyScalar, false);
	          break;
	        default:
	          c = algorithm14(x, y, multiplyScalar, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, multiplyScalar, true);
	          break;
	        default:
	          c = algorithm14(y, x, multiplyScalar, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, multiplyScalar, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, multiplyScalar, true).valueOf();
	    }
	  });
	
	  dotMultiply.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['dotMultiply'] + '${args[1]}\\right)'
	  };
	  
	  return dotMultiply;
	}
	
	exports.name = 'dotMultiply';
	exports.factory = factory;


/***/ }),
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DimensionError = __webpack_require__(93);
	
	function factory (type, config, load, typed) {
	
	  var equalScalar = load(__webpack_require__(100));
	
	  var SparseMatrix = type.SparseMatrix;
	
	  /**
	   * Iterates over SparseMatrix A and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked NZA times, number of nonzero elements in A.
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm09 = function (a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;
	
	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);
	
	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	
	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	
	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	
	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	
	    // workspaces
	    var x = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var w = [];
	
	    // vars
	    var i, j, k, k0, k1;
	    
	    // loop columns
	    for (j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // column mark
	      var mark = j + 1;
	      // check we need to process values
	      if (x) {
	        // loop B(:,j)
	        for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	          // row
	          i = bindex[k];
	          // update workspace
	          w[i] = mark;
	          x[i] = bvalues[k];
	        }
	      }
	      // loop A(:,j)
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // check we need to process values
	        if (x) {
	          // b value @ i,j
	          var vb = w[i] === mark ? x[i] : zero;
	          // invoke f
	          var vc = cf(avalues[k], vb);
	          // check zero value
	          if (!eq(vc, zero)) {
	            // push index
	            cindex.push(i);
	            // push value
	            cvalues.push(vc);
	          }
	        }
	        else {
	          // push index
	          cindex.push(i);
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;
	
	    // return sparse matrix
	    return c;
	  };
	
	  return algorithm09;
	}
	
	exports.name = 'algorithm09';
	exports.factory = factory;


/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	  var pow = load(__webpack_require__(134));
	  var latex = __webpack_require__(83);
	
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm07 = load(__webpack_require__(114));
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Calculates the power of x to y element wise.
	   *
	   * Syntax:
	   *
	   *    math.dotPow(x, y)
	   *
	   * Examples:
	   *
	   *    math.dotPow(2, 3);            // returns number 8
	   *
	   *    var a = [[1, 2], [4, 3]];
	   *    math.dotPow(a, 2);            // returns Array [[1, 4], [16, 9]]
	   *    math.pow(a, 2);               // returns Array [[9, 8], [16, 17]]
	   *
	   * See also:
	   *
	   *    pow, sqrt, multiply
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent
	   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`
	   */
	  var dotPow = typed('dotPow', {
	    
	    'any, any': pow,
	    
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse .^ sparse
	              c = algorithm07(x, y, pow, false);
	              break;
	            default:
	              // sparse .^ dense
	              c = algorithm03(y, x, pow, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense .^ sparse
	              c = algorithm03(x, y, pow, false);
	              break;
	            default:
	              // dense .^ dense
	              c = algorithm13(x, y, pow);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return dotPow(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return dotPow(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return dotPow(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, dotPow, false);
	          break;
	        default:
	          c = algorithm14(x, y, dotPow, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, dotPow, true);
	          break;
	        default:
	          c = algorithm14(y, x, dotPow, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, dotPow, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, dotPow, true).valueOf();
	    }
	  });
	
	  dotPow.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['dotPow'] + '${args[1]}\\right)'
	  };
	  
	  return dotPow;
	}
	
	exports.name = 'dotPow';
	exports.factory = factory;


/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the exponent of a value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.exp(x)
	   *
	   * Examples:
	   *
	   *    math.exp(2);                  // returns number 7.3890560989306495
	   *    math.pow(math.e, 2);          // returns number 7.3890560989306495
	   *    math.log(math.exp(2));        // returns number 2
	   *
	   *    math.exp([1, 2, 3]);
	   *    // returns Array [
	   *    //   2.718281828459045,
	   *    //   7.3890560989306495,
	   *    //   20.085536923187668
	   *    // ]
	   *
	   * See also:
	   *
	   *    log, pow
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x  A number or matrix to exponentiate
	   * @return {number | BigNumber | Complex | Array | Matrix} Exponent of `x`
	   */
	  var exp = typed('exp', {
	    'number': Math.exp,
	
	    'Complex': function (x) {
	      return x.exp();
	    },
	
	    'BigNumber': function (x) {
	      return x.exp();
	    },
	
	    'Array | Matrix': function (x) {
	      // TODO: exp(sparse) should return a dense matrix since exp(0)==1
	      return deepMap(x, exp);
	    }
	  });
	
	  exp.toTex = {1: '\\exp\\left(${args[0]}\\right)'};
	
	  return exp;
	}
	
	exports.name = 'exp';
	exports.factory = factory;


/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Round a value towards minus infinity.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.floor(x)
	   *
	   * Examples:
	   *
	   *    math.floor(3.2);              // returns number 3
	   *    math.floor(3.8);              // returns number 3
	   *    math.floor(-4.2);             // returns number -5
	   *    math.floor(-4.7);             // returns number -5
	   *
	   *    var c = math.complex(3.2, -2.7);
	   *    math.floor(c);                // returns Complex 3 - 3i
	   *
	   *    math.floor([3.2, 3.8, -4.7]); // returns Array [3, 3, -5]
	   *
	   * See also:
	   *
	   *    ceil, fix, round
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var floor = typed('floor', {
	    'number': Math.floor,
	
	    'Complex': function (x) {
	      return x.floor();
	    },
	
	    'BigNumber': function (x) {
	      return x.floor();
	    },
	
	    'Fraction': function (x) {
	      return x.floor();
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since floor(0) = 0
	      return deepMap(x, floor, true);
	    }
	  });
	
	  floor.toTex = {1: '\\left\\lfloor${args[0]}\\right\\rfloor'};
	
	  return floor;
	}
	
	exports.name = 'floor';
	exports.factory = factory;


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm01 = load(__webpack_require__(106));
	  var algorithm04 = load(__webpack_require__(107));
	  var algorithm10 = load(__webpack_require__(108));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Calculate the greatest common divisor for two or more values or arrays.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.gcd(a, b)
	   *    math.gcd(a, b, c, ...)
	   *
	   * Examples:
	   *
	   *    math.gcd(8, 12);              // returns 4
	   *    math.gcd(-4, 6);              // returns 2
	   *    math.gcd(25, 15, -10);        // returns 5
	   *
	   *    math.gcd([8, -4], [12, 6]);   // returns [4, 2]
	   *
	   * See also:
	   *
	   *    lcm, xgcd
	   *
	   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers
	   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor
	   */
	  var gcd = typed('gcd', {
	
	    'number, number': _gcd,
	
	    'BigNumber, BigNumber': _gcdBigNumber,
	
	    'Fraction, Fraction': function (x, y) {
	      return x.gcd(y);
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm04(x, y, gcd);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm01(y, x, gcd, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm01(x, y, gcd, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, gcd);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return gcd(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return gcd(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return gcd(x, matrix(y));
	    },
	    
	    'Matrix, number | BigNumber': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm10(x, y, gcd, false);
	          break;
	        default:
	          c = algorithm14(x, y, gcd, false);
	          break;
	      }
	      return c;
	    },
	
	    'number | BigNumber, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm10(y, x, gcd, true);
	          break;
	        default:
	          c = algorithm14(y, x, gcd, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, gcd, false).valueOf();
	    },
	
	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, gcd, true).valueOf();
	    },
	
	    // TODO: need a smarter notation here
	    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {
	      var res = gcd(a, b);
	      for (var i = 0; i < args.length; i++) {
	        res = gcd(res, args[i]);
	      }
	      return res;
	    }
	  });
	
	  gcd.toTex = '\\gcd\\left(${args}\\right)';
	
	  return gcd;
	
	  /**
	   * Calculate gcd for BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @returns {BigNumber} Returns greatest common denominator of a and b
	   * @private
	   */
	  function _gcdBigNumber(a, b) {
	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function gcd must be integer numbers');
	    }
	
	    // http://en.wikipedia.org/wiki/Euclidean_algorithm
	    var zero = new type.BigNumber(0);
	    while (!b.isZero()) {
	      var r = a.mod(b);
	      a = b;
	      b = r;
	    }
	    return a.lt(zero) ? a.neg() : a;
	  }
	}
	
	/**
	 * Calculate gcd for numbers
	 * @param {number} a
	 * @param {number} b
	 * @returns {number} Returns the greatest common denominator of a and b
	 * @private
	 */
	function _gcd(a, b) {
	  if (!isInteger(a) || !isInteger(b)) {
	    throw new Error('Parameters in function gcd must be integer numbers');
	  }
	
	  // http://en.wikipedia.org/wiki/Euclidean_algorithm
	  var r;
	  while (b != 0) {
	    r = a % b;
	    a = b;
	    b = r;
	  }
	  return (a < 0) ? -a : a;
	}
	
	exports.name = 'gcd';
	exports.factory = factory;


/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var flatten = __webpack_require__(91).flatten;
	
	function factory (type, config, load, typed) {
	  var abs = load(__webpack_require__(138));
	  var add = load(__webpack_require__(105));
	  var divide = load(__webpack_require__(133));
	  var multiply = load(__webpack_require__(132));
	  var sqrt = load(__webpack_require__(406));
	  var smaller = load(__webpack_require__(112));
	  var isPositive = load(__webpack_require__(403));
	
	  /**
	   * Calculate the hypotenusa of a list with values. The hypotenusa is defined as:
	   *
	   *     hypot(a, b, c, ...) = sqrt(a^2 + b^2 + c^2 + ...)
	   *
	   * For matrix input, the hypotenusa is calculated for all values in the matrix.
	   *
	   * Syntax:
	   *
	   *     math.hypot(a, b, ...)
	   *     math.hypot([a, b, c, ...])
	   *
	   * Examples:
	   *
	   *     math.hypot(3, 4);      // 5
	   *     math.hypot(3, 4, 5);   // 7.0710678118654755
	   *     math.hypot([3, 4, 5]); // 7.0710678118654755
	   *     math.hypot(-2);        // 2
	   *
	   * See also:
	   *
	   *     abs, norm
	   *
	   * @param {... number | BigNumber} args
	   * @return {number | BigNumber} Returns the hypothenusa of the input values.
	   */
	  var hypot = typed('hypot', {
	    '... number | BigNumber': _hypot,
	
	    'Array': function (x) {
	      return hypot.apply(hypot, flatten(x));
	    },
	
	    'Matrix': function (x) {
	      return hypot.apply(hypot, flatten(x.toArray()));
	    }
	  });
	
	  /**
	   * Calculate the hypotenusa for an Array with values
	   * @param {Array.<number | BigNumber>} args
	   * @return {number | BigNumber} Returns the result
	   * @private
	   */
	  function _hypot (args) {
	    // code based on `hypot` from es6-shim:
	    // https://github.com/paulmillr/es6-shim/blob/master/es6-shim.js#L1619-L1633
	    var result = 0;
	    var largest = 0;
	
	    for (var i = 0; i < args.length; i++) {
	      var value = abs(args[i]);
	      if (smaller(largest, value)) {
	        result = multiply(result, multiply(divide(largest, value), divide(largest, value)));
	        result = add(result, 1);
	        largest = value;
	      } else {
	        result = add(result, isPositive(value) ? multiply(divide(value, largest), divide(value, largest)) : value);
	      }
	    }
	
	    return multiply(largest, sqrt(result));
	  }
	
	  hypot.toTex = '\\hypot\\left(${args}\\right)';
	
	  return hypot;
	}
	
	exports.name = 'hypot';
	exports.factory = factory;


/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	
	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm02 = load(__webpack_require__(440));
	  var algorithm06 = load(__webpack_require__(449));
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Calculate the least common multiple for two or more values or arrays.
	   *
	   * lcm is defined as:
	   *
	   *     lcm(a, b) = abs(a * b) / gcd(a, b)
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.lcm(a, b)
	   *    math.lcm(a, b, c, ...)
	   *
	   * Examples:
	   *
	   *    math.lcm(4, 6);               // returns 12
	   *    math.lcm(6, 21);              // returns 42
	   *    math.lcm(6, 21, 5);           // returns 210
	   *
	   *    math.lcm([4, 6], [6, 21]);    // returns [12, 42]
	   *
	   * See also:
	   *
	   *    gcd, xgcd
	   *
	   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers
	   * @return {number | BigNumber | Array | Matrix}                           The least common multiple
	   */
	  var lcm = typed('lcm', {
	    'number, number': _lcm,
	
	    'BigNumber, BigNumber': _lcmBigNumber,
	
	    'Fraction, Fraction': function (x, y) {
	
	      return x.lcm(y);
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm06(x, y, lcm);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm02(y, x, lcm, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm02(x, y, lcm, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, lcm);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return lcm(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return lcm(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return lcm(x, matrix(y));
	    },
	
	    'Matrix, number | BigNumber': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, lcm, false);
	          break;
	        default:
	          c = algorithm14(x, y, lcm, false);
	          break;
	      }
	      return c;
	    },
	
	    'number | BigNumber, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, lcm, true);
	          break;
	        default:
	          c = algorithm14(y, x, lcm, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, lcm, false).valueOf();
	    },
	
	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, lcm, true).valueOf();
	    },
	
	    // TODO: need a smarter notation here
	    'Array | Matrix | number | BigNumber, Array | Matrix | number | BigNumber, ...Array | Matrix | number | BigNumber': function (a, b, args) {
	      var res = lcm(a, b);
	      for (var i = 0; i < args.length; i++) {
	        res = lcm(res, args[i]);
	      }
	      return res;
	    }
	  });
	
	  lcm.toTex = undefined;  // use default template
	
	  return lcm;
	
	  /**
	   * Calculate lcm for two BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @returns {BigNumber} Returns the least common multiple of a and b
	   * @private
	   */
	  function _lcmBigNumber(a, b) {
	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function lcm must be integer numbers');
	    }
	
	    if (a.isZero() || b.isZero()) {
	      return new type.BigNumber(0);
	    }
	
	    // http://en.wikipedia.org/wiki/Euclidean_algorithm
	    // evaluate lcm here inline to reduce overhead
	    var prod = a.times(b);
	    while (!b.isZero()) {
	      var t = b;
	      b = a.mod(t);
	      a = t;
	    }
	    return prod.div(a).abs();
	  }
	}
	
	/**
	 * Calculate lcm for two numbers
	 * @param {number} a
	 * @param {number} b
	 * @returns {number} Returns the least common multiple of a and b
	 * @private
	 */
	function _lcm (a, b) {
	  if (!isInteger(a) || !isInteger(b)) {
	    throw new Error('Parameters in function lcm must be integer numbers');
	  }
	
	  if (a == 0 || b == 0) {
	    return 0;
	  }
	
	  // http://en.wikipedia.org/wiki/Euclidean_algorithm
	  // evaluate lcm here inline to reduce overhead
	  var t;
	  var prod = a * b;
	  while (b != 0) {
	    t = b;
	    b = a % t;
	    a = t;
	  }
	  return Math.abs(prod / a);
	}
	
	exports.name = 'lcm';
	exports.factory = factory;


/***/ }),
/* 449 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var scatter = __webpack_require__(450);
	var DimensionError = __webpack_require__(93);
	
	function factory (type, config, load, typed) {
	
	  var equalScalar = load(__webpack_require__(100));
	
	  var SparseMatrix = type.SparseMatrix;
	
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked (Anz U Bnz) times, where Anz and Bnz are the nonzero elements in both matrices.
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤  
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm06 = function (a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bsize = b._size;
	    var bdt = b._datatype;
	
	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);
	
	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	
	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	
	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	
	    // result arrays
	    var cvalues = avalues && bvalues ? [] : undefined;
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	
	    // workspaces
	    var x = cvalues ? [] : undefined;
	    // marks indicating we have a value in x for a given column
	    var w = [];
	    // marks indicating value in a given row has been updated
	    var u = [];
	
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // scatter the values of A(:,j) into workspace
	      scatter(a, j, w, x, u, mark, c, cf);
	      // scatter the values of B(:,j) into workspace
	      scatter(b, j, w, x, u, mark, c, cf);
	      // check we need to process values (non pattern matrix)
	      if (x) {
	        // initialize first index in j
	        var k = cptr[j];
	        // loop index in j
	        while (k < cindex.length) {
	          // row
	          var i = cindex[k];
	          // check function was invoked on current row (Aij !=0 && Bij != 0)
	          if (u[i] === mark) {
	            // value @ i
	            var v = x[i];
	            // check for zero value
	            if (!eq(v, zero)) {
	              // push value
	              cvalues.push(v);
	              // increment pointer
	              k++;
	            }
	            else {
	              // remove value @ i, do not increment pointer
	              cindex.splice(k, 1);
	            }
	          }
	          else {
	            // remove value @ i, do not increment pointer
	            cindex.splice(k, 1);
	          }
	        }
	      }
	      else {
	        // initialize first index in j
	        var p = cptr[j];
	        // loop index in j
	        while (p < cindex.length) {
	          // row
	          var r = cindex[p];
	          // check function was invoked on current row (Aij !=0 && Bij != 0)
	          if (u[r] !== mark) {
	            // remove value @ i, do not increment pointer
	            cindex.splice(p, 1);
	          }
	          else {
	            // increment pointer
	            p++;
	          }
	        }
	      }
	    }
	    // update cptr
	    cptr[columns] = cindex.length;
	
	    // return sparse matrix
	    return c;
	  };
	  
	  return algorithm06;
	}
	
	exports.name = 'algorithm06';
	exports.factory = factory;


/***/ }),
/* 450 */
/***/ (function(module, exports) {

	'use strict';
	
	module.exports = function scatter(a, j, w, x, u, mark, c, f, inverse, update, value) {
	  // a arrays
	  var avalues = a._values;
	  var aindex = a._index;
	  var aptr = a._ptr;
	  // c arrays
	  var cindex = c._index;
	
	  // vars
	  var k, k0, k1, i;
	
	  // check we need to process values (pattern matrix)
	  if (x) {
	    // values in j
	    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	      // row
	      i = aindex[k];
	      // check value exists in current j
	      if (w[i] !== mark) {
	        // i is new entry in j
	        w[i] = mark;
	        // add i to pattern of C
	        cindex.push(i);
	        // x(i) = A, check we need to call function this time
	        if (update) {
	          // copy value to workspace calling callback function
	          x[i] = inverse ? f(avalues[k], value) : f(value, avalues[k]);
	          // function was called on current row
	          u[i] = mark;
	        }
	        else {
	          // copy value to workspace
	          x[i] = avalues[k];
	        }
	      }
	      else {
	        // i exists in C already
	        x[i] = inverse ? f(avalues[k], x[i]) : f(x[i], avalues[k]);
	        // function was called on current row
	        u[i] = mark;
	      }
	    }
	  }
	  else {
	    // values in j
	    for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	      // row
	      i = aindex[k];
	      // check value exists in current j
	      if (w[i] !== mark) {
	        // i is new entry in j
	        w[i] = mark;
	        // add i to pattern of C
	        cindex.push(i);
	      }
	      else {
	        // indicate function was called on current row
	        u[i] = mark;
	      }
	    }
	  }
	};


/***/ }),
/* 451 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  var divideScalar = load(__webpack_require__(133));
	
	  /**
	   * Calculate the logarithm of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log(x)
	   *    math.log(x, base)
	   *
	   * Examples:
	   *
	   *    math.log(3.5);                  // returns 1.252762968495368
	   *    math.exp(math.log(2.4));        // returns 2.4
	   *
	   *    math.pow(10, 4);                // returns 10000
	   *    math.log(10000, 10);            // returns 4
	   *    math.log(10000) / math.log(10); // returns 4
	   *
	   *    math.log(1024, 2);              // returns 10
	   *    math.pow(2, 10);                // returns 1024
	   *
	   * See also:
	   *
	   *    exp, log10
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm.
	   * @param {number | BigNumber | Complex} [base=e]
	   *            Optional base for the logarithm. If not provided, the natural
	   *            logarithm of `x` is calculated.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the logarithm of `x`
	   */
	  var log = typed('log', {
	    'number': function (x) {
	      if (x >= 0 || config.predictable) {
	        return Math.log(x);
	      }
	      else {
	        // negative value -> complex value computation
	        return new type.Complex(x, 0).log();
	      }
	    },
	
	    'Complex': function (x) {
	      return x.log();
	    },
	
	    'BigNumber': function (x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.ln();
	      }
	      else {
	        // downgrade to number, return Complex valued result
	        return new type.Complex(x.toNumber(), 0).log();
	      }
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, log);
	    },
	
	    'any, any': function (x, base) {
	      // calculate logarithm for a specified base, log(x, base)
	      return divideScalar(log(x), log(base));
	    }
	  });
	
	  log.toTex = {
	    1: '\\ln\\left(${args[0]}\\right)',
	    2: '\\log_{${args[1]}}\\left(${args[0]}\\right)'
	  };
	
	  return log;
	}
	
	exports.name = 'log';
	exports.factory = factory;


/***/ }),
/* 452 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the 10-base logarithm of a value. This is the same as calculating `log(x, 10)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.log10(x)
	   *
	   * Examples:
	   *
	   *    math.log10(0.00001);            // returns -5
	   *    math.log10(10000);              // returns 4
	   *    math.log(10000) / math.log(10); // returns 4
	   *    math.pow(10, 4);                // returns 10000
	   *
	   * See also:
	   *
	   *    exp, log
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the logarithm.
	   * @return {number | BigNumber | Complex | Array | Matrix}
	   *            Returns the 10-base logarithm of `x`
	   */
	  var log10 = typed('log10', {
	    'number': function (x) {
	      if (x >= 0 || config.predictable) {
	        return _log10(x);
	      }
	      else {
	        // negative value -> complex value computation
	        return new type.Complex(x, 0).log().div(Math.LN10);
	      }
	    },
	
	    'Complex': function (x) {
	      return new type.Complex(x).log().div(Math.LN10);
	    },
	
	    'BigNumber': function (x) {
	      if (!x.isNegative() || config.predictable) {
	        return x.log();
	      }
	      else {
	        // downgrade to number, return Complex valued result
	        return new type.Complex(x.toNumber(), 0).log().div(Math.LN10);
	      }
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, log10);
	    }
	  });
	
	  log10.toTex = {1: '\\log_{10}\\left(${args[0]}\\right)'};
	
	  return log10;
	}
	
	/**
	 * Calculate the 10-base logarithm of a number
	 * @param {number} x
	 * @return {number}
	 * @private
	 */
	var _log10 = Math.log10 || function (x) {
	  return Math.log(x) / Math.LN10;
	};
	
	exports.name = 'log10';
	exports.factory = factory;
	


/***/ }),
/* 453 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	  var latex = __webpack_require__(83);
	
	  var algorithm02 = load(__webpack_require__(440));
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm05 = load(__webpack_require__(131));
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	  
	  /**
	   * Calculates the modulus, the remainder of an integer division.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * The modulus is defined as:
	   *
	   *     x - y * floor(x / y)
	   *
	   * See http://en.wikipedia.org/wiki/Modulo_operation.
	   *
	   * Syntax:
	   *
	   *    math.mod(x, y)
	   *
	   * Examples:
	   *
	   *    math.mod(8, 3);                // returns 2
	   *    math.mod(11, 2);               // returns 1
	   *
	   *    function isOdd(x) {
	   *      return math.mod(x, 2) != 0;
	   *    }
	   *
	   *    isOdd(2);                      // returns false
	   *    isOdd(3);                      // returns true
	   *
	   * See also:
	   *
	   *    divide
	   *
	   * @param  {number | BigNumber | Fraction | Array | Matrix} x Dividend
	   * @param  {number | BigNumber | Fraction | Array | Matrix} y Divisor
	   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the remainder of `x` divided by `y`.
	   */
	  var mod = typed('mod', {
	
	    'number, number': _mod,
	
	    'BigNumber, BigNumber': function (x, y) {
	      return y.isZero() ? x : x.mod(y);
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      return x.mod(y);
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // mod(sparse, sparse)
	              c = algorithm05(x, y, mod, false);
	              break;
	            default:
	              // mod(sparse, dense)
	              c = algorithm02(y, x, mod, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // mod(dense, sparse)
	              c = algorithm03(x, y, mod, false);
	              break;
	            default:
	              // mod(dense, dense)
	              c = algorithm13(x, y, mod);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	    
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return mod(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return mod(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return mod(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, mod, false);
	          break;
	        default:
	          c = algorithm14(x, y, mod, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, mod, true);
	          break;
	        default:
	          c = algorithm14(y, x, mod, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, mod, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, mod, true).valueOf();
	    }
	  });
	
	  mod.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['mod'] + '${args[1]}\\right)'
	  };
	
	  return mod;
	
	  /**
	   * Calculate the modulus of two numbers
	   * @param {number} x
	   * @param {number} y
	   * @returns {number} res
	   * @private
	   */
	  function _mod(x, y) {
	    if (y > 0) {
	      // We don't use JavaScript's % operator here as this doesn't work
	      // correctly for x < 0 and x == 0
	      // see http://en.wikipedia.org/wiki/Modulo_operation
	      return x - y * Math.floor(x / y);
	    }
	    else if (y === 0) {
	      return x;
	    }
	    else { // y < 0
	      // TODO: implement mod for a negative divisor
	      throw new Error('Cannot calculate mod for a negative divisor');
	    }
	  }
	}
	
	exports.name = 'mod';
	exports.factory = factory;


/***/ }),
/* 454 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  
	  var abs         = load(__webpack_require__(138));
	  var add         = load(__webpack_require__(103));
	  var pow         = load(__webpack_require__(134));
	  var sqrt        = load(__webpack_require__(406));
	  var multiply    = load(__webpack_require__(136));
	  var equalScalar = load(__webpack_require__(100));
	  var larger      = load(__webpack_require__(116));
	  var smaller     = load(__webpack_require__(112));
	  var matrix      = load(__webpack_require__(104));
	  var trace       = load(__webpack_require__(455));
	  var transpose   = load(__webpack_require__(415));
	
	
	  /**
	   * Calculate the norm of a number, vector or matrix.
	   *
	   * The second parameter p is optional. If not provided, it defaults to 2.
	   *
	   * Syntax:
	   *
	   *    math.norm(x)
	   *    math.norm(x, p)
	   *
	   * Examples:
	   *
	   *    math.abs(-3.5);                         // returns 3.5
	   *    math.norm(-3.5);                        // returns 3.5
	   *
	   *    math.norm(math.complex(3, -4));         // returns 5
	   *
	   *    math.norm([1, 2, -3], Infinity);        // returns 3
	   *    math.norm([1, 2, -3], -Infinity);       // returns 1
	   *
	   *    math.norm([3, 4], 2);                   // returns 5
	   *
	   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6
	   *    math.norm([[1, 2], [3, 4]], 'inf');     // returns 7
	   *    math.norm([[1, 2], [3, 4]], 'fro');     // returns 5.477225575051661
	   *
	   * See also:
	   *
	   *    abs, hypot
	   *
	   * @param  {number | BigNumber | Complex | Array | Matrix} x
	   *            Value for which to calculate the norm
	   * @param  {number | BigNumber | string} [p=2]
	   *            Vector space.
	   *            Supported numbers include Infinity and -Infinity.
	   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)
	   * @return {number | BigNumber} the p-norm
	   */
	  var norm = typed('norm', {
	    'number': Math.abs,
	
	    'Complex': function (x) {
	      return x.abs();
	    },
	
	    'BigNumber': function (x) {
	      // norm(x) = abs(x)
	      return x.abs();
	    },
	    
	    'boolean | null' : function (x) {
	      // norm(x) = abs(x)
	      return Math.abs(x);
	    },
	
	    'Array': function (x) {
	      return _norm(matrix(x), 2);
	    },
	    
	    'Matrix': function (x) {
	      return _norm(x, 2);
	    },
	
	    'number | Complex | BigNumber | boolean | null, number | BigNumber | string': function (x) {
	      // ignore second parameter, TODO: remove the option of second parameter for these types
	      return norm(x);
	    },
	
	    'Array, number | BigNumber | string': function (x, p) {
	      return _norm(matrix(x), p);
	    },
	    
	    'Matrix, number | BigNumber | string': function (x, p) {
	      return _norm(x, p);
	    }
	  });
	
	  /**
	   * Calculate the norm for an array
	   * @param {Array} x
	   * @param {number | string} p
	   * @returns {number} Returns the norm
	   * @private
	   */
	  function _norm (x, p) {
	    // size
	    var sizeX = x.size();
	    
	    // check if it is a vector
	    if (sizeX.length == 1) {
	      // check p
	      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
	        // norm(x, Infinity) = max(abs(x))
	        var pinf = 0;
	        // skip zeros since abs(0) == 0
	        x.forEach(
	          function (value) {
	            var v = abs(value);
	            if (larger(v, pinf))
	              pinf = v;
	          },
	          true);
	        return pinf;
	      }
	      if (p === Number.NEGATIVE_INFINITY || p === '-inf') {
	        // norm(x, -Infinity) = min(abs(x))
	        var ninf;
	        // skip zeros since abs(0) == 0
	        x.forEach(
	          function (value) {
	            var v = abs(value);
	            if (!ninf || smaller(v, ninf))
	              ninf = v;
	          },
	          true);
	        return ninf || 0;
	      }
	      if (p === 'fro') {
	        return _norm(x, 2);
	      }
	      if (typeof p === 'number' && !isNaN(p)) {
	        // check p != 0
	        if (!equalScalar(p, 0)) {
	          // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p
	          var n = 0;
	          // skip zeros since abs(0) == 0
	          x.forEach(
	            function (value) {
	              n = add(pow(abs(value), p), n);
	            },
	            true);
	          return pow(n, 1 / p);
	        }
	        return Number.POSITIVE_INFINITY;
	      }
	      // invalid parameter value
	      throw new Error('Unsupported parameter value');
	    }
	    // MxN matrix
	    if (sizeX.length == 2) {
	      // check p
	      if (p === 1) {
	        // norm(x) = the largest column sum
	        var c = [];
	        // result
	        var maxc = 0;
	        // skip zeros since abs(0) == 0
	        x.forEach(
	          function (value, index) {
	            var j = index[1];
	            var cj = add(c[j] || 0, abs(value));
	            if (larger(cj, maxc))
	              maxc = cj;
	            c[j] = cj;
	          },
	          true);
	        return maxc;
	      }
	      if (p === Number.POSITIVE_INFINITY || p === 'inf') {
	        // norm(x) = the largest row sum
	        var r = [];
	        // result
	        var maxr = 0;
	        // skip zeros since abs(0) == 0
	        x.forEach(
	          function (value, index) {
	            var i = index[0];
	            var ri = add(r[i] || 0, abs(value));
	            if (larger(ri, maxr))
	              maxr = ri;
	            r[i] = ri;
	          },
	          true);
	        return maxr;
	      }
	      if (p === 'fro') {
	        // norm(x) = sqrt(sum(diag(x'x)))
	        return sqrt(trace(multiply(transpose(x), x)));
	      }
	      if (p === 2) {
	        // not implemented
	        throw new Error('Unsupported parameter value, missing implementation of matrix singular value decomposition');
	      }
	      // invalid parameter value
	      throw new Error('Unsupported parameter value');
	    }
	  }
	
	  norm.toTex = {
	    1: '\\left\\|${args[0]}\\right\\|',
	    2: undefined  // use default template
	  };
	
	  return norm;
	}
	
	exports.name = 'norm';
	exports.factory = factory;


/***/ }),
/* 455 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var clone = __webpack_require__(55).clone;
	var format = __webpack_require__(74).format;
	
	function factory (type, config, load, typed) {
	  
	  var matrix = load(__webpack_require__(104));
	  var add = load(__webpack_require__(103));
	
	  /**
	   * Calculate the trace of a matrix: the sum of the elements on the main
	   * diagonal of a square matrix.
	   *
	   * Syntax:
	   *
	   *    math.trace(x)
	   *
	   * Examples:
	   *
	   *    math.trace([[1, 2], [3, 4]]); // returns 5
	   *
	   *    var A = [
	   *      [1, 2, 3],
	   *      [-1, 2, 3],
	   *      [2, 0, 3]
	   *    ]
	   *    math.trace(A); // returns 6
	   *
	   * See also:
	   *
	   *    diag
	   *
	   * @param {Array | Matrix} x  A matrix
	   *
	   * @return {number} The trace of `x`
	   */
	  var trace = typed('trace', {
	    
	    'Array': function (x) {
	      // use dense matrix implementation
	      return trace(matrix(x));
	    },
	
	    'Matrix': function (x) {
	      // result
	      var c;
	      // process storage format
	      switch (x.storage()) {
	        case 'dense':
	          c = _denseTrace(x);
	          break;
	        case 'sparse':
	          c = _sparseTrace(x);
	          break;
	      }
	      return c;
	    },
	    
	    'any': clone
	  });
	  
	  var _denseTrace = function (m) {
	    // matrix size & data
	    var size = m._size;
	    var data = m._data;
	    
	    // process dimensions
	    switch (size.length) {
	      case 1:
	        // vector
	        if (size[0] == 1) {
	          // return data[0]
	          return clone(data[0]);
	        }
	        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');
	      case 2:
	        // two dimensional
	        var rows = size[0];
	        var cols = size[1];
	        if (rows === cols) {
	          // calulate sum
	          var sum = 0;
	          // loop diagonal
	          for (var i = 0; i < rows; i++)
	            sum = add(sum, data[i][i]);
	          // return trace
	          return sum;
	        }
	        throw new RangeError('Matrix must be square (size: ' + format(size) + ')');        
	      default:
	        // multi dimensional
	        throw new RangeError('Matrix must be two dimensional (size: ' + format(size) + ')');
	    }
	  };
	  
	  var _sparseTrace = function (m) {
	    // matrix arrays
	    var values = m._values;
	    var index = m._index;
	    var ptr = m._ptr;
	    var size = m._size;
	    // check dimensions
	    var rows = size[0];
	    var columns = size[1];
	    // matrix must be square
	    if (rows === columns) {
	      // calulate sum
	      var sum = 0;
	      // check we have data (avoid looping columns)
	      if (values.length > 0) {
	        // loop columns
	        for (var j = 0; j < columns; j++) {
	          // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]
	          var k0 = ptr[j];
	          var k1 = ptr[j + 1];
	          // loop k within [k0, k1[
	          for (var k = k0; k < k1; k++) {
	            // row index
	            var i = index[k];
	            // check row
	            if (i === j) {
	              // accumulate value
	              sum = add(sum, values[k]);
	              // exit loop
	              break;
	            }
	            if (i > j) {
	              // exit loop, no value on the diagonal for column j
	              break;
	            }
	          }
	        }
	      }
	      // return trace
	      return sum;
	    }
	    throw new RangeError('Matrix must be square (size: ' + format(size) + ')');   
	  };
	
	  trace.toTex = {1: '\\mathrm{tr}\\left(${args[0]}\\right)'};
	  
	  return trace;
	}
	
	exports.name = 'trace';
	exports.factory = factory;


/***/ }),
/* 456 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm01 = load(__webpack_require__(106));
	  var algorithm02 = load(__webpack_require__(440));
	  var algorithm06 = load(__webpack_require__(449));
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Calculate the nth root of a value.
	   * The principal nth root of a positive real number A, is the positive real
	   * solution of the equation
	   *
	   *     x^root = A
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *     math.nthRoot(a)
	   *     math.nthRoot(a, root)
	   *
	   * Examples:
	   *
	   *     math.nthRoot(9, 2);    // returns 3, as 3^2 == 9
	   *     math.sqrt(9);          // returns 3, as 3^2 == 9
	   *     math.nthRoot(64, 3);   // returns 4, as 4^3 == 64
	   *
	   * See also:
	   *
	   *     sqrt, pow
	   *
	   * @param {number | BigNumber | Array | Matrix | Complex} a
	   *              Value for which to calculate the nth root
	   * @param {number | BigNumber} [root=2]    The root.
	   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`
	   */
	  var nthRoot = typed('nthRoot', {
	    
	    'number': function (x) {
	      return _nthRoot(x, 2);
	    },
	    'number, number': _nthRoot,
	
	    'BigNumber': function (x) {
	      return _bigNthRoot(x, new type.BigNumber(2));
	    },
	    'Complex' : function(x) {
	      return _nthComplexRoot(x, 2);
	    }, 
	    'Complex, number' : _nthComplexRoot,
	    'BigNumber, BigNumber': _bigNthRoot,
	
	    'Array | Matrix': function (x) {
	      return nthRoot(x, 2);
	    },
	    
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // density must be one (no zeros in matrix)
	              if (y.density() === 1) {
	                // sparse + sparse
	                c = algorithm06(x, y, nthRoot);
	              }
	              else {
	                // throw exception
	                throw new Error('Root must be non-zero');
	              }
	              break;
	            default:
	              // sparse + dense
	              c = algorithm02(y, x, nthRoot, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // density must be one (no zeros in matrix)
	              if (y.density() === 1) {
	                // dense + sparse
	                c = algorithm01(x, y, nthRoot, false);
	              }
	              else {
	                // throw exception
	                throw new Error('Root must be non-zero');
	              }
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, nthRoot);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return nthRoot(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return nthRoot(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return nthRoot(x, matrix(y));
	    },
	    
	    'Matrix, number | BigNumber': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, nthRoot, false);
	          break;
	        default:
	          c = algorithm14(x, y, nthRoot, false);
	          break;
	      }
	      return c;
	    },
	
	    'number | BigNumber, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          // density must be one (no zeros in matrix)
	          if (y.density() === 1) {
	            // sparse - scalar
	            c = algorithm11(y, x, nthRoot, true);
	          }
	          else {
	            // throw exception
	            throw new Error('Root must be non-zero');
	          }
	          break;
	        default:
	          c = algorithm14(y, x, nthRoot, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return nthRoot(matrix(x), y).valueOf();
	    },
	
	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return nthRoot(x, matrix(y)).valueOf();
	    }
	  });
	
	  nthRoot.toTex = {2: '\\sqrt[${args[1]}]{${args[0]}}'};
	
	  return nthRoot;
	
	  /**
	   * Calculate the nth root of a for BigNumbers, solve x^root == a
	   * http://rosettacode.org/wiki/Nth_root#JavaScript
	   * @param {BigNumber} a
	   * @param {BigNumber} root
	   * @private
	   */
	  function _bigNthRoot(a, root) {
	    var precision = type.BigNumber.precision;
	    var Big = type.BigNumber.clone({precision: precision + 2});
	    var zero = new type.BigNumber(0);
	
	    var one = new Big(1);
	    var inv = root.isNegative();
	    if (inv) {
	      root = root.neg();
	    }
	
	    if (root.isZero()) {
	      throw new Error('Root must be non-zero');
	    }
	    if (a.isNegative() && !root.abs().mod(2).equals(1)) {
	      throw new Error('Root must be odd when a is negative.');
	    }
	
	    // edge cases zero and infinity
	    if (a.isZero()) {
	      return inv ? new Big(Infinity) : 0;
	    }
	    if (!a.isFinite()) {
	      return inv ? zero : a;
	    }
	
	    var x = a.abs().pow(one.div(root));
	    // If a < 0, we require that root is an odd integer,
	    // so (-1) ^ (1/root) = -1
	    x = a.isNeg() ? x.neg() : x;
	    return new type.BigNumber((inv ? one.div(x) : x).toPrecision(precision));
	  }
	}
	
	/**
	 * Calculate the nth root of a, solve x^root == a
	 * http://rosettacode.org/wiki/Nth_root#JavaScript
	 * @param {number} a
	 * @param {number} root
	 * @private
	 */
	function _nthRoot(a, root) {
	  var inv = root < 0;
	  if (inv) {
	    root = -root;
	  }
	
	  if (root === 0) {
	    throw new Error('Root must be non-zero');
	  }
	  if (a < 0 && (Math.abs(root) % 2 != 1)) {
	    throw new Error('Root must be odd when a is negative.');
	  }
	
	  // edge cases zero and infinity
	  if (a == 0) {
	    return inv ? Infinity : 0;
	  }
	  if (!isFinite(a)) {
	    return inv ? 0 : a;
	  }
	
	  var x = Math.pow(Math.abs(a), 1/root);
	  // If a < 0, we require that root is an odd integer,
	  // so (-1) ^ (1/root) = -1
	  x = a < 0 ? -x : x;
	  return inv ? 1 / x : x;
	
	  // Very nice algorithm, but fails with nthRoot(-2, 3).
	  // Newton's method has some well-known problems at times:
	  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis
	  /*
	  var x = 1; // Initial guess
	  var xPrev = 1;
	  var i = 0;
	  var iMax = 10000;
	  do {
	    var delta = (a / Math.pow(x, root - 1) - x) / root;
	    xPrev = x;
	    x = x + delta;
	    i++;
	  }
	  while (xPrev !== x && i < iMax);
	
	  if (xPrev !== x) {
	    throw new Error('Function nthRoot failed to converge');
	  }
	
	  return inv ? 1 / x : x;
	  */
	}
	
	/**
	 * Calculate the nth root of a Complex Number a using De Moviers Theorem.
	 * @param  {Complex} a
	 * @param  {number} root
	 * @return {Array} array or n Complex Roots in Polar Form.
	 */
	function _nthComplexRoot(a, root) {
	  if (root < 0) throw new Error('Root must be greater than zero');
	  if (root === 0) throw new Error('Root must be non-zero');
	  if (root % 1 !== 0) throw new Error('Root must be an integer');  
	  var arg = a.arg();
	  var abs = a.abs();
	  var roots = [];
	  var r = Math.pow(abs, 1/root);
	  for(var k = 0; k < root; k++) {
	    roots.push({r: r, phi: (arg + 2 * Math.PI * k)/root});
	  }
	  return roots;
	}
	
	exports.name = 'nthRoot';
	exports.factory = factory;


/***/ }),
/* 457 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	var toFixed = __webpack_require__(58).toFixed;
	var deepMap = __webpack_require__(70);
	
	var NO_INT = 'Number of decimals in function round must be an integer';
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	  var equalScalar = load(__webpack_require__(100));
	  var zeros = load(__webpack_require__(400));
	
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm14 = load(__webpack_require__(110));
	  
	  /**
	   * Round a value towards the nearest integer.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.round(x)
	   *    math.round(x, n)
	   *
	   * Examples:
	   *
	   *    math.round(3.2);              // returns number 3
	   *    math.round(3.8);              // returns number 4
	   *    math.round(-4.2);             // returns number -4
	   *    math.round(-4.7);             // returns number -5
	   *    math.round(math.pi, 3);       // returns number 3.142
	   *    math.round(123.45678, 2);     // returns number 123.46
	   *
	   *    var c = math.complex(3.2, -2.7);
	   *    math.round(c);                // returns Complex 3 - 3i
	   *
	   *    math.round([3.2, 3.8, -4.7]); // returns Array [3, 4, -5]
	   *
	   * See also:
	   *
	   *    ceil, fix, floor
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded
	   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value
	   */
	  var round = typed('round', {
	
	    'number': Math.round,
	
	    'number, number': function (x, n) {
	      if (!isInteger(n))   {throw new TypeError(NO_INT);}
	      if (n < 0 || n > 15) {throw new Error('Number of decimals in function round must be in te range of 0-15');}
	
	      return _round(x, n);
	    },
	
	    'Complex': function (x) {
	      return x.round();
	    },
	
	    'Complex, number': function (x, n) {
	      if (n % 1) {throw new TypeError(NO_INT);}
	      
	      return x.round(n);
	    },
	
	    'Complex, BigNumber': function (x, n) {
	      if (!n.isInteger()) {throw new TypeError(NO_INT);}
	
	      var _n = n.toNumber();
	      return x.round(_n);
	    },
	
	    'number, BigNumber': function (x, n) {
	      if (!n.isInteger()) {throw new TypeError(NO_INT);}
	
	      return new type.BigNumber(x).toDecimalPlaces(n.toNumber());
	    },
	
	    'BigNumber': function (x) {
	      return x.toDecimalPlaces(0);
	    },
	
	    'BigNumber, BigNumber': function (x, n) {
	      if (!n.isInteger()) {throw new TypeError(NO_INT);}
	
	      return x.toDecimalPlaces(n.toNumber());
	    },
	
	    'Fraction': function (x) {
	      return x.round();
	    },
	
	    'Fraction, number': function (x, n) {
	      if (n % 1) {throw new TypeError(NO_INT);}
	      return x.round(n);
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since round(0) = 0
	      return deepMap(x, round, true);
	    },
	
	    'Matrix, number | BigNumber': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, round, false);
	          break;
	        default:
	          c = algorithm14(x, y, round, false);
	          break;
	      }
	      return c;
	    },
	
	    'number | Complex | BigNumber, Matrix': function (x, y) {
	      // check scalar is zero
	      if (!equalScalar(x, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (y.storage()) {
	          case 'sparse':
	            c = algorithm12(y, x, round, true);
	            break;
	          default:
	            c = algorithm14(y, x, round, true);
	            break;
	        }
	        return c;
	      }
	      // do not execute algorithm, result will be a zero matrix
	      return zeros(y.size(), y.storage());
	    },
	
	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, round, false).valueOf();
	    },
	
	    'number | Complex | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, round, true).valueOf();
	    }
	  });
	
	  round.toTex = {
	    1: '\\left\\lfloor${args[0]}\\right\\rceil',
	    2: undefined  // use default template
	  };
	
	  return round;
	}
	
	/**
	 * round a number to the given number of decimals, or to zero if decimals is
	 * not provided
	 * @param {number} value
	 * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)
	 * @return {number} roundedValue
	 * @private
	 */
	function _round (value, decimals) {
	  return parseFloat(toFixed(value, decimals));
	}
	
	exports.name = 'round';
	exports.factory = factory;


/***/ }),
/* 458 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Compute the square of a value, `x * x`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.square(x)
	   *
	   * Examples:
	   *
	   *    math.square(2);           // returns number 4
	   *    math.square(3);           // returns number 9
	   *    math.pow(3, 2);           // returns number 9
	   *    math.multiply(3, 3);      // returns number 9
	   *
	   *    math.square([1, 2, 3, 4]);  // returns Array [1, 4, 9, 16]
	   *
	   * See also:
	   *
	   *    multiply, cube, sqrt, pow
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix | Unit} x
	   *            Number for which to calculate the square
	   * @return {number | BigNumber | Fraction | Complex | Array | Matrix | Unit}
	   *            Squared value
	   */
	  var square = typed('square', {
	    'number': function (x) {
	      return x * x;
	    },
	
	    'Complex': function (x) {
	      return x.mul(x);
	    },
	
	    'BigNumber': function (x) {
	      return x.times(x);
	    },
	
	    'Fraction': function (x) {
	      return x.mul(x);
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since square(0) = 0
	      return deepMap(x, square, true);
	    },
	
	    'Unit': function(x) {
	      return x.pow(2);
	    }
	  });
	
	  square.toTex = {1: '\\left(${args[0]}\\right)^2'};
	
	  return square;
	}
	
	exports.name = 'square';
	exports.factory = factory;


/***/ }),
/* 459 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  /**
	   * Unary plus operation.
	   * Boolean values and strings will be converted to a number, numeric values will be returned as is.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.unaryPlus(x)
	   *
	   * Examples:
	   *
	   *    math.unaryPlus(3.5);      // returns 3.5
	   *    math.unaryPlus(1);     // returns 1
	   *
	   * See also:
	   *
	   *    unaryMinus, add, subtract
	   *
	   * @param  {number | BigNumber | Fraction | string | Complex | Unit | Array | Matrix} x
	   *            Input value
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Returns the input value when numeric, converts to a number when input is non-numeric.
	   */
	  var unaryPlus = typed('unaryPlus', {
	    'number': function (x) {
	      return x;
	    },
	
	    'Complex': function (x) {
	      return x; // complex numbers are immutable
	    },
	
	    'BigNumber': function (x) {
	      return x; // bignumbers are immutable
	    },
	
	    'Fraction': function (x) {
	      return x; // fractions are immutable
	    },
	
	    'Unit': function (x) {
	      return x.clone();
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since unaryPlus(0) = 0
	      return deepMap(x, unaryPlus, true);
	    },
	
	    'boolean | string | null': function (x) {
	      // convert to a number or bignumber
	      return (config.number == 'BigNumber') ? new type.BigNumber(+x): +x;
	    }
	  });
	
	  unaryPlus.toTex = {
	    1: latex.operators['unaryPlus'] + '\\left(${args[0]}\\right)'
	  };
	
	  return unaryPlus;
	}
	
	exports.name = 'unaryPlus';
	exports.factory = factory;


/***/ }),
/* 460 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Calculate the extended greatest common divisor for two values.
	   * See http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm.
	   *
	   * Syntax:
	   *
	   *    math.xgcd(a, b)
	   *
	   * Examples:
	   *
	   *    math.xgcd(8, 12);             // returns [4, -1, 1]
	   *    math.gcd(8, 12);              // returns 4
	   *    math.xgcd(36163, 21199);      // returns [1247, -7, 12]
	   *
	   * See also:
	   *
	   *    gcd, lcm
	   *
	   * @param {number | BigNumber} a  An integer number
	   * @param {number | BigNumber} b  An integer number
	   * @return {Array}              Returns an array containing 3 integers `[div, m, n]`
	   *                              where `div = gcd(a, b)` and `a*m + b*n = div`
	   */
	  var xgcd = typed('xgcd', {
	    'number, number': _xgcd,
	    'BigNumber, BigNumber': _xgcdBigNumber
	    // TODO: implement support for Fraction
	  });
	
	  xgcd.toTex = undefined; // use default template
	
	  return xgcd;
	
	  /**
	   * Calculate xgcd for two numbers
	   * @param {number} a
	   * @param {number} b
	   * @return {number} result
	   * @private
	   */
	  function _xgcd (a, b) {
	    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
	    var t, // used to swap two variables
	        q, // quotient
	        r, // remainder
	        x = 0, lastx = 1,
	        y = 1, lasty = 0;
	
	    if (!isInteger(a) || !isInteger(b)) {
	      throw new Error('Parameters in function xgcd must be integer numbers');
	    }
	
	    while (b) {
	      q = Math.floor(a / b);
	      r = a - q*b;
	
	      t = x;
	      x = lastx - q * x;
	      lastx = t;
	
	      t = y;
	      y = lasty - q * y;
	      lasty = t;
	
	      a = b;
	      b = r;
	    }
	
	    var res;
	    if (a < 0) {
	      res = [-a, -lastx, -lasty];
	    }
	    else {
	      res = [a, a ? lastx : 0, lasty];
	    }
	    return (config.matrix === 'Array') ? res : matrix(res);
	  }
	
	  /**
	   * Calculate xgcd for two BigNumbers
	   * @param {BigNumber} a
	   * @param {BigNumber} b
	   * @return {BigNumber[]} result
	   * @private
	   */
	  function _xgcdBigNumber(a, b) {
	    // source: http://en.wikipedia.org/wiki/Extended_Euclidean_algorithm
	    var t, // used to swap two variables
	        q, // quotient
	        r, // remainder
	        zero = new type.BigNumber(0),
	        one = new type.BigNumber(1),
	        x = zero,
	        lastx = one,
	        y = one,
	        lasty = zero;
	
	    if (!a.isInt() || !b.isInt()) {
	      throw new Error('Parameters in function xgcd must be integer numbers');
	    }
	
	    while (!b.isZero()) {
	      q = a.div(b).floor();
	      r = a.mod(b);
	
	      t = x;
	      x = lastx.minus(q.times(x));
	      lastx = t;
	
	      t = y;
	      y = lasty.minus(q.times(y));
	      lasty = t;
	
	      a = b;
	      b = r;
	    }
	
	    var res;
	    if (a.lt(zero)) {
	      res = [a.neg(), lastx.neg(), lasty.neg()];
	    }
	    else {
	      res = [a, !a.isZero() ? lastx : 0, lasty];
	    }
	    return (config.matrix === 'Array') ? res : matrix(res);
	  }
	}
	
	exports.name = 'xgcd';
	exports.factory = factory;


/***/ }),
/* 461 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(462),
	  __webpack_require__(466),
	  __webpack_require__(467),
	  __webpack_require__(469),
	  __webpack_require__(471),
	  __webpack_require__(474),
	  __webpack_require__(476)
	];


/***/ }),
/* 462 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	var bigBitAnd = __webpack_require__(463);
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm02 = load(__webpack_require__(440));
	  var algorithm06 = load(__webpack_require__(449));
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	  
	  /**
	   * Bitwise AND two values, `x & y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.bitAnd(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitAnd(53, 131);               // returns number 1
	   *
	   *    math.bitAnd([1, 12, 31], 42);       // returns Array [0, 8, 10]
	   *
	   * See also:
	   *
	   *    bitNot, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to and
	   * @param  {number | BigNumber | Array | Matrix} y Second value to and
	   * @return {number | BigNumber | Array | Matrix} AND of `x` and `y`
	   */
	  var bitAnd = typed('bitAnd', {
	
	    'number, number': function (x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function bitAnd');
	      }
	
	      return x & y;
	    },
	
	    'BigNumber, BigNumber': bigBitAnd,
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm06(x, y, bitAnd, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, bitAnd, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm02(x, y, bitAnd, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, bitAnd);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	    
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return bitAnd(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return bitAnd(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return bitAnd(x, matrix(y));
	    },
	    
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, bitAnd, false);
	          break;
	        default:
	          c = algorithm14(x, y, bitAnd, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, bitAnd, true);
	          break;
	        default:
	          c = algorithm14(y, x, bitAnd, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, bitAnd, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, bitAnd, true).valueOf();
	    }
	  });
	
	  bitAnd.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['bitAnd'] + '${args[1]}\\right)'
	  };
	
	  return bitAnd;
	}
	
	exports.name = 'bitAnd';
	exports.factory = factory;


/***/ }),
/* 463 */
/***/ (function(module, exports, __webpack_require__) {

	var bitwise = __webpack_require__(464);
	
	/**
	 * Bitwise and for Bignumbers
	 *
	 * Special Cases:
	 *   N &  n =  N
	 *   n &  0 =  0
	 *   n & -1 =  n
	 *   n &  n =  n
	 *   I &  I =  I
	 *  -I & -I = -I
	 *   I & -I =  0
	 *   I &  n =  n
	 *   I & -n =  I
	 *  -I &  n =  0
	 *  -I & -n = -I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` & `y`, is fully precise
	 * @private
	 */
	module.exports = function bitAnd(x, y) {
	  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
	    throw new Error('Integers expected in function bitAnd');
	  }
	
	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }
	
	  if (x.isZero() || y.eq(-1) || x.eq(y)) {
	    return x;
	  }
	  if (y.isZero() || x.eq(-1)) {
	    return y;
	  }
	
	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !y.isFinite()) {
	      if (x.isNegative() == y.isNegative()) {
	        return x;
	      }
	      return new BigNumber(0);
	    }
	    if (!x.isFinite()) {
	      if (y.isNegative()) {
	        return x;
	      }
	      if (x.isNegative()) {
	        return new BigNumber(0);
	      }
	      return y;
	    }
	    if (!y.isFinite()) {
	      if (x.isNegative()) {
	        return y;
	      }
	      if (y.isNegative()) {
	        return new BigNumber(0);
	      }
	      return x;
	    }
	  }
	  return bitwise(x, y, function (a, b) { return a & b });
	};


/***/ }),
/* 464 */
/***/ (function(module, exports, __webpack_require__) {

	var bitNot = __webpack_require__(465);
	
	/**
	 * Applies bitwise function to numbers
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @param {function (a, b)} func
	 * @return {BigNumber}
	 */
	module.exports = function bitwise(x, y, func) {
	  var BigNumber = x.constructor;
	
	  var xBits, yBits;
	  var xSign = +(x.s < 0);
	  var ySign = +(y.s < 0);
	  if (xSign) {
	    xBits = decCoefficientToBinaryString(bitNot(x));
	    for (var i = 0; i < xBits.length; ++i) {
	      xBits[i] ^= 1;
	    }
	  } else {
	    xBits = decCoefficientToBinaryString(x);
	  }
	  if (ySign) {
	    yBits = decCoefficientToBinaryString(bitNot(y));
	    for (var i = 0; i < yBits.length; ++i) {
	      yBits[i] ^= 1;
	    }
	  } else {
	    yBits = decCoefficientToBinaryString(y);
	  }
	
	  var minBits, maxBits, minSign;
	  if (xBits.length <= yBits.length) {
	    minBits = xBits;
	    maxBits = yBits;
	    minSign = xSign;
	  } else {
	    minBits = yBits;
	    maxBits = xBits;
	    minSign = ySign;
	  }
	
	  var shortLen = minBits.length;
	  var longLen = maxBits.length;
	  var expFuncVal = func(xSign, ySign) ^ 1;
	  var outVal = new BigNumber(expFuncVal ^ 1);
	  var twoPower = new BigNumber(1);
	  var two = new BigNumber(2);
	
	  var prevPrec = BigNumber.precision;
	  BigNumber.config({precision: 1E9});
	
	  while (shortLen > 0) {
	    if (func(minBits[--shortLen], maxBits[--longLen]) == expFuncVal) {
	      outVal = outVal.plus(twoPower);
	    }
	    twoPower = twoPower.times(two);
	  }
	  while (longLen > 0) {
	    if (func(minSign, maxBits[--longLen]) == expFuncVal) {
	      outVal = outVal.plus(twoPower);
	    }
	    twoPower = twoPower.times(two);
	  }
	
	  BigNumber.config({precision: prevPrec});
	
	  if (expFuncVal == 0) {
	    outVal.s = -outVal.s;
	  }
	  return outVal;
	};
	
	/* Extracted from decimal.js, and edited to specialize. */
	function decCoefficientToBinaryString (x) {
	  // Convert to string
	  var a = x.d; // array with digits
	  var r = a[0] + '';
	
	  for (var i = 1; i < a.length; ++i) {
	    var s = a[i] + '';
	    for (var z = 7 - s.length; z--; ) {
	      s = '0' + s;
	    }
	
	    r += s;
	  }
	
	  var j;
	  for (j = r.length - 1; r.charAt(j) == '0'; --j);
	
	  var xe = x.e;
	  var str = r.slice(0, j + 1 || 1);
	  var strL = str.length;
	  if (xe > 0) {
	    if (++xe > strL) {
	      // Append zeros.
	      for (xe -= strL; xe--; str += '0');
	    } else if (xe < strL) {
	      str = str.slice(0, xe) + '.' + str.slice(xe);
	    }
	  }
	
	  // Convert from base 10 (decimal) to base 2
	  var arr = [0];
	  for (var i = 0; i < str.length; ) {
	    for (var arrL = arr.length; arrL--; arr[arrL] *= 10);
	
	    arr[0] += str.charAt(i++) << 0;  // convert to int
	    for (var j = 0; j < arr.length; ++j) {
	      if (arr[j] > 1) {
	        if (arr[j + 1] == null) {
	          arr[j + 1] = 0;
	        }
	
	        arr[j + 1] += arr[j] >> 1;
	        arr[j] &= 1;
	      }
	    }
	  }
	
	  return arr.reverse();
	}


/***/ }),
/* 465 */
/***/ (function(module, exports) {

	/**
	 * Bitwise not
	 * @param {BigNumber} value
	 * @return {BigNumber} Result of ~`x`, fully precise
	 *
	 */
	module.exports = function bitNot (x) {
	  if (x.isFinite() && !x.isInteger()) {
	    throw new Error('Integer expected in function bitNot');
	  }
	
	  var BigNumber = x.constructor;
	  var prevPrec = BigNumber.precision;
	  BigNumber.config({precision: 1E9});
	
	  var x = x.plus(new BigNumber(1));
	  x.s = -x.s || null;
	
	  BigNumber.config({precision: prevPrec});
	  return x;
	};


/***/ }),
/* 466 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	var bigBitNot = __webpack_require__(465);
	var isInteger = __webpack_require__(58).isInteger;
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  /**
	   * Bitwise NOT value, `~x`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.bitNot(x)
	   *
	   * Examples:
	   *
	   *    math.bitNot(1);               // returns number -2
	   *
	   *    math.bitNot([2, -3, 4]);      // returns Array [-3, 2, 5]
	   *
	   * See also:
	   *
	   *    bitAnd, bitOr, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to not
	   * @return {number | BigNumber | Array | Matrix} NOT of `x`
	   */
	  var bitNot = typed('bitNot', {
	    'number': function (x) {
	      if (!isInteger(x)) {
	        throw new Error('Integer expected in function bitNot');
	      }
	
	      return ~x;
	    },
	
	    'BigNumber': bigBitNot,
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, bitNot);
	    }
	  });
	
	  bitNot.toTex = {
	    1: latex.operators['bitNot'] + '\\left(${args[0]}\\right)'
	  };
	
	  return bitNot;
	}
	
	exports.name = 'bitNot';
	exports.factory = factory;


/***/ }),
/* 467 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	var bigBitOr = __webpack_require__(468);
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm01 = load(__webpack_require__(106));
	  var algorithm04 = load(__webpack_require__(107));
	  var algorithm10 = load(__webpack_require__(108));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	  
	  /**
	   * Bitwise OR two values, `x | y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the lowest print base.
	   *
	   * Syntax:
	   *
	   *    math.bitOr(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitOr(1, 2);               // returns number 3
	   *
	   *    math.bitOr([1, 2, 3], 4);       // returns Array [5, 6, 7]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitXor, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to or
	   * @param  {number | BigNumber | Array | Matrix} y Second value to or
	   * @return {number | BigNumber | Array | Matrix} OR of `x` and `y`
	   */
	  var bitOr = typed('bitOr', {
	
	    'number, number': function (x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function bitOr');
	      }
	
	      return x | y;
	    },
	
	    'BigNumber, BigNumber': bigBitOr,
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm04(x, y, bitOr);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm01(y, x, bitOr, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm01(x, y, bitOr, false);
	              break;
	            default:
	              c = algorithm13(x, y, bitOr);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return bitOr(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return bitOr(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return bitOr(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm10(x, y, bitOr, false);
	          break;
	        default:
	          c = algorithm14(x, y, bitOr, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm10(y, x, bitOr, true);
	          break;
	        default:
	          c = algorithm14(y, x, bitOr, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, bitOr, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, bitOr, true).valueOf();
	    }
	  });
	
	  bitOr.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['bitOr'] + '${args[1]}\\right)'
	  };
	
	  return bitOr;
	}
	
	exports.name = 'bitOr';
	exports.factory = factory;


/***/ }),
/* 468 */
/***/ (function(module, exports, __webpack_require__) {

	var bitwise = __webpack_require__(464);
	
	/**
	 * Bitwise OR for BigNumbers
	 *
	 * Special Cases:
	 *   N |  n =  N
	 *   n |  0 =  n
	 *   n | -1 = -1
	 *   n |  n =  n
	 *   I |  I =  I
	 *  -I | -I = -I
	 *   I | -n = -1
	 *   I | -I = -1
	 *   I |  n =  I
	 *  -I |  n = -I
	 *  -I | -n = -n
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` | `y`, fully precise
	 */
	module.exports = function bitOr (x, y) {
	  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
	    throw new Error('Integers expected in function bitOr');
	  }
	
	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }
	
	  var negOne = new BigNumber(-1);
	  if (x.isZero() || y.eq(negOne) || x.eq(y)) {
	    return y;
	  }
	  if (y.isZero() || x.eq(negOne)) {
	    return x;
	  }
	
	  if (!x.isFinite() || !y.isFinite()) {
	    if ((!x.isFinite() && !x.isNegative() && y.isNegative()) ||
	        (x.isNegative() && !y.isNegative() && !y.isFinite())) {
	      return negOne;
	    }
	    if (x.isNegative() && y.isNegative()) {
	      return x.isFinite() ? x : y;
	    }
	    return x.isFinite() ? y : x;
	  }
	
	  return bitwise(x, y, function (a, b) { return a | b });
	};


/***/ }),
/* 469 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	var bigBitXor = __webpack_require__(470);
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm07 = load(__webpack_require__(114));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Bitwise XOR two values, `x ^ y`.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.bitXor(x, y)
	   *
	   * Examples:
	   *
	   *    math.bitXor(1, 2);               // returns number 3
	   *
	   *    math.bitXor([2, 3, 4], 4);       // returns Array [6, 7, 0]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, leftShift, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x First value to xor
	   * @param  {number | BigNumber | Array | Matrix} y Second value to xor
	   * @return {number | BigNumber | Array | Matrix} XOR of `x` and `y`
	   */
	  var bitXor = typed('bitXor', {
	
	    'number, number': function (x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function bitXor');
	      }
	
	      return x ^ y;
	    },
	
	    'BigNumber, BigNumber': bigBitXor,
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, bitXor);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, bitXor, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, bitXor, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, bitXor);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return bitXor(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return bitXor(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return bitXor(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, bitXor, false);
	          break;
	        default:
	          c = algorithm14(x, y, bitXor, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, bitXor, true);
	          break;
	        default:
	          c = algorithm14(y, x, bitXor, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, bitXor, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, bitXor, true).valueOf();
	    }
	  });
	
	  bitXor.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['bitXor'] + '${args[1]}\\right)'
	  };
	
	  return bitXor;
	}
	
	exports.name = 'bitXor';
	exports.factory = factory;


/***/ }),
/* 470 */
/***/ (function(module, exports, __webpack_require__) {

	var bitwise = __webpack_require__(464);
	var bitNot = __webpack_require__(465);
	
	/**
	 * Bitwise XOR for BigNumbers
	 *
	 * Special Cases:
	 *   N ^  n =  N
	 *   n ^  0 =  n
	 *   n ^  n =  0
	 *   n ^ -1 = ~n
	 *   I ^  n =  I
	 *   I ^ -n = -I
	 *   I ^ -I = -1
	 *  -I ^  n = -I
	 *  -I ^ -n =  I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` ^ `y`, fully precise
	 *
	 */
	module.exports = function bitXor(x, y) {
	  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
	    throw new Error('Integers expected in function bitXor');
	  }
	
	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN()) {
	    return new BigNumber(NaN);
	  }
	  if (x.isZero()) {
	    return y;
	  }
	  if (y.isZero()) {
	    return x;
	  }
	
	  if (x.eq(y)) {
	    return new BigNumber(0);
	  }
	
	  var negOne = new BigNumber(-1);
	  if (x.eq(negOne)) {
	    return bitNot(y);
	  }
	  if (y.eq(negOne)) {
	    return bitNot(x);
	  }
	
	  if (!x.isFinite() || !y.isFinite()) {
	    if (!x.isFinite() && !y.isFinite()) {
	      return negOne;
	    }
	    return new BigNumber(x.isNegative() == y.isNegative()
	        ?  Infinity
	        : -Infinity);
	  }
	  return bitwise(x, y, function (a, b) { return a ^ b });
	};


/***/ }),
/* 471 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	var bigLeftShift = __webpack_require__(472);
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  var matrix = load(__webpack_require__(104));
	  var equalScalar = load(__webpack_require__(100));
	  var zeros = load(__webpack_require__(400));
	
	  var algorithm01 = load(__webpack_require__(106));
	  var algorithm02 = load(__webpack_require__(440));
	  var algorithm08 = load(__webpack_require__(473));
	  var algorithm10 = load(__webpack_require__(108));
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Bitwise left logical shift of a value x by y number of bits, `x << y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.leftShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.leftShift(1, 2);               // returns number 4
	   *
	   *    math.leftShift([1, 2, 3], 4);       // returns Array [16, 32, 64]
	   *
	   * See also:
	   *
	   *    leftShift, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
	   * @param  {number | BigNumber} y Amount of shifts
	   * @return {number | BigNumber | Array | Matrix} `x` shifted left `y` times
	   */
	  var leftShift = typed('leftShift', {
	    
	    'number, number': function (x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function leftShift');
	      }
	
	      return x << y;
	    },
	
	    'BigNumber, BigNumber': bigLeftShift,
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm08(x, y, leftShift, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, leftShift, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm01(x, y, leftShift, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, leftShift);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return leftShift(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return leftShift(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return leftShift(x, matrix(y));
	    },
	
	    'Matrix, number | BigNumber': function (x, y) {
	      // check scalar
	      if (!equalScalar(y, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (x.storage()) {
	          case 'sparse':
	            c = algorithm11(x, y, leftShift, false);
	            break;
	          default:
	            c = algorithm14(x, y, leftShift, false);
	            break;
	        }
	        return c;
	      }
	      return x.clone();
	    },
	
	    'number | BigNumber, Matrix': function (x, y) {
	      // check scalar
	      if (!equalScalar(x, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (y.storage()) {
	          case 'sparse':
	            c = algorithm10(y, x, leftShift, true);
	            break;
	          default:
	            c = algorithm14(y, x, leftShift, true);
	            break;
	        }
	        return c;
	      }
	      return zeros(y.size(), y.storage());
	    },
	
	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return leftShift(matrix(x), y).valueOf();
	    },
	
	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return leftShift(x, matrix(y)).valueOf();
	    }
	  });
	
	  leftShift.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['leftShift'] + '${args[1]}\\right)'
	  };
	
	  return leftShift;
	}
	
	exports.name = 'leftShift';
	exports.factory = factory;


/***/ }),
/* 472 */
/***/ (function(module, exports) {

	
	/**
	 * Bitwise left shift
	 *
	 * Special Cases:
	 *  n << -n = N
	 *  n <<  N = N
	 *  N <<  n = N
	 *  n <<  0 = n
	 *  0 <<  n = 0
	 *  I <<  I = N
	 *  I <<  n = I
	 *  n <<  I = I
	 *
	 * @param {BigNumber} x
	 * @param {BigNumber} y
	 * @return {BigNumber} Result of `x` << `y`
	 *
	 */
	module.exports = function leftShift (x, y) {
	  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
	    throw new Error('Integers expected in function leftShift');
	  }
	
	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {
	    return new BigNumber(NaN);
	  }
	  if (x.isZero() || y.isZero()) {
	    return x;
	  }
	  if (!x.isFinite() && !y.isFinite()) {
	    return new BigNumber(NaN);
	  }
	
	  // Math.pow(2, y) is fully precise for y < 55, and fast
	  if (y.lt(55)) {
	    return x.times(Math.pow(2, y.toNumber()) + '');
	  }
	  return x.times(new BigNumber(2).pow(y));
	};


/***/ }),
/* 473 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DimensionError = __webpack_require__(93);
	
	function factory (type, config, load, typed) {
	
	  var equalScalar = load(__webpack_require__(100));
	
	  var SparseMatrix = type.SparseMatrix;
	
	  /**
	   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij). 
	   * Callback function invoked MAX(NNZA, NNZB) times
	   *
	   *
	   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0
	   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0
	   *          └  0            ; otherwise
	   *
	   *
	   * @param {Matrix}   a                 The SparseMatrix instance (A)
	   * @param {Matrix}   b                 The SparseMatrix instance (B)
	   * @param {Function} callback          The f(Aij,Bij) operation to invoke
	   *
	   * @return {Matrix}                    SparseMatrix (C)
	   *
	   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294
	   */
	  var algorithm08 = function (a, b, callback) {
	    // sparse matrix arrays
	    var avalues = a._values;
	    var aindex = a._index;
	    var aptr = a._ptr;
	    var asize = a._size;
	    var adt = a._datatype;
	    // sparse matrix arrays
	    var bvalues = b._values;
	    var bindex = b._index;
	    var bptr = b._ptr;
	    var bsize = b._size;
	    var bdt = b._datatype;
	
	    // validate dimensions
	    if (asize.length !== bsize.length)
	      throw new DimensionError(asize.length, bsize.length);
	
	    // check rows & columns
	    if (asize[0] !== bsize[0] || asize[1] !== bsize[1])
	      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');
	
	    // sparse matrix cannot be a Pattern matrix
	    if (!avalues || !bvalues)
	      throw new Error('Cannot perform operation on Pattern Sparse Matrices');
	
	    // rows & columns
	    var rows = asize[0];
	    var columns = asize[1];
	
	    // datatype
	    var dt;
	    // equal signature to use
	    var eq = equalScalar;
	    // zero value
	    var zero = 0;
	    // callback signature to use
	    var cf = callback;
	
	    // process data types
	    if (typeof adt === 'string' && adt === bdt) {
	      // datatype
	      dt = adt;
	      // find signature that matches (dt, dt)
	      eq = typed.find(equalScalar, [dt, dt]);
	      // convert 0 to the same datatype
	      zero = typed.convert(0, dt);
	      // callback
	      cf = typed.find(callback, [dt, dt]);
	    }
	
	    // result arrays
	    var cvalues = [];
	    var cindex = [];
	    var cptr = [];
	    // matrix
	    var c = new SparseMatrix({
	      values: cvalues,
	      index: cindex,
	      ptr: cptr,
	      size: [rows, columns],
	      datatype: dt
	    });
	
	    // workspace
	    var x = [];
	    // marks indicating we have a value in x for a given column
	    var w = [];
	
	    // vars
	    var k, k0, k1, i;
	
	    // loop columns
	    for (var j = 0; j < columns; j++) {
	      // update cptr
	      cptr[j] = cindex.length;
	      // columns mark
	      var mark = j + 1;
	      // loop values in a
	      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = aindex[k];
	        // mark workspace
	        w[i] = mark;
	        // set value
	        x[i] = avalues[k];
	        // add index
	        cindex.push(i);
	      }
	      // loop values in b
	      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {
	        // row
	        i = bindex[k];
	        // check value exists in workspace
	        if (w[i] === mark) {
	          // evaluate callback
	          x[i] = cf(x[i], bvalues[k]);
	        }
	      }
	      // initialize first index in j
	      k = cptr[j];
	      // loop index in j
	      while (k < cindex.length) {
	        // row
	        i = cindex[k];
	        // value @ i
	        var v = x[i];
	        // check for zero value
	        if (!eq(v, zero)) {
	          // push value
	          cvalues.push(v);
	          // increment pointer
	          k++;
	        }
	        else {
	          // remove value @ i, do not increment pointer
	          cindex.splice(k, 1);
	        }
	      }      
	    }
	    // update cptr
	    cptr[columns] = cindex.length;
	
	    // return sparse matrix
	    return c;
	  };
	
	  return algorithm08;
	}
	
	exports.name = 'algorithm08';
	exports.factory = factory;


/***/ }),
/* 474 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	var bigRightArithShift = __webpack_require__(475);
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	  
	  var matrix = load(__webpack_require__(104));
	  var equalScalar = load(__webpack_require__(100));
	  var zeros = load(__webpack_require__(400));
	
	  var algorithm01 = load(__webpack_require__(106));
	  var algorithm02 = load(__webpack_require__(440));
	  var algorithm08 = load(__webpack_require__(473));
	  var algorithm10 = load(__webpack_require__(108));
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.rightArithShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.rightArithShift(4, 2);               // returns number 1
	   *
	   *    math.rightArithShift([16, -32, 64], 4);   // returns Array [1, -2, 3]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift
	   *
	   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted
	   * @param  {number | BigNumber} y Amount of shifts
	   * @return {number | BigNumber | Array | Matrix} `x` sign-filled shifted right `y` times
	   */
	  var rightArithShift = typed('rightArithShift', {
	
	    'number, number': function (x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function rightArithShift');
	      }
	
	      return x >> y;
	    },
	
	    'BigNumber, BigNumber': bigRightArithShift,
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm08(x, y, rightArithShift, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, rightArithShift, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm01(x, y, rightArithShift, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, rightArithShift);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return rightArithShift(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return rightArithShift(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return rightArithShift(x, matrix(y));
	    },
	
	    'Matrix, number | BigNumber': function (x, y) {
	      // check scalar
	      if (!equalScalar(y, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (x.storage()) {
	          case 'sparse':
	            c = algorithm11(x, y, rightArithShift, false);
	            break;
	          default:
	            c = algorithm14(x, y, rightArithShift, false);
	            break;
	        }
	        return c;
	      }
	      return x.clone();
	    },
	
	    'number | BigNumber, Matrix': function (x, y) {
	      // check scalar
	      if (!equalScalar(x, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (y.storage()) {
	          case 'sparse':
	            c = algorithm10(y, x, rightArithShift, true);
	            break;
	          default:
	            c = algorithm14(y, x, rightArithShift, true);
	            break;
	        }
	        return c;
	      }
	      return zeros(y.size(), y.storage());
	    },
	
	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return rightArithShift(matrix(x), y).valueOf();
	    },
	
	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return rightArithShift(x, matrix(y)).valueOf();
	    }
	  });
	
	  rightArithShift.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['rightArithShift'] + '${args[1]}\\right)'
	  };
	
	  return rightArithShift;
	}
	
	exports.name = 'rightArithShift';
	exports.factory = factory;


/***/ }),
/* 475 */
/***/ (function(module, exports) {

	/*
	 * Special Cases:
	 *   n >> -n =  N
	 *   n >>  N =  N
	 *   N >>  n =  N
	 *   I >>  I =  N
	 *   n >>  0 =  n
	 *   I >>  n =  I
	 *  -I >>  n = -I
	 *  -I >>  I = -I
	 *   n >>  I =  I
	 *  -n >>  I = -1
	 *   0 >>  n =  0
	 *
	 * @param {BigNumber} value
	 * @param {BigNumber} value
	 * @return {BigNumber} Result of `x` >> `y`
	 *
	 */
	module.exports = function rightArithShift (x, y) {
	  if ((x.isFinite() && !x.isInteger()) || (y.isFinite() && !y.isInteger())) {
	    throw new Error('Integers expected in function rightArithShift');
	  }
	
	  var BigNumber = x.constructor;
	  if (x.isNaN() || y.isNaN() || (y.isNegative() && !y.isZero())) {
	    return new BigNumber(NaN);
	  }
	  if (x.isZero() || y.isZero()) {
	    return x;
	  }
	  if (!y.isFinite()) {
	    if (x.isNegative()) {
	      return new BigNumber(-1);
	    }
	    if (!x.isFinite()) {
	      return new BigNumber(NaN);
	    }
	    return new BigNumber(0);
	  }
	
	  // Math.pow(2, y) is fully precise for y < 55, and fast
	  if (y.lt(55)) {
	    return x.div(Math.pow(2, y.toNumber()) + '').floor();
	  }
	  return x.div(new BigNumber(2).pow(y)).floor();
	};


/***/ }),
/* 476 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  var matrix = load(__webpack_require__(104));
	  var equalScalar = load(__webpack_require__(100));
	  var zeros = load(__webpack_require__(400));
	
	  var algorithm01 = load(__webpack_require__(106));
	  var algorithm02 = load(__webpack_require__(440));
	  var algorithm08 = load(__webpack_require__(473));
	  var algorithm10 = load(__webpack_require__(108));
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	  
	  /**
	   * Bitwise right logical shift of value x by y number of bits, `x >>> y`.
	   * For matrices, the function is evaluated element wise.
	   * For units, the function is evaluated on the best prefix base.
	   *
	   * Syntax:
	   *
	   *    math.rightLogShift(x, y)
	   *
	   * Examples:
	   *
	   *    math.rightLogShift(4, 2);               // returns number 1
	   *
	   *    math.rightLogShift([16, -32, 64], 4);   // returns Array [1, 2, 3]
	   *
	   * See also:
	   *
	   *    bitAnd, bitNot, bitOr, bitXor, leftShift, rightLogShift
	   *
	   * @param  {number | Array | Matrix} x Value to be shifted
	   * @param  {number} y Amount of shifts
	   * @return {number | Array | Matrix} `x` zero-filled shifted right `y` times
	   */
	
	  var rightLogShift = typed('rightLogShift', {
	
	    'number, number': function (x, y) {
	      if (!isInteger(x) || !isInteger(y)) {
	        throw new Error('Integers expected in function rightLogShift');
	      }
	
	      return x >>> y;
	    },
	
	    // 'BigNumber, BigNumber': ..., // TODO: implement BigNumber support for rightLogShift
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm08(x, y, rightLogShift, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, rightLogShift, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm01(x, y, rightLogShift, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, rightLogShift);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return rightLogShift(x, matrix(y));
	    },
	
	    'Matrix, number | BigNumber': function (x, y) {
	      // check scalar
	      if (!equalScalar(y, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (x.storage()) {
	          case 'sparse':
	            c = algorithm11(x, y, rightLogShift, false);
	            break;
	          default:
	            c = algorithm14(x, y, rightLogShift, false);
	            break;
	        }
	        return c;
	      }
	      return x.clone();
	    },
	
	    'number | BigNumber, Matrix': function (x, y) {
	      // check scalar
	      if (!equalScalar(x, 0)) {
	        // result
	        var c;
	        // check storage format
	        switch (y.storage()) {
	          case 'sparse':
	            c = algorithm10(y, x, rightLogShift, true);
	            break;
	          default:
	            c = algorithm14(y, x, rightLogShift, true);
	            break;
	        }
	        return c;
	      }
	      return zeros(y.size(), y.storage());
	    },
	
	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return rightLogShift(matrix(x), y).valueOf();
	    },
	
	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return rightLogShift(x, matrix(y)).valueOf();
	    }
	  });
	
	  rightLogShift.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['rightLogShift'] + '${args[1]}\\right)'
	  };
	
	  return rightLogShift;
	}
	
	exports.name = 'rightLogShift';
	exports.factory = factory;


/***/ }),
/* 477 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(478),
	  __webpack_require__(484),
	  __webpack_require__(479),
	  __webpack_require__(485)
	];


/***/ }),
/* 478 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(103));
	  var stirlingS2 = load(__webpack_require__(479));
	  var isNegative = load(__webpack_require__(436));
	  var isInteger = load(__webpack_require__(483));
	
	  /**
	   * The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S.
	   * bellNumbers only takes integer arguments.
	   * The following condition must be enforced: n >= 0
	   *
	   * Syntax:
	   *
	   *   math.bellNumbers(n)
	   *
	   * Examples:
	   *
	   *    math.bellNumbers(3); // returns 5;
	   *    math.bellNumbers(8); // returns 4140;
	   *
	   * See also:
	   *
	   *    stirlingS2
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @return {Number | BigNumber}     B(n)
	   */
	  var bellNumbers = typed('bellNumbers', {
	    'number | BigNumber': function (n) {
	
	      if (!isInteger(n) || isNegative(n)) {
	        throw new TypeError('Non-negative integer value expected in function bellNumbers');
	      }
	
	      // Sum (k=0, n) S(n,k).
	      var result = 0;
	      for(var i = 0; i <= n; i++) {
	        result = add(result, stirlingS2(n, i));
	      }
	
	      return result;
	    }
	  });
	
	  bellNumbers.toTex = {1: '\\mathrm{B}_{${args[0]}}'};
	
	  return bellNumbers;
	}
	
	exports.name = 'bellNumbers';
	exports.factory = factory;


/***/ }),
/* 479 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(103));
	  var subtract = load(__webpack_require__(129));
	  var multiply = load(__webpack_require__(136));
	  var divide = load(__webpack_require__(384));
	  var pow = load(__webpack_require__(134));
	  var factorial = load(__webpack_require__(480));
	  var combinations = load(__webpack_require__(482));
	  var isNegative = load(__webpack_require__(436));
	  var isInteger = load(__webpack_require__(483));
	  var larger = load(__webpack_require__(116));
	
	  /**
	   * The Stirling numbers of the second kind, counts the number of ways to partition
	   * a set of n labelled objects into k nonempty unlabelled subsets.
	   * stirlingS2 only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   *  If n = k or k = 1, then s(n,k) = 1
	   *
	   * Syntax:
	   *
	   *   math.stirlingS2(n, k)
	   *
	   * Examples:
	   *
	   *    math.stirlingS2(5, 3); //returns 25
	   *
	   * See also:
	   *
	   *    Bell numbers
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @param {Number | BigNumber} k    Number of objects in the subset
	   * @return {Number | BigNumber}     S(n,k)
	   */
	  var stirlingS2 = typed('stirlingS2', {
	    'number | BigNumber, number | BigNumber': function (n, k) {
	      if (!isInteger(n) || isNegative(n) || !isInteger(k) || isNegative(k)) {
	        throw new TypeError('Non-negative integer value expected in function stirlingS2');
	      }
	      else if (larger(k, n)) {
	        throw new TypeError('k must be less than or equal to n in function stirlingS2');
	      }
	
	      // 1/k! Sum(i=0 -> k) [(-1)^(k-i)*C(k,j)* i^n]
	      var kFactorial = factorial(k);
	      var result = 0;
	      for(var i = 0; i <= k; i++) {
	        var negativeOne = pow(-1, subtract(k,i));
	        var kChooseI = combinations(k,i);
	        var iPower = pow(i,n);
	
	        result = add(result, multiply(multiply(kChooseI, iPower), negativeOne));
	      }
	
	      return divide(result, kFactorial);
	    }
	  });
	
	  stirlingS2.toTex = {2: '\\mathrm{S}\\left(${args}\\right)'};
	
	  return stirlingS2;
	}
	
	exports.name = 'stirlingS2';
	exports.factory = factory;


/***/ }),
/* 480 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  var gamma = load(__webpack_require__(481));
	  var latex = __webpack_require__(83);
	
	  /**
	   * Compute the factorial of a value
	   *
	   * Factorial only supports an integer value as argument.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.factorial(n)
	   *
	   * Examples:
	   *
	   *    math.factorial(5);    // returns 120
	   *    math.factorial(3);    // returns 6
	   *
	   * See also:
	   *
	   *    combinations, gamma, permutations
	   *
	   * @param {number | BigNumber | Array | Matrix} n   An integer number
	   * @return {number | BigNumber | Array | Matrix}    The factorial of `n`
	   */
	  var factorial = typed('factorial', {
	    'number': function (n) {
	      if (n < 0) {
	        throw new Error('Value must be non-negative');
	      }
	
	      return gamma(n + 1);
	    },
	
	    'BigNumber': function (n) {
	      if (n.isNegative()) {
	        throw new Error('Value must be non-negative');
	      }
	
	      return gamma(n.plus(1));
	    },
	
	    'Array | Matrix': function (n) {
	      return deepMap(n, factorial);
	    }
	  });
	
	  factorial.toTex = {
	    1: '\\left(${args[0]}\\right)' + latex.operators['factorial']
	  };
	
	  return factorial;
	}
	
	exports.name = 'factorial';
	exports.factory = factory;


/***/ }),
/* 481 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	var isInteger = __webpack_require__(58).isInteger;
	
	function factory (type, config, load, typed) {
	  var multiply = load(__webpack_require__(136));
	  var pow = load(__webpack_require__(134));
	
	  /**
	   * Compute the gamma function of a value using Lanczos approximation for
	   * small values, and an extended Stirling approximation for large values.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.gamma(n)
	   *
	   * Examples:
	   *
	   *    math.gamma(5);       // returns 24
	   *    math.gamma(-0.5);    // returns -3.5449077018110335
	   *    math.gamma(math.i);  // returns -0.15494982830180973 - 0.49801566811835596i
	   *
	   * See also:
	   *
	   *    combinations, factorial, permutations
	   *
	   * @param {number | Array | Matrix} n   A real or complex number
	   * @return {number | Array | Matrix}    The gamma of `n`
	   */
	  var gamma = typed('gamma', {
	    'number': function (n) {
	      var t, x;
	
	      if (isInteger(n)) {
	        if (n <= 0) {
	          return isFinite(n) ? Infinity : NaN;
	        }
	
	        if (n > 171) {
	          return Infinity;                  // Will overflow
	        }
	
	        var value = n - 2;
	        var res = n - 1;
	        while (value > 1) {
	          res *= value;
	          value--;
	        }
	
	        if (res == 0) {
	          res = 1;                          // 0! is per definition 1
	        }
	
	        return res;
	      }
	
	      if (n < 0.5) {
	        return Math.PI / (Math.sin(Math.PI * n) * gamma(1-n));
	      }
	
	      if (n >= 171.35) {
	        return Infinity;                    // will overflow
	      }
	
	      if (n > 85.0) {                       // Extended Stirling Approx
	        var twoN = n*n;
	        var threeN = twoN*n;
	        var fourN = threeN*n;
	        var fiveN = fourN*n;
	        return Math.sqrt(2*Math.PI/n) * Math.pow((n/Math.E), n) *
	            (1 + 1/(12*n) + 1/(288*twoN) - 139/(51840*threeN) -
	            571/(2488320*fourN) + 163879/(209018880*fiveN) +
	            5246819/(75246796800*fiveN*n));
	      }
	
	      --n;
	      x = p[0];
	      for (var i = 1; i < p.length; ++i) {
	        x += p[i] / (n+i);
	      }
	
	      t = n + g + 0.5;
	      return Math.sqrt(2*Math.PI) * Math.pow(t, n+0.5) * Math.exp(-t) * x;
	    },
	
	    'Complex': function (n) {
	      var t, x;
	
	      if (n.im == 0) {
	        return gamma(n.re);
	      }
	
	      n = new type.Complex(n.re - 1, n.im);
	      x = new type.Complex(p[0], 0);
	      for (var i = 1; i < p.length; ++i) {
	        var real = n.re + i;                // x += p[i]/(n+i)
	        var den = real*real + n.im*n.im;
	        if (den != 0) {
	          x.re += p[i] * real / den;
	          x.im += -(p[i] * n.im) / den;
	        } else {
	          x.re = p[i] < 0
	              ? -Infinity
	              :  Infinity;
	        }
	      }
	
	      t = new type.Complex(n.re + g + 0.5, n.im);
	      var twoPiSqrt = Math.sqrt(2*Math.PI);
	
	      n.re += 0.5;
	      var result = pow(t, n);
	      if (result.im == 0) {                 // sqrt(2*PI)*result
	        result.re *= twoPiSqrt;
	      } else if (result.re == 0) {
	        result.im *= twoPiSqrt;
	      } else {
	        result.re *= twoPiSqrt;
	        result.im *= twoPiSqrt;
	      }
	
	      var r = Math.exp(-t.re);              // exp(-t)
	      t.re = r * Math.cos(-t.im);
	      t.im = r * Math.sin(-t.im);
	
	      return multiply(multiply(result, t), x);
	    },
	
	    'BigNumber': function (n) {
	      if (n.isInteger()) {
	        return (n.isNegative() || n.isZero())
	            ? new type.BigNumber(Infinity)
	            : bigFactorial(n.minus(1));
	      }
	
	      if (!n.isFinite()) {
	        return new type.BigNumber(n.isNegative() ? NaN : Infinity);
	      }
	
	      throw new Error('Integer BigNumber expected');
	    },
	
	    'Array | Matrix': function (n) {
	      return deepMap(n, gamma);
	    }
	  });
	
	  /**
	   * Calculate factorial for a BigNumber
	   * @param {BigNumber} n
	   * @returns {BigNumber} Returns the factorial of n
	   */
	  function bigFactorial(n) {
	    if (n.isZero()) {
	      return new type.BigNumber(1); // 0! is per definition 1
	    }
	
	    var precision = config.precision + (Math.log(n.toNumber()) | 0);
	    var Big = type.BigNumber.clone({precision: precision});
	
	    var res = new Big(n);
	    var value = n.toNumber() - 1; // number
	    while (value > 1) {
	      res = res.times(value);
	      value--;
	    }
	
	    return new type.BigNumber(res.toPrecision(type.BigNumber.precision));
	  }
	
	  gamma.toTex = {1: '\\Gamma\\left(${args[0]}\\right)'};
	
	  return gamma;
	}
	
	// TODO: comment on the variables g and p
	
	var g = 4.7421875;
	
	var p = [
	  0.99999999999999709182,
	  57.156235665862923517,
	  -59.597960355475491248,
	  14.136097974741747174,
	  -0.49191381609762019978,
	  0.33994649984811888699e-4,
	  0.46523628927048575665e-4,
	  -0.98374475304879564677e-4,
	  0.15808870322491248884e-3,
	  -0.21026444172410488319e-3,
	  0.21743961811521264320e-3,
	  -0.16431810653676389022e-3,
	  0.84418223983852743293e-4,
	  -0.26190838401581408670e-4,
	  0.36899182659531622704e-5
	];
	
	exports.name = 'gamma';
	exports.factory = factory;


/***/ }),
/* 482 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	
	function factory (type, config, load, typed) {
	  /**
	   * Compute the number of ways of picking `k` unordered outcomes from `n`
	   * possibilities.
	   *
	   * Combinations only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *     math.combinations(n, k)
	   *
	   * Examples:
	   *
	   *    math.combinations(7, 5); // returns 21
	   *
	   * See also:
	   *
	   *    permutations, factorial
	   *
	   * @param {number | BigNumber} n    Total number of objects in the set
	   * @param {number | BigNumber} k    Number of objects in the subset
	   * @return {number | BigNumber}     Number of possible combinations.
	   */
	  var combinations = typed('combinations', {
	    'number, number': function (n, k) {
	      var max, result, i;
	
	      if (!isInteger(n) || n < 0) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }
	      if (!isInteger(k) || k < 0) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }
	      if (k > n) {
	        throw new TypeError('k must be less than or equal to n');
	      }
	
	      max = Math.max(k, n - k);
	      result = 1;
	      for (i = 1; i <= n - max; i++) {
	        result = result * (max + i) / i;
	      }
	
	      return result;
	    },
	
	    'BigNumber, BigNumber': function (n, k) {
	      var max, result, i, ii;
	      var one = new type.BigNumber(1);
	
	      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
	        throw new TypeError('Positive integer value expected in function combinations');
	      }
	      if (k.gt(n)) {
	        throw new TypeError('k must be less than n in function combinations');
	      }
	
	      max = n.minus(k);
	      if (k.lt(max)) max = k;
	      result = one;
	      for (i = one, ii = n.minus(max); i.lte(ii); i = i.plus(1)) {
	        result = result.times(max.plus(i)).dividedBy(i);
	      }
	
	      return result;
	    }
	
	    // TODO: implement support for collection in combinations
	  });
	
	  combinations.toTex = {2: '\\binom{${args[0]}}{${args[1]}}'};
	
	  return combinations;
	}
	
	/**
	 * Test whether BigNumber n is a positive integer
	 * @param {BigNumber} n
	 * @returns {boolean} isPositiveInteger
	 */
	function isPositiveInteger(n) {
	  return n.isInteger() && n.gte(0);
	}
	
	exports.name = 'combinations';
	exports.factory = factory;


/***/ }),
/* 483 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	var number = __webpack_require__(58);
	
	function factory (type, config, load, typed) {
	  /**
	   * Test whether a value is an integer number.
	   * The function supports `number`, `BigNumber`, and `Fraction`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isInteger(x)
	   *
	   * Examples:
	   *
	   *    math.isInteger(2);                     // returns true
	   *    math.isInteger(0);                     // returns true
	   *    math.isInteger(0.5);                   // returns false
	   *    math.isInteger(math.bignumber(500));   // returns true
	   *    math.isInteger(math.fraction(4));      // returns true
	   *    math.isInteger('3');                   // returns true
	   *    math.isInteger([3, 0.5, -2]);          // returns [true, false, true]
	   *    math.isInteger(math.complex('2-4i');   // throws an error
	   *
	   * See also:
	   *
	   *    isNumeric, isPositive, isNegative, isZero
	   *
	   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested
	   * @return {boolean}  Returns true when `x` contains a numeric, integer value.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isInteger = typed('isInteger', {
	    'number': number.isInteger, // TODO: what to do with isInteger(add(0.1, 0.2))  ?
	
	    'BigNumber': function (x) {
	      return x.isInt();
	    },
	
	    'Fraction': function (x) {
	      return x.d === 1 && isFinite(x.n);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, isInteger);
	    }
	  });
	
	  return isInteger;
	}
	
	exports.name = 'isInteger';
	exports.factory = factory;


/***/ }),
/* 484 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var combinations = load(__webpack_require__(482));
	  var add = load(__webpack_require__(105));
	  var isPositive = load(__webpack_require__(403));
	  var isInteger = load(__webpack_require__(483));
	  var larger = load(__webpack_require__(116));
	
	  /**
	   * The composition counts of n into k parts.
	   *
	   * composition only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *   math.composition(n, k)
	   *
	   * Examples:
	   *
	   *    math.composition(5, 3); // returns 6
	   *
	   * See also:
	   *
	   *    combinations
	   *
	   * @param {Number | BigNumber} n    Total number of objects in the set
	   * @param {Number | BigNumber} k    Number of objects in the subset
	   * @return {Number | BigNumber}     Returns the composition counts of n into k parts.
	   */
	  var composition =  typed('composition', {
	    'number | BigNumber, number | BigNumber': function (n, k) {
	      if (!isInteger(n) || !isPositive(n) || !isInteger(k) || !isPositive(k)) {
	        throw new TypeError('Positive integer value expected in function composition');
	      }
	      else if (larger(k, n)) {
	        throw new TypeError('k must be less than or equal to n in function composition');
	      }
	
	      return combinations(add(n, -1), add(k, -1));
	    }
	  });
	
	  composition.toTex = undefined; // use default template
	
	  return composition;
	}
	
	exports.name = 'composition';
	exports.factory = factory;


/***/ }),
/* 485 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(103));
	  var divide = load(__webpack_require__(384));
	  var multiply = load(__webpack_require__(136));
	  var combinations = load(__webpack_require__(482));
	  var isNegative = load(__webpack_require__(436));
	  var isInteger = load(__webpack_require__(483));
	
	
	  /**
	   * The Catalan Numbers enumerate combinatorial structures of many different types.
	   * catalan only takes integer arguments.
	   * The following condition must be enforced: n >= 0
	   *
	   * Syntax:
	   *
	   *   math.catalan(n)
	   *
	   * Examples:
	   *
	   *    math.catalan(3); // returns 5;
	   *    math.catalan(8); // returns 1430;
	   *
	   * See also:
	   *
	   *    bellNumbers
	   *
	   * @param {Number | BigNumber} n    nth Catalan number
	   * @return {Number | BigNumber}     Cn(n)
	   */
	  var catalan = typed('catalan', {
	    'number | BigNumber': function (n) {
	
	      if (!isInteger(n) || isNegative(n)) {
	        throw new TypeError('Non-negative integer value expected in function catalan');
	      }
	       
	      return divide(combinations(multiply(n,2), n), add(n,1));
	
	    }
	  });
	
	  catalan.toTex = {1: '\\mathrm{C}_{${args[0]}}'};
	
	  return catalan;
	}
	
	exports.name = 'catalan';
	exports.factory = factory;


/***/ }),
/* 486 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(487),
	  __webpack_require__(407),
	  __webpack_require__(488),
	  __webpack_require__(489)
	];


/***/ }),
/* 487 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Compute the argument of a complex value.
	   * For a complex number `a + bi`, the argument is computed as `atan2(b, a)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.arg(x)
	   *
	   * Examples:
	   *
	   *    var a = math.complex(2, 2);
	   *    math.arg(a) / math.pi;          // returns number 0.25
	   *
	   *    var b = math.complex('2 + 3i');
	   *    math.arg(b);                    // returns number 0.982793723247329
	   *    math.atan2(3, 2);               // returns number 0.982793723247329
	   *
	   * See also:
	   *
	   *    re, im, conj, abs
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The argument of x
	   */
	  var arg = typed('arg', {
	    'number': function (x) {
	      return Math.atan2(0, x);
	    },
	
	    'BigNumber': function (x) {
	      return type.BigNumber.atan2(0, x);
	    },
	
	    'Complex': function (x) {
	      return x.arg();
	    },
	
	    // TODO: implement BigNumber support for function arg
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, arg);
	    }
	  });
	
	  arg.toTex = {1: '\\arg\\left(${args[0]}\\right)'};
	
	  return arg;
	}
	
	exports.name = 'arg';
	exports.factory = factory;


/***/ }),
/* 488 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Get the imaginary part of a complex number.
	   * For a complex number `a + bi`, the function returns `b`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.im(x)
	   *
	   * Examples:
	   *
	   *    var a = math.complex(2, 3);
	   *    math.re(a);                     // returns number 2
	   *    math.im(a);                     // returns number 3
	   *
	   *    math.re(math.complex('-5.2i')); // returns number -5.2
	   *    math.re(math.complex(2.4));     // returns number 0
	   *
	   * See also:
	   *
	   *    re, conj, abs, arg
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The imaginary part of x
	   */
	  var im = typed('im', {
	    'number': function (x) {
	      return 0;
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(0);
	    },
	
	    'Complex': function (x) {
	      return x.im;
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, im);
	    }
	  });
	
	  im.toTex = {1: '\\Im\\left\\lbrace${args[0]}\\right\\rbrace'};
	
	  return im;
	}
	
	exports.name = 'im';
	exports.factory = factory;


/***/ }),
/* 489 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Get the real part of a complex number.
	   * For a complex number `a + bi`, the function returns `a`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.re(x)
	   *
	   * Examples:
	   *
	   *    var a = math.complex(2, 3);
	   *    math.re(a);                     // returns number 2
	   *    math.im(a);                     // returns number 3
	   *
	   *    math.re(math.complex('-5.2i')); // returns number 0
	   *    math.re(math.complex(2.4));     // returns number 2.4
	   *
	   * See also:
	   *
	   *    im, conj, abs, arg
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x
	   *            A complex number or array with complex numbers
	   * @return {number | BigNumber | Array | Matrix} The real part of x
	   */
	  var re = typed('re', {
	    'number': function (x) {
	      return x;
	    },
	
	    'BigNumber': function (x) {
	      return x;
	    },
	
	    'Complex': function (x) {
	      return x.re;
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, re);
	    }
	  });
	
	  re.toTex = {1: '\\Re\\left\\lbrace${args[0]}\\right\\rbrace'};
	
	  return re;
	}
	
	exports.name = 're';
	exports.factory = factory;


/***/ }),
/* 490 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(491),
	  __webpack_require__(492)
	];


/***/ }),
/* 491 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var abs = load(__webpack_require__(138));
	  var add = load(__webpack_require__(103));
	  var matrix = load(__webpack_require__(104));
	  var multiply = load(__webpack_require__(136));
	  var subtract = load(__webpack_require__(129));
	
	  /**
	   * Calculates the point of intersection of two lines in two or three dimensions
	   * and of a line and a plane in three dimensions. The inputs are in the form of
	   * arrays or 1 dimensional matrices. The line intersection functions return null
	   * if the lines do not meet.
	   *
	   * Note: Fill the plane coefficients as `x + y + z = c` and not as `x + y + z + c = 0`.
	   *
	   * Syntax:
	   *
	   *    math.intersect(endPoint1Line1, endPoint2Line1, endPoint1Line2, endPoint2Line2)
	   *    math.intersect(endPoint1, endPoint2, planeCoefficients)
	   *
	   * Examples:
	   *
	   *    math.intersect([0, 0], [10, 10], [10, 0], [0, 10]);              // Returns [5, 5]
	   *    math.intersect([0, 0, 0], [10, 10, 0], [10, 0, 0], [0, 10, 0]);  // Returns [5, 5, 0]
	   *    math.intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6]);            // Returns [7, -4, 3]
	   *
	   * @param  {Array | Matrix} w   Co-ordinates of first end-point of first line
	   * @param  {Array | Matrix} x   Co-ordinates of second end-point of first line
	   * @param  {Array | Matrix} y   Co-ordinates of first end-point of second line
	   *                              OR Co-efficients of the plane's equation
	   * @param  {Array | Matrix} z   Co-ordinates of second end-point of second line
	   *                              OR null if the calculation is for line and plane
	   * @return {Array}              Returns the point of intersection of lines/lines-planes
	   */
	  var intersect = typed('intersect', {
	    'Array, Array, Array': function (x, y, plane) {
	      if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
	      if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }
	      if (!_4d(plane)) { throw new TypeError('Array with 4 numbers expected as third argument'); }
	
	      return _intersectLinePlane(x[0], x[1], x[2], y[0], y[1], y[2], plane[0], plane[1], plane[2], plane[3]);
	    },
	
	    'Array, Array, Array, Array': function (w, x, y, z) {
	      if (w.length === 2) {
	        if (!_2d(w)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
	        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for second argument'); }
	        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for third argument'); }
	        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for fourth argument'); }
	
	        return _intersect2d(w, x, y, z);
	      }
	      else if (w.length === 3) {
	        if (!_3d(w)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
	        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for second argument'); }
	        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for third argument'); }
	        if (!_3d(z)) { throw new TypeError('Array with 3 numbers expected for fourth argument'); }
	
	        return _intersect3d(w[0], w[1], w[2], x[0], x[1], x[2], y[0], y[1], y[2], z[0], z[1], z[2]);
	      }
	      else {
	        throw new TypeError('Arrays with two or thee dimensional points expected');
	      }
	    },
	
	    'Matrix, Matrix, Matrix': function (x, y, plane) {
	      return matrix(intersect(x.valueOf(), y.valueOf(), plane.valueOf()));
	    },
	
	    'Matrix, Matrix, Matrix, Matrix': function (w, x, y, z) {
	      // TODO: output matrix type should match input matrix type
	      return matrix(intersect(w.valueOf(), x.valueOf(), y.valueOf(), z.valueOf()));
	    }
	  });
	
	  function _2d(x) {
	    return x.length === 2 && typeof x[0] === 'number' && typeof x[1] === 'number';
	  }
	
	  function _3d(x) {
	    return x.length === 3 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number';
	  }
	
	  function _4d(x) {
	    return x.length === 4 && typeof x[0] === 'number' && typeof x[1] === 'number' && typeof x[2] === 'number' && typeof x[3] === 'number';
	  }
	
	  function _intersect2d(p1a, p1b, p2a, p2b){
	    var o1 = p1a;
	    var o2 = p2a;
	    var d1 = subtract(o1, p1b);
	    var d2 = subtract(o2, p2b);
	    var det = d1[0]*d2[1] - d2[0]*d1[1];
	    if (abs(det) < config.epsilon) {
	      return null;
	    }
	    var t = (d2[0]*o1[1] - d2[1]*o1[0] - d2[0]*o2[1] + d2[1]*o2[0]) / det;
	    return add(multiply(d1, t), o1); 
	  }
	
	  function _intersect3d(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4){
	    var d1343 = (x1 - x3)*(x4 - x3) + (y1 - y3)*(y4 - y3) + (z1 - z3)*(z4 - z3);
	    var d4321 = (x4 - x3)*(x2 - x1) + (y4 - y3)*(y2 - y1) + (z4 - z3)*(z2 - z1);
	    var d1321 = (x1 - x3)*(x2 - x1) + (y1 - y3)*(y2 - y1) + (z1 - z3)*(z2 - z1);
	    var d4343 = (x4 - x3)*(x4 - x3) + (y4 - y3)*(y4 - y3) + (z4 - z3)*(z4 - z3);
	    var d2121 = (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1) + (z2 - z1)*(z2 - z1);
	    var ta = ( d1343*d4321 - d1321*d4343 ) / ( d2121*d4343 - d4321*d4321 );
	    var tb = ( d1343 + ta * d4321 ) / (d4343);
	
	    var pax = x1 + ta * (x2 - x1);
	    var pay = y1 + ta * (y2 - y1);
	    var paz = z1 + ta * (z2 - z1);
	    var pbx = x3 + tb * (x4 - x3);
	    var pby = y3 + tb * (y4 - y3);
	    var pbz = z3 + tb * (z4 - z3);
	    if (pax === pbx && pay === pby && paz === pbz){
	      return [pax, pay, paz];
	    }
	    else{
	      return null;
	    }
	  }
	
	  function _intersectLinePlane(x1, y1, z1, x2, y2, z2, x, y, z, c){
	    var t = (c - x1*x - y1*y - z1*z)/(x2*x + y2*y + z2*z - x1 - y1 - z1);
	    var px = x1 + t * (x2 - x1);
	    var py = y1 + t * (y2 - y1);
	    var pz = z1 + t * (z2 - z1);
	    return [px, py, pz];
	    // TODO: Add cases when line is parallel to the plane:
	    //       (a) no intersection,
	    //       (b) line contained in plane
	  }
	
	  return intersect;
	}
	
	exports.name = 'intersect';
	exports.factory = factory;


/***/ }),
/* 492 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	
	  /**
	    * Calculates:
	    *    The eucledian distance between two points in 2 and 3 dimensional spaces.
	    *    Distance between point and a line in 2 and 3 dimensional spaces.
	    *    Pairwise distance between a set of 2D or 3D points
	    * NOTE:
	    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c
	    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)
	    *
	    * Syntax:
	    *    math.distance([x1, y1], [x2, y2])
	    *-   math.distance({pointOneX: 4, pointOneY: 5}, {pointTwoX: 2, pointTwoY: 7})
	    *    math.distance([x1, y1, z1], [x2, y2, z2])
	    *    math.distance({pointOneX: 4, pointOneY: 5, pointOneZ: 8}, {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})
	    *    math.distance([[A], [B], [C]...])
	    *    math.distance([x1, y1], [LinePtX1, LinePtY1], [LinePtX2, LinePtY2])
	    *    math.distance({pointX: 1, pointY: 4}, {lineOnePtX: 6, lineOnePtY: 3}, {lineTwoPtX: 2, lineTwoPtY: 8})
	    *    math.distance([x1, y1, z1], [LinePtX1, LinePtY1, LinePtZ1], [LinePtX2, LinePtY2, LinePtZ2])
	    *    math.distance({pointX: 1, pointY: 4, pointZ: 7}, {lineOnePtX: 6, lineOnePtY: 3, lineOnePtZ: 4}, {lineTwoPtX: 2, lineTwoPtY: 8, lineTwoPtZ: 5})
	    *    math.distance([x1, y1], [xCoeffLine, yCoeffLine, constant])
	    *    math.distance({pointX: 10, pointY: 10}, {xCoeffLine: 8, yCoeffLine: 1, constant: 3})
	    *    math.distance([x1, y1, z1], [x0, y0, z0, a-tCoeff, b-tCoeff, c-tCoeff]) point and parametric equation of 3D line
	    *    math.distance([x, y, z], [x0, y0, z0, a, b, c])
	    *    math.distance({pointX: 2, pointY: 5, pointZ: 9}, {x0: 4, y0: 6, z0: 3, a: 4, b: 2, c: 0})
	    *
	    * Examples:
	    *    math.distance([0,0], [4,4])                     // Returns 5.6569
	    *    math.distance(
	    *     {pointOneX: 0, pointOneY: 0},
	    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951
	    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.74166
	    *    math.distance(
	    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},
	    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3
	    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]
	    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]
	    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387
	    *    math.distance([10, 10], [2, 3], [-8, 0])        // Returns 8.759953130362847
	    *    math.distance(
	    *     {pointX: 1, pointY: 4},
	    *     {lineOnePtX: 6, lineOnePtY: 3},
	    *     {lineTwoPtX: 2, lineTwoPtY: 8})                // Returns 2.720549372624744
	    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857
	    *    math.distance(
	    *     {pointX: 2, pointY: 3, pointZ: 1},
	    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1}        // Returns 2.3204774044612857
	    *
	    * @param {Array | Matrix | Object} x    Co-ordinates of first point
	    * @param {Array | Matrix | Object} y    Co-ordinates of second point
	    * @return {Number | BigNumber} Returns the distance from two/three points
	  */
	
	  var distance = typed('distance', {
	    'Array, Array, Array': function(x, y, z){
	      // Point to Line 2D; (x=Point, y=LinePoint1, z=LinePoint2)
	      if (x.length == 2 && y.length == 2 && z.length == 2){
	        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
	        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }
	        if (!_2d(z)) { throw new TypeError('Array with 2 numbers expected for third argument'); }
	        var m = (z[1]-z[0])/(y[1]-y[0]);
	        var xCoeff = m*m*y[0];
	        var yCoeff = -1*(m*y[0]);
	        var constant = x[1];
	
	        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);
	      }
	      else{
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Object, Object, Object': function(x, y, z){
	      if (Object.keys(x).length == 2 && Object.keys(y).length == 2 && Object.keys(z).length == 2){
	        if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }
	        if (!_2d(y)) { throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers'); }
	        if (!_2d(z)) { throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers'); }
	        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('lineOnePtX') &&
	          y.hasOwnProperty('lineOnePtY') && z.hasOwnProperty('lineTwoPtX') && z.hasOwnProperty('lineTwoPtY')){
	          var m = (z.lineTwoPtY-z.lineTwoPtX)/(y.lineOnePtY-y.lineOnePtX);
	          var xCoeff = m*m*y.lineOnePtX;
	          var yCoeff = -1*(m*y.lineOnePtX);
	          var constant = x.pointX;
	
	          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);
	        }
	        else{
	          throw new TypeError('Key names do not match');
	        }
	      }
	      else{
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Array, Array': function(x, y){
	      // Point to Line 2D; (x=[pointX, pointY], y=[x-coeff, y-coeff, const])
	      if (x.length == 2 && y.length == 3){
	        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
	        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }
	
	        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);
	      }
	      // Point to Line 3D
	      else if (x.length == 3 && y.length == 6){
	        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
	        if (!_parametricLine(y)) { throw new TypeError('Array with 6 numbers expected for second argument'); }
	
	        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);
	      }
	      // Point to Point 2D
	      else if (x.length == 2 && y.length == 2){
	        if (!_2d(x)) { throw new TypeError('Array with 2 numbers expected for first argument'); }
	        if (!_2d(y)) { throw new TypeError('Array with 2 numbers expected for second argument'); }
	
	        return _distance2d(x[0], x[1], y[0], y[1]);
	      }
	      // Point to Point 3D
	      else if(x.length == 3 && y.length == 3){
	        if (!_3d(x)) { throw new TypeError('Array with 3 numbers expected for first argument'); }
	        if (!_3d(y)) { throw new TypeError('Array with 3 numbers expected for second argument'); }
	
	        return _distance3d(x[0], x[1], x[2], y[0], y[1], y[2]);
	      }
	      else{
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Object, Object': function(x, y){
	      if (Object.keys(x).length == 2 && Object.keys(y).length == 3){
	        if (!_2d(x)) { throw new TypeError('Values of pointX and pointY should be numbers'); }
	        if (!_3d(y)) { throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers'); }
	        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('xCoeffLine') &&
	          y.hasOwnProperty('yCoeffLine') && y.hasOwnProperty('yCoeffLine')){
	
	          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);
	        }
	        else{
	          throw new TypeError('Key names do not match');
	        }
	      }
	      // Point to Line 3D
	      else if (Object.keys(x).length == 3 && Object.keys(y).length == 6){
	        if (!_3d(x)) { throw new TypeError('Values of pointX, pointY and pointZ should be numbers'); }
	        if (!_parametricLine(y)) { throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers'); }
	        if (x.hasOwnProperty('pointX') && x.hasOwnProperty('pointY') && y.hasOwnProperty('x0') &&
	          y.hasOwnProperty('y0') && y.hasOwnProperty('z0') && y.hasOwnProperty('a') &&
	          y.hasOwnProperty('b') && y.hasOwnProperty('c')){
	
	          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);
	        }
	        else{
	          throw new TypeError('Key names do not match');
	        }
	      }
	      // Point to Point 2D
	      else if (Object.keys(x).length == 2 && Object.keys(y).length == 2){
	        if (!_2d(x)) { throw new TypeError('Values of pointOneX and pointOneY should be numbers'); }
	        if (!_2d(y)) { throw new TypeError('Values of pointTwoX and pointTwoY should be numbers'); }
	        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') &&
	          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY')){
	
	          return _distance2d(x.pointOneX, x.pointOneY, y.pointTwoX, y.pointTwoY);
	        }
	        else{
	          throw new TypeError('Key names do not match');
	        }
	      }
	      // Point to Point 3D
	      else if(Object.keys(x).length == 3 && Object.keys(y).length == 3){
	        if (!_3d(x)) { throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers'); }
	        if (!_3d(y)) { throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers'); }
	        if (x.hasOwnProperty('pointOneX') && x.hasOwnProperty('pointOneY') && x.hasOwnProperty('pointOneZ') &&
	          y.hasOwnProperty('pointTwoX') && y.hasOwnProperty('pointTwoY') && y.hasOwnProperty('pointTwoZ')){
	
	          return _distance3d(x.pointOneX, x.pointOneY, x.pointOneZ, y.pointTwoX, y.pointTwoY, y.pointTwoZ);
	        }
	        else {
	          throw new TypeError('Key names do not match');
	        }
	      }
	      else{
	        throw new TypeError('Invalid Arguments: Try again');
	      }
	    },
	    'Array': function(arr){
	      if (!_pairwise(arr)) { throw new TypeError('Incorrect array format entered for pairwise distance calculation'); }
	
	      return _distancePairwise(arr);
	    }
	  });
	  return distance;
	}
	
	function _2d(a){
	  // checks if the number of arguments are correct in count and are valid (should be numbers)
	  if (a.constructor !== Array){
	    a = _objectToArray(a);
	  }
	  return typeof a[0] === 'number' && typeof a[1] === 'number';
	}
	
	function _3d(a){
	  // checks if the number of arguments are correct in count and are valid (should be numbers)
	  if (a.constructor !== Array){
	    a = _objectToArray(a);
	  }
	  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number';
	}
	
	function _parametricLine(a){
	  if (a.constructor !== Array){
	    a = _objectToArray(a);
	  }
	  return typeof a[0] === 'number' && typeof a[1] === 'number' && typeof a[2] === 'number' &&
	    typeof a[3] === 'number' && typeof a[4] === 'number' && typeof a[5] === 'number';
	
	}
	
	function _objectToArray(o){
	  var keys = Object.keys(o);
	  var a = [];
	  for (var i = 0; i < keys.length; i++) {
	    a.push(o[keys[i]]);
	  }
	  return a;
	}
	
	function _pairwise(a){
	  //checks for valid arguments passed to _distancePairwise(Array)
	  if (a[0].length == 2 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number'){
	    for(var i in a){
	      if (a[i].length != 2 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number'){
	        return false;
	      }
	    }
	  }
	  else if (a[0].length == 3 && typeof a[0][0] === 'number' && typeof a[0][1] === 'number' && typeof a[0][2] === 'number'){
	    for(var i in a){
	      if (a[i].length != 3 || typeof a[i][0] !== 'number' || typeof a[i][1] !== 'number' || typeof a[i][2] !== 'number'){
	        return false;
	      }
	    }
	  }
	  else{
	    return false;
	  }
	  return true;
	}
	
	function _distancePointLine2D(x, y, a, b, c){
	  var num =  Math.abs(a*x + b*y + c);
	  var den = Math.pow((a*a + b*b), 0.5);
	  var result = (num/den);
	  return result;
	}
	
	function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c){
	  var num = [((y0-y)*(c))-((z0-z)*(b)), ((z0-z)*(a))-((x0-x)*(c)), ((x0-x)*(b))-((y0-y)*(a))]
	  num = Math.pow(num[0]*num[0] + num[1]*num[1] + num[2]*num[2], 0.5);
	  var den = Math.pow(a*a + b*b + c*c, 0.5);
	  var result = num/den;
	  return result;
	}
	
	function _distance2d(x1, y1, x2, y2){
	  var yDiff = y2 - y1;
	  var xDiff = x2 - x1;
	  var radicant = yDiff * yDiff + xDiff * xDiff;
	  var result = Math.pow(radicant, 0.5);
	  return result;
	}
	
	function _distance3d(x1, y1, z1, x2, y2, z2){
	  var zDiff = z2 - z1;
	  var yDiff = y2 - y1;
	  var xDiff = x2 - x1;
	  var radicant = zDiff * zDiff + yDiff * yDiff + xDiff * xDiff;
	  var result = Math.pow(radicant, 0.5);
	  return result;
	}
	
	function _distancePairwise(a){
	  var result = [];
	  for(var i = 0; i < a.length-1; i++){
	    for(var j = i+1; j < a.length; j++){
	      if (a[0].length == 2){
	        result.push(_distance2d(a[i][0], a[i][1], a[j][0], a[j][1]));
	      }
	      else if (a[0].length == 3){
	        result.push(_distance3d(a[i][0], a[i][1], a[i][2], a[j][0], a[j][1], a[j][2]));
	      }
	    }
	  }
	  return result;
	}
	
	exports.name = 'distance';
	exports.factory = factory;


/***/ }),
/* 493 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(494),
	  __webpack_require__(495),
	  __webpack_require__(496),
	  __webpack_require__(497)
	];


/***/ }),
/* 494 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  var matrix = load(__webpack_require__(104));
	  var zeros = load(__webpack_require__(400));
	  var not = load(__webpack_require__(495));
	  var isZero = load(__webpack_require__(402));
	
	  var algorithm02 = load(__webpack_require__(440));
	  var algorithm06 = load(__webpack_require__(449));
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.and(x, y)
	   *
	   * Examples:
	   *
	   *    math.and(2, 4);   // returns true
	   *
	   *    a = [2, 0, 0];
	   *    b = [3, 7, 0];
	   *    c = 0;
	   *
	   *    math.and(a, b);   // returns [true, false, false]
	   *    math.and(a, c);   // returns [false, false, false]
	   *
	   * See also:
	   *
	   *    not, or, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when both inputs are defined with a nonzero/nonempty value.
	   */
	  var and = typed('and', {
	
	    'number, number': function (x, y) {
	      return !!(x && y);
	    },
	
	    'Complex, Complex': function (x, y) {
	      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();
	    },
	
	    'Unit, Unit': function (x, y) {
	      return and(x.value, y.value);
	    },
	    
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse & sparse
	              c = algorithm06(x, y, and, false);
	              break;
	            default:
	              // sparse & dense
	              c = algorithm02(y, x, and, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense & sparse
	              c = algorithm02(x, y, and, false);
	              break;
	            default:
	              // dense & dense
	              c = algorithm13(x, y, and);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return and(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return and(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return and(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // check scalar
	      if (not(y)) {
	        // return zero matrix
	        return zeros(x.size(), x.storage());
	      }
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, and, false);
	          break;
	        default:
	          c = algorithm14(x, y, and, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // check scalar
	      if (not(x)) {
	        // return zero matrix
	        return zeros(x.size(), x.storage());
	      }
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm11(y, x, and, true);
	          break;
	        default:
	          c = algorithm14(y, x, and, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return and(matrix(x), y).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return and(x, matrix(y)).valueOf();
	    }
	  });
	
	  and.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['and'] + '${args[1]}\\right)'
	  };
	
	  return and;
	}
	
	exports.name = 'and';
	exports.factory = factory;


/***/ }),
/* 495 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  /**
	   * Logical `not`. Flips boolean value of a given parameter.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.not(x)
	   *
	   * Examples:
	   *
	   *    math.not(2);      // returns false
	   *    math.not(0);      // returns true
	   *    math.not(true);   // returns false
	   *
	   *    a = [2, -7, 0];
	   *    math.not(a);      // returns [false, false, true]
	   *
	   * See also:
	   *
	   *    and, or, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when input is a zero or empty value.
	   */
	  var not = typed('not', {
	    'number': function (x) {
	      return !x;
	    },
	
	    'Complex': function (x) {
	      return x.re === 0 && x.im === 0;
	    },
	
	    'BigNumber': function (x) {
	      return x.isZero() || x.isNaN();
	    },
	
	    'Unit': function (x) {
	      return not(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, not);
	    }
	  });
	
	  not.toTex = {
	    1: latex.operators['not'] + '\\left(${args[0]}\\right)'
	  };
	
	  return not;
	}
	
	exports.name = 'not';
	exports.factory = factory;


/***/ }),
/* 496 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm05 = load(__webpack_require__(131));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	  
	  /**
	   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.or(x, y)
	   *
	   * Examples:
	   *
	   *    math.or(2, 4);   // returns true
	   *
	   *    a = [2, 5, 0];
	   *    b = [0, 22, 0];
	   *    c = 0;
	   *
	   *    math.or(a, b);   // returns [true, true, false]
	   *    math.or(b, c);   // returns [false, true, false]
	   *
	   * See also:
	   *
	   *    and, not, xor
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.
	   */
	  var or = typed('or', {
	
	    'number, number': function (x, y) {
	      return !!(x || y);
	    },
	
	    'Complex, Complex': function (x, y) {
	      return (x.re !== 0 || x.im !== 0) || (y.re !== 0 || y.im !== 0);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return (!x.isZero() && !x.isNaN()) || (!y.isZero() && !y.isNaN());
	    },
	
	    'Unit, Unit': function (x, y) {
	      return or(x.value, y.value);
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm05(x, y, or);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, or, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, or, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, or);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return or(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return or(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return or(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, or, false);
	          break;
	        default:
	          c = algorithm14(x, y, or, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, or, true);
	          break;
	        default:
	          c = algorithm14(y, x, or, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, or, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, or, true).valueOf();
	    }
	  });
	
	  or.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['or'] + '${args[1]}\\right)'
	  };
	
	  return or;
	}
	
	exports.name = 'or';
	exports.factory = factory;


/***/ }),
/* 497 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm07 = load(__webpack_require__(114));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	  
	  /**
	   * Logical `xor`. Test whether one and only one value is defined with a nonzero/nonempty value.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.xor(x, y)
	   *
	   * Examples:
	   *
	   *    math.xor(2, 4);   // returns false
	   *
	   *    a = [2, 0, 0];
	   *    b = [2, 7, 0];
	   *    c = 0;
	   *
	   *    math.xor(a, b);   // returns [false, true, false]
	   *    math.xor(a, c);   // returns [true, false, false]
	   *
	   * See also:
	   *
	   *    and, not, or
	   *
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check
	   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check
	   * @return {boolean | Array | Matrix}
	   *            Returns true when one and only one input is defined with a nonzero/nonempty value.
	   */
	  var xor = typed('xor', {
	 
	    'number, number': function (x, y) {
	      return !!(!!x ^ !!y);
	    },
	
	    'Complex, Complex': function (x, y) {
	      return ((x.re !== 0 || x.im !== 0) !== (y.re !== 0 || y.im !== 0));
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return ((!x.isZero() && !x.isNaN()) !== (!y.isZero() && !y.isNaN()));
	    },
	
	    'Unit, Unit': function (x, y) {
	      return xor(x.value, y.value);
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, xor);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, xor, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, xor, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, xor);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return xor(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return xor(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return xor(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, xor, false);
	          break;
	        default:
	          c = algorithm14(x, y, xor, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, xor, true);
	          break;
	        default:
	          c = algorithm14(y, x, xor, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, xor, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, xor, true).valueOf();
	    }
	  });
	
	  xor.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['xor'] + '${args[1]}\\right)'
	  };
	
	  return xor;
	}
	
	exports.name = 'xor';
	exports.factory = factory;


/***/ }),
/* 498 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(368),
	  __webpack_require__(499),
	  __webpack_require__(386),
	  __webpack_require__(500),
	  __webpack_require__(501),
	  __webpack_require__(135),
	  __webpack_require__(370),
	  __webpack_require__(502),
	  __webpack_require__(372),
	  __webpack_require__(385),
	  __webpack_require__(503),
	  __webpack_require__(375),
	  __webpack_require__(504),
	  __webpack_require__(505),
	  __webpack_require__(390),
	  __webpack_require__(507),
	  __webpack_require__(508),
	  __webpack_require__(509),
	  __webpack_require__(510),
	  __webpack_require__(511),
	  __webpack_require__(343),
	  __webpack_require__(455),
	  __webpack_require__(415),
	  __webpack_require__(400)
	];


/***/ }),
/* 499 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var array = __webpack_require__(91);
	
	function factory (type, config, load, typed) {
	  var matrix   = load(__webpack_require__(104));
	  var subtract = load(__webpack_require__(129));
	  var multiply = load(__webpack_require__(136));
	
	  /**
	   * Calculate the cross product for two vectors in three dimensional space.
	   * The cross product of `A = [a1, a2, a3]` and `B = [b1, b2, b3]` is defined
	   * as:
	   *
	   *    cross(A, B) = [
	   *      a2 * b3 - a3 * b2,
	   *      a3 * b1 - a1 * b3,
	   *      a1 * b2 - a2 * b1
	   *    ]
	   *
	   * If one of the input vectors has a dimension greater than 1, the output
	   * vector will be a 1x3 (2-dimensional) matrix.
	   *
	   * Syntax:
	   *
	   *    math.cross(x, y)
	   *
	   * Examples:
	   *
	   *    math.cross([1, 1, 0],   [0, 1, 1]);       // Returns [1, -1, 1]
	   *    math.cross([3, -3, 1],  [4, 9, 2]);       // Returns [-15, -2, 39]
	   *    math.cross([2, 3, 4],   [5, 6, 7]);       // Returns [-3, 6, -3]
	   *    math.cross([[1, 2, 3]], [[4], [5], [6]]); // Returns [[-3, 6, -3]]
	   *
	   * See also:
	   *
	   *    dot, multiply
	   *
	   * @param  {Array | Matrix} x   First vector
	   * @param  {Array | Matrix} y   Second vector
	   * @return {Array | Matrix}     Returns the cross product of `x` and `y`
	   */
	  var cross = typed('cross', {
	    'Matrix, Matrix': function (x, y) {
	      return matrix(_cross(x.toArray(), y.toArray()));
	    },
	
	    'Matrix, Array': function (x, y) {
	      return matrix(_cross(x.toArray(), y));
	    },
	
	    'Array, Matrix': function (x, y) {
	      return matrix(_cross(x, y.toArray()));
	    },
	
	    'Array, Array': _cross
	  });
	
	  cross.toTex = {
	    2: '\\left(${args[0]}\\right)\\times\\left(${args[1]}\\right)'
	  };
	
	  return cross;
	
	  /**
	   * Calculate the cross product for two arrays
	   * @param {Array} x  First vector
	   * @param {Array} y  Second vector
	   * @returns {Array} Returns the cross product of x and y
	   * @private
	   */
	  function _cross(x, y) {
	    var highestDimension = Math.max(array.size(x).length, array.size(y).length);
	
	    x = array.squeeze(x);
	    y = array.squeeze(y);
	
	    var xSize = array.size(x);
	    var ySize = array.size(y);
	
	    if (xSize.length != 1 || ySize.length != 1 || xSize[0] != 3 || ySize[0] != 3) {
	      throw new RangeError('Vectors with length 3 expected ' +
	      '(Size A = [' + xSize.join(', ') + '], B = [' + ySize.join(', ') + '])');
	    }
	
	    var product = [
	      subtract(multiply(x[1], y[2]), multiply(x[2], y[1])),
	      subtract(multiply(x[2], y[0]), multiply(x[0], y[2])),
	      subtract(multiply(x[0], y[1]), multiply(x[1], y[0]))
	    ];
	
	    if (highestDimension > 1) {
	      return [product];
	    } else {
	      return product;
	    }
	  }
	}
	
	exports.name = 'cross';
	exports.factory = factory;


/***/ }),
/* 500 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var array     = __webpack_require__(91);
	var clone     = __webpack_require__(55).clone;
	var isInteger = __webpack_require__(58).isInteger;
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	  
	  /**
	   * Create a diagonal matrix or retrieve the diagonal of a matrix
	   *
	   * When `x` is a vector, a matrix with vector `x` on the diagonal will be returned.
	   * When `x` is a two dimensional matrix, the matrixes `k`th diagonal will be returned as vector.
	   * When k is positive, the values are placed on the super diagonal.
	   * When k is negative, the values are placed on the sub diagonal.
	   *
	   * Syntax:
	   *
	   *     math.diag(X)
	   *     math.diag(X, format)
	   *     math.diag(X, k)
	   *     math.diag(X, k, format)
	   *
	   * Examples:
	   *
	   *     // create a diagonal matrix
	   *     math.diag([1, 2, 3]);      // returns [[1, 0, 0], [0, 2, 0], [0, 0, 3]]
	   *     math.diag([1, 2, 3], 1);   // returns [[0, 1, 0, 0], [0, 0, 2, 0], [0, 0, 0, 3]]
	   *     math.diag([1, 2, 3], -1);  // returns [[0, 0, 0], [1, 0, 0], [0, 2, 0], [0, 0, 3]]
	   *
	   *    // retrieve the diagonal from a matrix
	   *    var a = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];
	   *    math.diag(a);   // returns [1, 5, 9]
	   *
	   * See also:
	   *
	   *     ones, zeros, eye
	   *
	   * @param {Matrix | Array} x          A two dimensional matrix or a vector
	   * @param {number | BigNumber} [k=0]  The diagonal where the vector will be filled
	   *                                    in or retrieved.
	   * @param {string} [format='dense']   The matrix storage format.
	   *
	   * @returns {Matrix | Array} Diagonal matrix from input vector, or diagonal from input matrix.
	   */
	  var diag = typed('diag', {
	    // FIXME: simplify this huge amount of signatures as soon as typed-function supports optional arguments
	
	    'Array': function (x) {
	      return _diag(x, 0, array.size(x), null);
	    },
	
	    'Array, number': function (x, k) {
	      return _diag(x, k, array.size(x), null);
	    },
	    
	    'Array, BigNumber': function (x, k) {
	      return _diag(x, k.toNumber(), array.size(x), null);
	    },
	
	    'Array, string': function (x, format) {
	      return _diag(x, 0, array.size(x), format);
	    },
	
	    'Array, number, string': function (x, k, format) {
	      return _diag(x, k, array.size(x), format);
	    },
	
	    'Array, BigNumber, string': function (x, k, format) {
	      return _diag(x, k.toNumber(), array.size(x), format);
	    },
	
	    'Matrix': function (x) {
	      return _diag(x, 0, x.size(), x.storage());
	    },
	
	    'Matrix, number': function (x, k) {
	      return _diag(x, k, x.size(), x.storage());
	    },
	
	    'Matrix, BigNumber': function (x, k) {
	      return _diag(x, k.toNumber(), x.size(), x.storage());
	    },
	
	    'Matrix, string': function (x, format) {
	      return _diag(x, 0, x.size(), format);
	    },
	
	    'Matrix, number, string': function (x, k, format) {
	      return _diag(x, k, x.size(), format);
	    },
	
	    'Matrix, BigNumber, string': function (x, k, format) {
	      return _diag(x, k.toNumber(), x.size(), format);
	    }
	  });
	
	  diag.toTex = undefined; // use default template
	
	  return diag;
	
	  /**
	   * Creeate diagonal matrix from a vector or vice versa
	   * @param {Array | Matrix} x
	   * @param {number} k
	   * @param {string} format Storage format for matrix. If null,
	   *                          an Array is returned
	   * @returns {Array | Matrix}
	   * @private
	   */
	  function _diag (x, k, size, format) {
	    if (!isInteger(k)) {
	      throw new TypeError ('Second parameter in function diag must be an integer');
	    }
	    
	    var kSuper = k > 0 ? k : 0;
	    var kSub = k < 0 ? -k : 0;
	
	    // check dimensions
	    switch (size.length) {
	      case 1:
	        return _createDiagonalMatrix(x, k, format, size[0], kSub, kSuper);
	      case 2:
	        return _getDiagonal(x, k, format, size, kSub, kSuper);
	    }
	    throw new RangeError('Matrix for function diag must be 2 dimensional');
	  }
	  
	  function _createDiagonalMatrix(x, k, format, l, kSub, kSuper) {
	    // matrix size
	    var ms = [l + kSub, l + kSuper];
	    // get matrix constructor
	    var F = type.Matrix.storage(format || 'dense');
	    // create diagonal matrix
	    var m = F.diagonal(ms, x, k);
	    // check we need to return a matrix
	    return format !== null ? m : m.valueOf();
	  }
	  
	  function _getDiagonal(x, k, format, s, kSub, kSuper) {
	    // check x is a Matrix
	    if (x && x.isMatrix === true) {
	      // get diagonal matrix
	      var dm = x.diagonal(k);
	      // check we need to return a matrix
	      if (format !== null) {
	        // check we need to change matrix format
	        if (format !== dm.storage())
	          return matrix(dm, format);
	        return dm;
	      }
	      return dm.valueOf();
	    }
	    // vector size
	    var n = Math.min(s[0] - kSub, s[1] - kSuper);
	    // diagonal values
	    var vector = [];
	    // loop diagonal
	    for (var i = 0; i < n; i++) {
	      vector[i] = x[i + kSub][i + kSuper];
	    }
	    // check we need to return a matrix
	    return format !== null ? matrix(vector) : vector;
	  }
	}
	
	exports.name = 'diag';
	exports.factory = factory;


/***/ }),
/* 501 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var size = __webpack_require__(91).size;
	
	function factory (type, config, load, typed) {
	  var add      = load(__webpack_require__(103));
	  var multiply = load(__webpack_require__(136));
	
	  /**
	   * Calculate the dot product of two vectors. The dot product of
	   * `A = [a1, a2, a3, ..., an]` and `B = [b1, b2, b3, ..., bn]` is defined as:
	   *
	   *    dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn
	   *
	   * Syntax:
	   *
	   *    math.dot(x, y)
	   *
	   * Examples:
	   *
	   *    math.dot([2, 4, 1], [2, 2, 3]);       // returns number 15
	   *    math.multiply([2, 4, 1], [2, 2, 3]);  // returns number 15
	   *
	   * See also:
	   *
	   *    multiply, cross
	   *
	   * @param  {Array | Matrix} x     First vector
	   * @param  {Array | Matrix} y     Second vector
	   * @return {number}               Returns the dot product of `x` and `y`
	   */
	  var dot = typed('dot', {
	    'Matrix, Matrix': function (x, y) {
	      return _dot(x.toArray(), y.toArray());
	    },
	
	    'Matrix, Array': function (x, y) {
	      return _dot(x.toArray(), y);
	    },
	
	    'Array, Matrix': function (x, y) {
	      return _dot(x, y.toArray());
	    },
	
	    'Array, Array': _dot
	  });
	  
	  dot.toTex = {2: '\\left(${args[0]}\\cdot${args[1]}\\right)'};
	
	  return dot;
	
	  /**
	   * Calculate the dot product for two arrays
	   * @param {Array} x  First vector
	   * @param {Array} y  Second vector
	   * @returns {number} Returns the dot product of x and y
	   * @private
	   */
	  // TODO: double code with math.multiply
	  function _dot(x, y) {
	    var xSize= size(x);
	    var ySize = size(y);
	    var len = xSize[0];
	
	    if (xSize.length !== 1 || ySize.length !== 1) throw new RangeError('Vector expected'); // TODO: better error message
	    if (xSize[0] != ySize[0]) throw new RangeError('Vectors must have equal length (' + xSize[0] + ' != ' + ySize[0] + ')');
	    if (len == 0) throw new RangeError('Cannot calculate the dot product of empty vectors');
	
	    var prod = 0;
	    for (var i = 0; i < len; i++) {
	      prod = add(prod, multiply(x[i], y[i]));
	    }
	
	    return prod;
	  }
	}
	
	exports.name = 'dot';
	exports.factory = factory;


/***/ }),
/* 502 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var clone = __webpack_require__(55).clone;
	var _flatten = __webpack_require__(91).flatten;
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Flatten a multi dimensional matrix into a single dimensional matrix.
	   *
	   * Syntax:
	   *
	   *    math.flatten(x)
	   *
	   * Examples:
	   *
	   *    math.flatten([[1,2], [3,4]]);   // returns [1, 2, 3, 4]
	   *
	   * See also:
	   *
	   *    concat, resize, size, squeeze
	   *
	   * @param {Matrix | Array} x   Matrix to be flattened
	   * @return {Matrix | Array} Returns the flattened matrix
	   */
	  var flatten = typed('flatten', {
	    'Array': function (x) {
	      return _flatten(clone(x));
	    },
	
	    'Matrix': function (x) {
	      var flat = _flatten(clone(x.toArray()));
	      // TODO: return the same matrix type as x
	      return matrix(flat);
	    }
	  });
	
	  flatten.toTex = undefined; // use default template
	
	  return flatten;
	}
	
	exports.name = 'flatten';
	exports.factory = factory;


/***/ }),
/* 503 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var size = __webpack_require__(91).size;
	
	function factory(type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	  var multiplyScalar = load(__webpack_require__(132))
	    /**
	     * Calculates the kronecker product of 2 matrices or vectors.
	     *
	     * NOTE: If a one dimensional vector / matrix is given, it will be
	     * wrapped so its two dimensions.
	     * See the examples.
	     *
	     * Syntax:
	     *
	     *    math.kron(x, y)
	     *
	     * Examples:
	     *
	     *    math.kron([[1, 0], [0, 1]], [[1, 2], [3, 4]]);
	     *    // returns [ [ 1, 2, 0, 0 ], [ 3, 4, 0, 0 ], [ 0, 0, 1, 2 ], [ 0, 0, 3, 4 ] ]
	     *
	     *    math.kron([1,1], [2,3,4]);
	     *    // returns [ [ 2, 3, 4, 2, 3, 4 ] ]
	     *
	     * See also:
	     *
	     *    multiply, dot, cross
	     *
	     * @param  {Array | Matrix} x     First vector
	     * @param  {Array | Matrix} y     Second vector
	     * @return {Array | Matrix}       Returns the kronecker product of `x` and `y`
	     */
	    var kron = typed('kron', {
	        'Matrix, Matrix': function(x, y) {
	            return matrix(_kron(x.toArray(), y.toArray()));
	        },
	
	        'Matrix, Array': function(x, y) {
	            return matrix(_kron(x.toArray(), y));
	        },
	
	        'Array, Matrix': function(x, y) {
	            return matrix(_kron(x, y.toArray()));
	        },
	
	        'Array, Array': _kron
	    });
	
	    return kron;
	
	    /**
	     * Calculate the kronecker product of two matrices / vectors
	     * @param {Array} a  First vector
	     * @param {Array} b  Second vector
	     * @returns {Array} Returns the kronecker product of x and y
	     * @private
	     */
	    function _kron(a, b) {
	        // Deal with the dimensions of the matricies.
	        if (size(a).length === 1) {
	          // Wrap it in a 2D Matrix
	          a = [a];
	        }
	        if (size(b).length === 1) {
	          // Wrap it in a 2D Matrix
	          b = [b]
	        }
	        if (size(a).length > 2 || size(b).length > 2) {
	            throw new RangeError('Vectors with dimensions greater then 2 are not supported expected ' +
	            '(Size x = ' + JSON.stringify(a.length) + ', y = ' + JSON.stringify(b.length) + ')');
	        }
	        var t = [];
	        var r = [];
	
	        return a.map(function(a) {
	            return b.map(function(b) {
	                return a.map(function(y) {
	                    return b.map(function(x) {
	                        return r.push(multiplyScalar(y, x));
	                    });
	                }, t.push(r = []));
	            });
	        }, t = []) && t;
	    }
	}
	
	exports.name = 'kron';
	exports.factory = factory;


/***/ }),
/* 504 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	var resize = __webpack_require__(91).resize;
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Create a matrix filled with ones. The created matrix can have one or
	   * multiple dimensions.
	   *
	   * Syntax:
	   *
	   *    math.ones(m)
	   *    math.ones(m, format)
	   *    math.ones(m, n)
	   *    math.ones(m, n, format)
	   *    math.ones([m, n])
	   *    math.ones([m, n], format)
	   *    math.ones([m, n, p, ...])
	   *    math.ones([m, n, p, ...], format)
	   *
	   * Examples:
	   *
	   *    math.ones(3);                   // returns [1, 1, 1]
	   *    math.ones(3, 2);                // returns [[1, 1], [1, 1], [1, 1]]
	   *    math.ones(3, 2, 'dense');       // returns Dense Matrix [[1, 1], [1, 1], [1, 1]]
	   *
	   *    var A = [[1, 2, 3], [4, 5, 6]];
	   *    math.ones(math.size(A));       // returns [[1, 1, 1], [1, 1, 1]]
	   *
	   * See also:
	   *
	   *    zeros, eye, size, range
	   *
	   * @param {...number | Array} size    The size of each dimension of the matrix
	   * @param {string} [format]           The Matrix storage format
	   *
	   * @return {Array | Matrix | number}  A matrix filled with ones
	   */
	  var ones = typed('ones', {
	    '': function () {
	      return (config.matrix === 'Array')
	          ? _ones([])
	          : _ones([], 'default');
	    },
	
	    // math.ones(m, n, p, ..., format)
	    // TODO: more accurate signature '...number | BigNumber, string' as soon as typed-function supports this
	    '...number | BigNumber | string': function (size) {
	      var last = size[size.length - 1];
	      if (typeof last === 'string') {
	        var format = size.pop();
	        return _ones(size, format);
	      }
	      else if (config.matrix === 'Array') {
	        return _ones(size);
	      }
	      else {
	        return _ones(size, 'default');
	      }
	    },
	
	    'Array': _ones,
	
	    'Matrix': function (size) {
	      var format = size.storage();
	      return _ones(size.valueOf(), format);
	    },
	
	    'Array | Matrix, string': function (size, format) {
	      return _ones (size.valueOf(), format);
	    }
	  });
	
	  ones.toTex = undefined; // use default template
	
	  return ones;
	
	  /**
	   * Create an Array or Matrix with ones
	   * @param {Array} size
	   * @param {string} [format='default']
	   * @return {Array | Matrix}
	   * @private
	   */
	  function _ones(size, format) {
	    var hasBigNumbers = _normalize(size);
	    var defaultValue = hasBigNumbers ? new type.BigNumber(1) : 1;
	    _validate(size);
	
	    if (format) {
	      // return a matrix
	      var m = matrix(format);
	      if (size.length > 0) {
	        return m.resize(size, defaultValue);
	      }
	      return m;
	    }
	    else {
	      // return an Array
	      var arr = [];
	      if (size.length > 0) {
	        return resize(arr, size, defaultValue);
	      }
	      return arr;
	    }
	  }
	
	  // replace BigNumbers with numbers, returns true if size contained BigNumbers
	  function _normalize(size) {
	    var hasBigNumbers = false;
	    size.forEach(function (value, index, arr) {
	      if (value && value.isBigNumber === true) {
	        hasBigNumbers = true;
	        arr[index] = value.toNumber();
	      }
	    });
	    return hasBigNumbers;
	  }
	
	  // validate arguments
	  function _validate (size) {
	    size.forEach(function (value) {
	      if (typeof value !== 'number' || !isInteger(value) || value < 0) {
	        throw new Error('Parameters in function ones must be positive integers');
	      }
	    });
	  }
	}
	
	exports.name = 'ones';
	exports.factory = factory;


/***/ }),
/* 505 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	
	function factory (type, config, load, typed) {
	  var asc = load(__webpack_require__(506));
	  function desc(a, b) {
	    return -asc(a, b);
	  }
	
	  /**
	   * Partition-based selection of an array or 1D matrix.
	   * Will find the kth smallest value, and mutates the input array.
	   * Uses Quickselect.
	   *
	   * Syntax:
	   *
	   *    math.partitionSelect(x, k)
	   *    math.partitionSelect(x, k, compare)
	   *
	   * Examples:
	   *
	   *    math.partitionSelect([5, 10, 1], 2);           // returns 10
	   *    math.partitionSelect(['C', 'B', 'A', 'D'], 1); // returns 'B'
	   *
	   *    function sortByLength (a, b) {
	   *      return a.length - b.length;
	   *    }
	   *    math.partitionSelect(['Langdon', 'Tom', 'Sara'], 2, sortByLength); // returns 'Langdon'
	   *
	   * See also:
	   *
	   *    sort
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
	   * @param {Number} k            The kth smallest value to be retrieved; zero-based index
	   * @param {Function | 'asc' | 'desc'} [compare='asc']
	   *        An optional comparator function. The function is called as
	   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
	   *        and 0 when a == b.
	   * @return {*} Returns the kth lowest value.
	   */
	  return typed('partitionSelect', {
	    'Array | Matrix, number': function (x, k) {
	      return _partitionSelect(x, k, asc);
	    },
	
	    'Array | Matrix, number, string': function (x, k, compare) {
	      if (compare === 'asc') {
	        return _partitionSelect(x, k, asc);
	      }
	      else if (compare === 'desc') {
	        return _partitionSelect(x, k, desc);
	      }
	      else {
	        throw new Error('Compare string must be "asc" or "desc"');
	      }
	    },
	
	    'Array | Matrix, number, function': _partitionSelect
	  });
	
	  function _partitionSelect(x, k, compare) {
	    if (!isInteger(k) || k < 0) {
	      throw new Error('k must be a non-negative integer');
	    }
	
	    if (x && x.isMatrix) {
	      var size = x.size();
	      if (size.length > 1) {
	        throw new Error('Only one dimensional matrices supported');
	      }
	      return quickSelect(x.valueOf(), k, compare);
	    }
	
	    if (Array.isArray(x)) {
	      return quickSelect(x, k, compare);
	    }
	  }
	
	  /**
	   * Quickselect algorithm.
	   * Code adapted from:
	   * http://blog.teamleadnet.com/2012/07/quick-select-algorithm-find-kth-element.html
	   *
	   * @param {Array} arr
	   * @param {Number} k
	   * @param {Function} compare
	   * @private
	   */
	  function quickSelect(arr, k, compare) {
	    if (k >= arr.length) {
	      throw new Error('k out of bounds');
	    }
	
	    var from = 0;
	    var to = arr.length - 1;
	
	    // if from == to we reached the kth element
	    while (from < to) {
	      var r = from;
	      var w = to;
	      var pivot = arr[Math.floor(Math.random() * (to - from + 1)) + from];
	
	      // stop if the reader and writer meets
	      while (r < w) {
	        // arr[r] >= pivot
	        if (compare(arr[r], pivot) >= 0) { // put the large values at the end
	          var tmp = arr[w];
	          arr[w] = arr[r];
	          arr[r] = tmp;
	          --w;
	        } else { // the value is smaller than the pivot, skip
	          ++r;
	        }
	      }
	
	      // if we stepped up (r++) we need to step one down (arr[r] > pivot)
	      if (compare(arr[r], pivot) > 0) {
	        --r;
	      }
	
	      // the r pointer is on the end of the first k elements
	      if (k <= r) {
	        to = r;
	      } else {
	        from = r + 1;
	      }
	    }
	
	    return arr[k];
	  }
	}
	
	exports.name = 'partitionSelect';
	exports.factory = factory;


/***/ }),
/* 506 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var nearlyEqual = __webpack_require__(58).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(101);
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm05 = load(__webpack_require__(131));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	  
	  /**
	   * Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
	   *
	   * x and y are considered equal when the relative difference between x and y
	   * is smaller than the configured epsilon. The function cannot be used to
	   * compare values smaller than approximately 2.22e-16.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.compare(x, y)
	   *
	   * Examples:
	   *
	   *    math.compare(6, 1);           // returns 1
	   *    math.compare(2, 3);           // returns -1
	   *    math.compare(7, 7);           // returns 0
	   *
	   *    var a = math.unit('5 cm');
	   *    var b = math.unit('40 mm');
	   *    math.compare(a, b);           // returns 1
	   *
	   *    math.compare(2, [1, 2, 3]);   // returns [1, 0, -1]
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, smallerEq, larger, largerEq
	   *
	   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | Unit | string | Array | Matrix} y Second value to compare
	   * @return {number | BigNumber | Fraction | Array | Matrix} Returns the result of the comparison: 1, 0 or -1.
	   */
	  var compare = typed('compare', {
	
	    'boolean, boolean': function (x, y) {
	      return x === y ? 0 : (x > y ? 1 : -1);
	    },
	
	    'number, number': function (x, y) {
	      return (x === y || nearlyEqual(x, y, config.epsilon))
	          ? 0
	          : (x > y ? 1 : -1);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return (x.eq(y) || bigNearlyEqual(x, y, config.epsilon))
	          ? new type.BigNumber(0)
	          : new type.BigNumber(x.cmp(y));
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      return new type.Fraction(x.compare(y));
	    },
	
	    'Complex, Complex': function () {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },
	
	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return compare(x.value, y.value);
	    },
	
	    'string, string': function (x, y) {
	      return x === y ? 0 : (x > y ? 1 : -1);
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm05(x, y, compare);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, compare, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, compare, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, compare);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return compare(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return compare(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return compare(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, compare, false);
	          break;
	        default:
	          c = algorithm14(x, y, compare, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, compare, true);
	          break;
	        default:
	          c = algorithm14(y, x, compare, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, compare, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, compare, true).valueOf();
	    }
	  });
	
	  compare.toTex = undefined; // use default template
	
	  return compare;
	}
	
	exports.name = 'compare';
	exports.factory = factory;


/***/ }),
/* 507 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DimensionError = __webpack_require__(93);
	
	var isInteger = __webpack_require__(58).isInteger;
	var array = __webpack_require__(91);
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Reshape a multi dimensional array to fit the specified dimensions
	   *
	   * Syntax:
	   *
	   *     math.reshape(x, sizes)
	   *
	   * Examples:
	   *
	   *     math.reshape([1, 2, 3, 4, 5, 6], [2, 3]);
	   *     // returns Array  [[1, 2, 3], [4, 5, 6]]
	   *
	   *     math.reshape([[1, 2], [3, 4]], [1, 4]);
	   *     // returns Array  [[1, 2, 3, 4]]
	   *
	   *     math.reshape([[1, 2], [3, 4]], [4]);
	   *     // returns Array [1, 2, 3, 4]
	   *
	   *     var x = math.matrix([1, 2, 3, 4, 5, 6, 7, 8]);
	   *     math.reshape(x, [2, 2, 2]);
	   *     // returns Matrix [[[1, 2], [3, 4]], [[5, 6], [7, 8]]]
	   *
	   * See also:
	   *
	   *     size, squeeze, resize
	   *
	   * @param {Array | Matrix | *} x  Matrix to be reshaped
	   * @param {number[]} sizes        One dimensional array with integral sizes for
	   *                                each dimension
	   *
	   * @return {* | Array | Matrix}   A reshaped clone of matrix `x`
	   *
	   * @throws {TypeError}            If `sizes` does not contain solely integers
	   * @throws {DimensionError}       If the product of the new dimension sizes does
	   *                                not equal that of the old ones
	   */
	  var reshape = typed('reshape', {
	
	    'Matrix, Array': function (x, sizes) {
	      if(x.reshape) {
	        return x.reshape(sizes);
	      } else {
	        return matrix(array.reshape(x.valueOf(), sizes));
	      }
	    },
	
	    'Array, Array': function (x, sizes) {
	      sizes.forEach(function (size) {
	        if (!isInteger(size)) {
	          throw new TypeError('Invalid size for dimension: ' + size);
	        }
	      });
	      return array.reshape(x, sizes);
	    }
	
	  });
	
	  reshape.toTex = undefined; // use default template
	
	  return reshape;
	}
	
	exports.name = 'reshape';
	exports.factory = factory;


/***/ }),
/* 508 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DimensionError = __webpack_require__(93);
	var ArgumentsError = __webpack_require__(62);
	
	var isInteger = __webpack_require__(58).isInteger;
	var format = __webpack_require__(74).format;
	var clone = __webpack_require__(55).clone;
	var array = __webpack_require__(91);
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Resize a matrix
	   *
	   * Syntax:
	   *
	   *     math.resize(x, size)
	   *     math.resize(x, size, defaultValue)
	   *
	   * Examples:
	   *
	   *     math.resize([1, 2, 3, 4, 5], [3]); // returns Array  [1, 2, 3]
	   *     math.resize([1, 2, 3], [5], 0);    // returns Array  [1, 2, 3, 0, 0]
	   *     math.resize(2, [2, 3], 0);         // returns Matrix [[2, 0, 0], [0, 0, 0]]
	   *     math.resize("hello", [8], "!");    // returns string 'hello!!!'
	   *
	   * See also:
	   *
	   *     size, squeeze, subset, reshape
	   *
	   * @param {Array | Matrix | *} x             Matrix to be resized
	   * @param {Array | Matrix} size              One dimensional array with numbers
	   * @param {number | string} [defaultValue=0] Zero by default, except in
	   *                                           case of a string, in that case
	   *                                           defaultValue = ' '
	   * @return {* | Array | Matrix} A resized clone of matrix `x`
	   */
	  // TODO: rework resize to a typed-function
	  var resize = function resize (x, size, defaultValue) {
	    if (arguments.length != 2 && arguments.length != 3) {
	      throw new ArgumentsError('resize', arguments.length, 2, 3);
	    }
	
	    if (size && size.isMatrix === true) {
	      size = size.valueOf(); // get Array
	    }
	
	    if (size.length && size[0] && size[0].isBigNumber === true) {
	      // convert bignumbers to numbers
	      size = size.map(function (value) {
	        return (value && value.isBigNumber === true) ? value.toNumber() : value;
	      });
	    }
	    
	    // check x is a Matrix
	    if (x && x.isMatrix === true) {
	      // use optimized matrix implementation, return copy
	      return x.resize(size, defaultValue, true);
	    }
	    
	    if (typeof x === 'string') {
	      // resize string
	      return _resizeString(x, size, defaultValue);
	    }
	    
	    // check result should be a matrix
	    var asMatrix = Array.isArray(x) ? false : (config.matrix !== 'Array');
	
	    if (size.length == 0) {
	      // output a scalar
	      while (Array.isArray(x)) {
	        x = x[0];
	      }
	
	      return clone(x);
	    }
	    else {
	      // output an array/matrix
	      if (!Array.isArray(x)) {
	        x = [x];
	      }
	      x = clone(x);
	
	      var res = array.resize(x, size, defaultValue);
	      return asMatrix ? matrix(res) : res;
	    }
	  };
	
	  resize.toTex = undefined; // use default template
	
	  return resize;
	
	  /**
	   * Resize a string
	   * @param {string} str
	   * @param {number[]} size
	   * @param {string} [defaultChar=' ']
	   * @private
	   */
	  function _resizeString(str, size, defaultChar) {
	    if (defaultChar !== undefined) {
	      if (typeof defaultChar !== 'string' || defaultChar.length !== 1) {
	        throw new TypeError('Single character expected as defaultValue');
	      }
	    }
	    else {
	      defaultChar = ' ';
	    }
	
	    if (size.length !== 1) {
	      throw new DimensionError(size.length, 1);
	    }
	    var len = size[0];
	    if (typeof len !== 'number' || !isInteger(len)) {
	      throw new TypeError('Invalid size, must contain positive integers ' +
	          '(size: ' + format(size) + ')');
	    }
	
	    if (str.length > len) {
	      return str.substring(0, len);
	    }
	    else if (str.length < len) {
	      var res = str;
	      for (var i = 0, ii = len - str.length; i < ii; i++) {
	        res += defaultChar;
	      }
	      return res;
	    }
	    else {
	      return str;
	    }
	  }
	}
	
	exports.name = 'resize';
	exports.factory = factory;


/***/ }),
/* 509 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var array = __webpack_require__(91);
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Calculate the size of a matrix or scalar.
	   *
	   * Syntax:
	   *
	   *     math.size(x)
	   *
	   * Examples:
	   *
	   *     math.size(2.3);                  // returns []
	   *     math.size('hello world');        // returns [11]
	   *
	   *     var A = [[1, 2, 3], [4, 5, 6]];
	   *     math.size(A);                    // returns [2, 3]
	   *     math.size(math.range(1,6));      // returns [5]
	   *
	   * See also:
	   *
	   *     resize, squeeze, subset
	   *
	   * @param {boolean | number | Complex | Unit | string | Array | Matrix} x  A matrix
	   * @return {Array | Matrix} A vector with size of `x`.
	   */
	  var size = typed('size', {
	    'Matrix': function (x) {
	      // TODO: return the same matrix type as the input
	      return matrix(x.size());
	    },
	
	    'Array': array.size,
	
	    'string': function (x) {
	      return (config.matrix === 'Array') ? [x.length] : matrix([x.length]);
	    },
	
	    'number | Complex | BigNumber | Unit | boolean | null': function (x) {
	      // scalar
	      return (config.matrix === 'Array') ? [] : matrix([]);
	    }
	  });
	
	  size.toTex = undefined; // use default template
	
	  return size;
	}
	
	exports.name = 'size';
	exports.factory = factory;


/***/ }),
/* 510 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var size = __webpack_require__(91).size;
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	  var asc = load(__webpack_require__(506));
	  var desc = function (a, b) {
	    return -asc(a, b);
	  };
	
	  /**
	   * Sort the items in a matrix.
	   *
	   * Syntax:
	   *
	   *    math.sort(x)
	   *    math.sort(x, compare)
	   *
	   * Examples:
	   *
	   *    math.sort([5, 10, 1]); // returns [1, 5, 10]
	   *    math.sort(['C', 'B', 'A', 'D']); // returns ['A', 'B', 'C', 'D']
	   *
	   *    function sortByLength (a, b) {
	   *      return a.length - b.length;
	   *    }
	   *    math.sort(['Langdon', 'Tom', 'Sara'], sortByLength); // returns ['Tom', 'Sara', 'Langdon']
	   *
	   * See also:
	   *
	   *    filter, forEach, map
	   *
	   * @param {Matrix | Array} x    A one dimensional matrix or array to sort
	   * @param {Function | 'asc' | 'desc'} [compare='asc']
	   *        An optional _comparator function. The function is called as
	   *        `compare(a, b)`, and must return 1 when a > b, -1 when a < b,
	   *        and 0 when a == b.
	   * @return {Matrix | Array} Returns the sorted matrix.
	   */
	  var sort = typed('sort', {
	    'Array': function (x) {
	      _arrayIsVector(x);
	      return x.sort(asc);
	    },
	
	    'Matrix': function (x) {
	      _matrixIsVector(x);
	      return matrix(x.toArray().sort(asc), x.storage());
	    },
	
	    'Array, function': function (x, _comparator) {
	      _arrayIsVector(x);
	      return x.sort(_comparator);
	    },
	
	    'Matrix, function': function (x, _comparator) {
	      _matrixIsVector(x);
	      return matrix(x.toArray().sort(_comparator), x.storage());
	    },
	
	    'Array, string': function (x, order) {
	      _arrayIsVector(x);
	      return x.sort(_comparator(order));
	    },
	
	    'Matrix, string': function (x, order) {
	      _matrixIsVector(x);
	      return matrix(x.toArray().sort(_comparator(order)), x.storage());
	    }
	  });
	
	  sort.toTex = undefined; // use default template
	
	  /**
	   * Get the comparator for given order ('asc' or 'desc')
	   * @param {'asc' | 'desc'} order
	   * @return {Function} Returns a _comparator function
	   */
	  function _comparator (order) {
	    if (order === 'asc') {
	      return asc;
	    }
	    else if (order === 'desc') {
	      return desc;
	    }
	    else {
	      throw new Error('String "asc" or "desc" expected');
	    }
	  }
	
	  /**
	   * Validate whether an array is one dimensional
	   * Throws an error when this is not the case
	   * @param {Array} array
	   * @private
	   */
	  function _arrayIsVector (array) {
	    if (size(array).length !== 1) {
	      throw new Error('One dimensional array expected');
	    }
	  }
	
	  /**
	   * Validate whether a matrix is one dimensional
	   * Throws an error when this is not the case
	   * @param {Matrix} matrix
	   * @private
	   */
	  function _matrixIsVector (matrix) {
	    if (matrix.size().length !== 1) {
	      throw new Error('One dimensional matrix expected');
	    }
	  }
	
	  return sort;
	}
	
	exports.name = 'sort';
	exports.factory = factory;


/***/ }),
/* 511 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var object = __webpack_require__(55);
	var array = __webpack_require__(91);
	
	function factory (type, config, load, typed) {
	  var matrix = load(__webpack_require__(104));
	
	  /**
	   * Squeeze a matrix, remove inner and outer singleton dimensions from a matrix.
	   *
	   * Syntax:
	   *
	   *     math.squeeze(x)
	   *
	   * Examples:
	   *
	   *     math.squeeze([3]);           // returns 3
	   *     math.squeeze([[3]]);         // returns 3
	   *
	   *     var A = math.zeros(3, 1);    // returns [[0], [0], [0]] (size 3x1)
	   *     math.squeeze(A);             // returns [0, 0, 0] (size 3)
	   *
	   *     var B = math.zeros(1, 3);    // returns [[0, 0, 0]] (size 1x3)
	   *     math.squeeze(B);             // returns [0, 0, 0] (size 3)
	   *
	   *     // only inner and outer dimensions are removed
	   *     var C = math.zeros(2, 1, 3); // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
	   *     math.squeeze(C);             // returns [[[0, 0, 0]], [[0, 0, 0]]] (size 2x1x3)
	   *
	   * See also:
	   *
	   *     subset
	   *
	   * @param {Matrix | Array} x      Matrix to be squeezed
	   * @return {Matrix | Array} Squeezed matrix
	   */
	  var squeeze = typed('squeeze', {
	    'Array': function (x) {
	      return array.squeeze(object.clone(x));
	    },
	
	    'Matrix': function (x) {
	      var res = array.squeeze(x.toArray());
	      // FIXME: return the same type of matrix as the input
	      return Array.isArray(res) ? matrix(res) : res;
	    },
	
	    'any': function (x) {
	      // scalar
	      return object.clone(x);
	    }
	  });
	
	  squeeze.toTex = undefined; // use default template
	
	  return squeeze;
	}
	
	exports.name = 'squeeze';
	exports.factory = factory;


/***/ }),
/* 512 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  //require('./distribution'), // TODO: rethink math.distribution
	  __webpack_require__(482),
	  __webpack_require__(480),
	  __webpack_require__(481),
	  __webpack_require__(513),
	  __webpack_require__(515),
	  __webpack_require__(516),
	  __webpack_require__(517),
	  __webpack_require__(521),
	  __webpack_require__(522)
	];


/***/ }),
/* 513 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	
	function factory(type, config, load, typed) {
	    var matrix = load(__webpack_require__(104));
	    var divide = load(__webpack_require__(384));
	    var sum = load(__webpack_require__(514));
	    var multiply = load(__webpack_require__(136));
	    var dotDivide = load(__webpack_require__(439));
	    var log = load(__webpack_require__(451));
	    var isNumeric = load(__webpack_require__(141));
	
	    /**
	     * Calculate the Kullback-Leibler (KL) divergence  between two distributions
	     *
	     * Syntax:
	     *
	     *     math.kldivergence(x, y)
	     *
	     * Examples:
	     *
	     *     math.kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5]);   //returns 0.24376698773121153
	     *
	     *
	     * @param  {Array | Matrix} q    First vector
	     * @param  {Array | Matrix} p    Second vector
	     * @return {number}              Returns distance between q and p
	     */
	    var kldivergence = typed('kldivergence', {
	        'Array, Array': function(q, p) {
	            return _kldiv(matrix(q), matrix(p));
	        },
	
	        'Matrix, Array': function(q, p) {
	            return _kldiv(q, matrix(p));
	        },
	
	        'Array, Matrix': function(q, p){
	            return _kldiv(matrix(q), p);
	        },
	
	        'Matrix, Matrix': function(q, p){
	            return _kldiv(q, p);
	        }
	
	    });
	
	    function _kldiv(q, p) {
	        var plength = p.size().length;
	        var qlength = q.size().length;
	        if (plength > 1) {
	            throw new Error('first object must be one dimensional');
	        }
	        
	        if (qlength > 1) {
	            throw new Error('second object must be one dimensional');
	        }
	        
	        if(plength !== qlength){
	            throw new Error("Length of two vectors must be equal");
	        }
	        
	        //Before calculation, apply normalization
	        var sumq = sum(q);
	        if (sumq === 0) {
	            throw new Error("Sum of elements in first object must be non zero");
	        }
	
	        var sump = sum(p);
	        if (sump === 0) {
	            throw new Error("Sum of elements in second object must be non zero");
	        }
	        var qnorm = divide(q, sum(q));
	        var pnorm = divide(p, sum(p));
	
	        var result = sum(multiply(qnorm, log(dotDivide(qnorm, pnorm))));
	        if (isNumeric(result)) {
	            return result;
	        }
	        else {
	            return Number.NaN;
	        }
	    }
	
	    return kldivergence;
	}
	
	
	exports.name = 'kldivergence';
	exports.factory = factory;
	 


/***/ }),
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepForEach = __webpack_require__(379);
	
	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(105));
	
	  /**
	   * Compute the sum of a matrix or a list with values.
	   * In case of a (multi dimensional) array or matrix, the sum of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.sum(a, b, c, ...)
	   *     math.sum(A)
	   *
	   * Examples:
	   *
	   *     math.sum(2, 1, 4, 3);               // returns 10
	   *     math.sum([2, 1, 4, 3]);             // returns 10
	   *     math.sum([[2, 5], [4, 3], [1, 7]]); // returns 22
	   *
	   * See also:
	   *
	   *    mean, median, min, max, prod, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The sum of all values
	   */
	  var sum = typed('sum', {
	    'Array | Matrix': function (args) {
	      // sum([a, b, c, d, ...])
	      return _sum(args);
	    },
	
	    'Array | Matrix, number | BigNumber': function () {
	      // sum([a, b, c, d, ...], dim)
	      // TODO: implement sum(A, dim)
	      throw new Error('sum(A, dim) is not yet supported');
	    },
	
	    '...': function (args) {
	      // sum(a, b, c, d, ...)
	      return _sum(args);
	    }
	  });
	
	  sum.toTex = undefined; // use default template
	
	  return sum;
	
	  /**
	   * Recursively calculate the sum of an n-dimensional array
	   * @param {Array} array
	   * @return {number} sum
	   * @private
	   */
	  function _sum(array) {
	    var sum = undefined;
	
	    deepForEach(array, function (value) {
	      sum = (sum === undefined) ? value : add(sum, value);
	    });
	
	    if (sum === undefined) {
	      switch (config.number) {
	        case 'number':
	          return 0;
	        case 'BigNumber':
	          return new type.BigNumber(0);
	        case 'Fraction':
	          return new type.Fraction(0);
	        default:
	          return 0;
	      }
	    }
	
	    return sum;
	  }
	}
	
	exports.name = 'sum';
	exports.factory = factory;


/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepForEach = __webpack_require__(379);
	
	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(103));
	  var multiply = load(__webpack_require__(136));
	  var divide = load(__webpack_require__(384));
	  var factorial = load(__webpack_require__(480));
	  var isInteger = load(__webpack_require__(483));
	  var isPositive = load(__webpack_require__(403));
	
	  /**
	   * Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities.
	   *
	   * multinomial takes one array of integers as an argument.
	   * The following condition must be enforced: every ai <= 0
	   *
	   * Syntax:
	   *
	   *     math.multinomial(a) // a is an array type
	   *
	   * Examples:
	   *
	   *    math.multinomial([1,2,1]); // returns 12
	   *
	   * See also:
	   *
	   *    combinations, factorial
	   *
	   * @param {number[] | BigNumber[]} a    Integer numbers of objects in the subset
	   * @return {Number | BigNumber}         Multinomial coefficient.
	   */
	  return typed('multinomial', {
	    'Array | Matrix': function (a) {
	      var sum = 0;
	      var denom = 1;
	
	      deepForEach(a, function(ai) {
	        if(!isInteger(ai) || !isPositive(ai)) {
	          throw new TypeError('Positive integer value expected in function multinomial');
	        }
	        sum = add(sum, ai);
	        denom = multiply(denom, factorial(ai));
	      });
	
	      return divide(factorial(sum), denom);
	    }
	  });
	}
	
	exports.name = 'multinomial';
	exports.factory = factory;


/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	
	function factory (type, config, load, typed) {
	  var factorial = load(__webpack_require__(480));
	
	  /**
	   * Compute the number of ways of obtaining an ordered subset of `k` elements
	   * from a set of `n` elements.
	   *
	   * Permutations only takes integer arguments.
	   * The following condition must be enforced: k <= n.
	   *
	   * Syntax:
	   *
	   *     math.permutations(n)
	   *     math.permutations(n, k)
	   *
	   * Examples:
	   *
	   *    math.permutations(5);     // 120
	   *    math.permutations(5, 3);  // 60
	   *
	   * See also:
	   *
	   *    combinations, factorial
	   *
	   * @param {number | BigNumber} n   The number of objects in total
	   * @param {number | BigNumber} [k] The number of objects in the subset
	   * @return {number | BigNumber}    The number of permutations
	   */
	  var permutations = typed('permutations', {
	    'number | BigNumber': factorial,
	
	    'number, number': function (n, k) {
	      var result, i;
	
	      if (!isInteger(n) || n < 0) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }
	      if (!isInteger(k) || k < 0) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }
	      if (k > n) {
	        throw new TypeError('second argument k must be less than or equal to first argument n');
	      }
	
	      // Permute n objects, k at a time
	      result = 1;
	      for (i = n - k + 1; i <= n; i++) {
	        result = result * i;
	      }
	
	      return result;
	    },
	
	    'BigNumber, BigNumber': function (n, k) {
	      var result, i;
	
	      if (!isPositiveInteger(n) || !isPositiveInteger(k)) {
	        throw new TypeError('Positive integer value expected in function permutations');
	      }
	      if (k.gt(n)) {
	        throw new TypeError('second argument k must be less than or equal to first argument n');
	      }
	
	      result = new type.BigNumber(1);
	      for (i = n.minus(k).plus(1); i.lte(n); i = i.plus(1)) {
	        result = result.times(i);
	      }
	
	      return result;
	    }
	
	    // TODO: implement support for collection in permutations
	  });
	
	  permutations.toTex = undefined; // use default template
	
	  return permutations;
	}
	
	/**
	 * Test whether BigNumber n is a positive integer
	 * @param {BigNumber} n
	 * @returns {boolean} isPositiveInteger
	 */
	function isPositiveInteger(n) {
	  return n.isInteger() && n.gte(0);
	}
	
	exports.name = 'permutations';
	exports.factory = factory;


/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var distribution = load(__webpack_require__(518));
	
	  /**
	   * Random pick one or more values from a one dimensional array.
	   * Array elements are picked using a random function with uniform or weighted distribution.
	   *
	   * Syntax:
	   *
	   *     math.pickRandom(array)
	   *     math.pickRandom(array, number)
	   *     math.pickRandom(array, weights)
	   *     math.pickRandom(array, number, weights)
	   *     math.pickRandom(array, weights, number)
	   *
	   * Examples:
	   *
	   *     math.pickRandom([3, 6, 12, 2]);                  // returns one of the values in the array
	   *     math.pickRandom([3, 6, 12, 2], 2);               // returns an array of two of the values in the array
	   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1]);    // returns one of the values in the array with weighted distribution
	   *     math.pickRandom([3, 6, 12, 2], 2, [1, 3, 2, 1]); // returns an array of two of the values in the array with weighted distribution
	   *     math.pickRandom([3, 6, 12, 2], [1, 3, 2, 1], 2); // returns an array of two of the values in the array with weighted distribution
	   *
	   * See also:
	   *
	   *     random, randomInt
	   *
	   * @param {Array} array     A one dimensional array
	   * @param {Int} number      An int or float
	   * @param {Array} weights   An array of ints or floats
	   * @return {number} One of the elements of the provided input array
	   * @return {array} An array of elements of the provided input array
	   */
	  // TODO: rework pickRandom to a typed-function
	  var pickRandom =  distribution('uniform').pickRandom;
	
	  pickRandom.toTex = undefined; // use default template
	
	  return pickRandom;
	}
	
	exports.name = 'pickRandom';
	exports.factory = factory;


/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var ArgumentsError = __webpack_require__(62);
	var isCollection = __webpack_require__(377);
	var isNumber = __webpack_require__(58).isNumber;
	
	// TODO: rethink math.distribution
	// TODO: rework to a typed function
	function factory (type, config, load, typed, math) {
	  var matrix = load(__webpack_require__(104));
	  var array = __webpack_require__(91);
	
	  // seeded pseudo random number generator
	  var rng = load(__webpack_require__(519));
	
	  /**
	   * Create a distribution object with a set of random functions for given
	   * random distribution.
	   *
	   * Syntax:
	   *
	   *     math.distribution(name)
	   *
	   * Examples:
	   *
	   *     var normalDist = math.distribution('normal'); // create a normal distribution
	   *     normalDist.random(0, 10);                     // get a random value between 0 and 10
	   *
	   * See also:
	   *
	   *     random, randomInt, pickRandom
	   *
	   * @param {string} name   Name of a distribution. Choose from 'uniform', 'normal'.
	   * @return {Object}       Returns a distribution object containing functions:
	   *                        `random([size] [, min] [, max])`,
	   *                        `randomInt([min] [, max])`,
	   *                        `pickRandom(array)`
	   */
	  function distribution(name) {
	    if (!distributions.hasOwnProperty(name))
	      throw new Error('Unknown distribution ' + name);
	
	    var args = Array.prototype.slice.call(arguments, 1),
	        distribution = distributions[name].apply(this, args);
	
	    return (function(distribution) {
	
	      // This is the public API for all distributions
	      var randFunctions = {
	
	        random: function(arg1, arg2, arg3) {
	          var size, min, max;
	
	          if (arguments.length > 3) {
	            throw new ArgumentsError('random', arguments.length, 0, 3);
	          } else if (arguments.length === 1) {
	            // `random(max)` or `random(size)`
	            if (isCollection(arg1)) {
	              size = arg1;
	            } else {
	              max = arg1;
	            }
	          } else if (arguments.length === 2) {
	            // `random(min, max)` or `random(size, max)`
	            if (isCollection(arg1)) {
	              size = arg1;
	              max = arg2;
	            } else {
	              min = arg1;
	              max = arg2;
	            }
	          } else {
	            // `random(size, min, max)`
	            size = arg1;
	            min = arg2;
	            max = arg3;
	          }
	
	          // TODO: validate type of size
	          if ((min !== undefined && !isNumber(min)) || (max !== undefined && !isNumber(max))) {
	            throw new TypeError('Invalid argument in function random');
	          }
	
	          if (max === undefined) max = 1;
	          if (min === undefined) min = 0;
	          if (size !== undefined) {
	            var res = _randomDataForMatrix(size.valueOf(), min, max, _random);
	            return (size && size.isMatrix === true) ? matrix(res) : res;
	          }
	          return _random(min, max);
	        },
	
	        randomInt: typed({
	          'number | Array': function(arg) {
	            var min = 0;
	
	            if (isCollection(arg)) {
	              var size = arg;
	              var max = 1;
	              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
	              return (size && size.isMatrix === true) ? matrix(res) : res;
	            } else {
	              var max = arg;
	              return _randomInt(min, max);
	            }
	          },
	          'number | Array, number': function(arg1, arg2) {
	            if (isCollection(arg1)) {
	              var size = arg1;
	              var max = arg2;
	              var min = 0;
	              var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
	              return (size && size.isMatrix === true) ? matrix(res) : res;
	            }
	            else {
	              var min = arg1;
	              var max = arg2;
	              return _randomInt(min, max);
	            }
	          },
	          'Array, number, number': function(size, min, max) {
	            var res = _randomDataForMatrix(size.valueOf(), min, max, _randomInt);
	            return (size && size.isMatrix === true) ? matrix(res) : res;
	          }
	        }),
	
	        pickRandom: typed({
	          'Array': function(possibles) {
	            return _pickRandom(possibles);
	          },
	          'Array, number | Array': function(possibles, arg2) {
	            var number, weights;
	
	            if (Array.isArray(arg2)) {
	              weights = arg2;
	            } else if (isNumber(arg2)) {
	              number = arg2;
	            } else {
	              throw new TypeError('Invalid argument in function pickRandom')
	            }
	
	            return _pickRandom(possibles, number, weights);
	          },
	          'Array, number | Array, Array | number': function(possibles, arg2, arg3) {
	            var number, weights;
	
	            if (Array.isArray(arg2)) {
	              weights = arg2;
	              number = arg3;
	            } else {
	              weights = arg3;
	              number = arg2;
	            }
	
	            if (!Array.isArray(weights) || !isNumber(number)) {
	              throw new TypeError('Invalid argument in function pickRandom');
	            }
	
	            return _pickRandom(possibles, number, weights);
	          }
	        })
	      }
	
	      var _pickRandom = function(possibles, number, weights) {
	        var single = (typeof number === 'undefined');
	
	        if (single) {
	          number = 1;
	        }
	
	        if (possibles && possibles.isMatrix === true) {
	          possibles = possibles.valueOf(); // get Array
	        } else if (!Array.isArray(possibles)) {
	          throw new TypeError('Unsupported type of value in function pickRandom');
	        }
	
	        if (array.size(possibles).length > 1) {
	          throw new Error('Only one dimensional vectors supported');
	        }
	
	        if (typeof weights !== 'undefined') {
	          if (weights.length != possibles.length) {
	            throw new Error('Weights must have the same length as possibles');
	          }
	
	          var totalWeights = 0;
	
	          for (var i = 0, len = weights.length; i < len; i++) {
	            if (!isNumber(weights[i]) || weights[i] < 0) {
	              throw new Error('Weights must be an array of positive numbers');
	            }
	
	            totalWeights += weights[i];
	          }
	        }
	
	        var length = possibles.length;
	
	        if (length == 0) {
	          return [];
	        } else if (number >= length) {
	          return possibles;
	        }
	
	        var result = [];
	        var pick;
	
	        while (result.length < number) {
	          if (typeof weights === 'undefined') {
	            pick = possibles[Math.floor(rng() * length)];
	          } else {
	            var randKey = rng() * totalWeights;
	
	            for (var i = 0, len = possibles.length; i < len; i++) {
	              randKey -= weights[i];
	
	              if (randKey < 0) {
	                pick = possibles[i];
	                break;
	              }
	            }
	          }
	
	          if (result.indexOf(pick) == -1) {
	            result.push(pick);
	          }
	        }
	
	        return single ? result[0] : result;
	
	        // TODO: add support for multi dimensional matrices
	      }
	
	      var _random = function(min, max) {
	        return min + distribution() * (max - min);
	      };
	
	      var _randomInt = function(min, max) {
	        return Math.floor(min + distribution() * (max - min));
	      };
	
	      // This is a function for generating a random matrix recursively.
	      var _randomDataForMatrix = function(size, min, max, randFunc) {
	        var data = [], length, i;
	        size = size.slice(0);
	
	        if (size.length > 1) {
	          for (var i = 0, length = size.shift(); i < length; i++) {
	            data.push(_randomDataForMatrix(size, min, max, randFunc));
	          }
	        } else {
	          for (var i = 0, length = size.shift(); i < length; i++) {
	            data.push(randFunc(min, max));
	          }
	        }
	
	        return data;
	      };
	
	      return randFunctions;
	
	    })(distribution);
	  }
	
	  // Each distribution is a function that takes no argument and when called returns
	  // a number between 0 and 1.
	  var distributions = {
	
	    uniform: function() {
	      return rng;
	    },
	
	    // Implementation of normal distribution using Box-Muller transform
	    // ref : http://en.wikipedia.org/wiki/Box%E2%80%93Muller_transform
	    // We take : mean = 0.5, standard deviation = 1/6
	    // so that 99.7% values are in [0, 1].
	    normal: function() {
	      return function() {
	        var u1, u2,
	            picked = -1;
	        // We reject values outside of the interval [0, 1]
	        // TODO: check if it is ok to do that?
	        while (picked < 0 || picked > 1) {
	          u1 = rng();
	          u2 = rng();
	          picked = 1/6 * Math.pow(-2 * Math.log(u1), 0.5) * Math.cos(2 * Math.PI * u2) + 0.5;
	        }
	        return picked;
	      }
	    }
	  };
	
	  distribution.toTex = undefined; // use default template
	
	  return distribution;
	}
	
	exports.name = 'distribution';
	exports.factory = factory;


/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var seedrandom = __webpack_require__(520);
	
	// create a random seed here to prevent an infinite loop from seed-random
	// inside the factory. Reason is that math.random is defined as a getter/setter
	// and seed-random generates a seed from the local entropy by reading every
	// defined object including `math` itself. That means that whilst getting
	// math.random, it tries to get math.random, etc... an infinite loop.
	// See https://github.com/ForbesLindesay/seed-random/issues/6
	var singletonRandom = seedrandom();
	
	function factory (type, config, load, typed, math) {
	  var random;
	
	  // create a new random generator with given seed
	  function setSeed (seed) {
	    random = seed === null ? singletonRandom : seedrandom(String(seed));
	  }
	
	  // initialize a seeded pseudo random number generator with config's random seed
	  setSeed(config.randomSeed)
	
	  // wrapper function so the rng can be updated via generator
	  function rng() {
	      return random();
	  }
	
	  // updates generator with a new instance of a seeded pseudo random number generator
	  math.on('config', function (curr, prev, changes) {
	    // if the user specified a randomSeed
	    if(changes.randomSeed !== undefined) {
	      // update generator with a new instance of a seeded pseudo random number generator
	      setSeed(curr.randomSeed)
	    }
	  });
	
	  return rng;
	}
	
	exports.factory = factory;
	exports.math = true;


/***/ }),
/* 520 */
/***/ (function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {'use strict';
	
	var width = 256;// each RC4 output is 0 <= x < 256
	var chunks = 6;// at least six RC4 outputs for each double
	var digits = 52;// there are 52 significant digits in a double
	var pool = [];// pool: entropy pool starts empty
	var GLOBAL = typeof global === 'undefined' ? window : global;
	
	//
	// The following constants are related to IEEE 754 limits.
	//
	var startdenom = Math.pow(width, chunks),
	    significance = Math.pow(2, digits),
	    overflow = significance * 2,
	    mask = width - 1;
	
	
	var oldRandom = Math.random;
	
	//
	// seedrandom()
	// This is the seedrandom function described above.
	//
	module.exports = function(seed, options) {
	  if (options && options.global === true) {
	    options.global = false;
	    Math.random = module.exports(seed, options);
	    options.global = true;
	    return Math.random;
	  }
	  var use_entropy = (options && options.entropy) || false;
	  var key = [];
	
	  // Flatten the seed string or build one from local entropy if needed.
	  var shortseed = mixkey(flatten(
	    use_entropy ? [seed, tostring(pool)] :
	    0 in arguments ? seed : autoseed(), 3), key);
	
	  // Use the seed to initialize an ARC4 generator.
	  var arc4 = new ARC4(key);
	
	  // Mix the randomness into accumulated entropy.
	  mixkey(tostring(arc4.S), pool);
	
	  // Override Math.random
	
	  // This function returns a random double in [0, 1) that contains
	  // randomness in every bit of the mantissa of the IEEE 754 value.
	
	  return function() {         // Closure to return a random double:
	    var n = arc4.g(chunks),             // Start with a numerator n < 2 ^ 48
	        d = startdenom,                 //   and denominator d = 2 ^ 48.
	        x = 0;                          //   and no 'extra last byte'.
	    while (n < significance) {          // Fill up all significant digits by
	      n = (n + x) * width;              //   shifting numerator and
	      d *= width;                       //   denominator and generating a
	      x = arc4.g(1);                    //   new least-significant-byte.
	    }
	    while (n >= overflow) {             // To avoid rounding up, before adding
	      n /= 2;                           //   last byte, shift everything
	      d /= 2;                           //   right using integer Math until
	      x >>>= 1;                         //   we have exactly the desired bits.
	    }
	    return (n + x) / d;                 // Form the number within [0, 1).
	  };
	};
	
	module.exports.resetGlobal = function () {
	  Math.random = oldRandom;
	};
	
	//
	// ARC4
	//
	// An ARC4 implementation.  The constructor takes a key in the form of
	// an array of at most (width) integers that should be 0 <= x < (width).
	//
	// The g(count) method returns a pseudorandom integer that concatenates
	// the next (count) outputs from ARC4.  Its return value is a number x
	// that is in the range 0 <= x < (width ^ count).
	//
	/** @constructor */
	function ARC4(key) {
	  var t, keylen = key.length,
	      me = this, i = 0, j = me.i = me.j = 0, s = me.S = [];
	
	  // The empty key [] is treated as [0].
	  if (!keylen) { key = [keylen++]; }
	
	  // Set up S using the standard key scheduling algorithm.
	  while (i < width) {
	    s[i] = i++;
	  }
	  for (i = 0; i < width; i++) {
	    s[i] = s[j = mask & (j + key[i % keylen] + (t = s[i]))];
	    s[j] = t;
	  }
	
	  // The "g" method returns the next (count) outputs as one number.
	  (me.g = function(count) {
	    // Using instance members instead of closure state nearly doubles speed.
	    var t, r = 0,
	        i = me.i, j = me.j, s = me.S;
	    while (count--) {
	      t = s[i = mask & (i + 1)];
	      r = r * width + s[mask & ((s[i] = s[j = mask & (j + t)]) + (s[j] = t))];
	    }
	    me.i = i; me.j = j;
	    return r;
	    // For robust unpredictability discard an initial batch of values.
	    // See http://www.rsa.com/rsalabs/node.asp?id=2009
	  })(width);
	}
	
	//
	// flatten()
	// Converts an object tree to nested arrays of strings.
	//
	function flatten(obj, depth) {
	  var result = [], typ = (typeof obj)[0], prop;
	  if (depth && typ == 'o') {
	    for (prop in obj) {
	      try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
	    }
	  }
	  return (result.length ? result : typ == 's' ? obj : obj + '\0');
	}
	
	//
	// mixkey()
	// Mixes a string seed into a key that is an array of integers, and
	// returns a shortened string seed that is equivalent to the result key.
	//
	function mixkey(seed, key) {
	  var stringseed = seed + '', smear, j = 0;
	  while (j < stringseed.length) {
	    key[mask & j] =
	      mask & ((smear ^= key[mask & j] * 19) + stringseed.charCodeAt(j++));
	  }
	  return tostring(key);
	}
	
	//
	// autoseed()
	// Returns an object for autoseeding, using window.crypto if available.
	//
	/** @param {Uint8Array=} seed */
	function autoseed(seed) {
	  try {
	    GLOBAL.crypto.getRandomValues(seed = new Uint8Array(width));
	    return tostring(seed);
	  } catch (e) {
	    return [+new Date, GLOBAL, GLOBAL.navigator && GLOBAL.navigator.plugins,
	            GLOBAL.screen, tostring(pool)];
	  }
	}
	
	//
	// tostring()
	// Converts an array of charcodes to a string
	//
	function tostring(a) {
	  return String.fromCharCode.apply(0, a);
	}
	
	//
	// When seedrandom.js is loaded, we immediately mix a few bits
	// from the built-in RNG into the entropy pool.  Because we do
	// not want to intefere with determinstic PRNG state later,
	// seedrandom will not call Math.random on its own again after
	// initialization.
	//
	mixkey(Math.random(), pool);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var distribution = load(__webpack_require__(518));
	
	  /**
	   * Return a random number larger or equal to `min` and smaller than `max`
	   * using a uniform distribution.
	   *
	   * Syntax:
	   *
	   *     math.random()                // generate a random number between 0 and 1
	   *     math.random(max)             // generate a random number between 0 and max
	   *     math.random(min, max)        // generate a random number between min and max
	   *     math.random(size)            // generate a matrix with random numbers between 0 and 1
	   *     math.random(size, max)       // generate a matrix with random numbers between 0 and max
	   *     math.random(size, min, max)  // generate a matrix with random numbers between min and max
	   *
	   * Examples:
	   *
	   *     math.random();       // returns a random number between 0 and 1
	   *     math.random(100);    // returns a random number between 0 and 100
	   *     math.random(30, 40); // returns a random number between 30 and 40
	   *     math.random([2, 3]); // returns a 2x3 matrix with random numbers between 0 and 1
	   *
	   * See also:
	   *
	   *     randomInt, pickRandom
	   *
	   * @param {Array | Matrix} [size] If provided, an array or matrix with given
	   *                                size and filled with random values is returned
	   * @param {number} [min]  Minimum boundary for the random value, included
	   * @param {number} [max]  Maximum boundary for the random value, excluded
	   * @return {number | Array | Matrix} A random number
	   */
	  // TODO: rework random to a typed-function
	  var random = distribution('uniform').random;
	
	  random.toTex = undefined; // use default template
	
	  return random;
	}
	
	exports.name = 'random';
	exports.factory = factory;


/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var distribution = load(__webpack_require__(518));
	
	  /**
	   * Return a random integer number larger or equal to `min` and smaller than `max`
	   * using a uniform distribution.
	   *
	   * Syntax:
	   *
	   *     math.randomInt(max)             // generate a random integer between 0 and max
	   *     math.randomInt(min, max)        // generate a random integer between min and max
	   *     math.randomInt(size)            // generate a matrix with random integer between 0 and 1
	   *     math.randomInt(size, max)       // generate a matrix with random integer between 0 and max
	   *     math.randomInt(size, min, max)  // generate a matrix with random integer between min and max
	   *
	   * Examples:
	   *
	   *     math.randomInt(100);    // returns a random integer between 0 and 100
	   *     math.randomInt(30, 40); // returns a random integer between 30 and 40
	   *     math.randomInt([2, 3]); // returns a 2x3 matrix with random integers between 0 and 1
	   *
	   * See also:
	   *
	   *     random, pickRandom
	   *
	   * @param {Array | Matrix} [size] If provided, an array or matrix with given
	   *                                size and filled with random values is returned
	   * @param {number} [min]  Minimum boundary for the random value, included
	   * @param {number} [max]  Maximum boundary for the random value, excluded
	   * @return {number | Array | Matrix} A random integer value
	   */
	  // TODO: rework randomInt to a typed-function
	  var randomInt = distribution('uniform').randomInt;
	
	  randomInt.toTex = undefined; // use default template
	
	  return randomInt;
	}
	
	exports.name = 'randomInt';
	exports.factory = factory;


/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(506),
	  __webpack_require__(524),
	  __webpack_require__(140),
	  __webpack_require__(116),
	  __webpack_require__(422),
	  __webpack_require__(112),
	  __webpack_require__(525),
	  __webpack_require__(404)
	];


/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var equal = load(__webpack_require__(140));
	
	  /**
	   * Test element wise whether two matrices are equal.
	   * The function accepts both matrices and scalar values.
	   *
	   * Syntax:
	   *
	   *    math.deepEqual(x, y)
	   *
	   * Examples:
	   *
	   *    math.deepEqual(2, 4);   // returns false
	   *
	   *    a = [2, 5, 1];
	   *    b = [2, 7, 1];
	   *
	   *    math.deepEqual(a, b);   // returns false
	   *    math.equal(a, b);       // returns [true, false, true]
	   *
	   * See also:
	   *
	   *    equal, unequal
	   *
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} x First matrix to compare
	   * @param  {number | BigNumber | Fraction | Complex | Unit | Array | Matrix} y Second matrix to compare
	   * @return {number | BigNumber | Fraction | Complex | Unit | Array | Matrix}
	   *            Returns true when the input matrices have the same size and each of their elements is equal.
	   */
	  var deepEqual = typed('deepEqual', {
	    'any, any': function (x, y) {
	      return _deepEqual(x.valueOf(), y.valueOf());
	    }
	  });
	
	  deepEqual.toTex = undefined; // use default template
	
	  return deepEqual;
	
	  /**
	   * Test whether two arrays have the same size and all elements are equal
	   * @param {Array | *} x
	   * @param {Array | *} y
	   * @return {boolean} Returns true if both arrays are deep equal
	   */
	  function _deepEqual(x, y) {
	    if (Array.isArray(x)) {
	      if (Array.isArray(y)) {
	        var len = x.length;
	        if (len !== y.length) {
	          return false;
	        }
	
	        for (var i = 0; i < len; i++) {
	          if (!_deepEqual(x[i], y[i])) {
	            return false;
	          }
	        }
	
	        return true;
	      }
	      else {
	        return false;
	      }
	    }
	    else {
	      if (Array.isArray(y)) {
	        return false;
	      }
	      else {
	        return equal(x, y);
	      }
	    }
	  }
	}
	
	exports.name = 'deepEqual';
	exports.factory = factory;


/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var nearlyEqual = __webpack_require__(58).nearlyEqual;
	var bigNearlyEqual = __webpack_require__(101);
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm07 = load(__webpack_require__(114));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  var latex = __webpack_require__(83);
	
	  /**
	   * Test whether value x is smaller or equal to y.
	   *
	   * The function returns true when x is smaller than y or the relative
	   * difference between x and y is smaller than the configured epsilon. The
	   * function cannot be used to compare values smaller than approximately 2.22e-16.
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.smallerEq(x, y)
	   *
	   * Examples:
	   *
	   *    math.smaller(1 + 2, 3);        // returns false
	   *    math.smallerEq(1 + 2, 3);      // returns true
	   *
	   * See also:
	   *
	   *    equal, unequal, smaller, larger, largerEq, compare
	   *
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare
	   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare
	   * @return {boolean | Array | Matrix} Returns true when the x is smaller than y, else returns false
	   */
	  var smallerEq = typed('smallerEq', {
	
	    'boolean, boolean': function (x, y) {
	      return x <= y;
	    },
	
	    'number, number': function (x, y) {
	      return x <= y || nearlyEqual(x, y, config.epsilon);
	    },
	
	    'BigNumber, BigNumber': function (x, y) {
	      return x.lte(y) || bigNearlyEqual(x, y, config.epsilon);
	    },
	
	    'Fraction, Fraction': function (x, y) {
	      return x.compare(y) !== 1;
	    },
	
	    'Complex, Complex': function () {
	      throw new TypeError('No ordering relation is defined for complex numbers');
	    },
	
	    'Unit, Unit': function (x, y) {
	      if (!x.equalBase(y)) {
	        throw new Error('Cannot compare units with different base');
	      }
	      return smallerEq(x.value, y.value);
	    },
	
	    'string, string': function (x, y) {
	      return x <= y;
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse + sparse
	              c = algorithm07(x, y, smallerEq);
	              break;
	            default:
	              // sparse + dense
	              c = algorithm03(y, x, smallerEq, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense + sparse
	              c = algorithm03(x, y, smallerEq, false);
	              break;
	            default:
	              // dense + dense
	              c = algorithm13(x, y, smallerEq);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return smallerEq(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return smallerEq(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return smallerEq(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm12(x, y, smallerEq, false);
	          break;
	        default:
	          c = algorithm14(x, y, smallerEq, false);
	          break;
	      }
	      return c;
	    },
	
	    'any, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, smallerEq, true);
	          break;
	        default:
	          c = algorithm14(y, x, smallerEq, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, smallerEq, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, smallerEq, true).valueOf();
	    }
	  });
	
	  smallerEq.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['smallerEq'] + '${args[1]}\\right)'
	  };
	
	  return smallerEq;
	}
	
	exports.name = 'smallerEq';
	exports.factory = factory;


/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(527)
	];


/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	var sign = __webpack_require__(58).sign;
	
	
	function factory (type, config, load, typed) {
	  /**
	   * Compute the erf function of a value using a rational Chebyshev
	   * approximations for different intervals of x.
	   *
	   * This is a translation of W. J. Cody's Fortran implementation from 1987
	   * ( http://www.netlib.org/specfun/erf ). See the AMS publication
	   * "Rational Chebyshev Approximations for the Error Function" by W. J. Cody
	   * for an explanation of this process.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.erf(x)
	   *
	   * Examples:
	   *
	   *    math.erf(0.2);    // returns 0.22270258921047847
	   *    math.erf(-0.5);   // returns -0.5204998778130465
	   *    math.erf(4);      // returns 0.9999999845827421
	   *
	   * @param {number | Array | Matrix} x   A real number
	   * @return {number | Array | Matrix}    The erf of `x`
	   */
	  var erf = typed('erf', {
	    'number': function (x) {
	      var y = Math.abs(x);
	
	      if (y >= MAX_NUM) {
	        return sign(x);
	      }
	      if (y <= THRESH) {
	        return sign(x) * erf1(y);
	      }
	      if (y <= 4.0) {
	        return sign(x) * (1 - erfc2(y));
	      }
	      return sign(x) * (1 - erfc3(y));
	    },
	
	    // TODO: Not sure if there's a way to guarantee some degree of accuracy here.
	    //  Perhaps it would be best to set the precision of the number to that which
	    //  is guaranteed by erf()
	    'BigNumber': function (n) {
	      return new type.BigNumber(erf(n.toNumber()));
	    },
	
	    'Array | Matrix': function (n) {
	      return deepMap(n, erf);
	    }
	
	    // TODO: For complex numbers, use the approximation for the Faddeeva function
	    //  from "More Efficient Computation of the Complex Error Function" (AMS)
	
	  });
	
	  /**
	   * Approximates the error function erf() for x <= 0.46875 using this function:
	   *               n
	   * erf(x) = x * sum (p_j * x^(2j)) / (q_j * x^(2j))
	   *              j=0
	   */
	  function erf1(y) {
	    var ysq = y * y;
	    var xnum = P[0][4]*ysq;
	    var xden = ysq;
	    var i;
	
	    for (i = 0; i < 3; i += 1) {
	      xnum = (xnum + P[0][i]) * ysq;
	      xden = (xden + Q[0][i]) * ysq;
	    }
	    return y * (xnum + P[0][3]) / (xden + Q[0][3]);
	  }
	
	  /**
	   * Approximates the complement of the error function erfc() for
	   * 0.46875 <= x <= 4.0 using this function:
	   *                       n
	   * erfc(x) = e^(-x^2) * sum (p_j * x^j) / (q_j * x^j)
	   *                      j=0
	   */
	  function erfc2(y) {
	    var xnum = P[1][8] * y;
	    var xden = y;
	    var i;
	
	    for (i = 0; i < 7; i += 1) {
	      xnum = (xnum + P[1][i]) * y;
	      xden = (xden + Q[1][i]) * y;
	    }
	    var result = (xnum + P[1][7]) / (xden + Q[1][7]);
	    var ysq = parseInt(y * 16) / 16;
	    var del = (y - ysq) * (y + ysq);
	    return Math.exp(-ysq*ysq) * Math.exp(-del) * result;
	  }
	
	  /**
	   * Approximates the complement of the error function erfc() for x > 4.0 using
	   * this function:
	   *
	   * erfc(x) = (e^(-x^2) / x) * [ 1/sqrt(pi) +
	   *               n
	   *    1/(x^2) * sum (p_j * x^(-2j)) / (q_j * x^(-2j)) ]
	   *              j=0
	   */
	  function erfc3(y) {
	    var ysq = 1 / (y * y);
	    var xnum = P[2][5] * ysq;
	    var xden = ysq;
	    var i;
	
	    for (i = 0; i < 4; i += 1) {
	      xnum = (xnum + P[2][i]) * ysq;
	      xden = (xden + Q[2][i]) * ysq;
	    }
	    var result = ysq * (xnum + P[2][4]) / (xden + Q[2][4]);
	    result = (SQRPI - result) / y;
	    ysq = parseInt(y * 16) / 16;
	    var del = (y - ysq) * (y + ysq);
	    return Math.exp(-ysq*ysq) * Math.exp(-del) * result;
	  }
	
	  erf.toTex = {1: 'erf\\left(${args[0]}\\right)'};
	
	  return erf;
	}
	
	/**
	 * Upper bound for the first approximation interval, 0 <= x <= THRESH
	 * @constant
	 */
	var THRESH = 0.46875;
	
	/**
	 * Constant used by W. J. Cody's Fortran77 implementation to denote sqrt(pi)
	 * @constant
	 */
	var SQRPI = 5.6418958354775628695e-1;
	
	/**
	 * Coefficients for each term of the numerator sum (p_j) for each approximation
	 * interval (see W. J. Cody's paper for more details)
	 * @constant
	 */
	var P = [[
	  3.16112374387056560e00, 1.13864154151050156e02,
	  3.77485237685302021e02, 3.20937758913846947e03,
	  1.85777706184603153e-1
	], [
	  5.64188496988670089e-1, 8.88314979438837594e00,
	  6.61191906371416295e01, 2.98635138197400131e02,
	  8.81952221241769090e02, 1.71204761263407058e03,
	  2.05107837782607147e03, 1.23033935479799725e03,
	  2.15311535474403846e-8
	], [
	  3.05326634961232344e-1, 3.60344899949804439e-1,
	  1.25781726111229246e-1, 1.60837851487422766e-2,
	  6.58749161529837803e-4, 1.63153871373020978e-2
	]];
	
	/**
	 * Coefficients for each term of the denominator sum (q_j) for each approximation
	 * interval (see W. J. Cody's paper for more details)
	 * @constant
	 */
	var Q = [[
	  2.36012909523441209e01, 2.44024637934444173e02,
	  1.28261652607737228e03, 2.84423683343917062e03
	], [
	  1.57449261107098347e01, 1.17693950891312499e02,
	  5.37181101862009858e02, 1.62138957456669019e03,
	  3.29079923573345963e03, 4.36261909014324716e03,
	  3.43936767414372164e03, 1.23033935480374942e03
	], [
	  2.56852019228982242e00, 1.87295284992346047e00,
	  5.27905102951428412e-1, 6.05183413124413191e-2,
	  2.33520497626869185e-3
	]];
	
	/**
	 * Maximum/minimum safe numbers to input to erf() (in ES6+, this number is
	 * Number.[MAX|MIN]_SAFE_INTEGER). erf() for all numbers beyond this limit will
	 * return 1
	 */
	var MAX_NUM = Math.pow(2, 53);
	
	
	exports.name = 'erf';
	exports.factory = factory;


/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(529),
	  __webpack_require__(378),
	  __webpack_require__(383),
	  __webpack_require__(530),
	  __webpack_require__(388),
	  __webpack_require__(531),
	  __webpack_require__(532),
	  __webpack_require__(533),
	  __webpack_require__(534),
	  __webpack_require__(514),
	  __webpack_require__(535)
	];


/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var flatten = __webpack_require__(91).flatten;
	
	function factory (type, config, load, typed) {
	  var abs      = load(__webpack_require__(138));
	  var map      = load(__webpack_require__(375));
	  var median   = load(__webpack_require__(530));
	  var subtract = load(__webpack_require__(129));
	
	  /**
	   * Compute the median absolute deviation of a matrix or a list with values.
	   * The median absolute deviation is defined as the median of the absolute
	   * deviations from the median.
	   *
	   * Syntax:
	   *
	   *     math.mad(a, b, c, ...)
	   *     math.mad(A)
	   *
	   * Examples:
	   *
	   *     math.mad(10, 20, 30);             // returns 10
	   *     math.mad([1, 2, 3]);              // returns 1
	   *     math.mad([[1, 2, 3], [4, 5, 6]]); // returns 1.5
	   *
	   * See also:
	   *
	   *     median, mean, std, abs
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or multiple scalar values.
	   * @return {*} The median absolute deviation.
	   */
	  var mad = typed('mad', {
	    // mad([a, b, c, d, ...])
	    'Array | Matrix': _mad,
	
	    // mad(a, b, c, d, ...)
	    '...': function (args) {
	      return _mad(args);
	    }
	  });
	
	  mad.toTex = undefined; // use default template
	
	  return mad;
	
	  function _mad(array) {
	    array = flatten(array.valueOf());
	
	    if (array.length === 0) {
	      throw new Error('Cannot calculate median absolute deviation of an empty array');
	    }
	
	    var med = median(array);
	    return median(map(array, function (value) {
	      return abs(subtract(value, med));
	    }));
	  }
	}
	
	exports.name = 'mad';
	exports.factory = factory;


/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var flatten = __webpack_require__(91).flatten;
	var reduce = __webpack_require__(380);
	var containsCollections = __webpack_require__(381);
	
	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(105));
	  var divide = load(__webpack_require__(133));
	  var compare = load(__webpack_require__(506));
	  var partitionSelect = load(__webpack_require__(505));
	
	  /**
	   * Compute the median of a matrix or a list with values. The values are
	   * sorted and the middle value is returned. In case of an even number of
	   * values, the average of the two middle values is returned.
	   * Supported types of values are: Number, BigNumber, Unit
	   *
	   * In case of a (multi dimensional) array or matrix, the median of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.median(a, b, c, ...)
	   *     math.median(A)
	   *
	   * Examples:
	   *
	   *     math.median(5, 2, 7);        // returns 5
	   *     math.median([3, -1, 5, 7]);  // returns 4
	   *
	   * See also:
	   *
	   *     mean, min, max, sum, prod, std, var, quantileSeq
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The median
	   */
	  var median = typed('median', {
	    // median([a, b, c, d, ...])
	    'Array | Matrix': _median,
	
	    // median([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function (array, dim) {
	      // TODO: implement median(A, dim)
	      throw new Error('median(A, dim) is not yet supported');
	      //return reduce(arguments[0], arguments[1], ...);
	    },
	
	    // median(a, b, c, d, ...)
	    '...': function (args) {
	      if (containsCollections(args)) {
	          throw new TypeError('Scalar values expected in function median');
	      }
	
	      return _median(args);
	    }
	  });
	
	
	  /**
	   * Recursively calculate the median of an n-dimensional array
	   * @param {Array} array
	   * @return {Number} median
	   * @private
	   */
	  function _median(array) {
	    array = flatten(array.valueOf());
	
	    var num = array.length;
	    if (num == 0) {
	      throw new Error('Cannot calculate median of an empty array');
	    }
	
	    if (num % 2 == 0) {
	      // even: return the average of the two middle values
	      var mid = num / 2 - 1;
	      var right = partitionSelect(array, mid + 1);
	
	      // array now partitioned at mid + 1, take max of left part
	      var left = array[mid];
	      for (var i = 0; i < mid; ++i) {
	        if (compare(array[i], left) > 0) {
	          left = array[i];
	        }
	      }
	
	      return middle2(left, right);
	    }
	    else {
	      // odd: return the middle value
	      var m = partitionSelect(array, (num - 1) / 2);
	
	      return middle(m);
	    }
	  }
	
	  // helper function to type check the middle value of the array
	  var middle = typed({
	    'number | BigNumber | Unit': function (value) {
	      return value;
	    }
	  });
	
	  // helper function to type check the two middle value of the array
	  var middle2 = typed({
	    'number | BigNumber | Unit, number | BigNumber | Unit': function (left, right) {
	      return divide(add(left, right), 2);
	    }
	  });
	
	  median.toTex = undefined; // use default template
	
	  return median;
	}
	
	exports.name = 'median';
	exports.factory = factory;


/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var flatten = __webpack_require__(91).flatten;
	
	function factory (type, config, load, typed) {
	
	  /**
	  * Computes the mode of a set of numbers or a list with values(numbers or characters).
	  * If there are more than one modes, it returns a list of those values.
	  *
	  * Syntax:
	  *
	  *     math.mode(a, b, c, ...)
	  *     math.mode(A)
	  *
	  * Examples:
	  *
	  *     math.mode(2, 1, 4, 3, 1);                            // returns [1]
	  *     math.mode([1, 2.7, 3.2, 4, 2.7]);                    // returns [2.7]
	  *     math.mode(1, 4, 6, 1, 6)                             // returns [1, 6]
	  *     math.mode('a','a','b','c')                           // returns ["a"]
	  *     math.mode(1, 1.5, 'abc')                             // returns [1, 1.5, "abc"]
	  *
	  * See also:
	  *
	  *     median,
	  *     mean
	  *
	  * @param {... *} args  A single matrix
	  * @return {*} The mode of all values
	  */
	
	  var mode = typed('mode', {
	    'Array | Matrix' : _mode,
	    
	    '...': function (args) {
	      return _mode(args);
	    }
	  });
	  
	  return mode;
	
	  /**
	   * Calculates the mode in an 1-dimensional array
	   * @param {Array} values
	   * @return {number} mode
	   * @private
	   */
	  function _mode(values) {
	    values = flatten(values.valueOf());
	    var num = values.length;
	    if (num == 0) {
	      throw new Error('Cannot calculate mode of an empty array');
	    }
	    
	    var count = {},
	        mode = [],
	        max = 0;
	    for (var i in values) {
	      if (!(values[i] in count)){
	        count[values[i]] = 0;
	      }
	      count[values[i]]++;
	      if (count[values[i]] == max){
	        mode.push(values[i]);
	      }
	      else if (count[values[i]] > max) {
	        max = count[values[i]];
	        mode = [values[i]];
	      }
	    }
	    return mode; 
	  };
	}
	
	exports.name = 'mode';
	exports.factory = factory;

/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepForEach = __webpack_require__(379);
	
	function factory (type, config, load, typed) {
	  var multiply = load(__webpack_require__(132));
	
	  /**
	   * Compute the product of a matrix or a list with values.
	   * In case of a (multi dimensional) array or matrix, the sum of all
	   * elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.prod(a, b, c, ...)
	   *     math.prod(A)
	   *
	   * Examples:
	   *
	   *     math.multiply(2, 3);           // returns 6
	   *     math.prod(2, 3);               // returns 6
	   *     math.prod(2, 3, 4);            // returns 24
	   *     math.prod([2, 3, 4]);          // returns 24
	   *     math.prod([[2, 5], [4, 3]]);   // returns 120
	   *
	   * See also:
	   *
	   *    mean, median, min, max, sum, std, var
	   *
	   * @param {... *} args  A single matrix or or multiple scalar values
	   * @return {*} The product of all values
	   */
	  var prod = typed('prod', {
	    // prod([a, b, c, d, ...])
	    'Array | Matrix': _prod,
	
	    // prod([a, b, c, d, ...], dim)
	    'Array | Matrix, number | BigNumber': function (array, dim) {
	      // TODO: implement prod(A, dim)
	      throw new Error('prod(A, dim) is not yet supported');
	      //return reduce(arguments[0], arguments[1], math.prod);
	    },
	
	    // prod(a, b, c, d, ...)
	    '...': function (args) {
	      return _prod(args);
	    }
	  });
	
	  prod.toTex = undefined; // use default template
	
	  return prod;
	
	  /**
	   * Recursively calculate the product of an n-dimensional array
	   * @param {Array} array
	   * @return {number} prod
	   * @private
	   */
	  function _prod(array) {
	    var prod = undefined;
	
	    deepForEach(array, function (value) {
	      prod = (prod === undefined) ? value : multiply(prod, value);
	    });
	
	    if (prod === undefined) {
	      throw new Error('Cannot calculate prod of an empty array');
	    }
	
	    return prod;
	  }
	}
	
	exports.name = 'prod';
	exports.factory = factory;


/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isInteger = __webpack_require__(58).isInteger;
	var isNumber = __webpack_require__(58).isNumber;
	var flatten = __webpack_require__(91).flatten;
	var isCollection = __webpack_require__(377);
	
	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(103));
	  var multiply = load(__webpack_require__(136));
	  var partitionSelect = load(__webpack_require__(505));
	  var compare = load(__webpack_require__(506));
	
	  /**
	   * Compute the prob order quantile of a matrix or a list with values.
	   * The sequence is sorted and the middle value is returned.
	   * Supported types of sequence values are: Number, BigNumber, Unit
	   * Supported types of probability are: Number, BigNumber
	   *
	   * In case of a (multi dimensional) array or matrix, the prob order quantile
	   * of all elements will be calculated.
	   *
	   * Syntax:
	   *
	   *     math.quantileSeq(A, prob[, sorted])
	   *     math.quantileSeq(A, [prob1, prob2, ...][, sorted])
	   *     math.quantileSeq(A, N[, sorted])
	   *
	   * Examples:
	   *
	   *     math.quantileSeq([3, -1, 5, 7], 0.5);         // returns 4
	   *     math.quantileSeq([3, -1, 5, 7], [1/3, 2/3]);  // returns [3, 5]
	   *     math.quantileSeq([3, -1, 5, 7], 2);           // returns [3, 5]
	   *     math.quantileSeq([-1, 3, 5, 7], 0.5, true);   // returns 4
	   *
	   * See also:
	   *
	   *     median, mean, min, max, sum, prod, std, var
	   *
	   * @param {Array, Matrix} data                A single matrix or Array
	   * @param {Number, BigNumber, Array} probOrN  prob is the order of the quantile, while N is
	   *                                            the amount of evenly distributed steps of
	   *                                            probabilities; only one of these options can
	   *                                            be provided
	   * @param {Boolean} sorted=false              is data sorted in ascending order
	   * @return {Number, BigNumber, Unit, Array}   Quantile(s)
	   */
	  function quantileSeq(data, probOrN, sorted) {
	    var probArr, dataArr, one;
	
	    if (arguments.length < 2 || arguments.length > 3) {
	      throw new SyntaxError('Function quantileSeq requires two or three parameters');
	    }
	
	    if (isCollection(data)) {
	      sorted = sorted || false;
	      if (typeof sorted === 'boolean') {
	        dataArr = data.valueOf();
	        if (isNumber(probOrN)) {
	          if (probOrN < 0) {
	            throw new Error('N/prob must be non-negative');
	          }
	
	          if (probOrN <= 1) {
	            // quantileSeq([a, b, c, d, ...], prob[,sorted])
	            return _quantileSeq(dataArr, probOrN, sorted);
	          }
	
	          if (probOrN > 1) {
	            // quantileSeq([a, b, c, d, ...], N[,sorted])
	            if (!isInteger(probOrN)) {
	              throw new Error('N must be a positive integer');
	            }
	
	            var nPlusOne = probOrN + 1;
	            probArr = new Array(probOrN);
	            for (var i = 0; i < probOrN;) {
	              probArr[i] = _quantileSeq(dataArr, (++i) / nPlusOne, sorted);
	            }
	            return probArr;
	          }
	        }
	
	        if (probOrN && probOrN.isBigNumber) {
	          if (probOrN.isNegative()) {
	            throw new Error('N/prob must be non-negative');
	          }
	
	          one = new probOrN.constructor(1);
	
	          if (probOrN.lte(one)) {
	            // quantileSeq([a, b, c, d, ...], prob[,sorted])
	            return _quantileSeq(dataArr, probOrN, sorted);
	          }
	
	          if (probOrN.gt(one)) {
	            // quantileSeq([a, b, c, d, ...], N[,sorted])
	            if (!probOrN.isInteger()) {
	              throw new Error('N must be a positive integer');
	            }
	
	            // largest possible Array length is 2^32-1;
	            // 2^32 < 10^15, thus safe conversion guaranteed
	            var intN = probOrN.toNumber();
	            if (intN > 4294967295) {
	              throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
	            }
	
	            var nPlusOne = new type.BigNumber(intN + 1);
	            probArr = new Array(intN);
	            for (var i = 0; i < intN;) {
	              probArr[i] = _quantileSeq(dataArr, new type.BigNumber(++i).div(nPlusOne), sorted);
	            }
	            return probArr;
	          }
	        }
	
	        if (Array.isArray(probOrN)) {
	          // quantileSeq([a, b, c, d, ...], [prob1, prob2, ...][,sorted])
	          probArr = new Array(probOrN.length);
	          for (var i = 0; i < probArr.length; ++i) {
	            var currProb = probOrN[i];
	            if (isNumber(currProb)) {
	              if (currProb < 0 || currProb > 1) {
	                throw new Error('Probability must be between 0 and 1, inclusive');
	              }
	            } else if (currProb && currProb.isBigNumber) {
	              one = new currProb.constructor(1);
	              if (currProb.isNegative() || currProb.gt(one)) {
	                throw new Error('Probability must be between 0 and 1, inclusive');
	              }
	            } else {
	              throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	            }
	
	            probArr[i] = _quantileSeq(dataArr, currProb, sorted);
	          }
	          return probArr;
	        }
	
	        throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	      }
	
	      throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	    }
	
	    throw new TypeError('Unexpected type of argument in function quantileSeq'); // FIXME: becomes redundant when converted to typed-function
	  }
	
	  /**
	   * Calculate the prob order quantile of an n-dimensional array.
	   * 
	   * @param {Array} array
	   * @param {Number, BigNumber} prob
	   * @param {Boolean} sorted
	   * @return {Number, BigNumber, Unit} prob order quantile
	   * @private
	   */
	  function _quantileSeq(array, prob, sorted) {
	    var flat = flatten(array);
	    var len = flat.length;
	    if (len === 0) {
	      throw new Error('Cannot calculate quantile of an empty sequence');
	    }
	
	    if (isNumber(prob)) {
	      var index = prob * (len-1);
	      var fracPart = index % 1;
	      if (fracPart === 0) {
	        var value = sorted ? flat[index] : partitionSelect(flat, index);
	
	        validate(value);
	
	        return value;
	      }
	
	      var integerPart = Math.floor(index);
	
	      var left, right;
	      if (sorted) {
	        left = flat[integerPart];
	        right = flat[integerPart+1];
	      } else {
	        right = partitionSelect(flat, integerPart+1);
	
	        // max of partition is kth largest
	        left = flat[integerPart];
	        for (var i = 0; i < integerPart; ++i) {
	          if (compare(flat[i], left) > 0) {
	            left = flat[i];
	          }
	        }
	      }
	
	      validate(left);
	      validate(right);
	
	      // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
	      return add(multiply(left, 1 - fracPart), multiply(right, fracPart));
	    }
	
	    // If prob is a BigNumber
	    var index = prob.times(len-1);
	    if (index.isInteger()) {
	      index = index.toNumber();
	      var value = sorted ? flat[index] : partitionSelect(flat, index);
	
	      validate(value);
	
	      return value;
	    }
	
	    var integerPart = index.floor();
	    var fracPart = index.minus(integerPart);
	    var integerPartNumber = integerPart.toNumber();
	
	    var left, right;
	    if (sorted) {
	      left = flat[integerPartNumber];
	      right = flat[integerPartNumber+1];
	    } else {
	      right = partitionSelect(flat, integerPartNumber+1);
	
	      // max of partition is kth largest
	      left = flat[integerPartNumber];
	      for (var i = 0; i < integerPartNumber; ++i) {
	        if (compare(flat[i], left) > 0) {
	          left = flat[i];
	        }
	      }
	    }
	
	    validate(left);
	    validate(right);
	
	    // Q(prob) = (1-f)*A[floor(index)] + f*A[floor(index)+1]
	    var one = new fracPart.constructor(1);
	    return add(multiply(left, one.minus(fracPart)), multiply(right, fracPart));
	  }
	
	  /**
	   * Check if array value types are valid, throw error otherwise.
	   * @param {number | BigNumber | Unit} x
	   * @param {number | BigNumber | Unit} x
	   * @private
	   */
	  var validate = typed({
	    'number | BigNumber | Unit': function (x) {
	      return x;
	    }
	  });
	
	  return quantileSeq;
	}
	
	exports.name = 'quantileSeq';
	exports.factory = factory;


/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var sqrt       = load(__webpack_require__(406));
	  var variance   = load(__webpack_require__(535));
	
	  /**
	   * Compute the standard deviation of a matrix or a  list with values.
	   * The standard deviations is defined as the square root of the variance:
	   * `std(A) = sqrt(var(A))`.
	   * In case of a (multi dimensional) array or matrix, the standard deviation
	   * over all elements will be calculated.
	   *
	   * Optionally, the type of normalization can be specified as second
	   * parameter. The parameter `normalization` can be one of the following values:
	   *
	   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
	   * - 'uncorrected'        The sum of squared errors is divided by n
	   * - 'biased'             The sum of squared errors is divided by (n + 1)
	   *
	   * Syntax:
	   *
	   *     math.std(a, b, c, ...)
	   *     math.std(A)
	   *     math.std(A, normalization)
	   *
	   * Examples:
	   *
	   *     math.std(2, 4, 6);                     // returns 2
	   *     math.std([2, 4, 6, 8]);                // returns 2.581988897471611
	   *     math.std([2, 4, 6, 8], 'uncorrected'); // returns 2.23606797749979
	   *     math.std([2, 4, 6, 8], 'biased');      // returns 2
	   *
	   *     math.std([[1, 2, 3], [4, 5, 6]]);      // returns 1.8708286933869707
	   *
	   * See also:
	   *
	   *    mean, median, max, min, prod, sum, var
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or or multiple scalar values
	   * @param {string} [normalization='unbiased']
	   *                        Determines how to normalize the variance.
	   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
	   * @return {*} The standard deviation
	   */
	  var std = typed('std', {
	    // std([a, b, c, d, ...])
	    'Array | Matrix': _std,
	
	    // std([a, b, c, d, ...], normalization)
	    'Array | Matrix, string': _std,
	
	    // std(a, b, c, d, ...)
	    '...': function (args) {
	      return _std(args);
	    }
	  });
	  
	  std.toTex = undefined; // use default template
	
	  return std;
	
	  function _std(array, normalization) {
	    if (array.length == 0) {
	      throw new SyntaxError('Function std requires one or more parameters (0 provided)');
	    }
	
	    return sqrt(variance.apply(null, arguments));
	  }
	}
	
	exports.name = 'std';
	exports.factory = factory;


/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var DEFAULT_NORMALIZATION = 'unbiased';
	
	var deepForEach = __webpack_require__(379);
	
	function factory (type, config, load, typed) {
	  var add = load(__webpack_require__(105));
	  var subtract = load(__webpack_require__(129));
	  var multiply = load(__webpack_require__(132));
	  var divide = load(__webpack_require__(133));
	
	  /**
	   * Compute the variance of a matrix or a  list with values.
	   * In case of a (multi dimensional) array or matrix, the variance over all
	   * elements will be calculated.
	   *
	   * Optionally, the type of normalization can be specified as second
	   * parameter. The parameter `normalization` can be one of the following values:
	   *
	   * - 'unbiased' (default) The sum of squared errors is divided by (n - 1)
	   * - 'uncorrected'        The sum of squared errors is divided by n
	   * - 'biased'             The sum of squared errors is divided by (n + 1)
	   *
	   * Note that older browser may not like the variable name `var`. In that
	   * case, the function can be called as `math['var'](...)` instead of
	   * `math.var(...)`.
	   *
	   * Syntax:
	   *
	   *     math.var(a, b, c, ...)
	   *     math.var(A)
	   *     math.var(A, normalization)
	   *
	   * Examples:
	   *
	   *     math.var(2, 4, 6);                     // returns 4
	   *     math.var([2, 4, 6, 8]);                // returns 6.666666666666667
	   *     math.var([2, 4, 6, 8], 'uncorrected'); // returns 5
	   *     math.var([2, 4, 6, 8], 'biased');      // returns 4
	   *
	   *     math.var([[1, 2, 3], [4, 5, 6]]);      // returns 3.5
	   *
	   * See also:
	   *
	   *    mean, median, max, min, prod, std, sum
	   *
	   * @param {Array | Matrix} array
	   *                        A single matrix or or multiple scalar values
	   * @param {string} [normalization='unbiased']
	   *                        Determines how to normalize the variance.
	   *                        Choose 'unbiased' (default), 'uncorrected', or 'biased'.
	   * @return {*} The variance
	   */
	  var variance = typed('variance', {
	    // var([a, b, c, d, ...])
	    'Array | Matrix': function (array) {
	      return _var(array, DEFAULT_NORMALIZATION);
	    },
	
	    // var([a, b, c, d, ...], normalization)
	    'Array | Matrix, string': _var,
	
	    // var(a, b, c, d, ...)
	    '...': function (args) {
	      return _var(args, DEFAULT_NORMALIZATION);
	    }
	  });
	
	  variance.toTex = '\\mathrm{Var}\\left(${args}\\right)';
	
	  return variance;
	
	  /**
	   * Recursively calculate the variance of an n-dimensional array
	   * @param {Array} array
	   * @param {string} normalization
	   *                        Determines how to normalize the variance:
	   *                        - 'unbiased'    The sum of squared errors is divided by (n - 1)
	   *                        - 'uncorrected' The sum of squared errors is divided by n
	   *                        - 'biased'      The sum of squared errors is divided by (n + 1)
	   * @return {number | BigNumber} variance
	   * @private
	   */
	  function _var(array, normalization) {
	    var sum = 0;
	    var num = 0;
	
	    if (array.length == 0) {
	      throw new SyntaxError('Function var requires one or more parameters (0 provided)');
	    }
	
	    // calculate the mean and number of elements
	    deepForEach(array, function (value) {
	      sum = add(sum, value);
	      num++;
	    });
	    if (num === 0) throw new Error('Cannot calculate var of an empty array');
	
	    var mean = divide(sum, num);
	
	    // calculate the variance
	    sum = 0;
	    deepForEach(array, function (value) {
	      var diff = subtract(value, mean);
	      sum = add(sum, multiply(diff, diff));
	    });
	
	    switch (normalization) {
	      case 'uncorrected':
	        return divide(sum, num);
	
	      case 'biased':
	        return divide(sum, num + 1);
	
	      case 'unbiased':
	        var zero = (sum && sum.isBigNumber === true) ? new type.BigNumber(0) : 0;
	        return (num == 1) ? zero : divide(sum, num - 1);
	
	      default:
	        throw new Error('Unknown normalization "' + normalization + '". ' +
	        'Choose "unbiased" (default), "uncorrected", or "biased".');
	    }
	  }
	}
	
	exports.name = 'var';
	exports.factory = factory;


/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(142),
	  __webpack_require__(537)
	];


/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var isString = __webpack_require__(74).isString;
	var format = __webpack_require__(74).format;
	
	function factory (type, config, load, typed) {
	  /**
	   * Interpolate values into a string template.
	   *
	   * Syntax:
	   *
	   *     math.print(template, values)
	   *     math.print(template, values, precision)
	   *     math.print(template, values, options)
	   *
	   * Example usage:
	   *
	   *     // the following outputs: 'Lucy is 5 years old'
	   *     math.print('Lucy is $age years old', {age: 5});
	   *
	   *     // the following outputs: 'The value of pi is 3.141592654'
	   *     math.print('The value of pi is $pi', {pi: math.pi}, 10);
	   *
	   *     // the following outputs: 'hello Mary! The date is 2013-03-23'
	   *     math.print('Hello $user.name! The date is $date', {
	   *       user: {
	   *         name: 'Mary',
	   *       },
	   *       date: new Date(2013, 2, 23).toISOString().substring(0, 10)
	   *     });
	   *
	   * See also:
	   *
	   *     format
	   *
	   * @param {string} template     A string containing variable placeholders.
	   * @param {Object} values       An object containing variables which will
	   *                              be filled in in the template.
	   * @param {number | Object} [options]  Formatting options,
	   *                              or the number of digits to format numbers.
	   *                              See function math.format for a description
	   *                              of all options.
	   * @return {string} Interpolated string
	   */
	  var print = typed ('print', {
	    'string, Object': _print,
	    'string, Object, number | Object': _print
	  });
	
	  print.toTex = undefined; // use default template
	
	  return print;
	}
	
	/**
	 * Interpolate values into a string template.
	 * @param {string} template
	 * @param {Object} values
	 * @param {number | Object} [options]
	 * @returns {string} Interpolated string
	 * @private
	 */
	function _print(template, values, options) {
	  return template.replace(/\$([\w\.]+)/g, function (original, key) {
	        var keys = key.split('.');
	        var value = values[keys.shift()];
	        while (keys.length && value !== undefined) {
	          var k = keys.shift();
	          value = k ? value[k] : value + '.';
	        }
	
	        if (value !== undefined) {
	          if (!isString(value)) {
	            return format(value, options);
	          }
	          else {
	            return value;
	          }
	        }
	
	        return original;
	      }
	  );
	}
	
	exports.name = 'print';
	exports.factory = factory;


/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(539),
	  __webpack_require__(540),
	  __webpack_require__(541),
	  __webpack_require__(542),
	  __webpack_require__(543),
	  __webpack_require__(544),
	  __webpack_require__(545),
	  __webpack_require__(546),
	  __webpack_require__(547),
	  __webpack_require__(548),
	  __webpack_require__(549),
	  __webpack_require__(550),
	  __webpack_require__(551),
	  __webpack_require__(552),
	  __webpack_require__(553),
	  __webpack_require__(554),
	  __webpack_require__(555),
	  __webpack_require__(556),
	  __webpack_require__(557),
	  __webpack_require__(558),
	  __webpack_require__(559),
	  __webpack_require__(560),
	  __webpack_require__(561),
	  __webpack_require__(562),
	  __webpack_require__(563)
	];


/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Calculate the inverse cosine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acos(x)
	   *
	   * Examples:
	   *
	   *    math.acos(0.5);           // returns number 1.0471975511965979
	   *    math.acos(math.cos(1.5)); // returns number 1.5
	   *
	   *    math.acos(2);             // returns Complex 0 + 1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    cos, atan, asin
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc cosine of x
	   */
	  var acos = typed('acos', {
	    'number': function (x) {
	      if ((x >= -1 && x <= 1) || config.predictable) {
	        return Math.acos(x);
	      }
	      else {
	        return new type.Complex(x, 0).acos();
	      }
	    },
	
	    'Complex': function (x) {
	      return x.acos();
	    },
	
	    'BigNumber': function (x) {
	      return x.acos();
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, acos);
	    }
	  });
	
	  acos.toTex = {1: '\\cos^{-1}\\left(${args[0]}\\right)'};
	
	  return acos;
	}
	
	exports.name = 'acos';
	exports.factory = factory;


/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Calculate the hyperbolic arccos of a value,
	   * defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acosh(x)
	   *
	   * Examples:
	   *
	   *    math.acosh(1.5);       // returns 0.9624236501192069
	   *
	   * See also:
	   *
	   *    cosh, asinh, atanh
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccosine of x
	   */
	  var acosh = typed('acosh', {
	    'number': function (x) {
	      if (x >= 1 || config.predictable) {
	        return _acosh(x);
	      }
	      if (x <= -1) {
	        return new type.Complex(Math.log(Math.sqrt(x*x - 1) - x), Math.PI);
	      }
	      return new type.Complex(x, 0).acosh();
	    },
	
	    'Complex': function (x) {
	      return x.acosh();
	    },
	
	    'BigNumber': function (x) {
	      return x.acosh();
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, acosh);
	    }
	  });
	
	  acosh.toTex = {1: '\\cosh^{-1}\\left(${args[0]}\\right)'};
	
	  return acosh;
	}
	
	/**
	 * Calculate the hyperbolic arccos of a number
	 * @param {number} x
	 * @return {number}
	 * @private
	 */
	var _acosh = Math.acosh || function (x) {
	  return Math.log(Math.sqrt(x*x - 1) + x)
	};
	
	exports.name = 'acosh';
	exports.factory = factory;


/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Calculate the inverse cotangent of a value, defined as `acot(x) = atan(1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acot(x)
	   *
	   * Examples:
	   *
	   *    math.acot(0.5);           // returns number 0.4636476090008061
	   *    math.acot(math.cot(1.5)); // returns number 1.5
	   *
	   *    math.acot(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    cot, atan
	   *
	   * @param {number | Complex | Array | Matrix} x   Function input
	   * @return {number | Complex | Array | Matrix} The arc cotangent of x
	   */
	  var acot = typed('acot', {
	    'number': function (x) {
	      return Math.atan(1 / x);
	    },
	
	    'Complex': function (x) {
	      return x.acot();
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(1).div(x).atan();
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, acot);
	    }
	  });
	
	  acot.toTex = {1: '\\cot^{-1}\\left(${args[0]}\\right)'};
	
	  return acot;
	}
	
	exports.name = 'acot';
	exports.factory = factory;


/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Calculate the hyperbolic arccotangent of a value,
	   * defined as `acoth(x) = atanh(1/x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acoth(x)
	   *
	   * Examples:
	   *
	   *    math.acoth(0.5);       // returns 0.8047189562170503
	   *
	   * See also:
	   *
	   *    acsch, asech
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccotangent of x
	   */
	  var acoth = typed('acoth', {
	    'number': function (x) {
	      if (x >= 1 || x <= -1 || config.predictable) {
	        return isFinite(x) ? (Math.log((x+1)/x) + Math.log(x/(x-1))) / 2 : 0;
	      }
	      return new type.Complex(x, 0).acoth();
	    },
	
	    'Complex': function (x) {
	      return x.acoth();
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(1).div(x).atanh();
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, acoth);
	    }
	  });
	
	  acoth.toTex = {1: '\\coth^{-1}\\left(${args[0]}\\right)'};
	
	  return acoth;
	}
	
	exports.name = 'acoth';
	exports.factory = factory;


/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Calculate the inverse cosecant of a value, defined as `acsc(x) = asin(1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acsc(x)
	   *
	   * Examples:
	   *
	   *    math.acsc(0.5);           // returns number 0.5235987755982989
	   *    math.acsc(math.csc(1.5)); // returns number ~1.5
	   *
	   *    math.acsc(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    csc, asin, asec
	   *
	   * @param {number | Complex | Array | Matrix} x   Function input
	   * @return {number | Complex | Array | Matrix} The arc cosecant of x
	   */
	  var acsc = typed('acsc', {
	    'number': function (x) {
	      if (x <= -1 || x >= 1 || config.predictable) {
	        return Math.asin(1 / x);
	      }
	      return new type.Complex(x, 0).acsc();
	    },
	
	    'Complex': function (x) {
	      return x.acsc();
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(1).div(x).asin();
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, acsc);
	    }
	  });
	
	  acsc.toTex = {1: '\\csc^{-1}\\left(${args[0]}\\right)'};
	
	  return acsc;
	}
	
	exports.name = 'acsc';
	exports.factory = factory;


/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Calculate the hyperbolic arccosecant of a value,
	   * defined as `acsch(x) = asinh(1/x) = ln(1/x + sqrt(1/x^2 + 1))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.acsch(x)
	   *
	   * Examples:
	   *
	   *    math.acsch(0.5);       // returns 1.4436354751788103
	   *
	   * See also:
	   *
	   *    asech, acoth
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arccosecant of x
	   */
	  var acsch = typed('acsch', {
	    'number': function (x) {
	      x = 1 / x;
	      return Math.log(x + Math.sqrt(x*x + 1));
	    },
	
	    'Complex': function (x) {
	      return x.acsch();
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(1).div(x).asinh();
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, acsch);
	    }
	  });
	
	  acsch.toTex = {1: '\\mathrm{csch}^{-1}\\left(${args[0]}\\right)'};
	
	  return acsch;
	}
	
	exports.name = 'acsch';
	exports.factory = factory;


/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Calculate the inverse secant of a value. Defined as `asec(x) = acos(1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asec(x)
	   *
	   * Examples:
	   *
	   *    math.asec(0.5);           // returns 1.0471975511965979
	   *    math.asec(math.sec(1.5)); // returns 1.5
	   *
	   *    math.asec(2);             // returns 0 + 1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    acos, acot, acsc
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} The arc secant of x
	   */
	  var asec = typed('asec', {
	    'number': function (x) {
	      if (x <= -1 || x >= 1 || config.predictable) {
	        return Math.acos(1 / x);
	      }
	      return new type.Complex(x, 0).asec();
	    },
	
	    'Complex': function (x) {
	      return x.asec();
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(1).div(x).acos();
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, asec);
	    }
	  });
	
	  asec.toTex = {1: '\\sec^{-1}\\left(${args[0]}\\right)'};
	
	  return asec;
	}
	
	exports.name = 'asec';
	exports.factory = factory;


/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  var acosh = typed.find(load(__webpack_require__(540)), ['Complex']);
	
	  /**
	   * Calculate the hyperbolic arcsecant of a value,
	   * defined as `asech(x) = acosh(1/x) = ln(sqrt(1/x^2 - 1) + 1/x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asech(x)
	   *
	   * Examples:
	   *
	   *    math.asech(0.5);       // returns 1.3169578969248166
	   *
	   * See also:
	   *
	   *    acsch, acoth
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arcsecant of x
	   */
	  var asech = typed('asech', {
	    'number': function (x) {
	      if ((x <= 1 && x >= -1) || config.predictable) {
	        x = 1 / x;
	
	        var ret = Math.sqrt(x*x - 1);
	        if (x > 0 || config.predictable) {
	          return Math.log(ret + x);
	        }
	
	        return new type.Complex(Math.log(ret - x), Math.PI);
	      }
	
	      return new type.Complex(x, 0).asech();
	    },
	
	    'Complex': function (x) {
	      return x.asech()
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(1).div(x).acosh();
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, asech);
	    }
	  });
	
	  asech.toTex = {1: '\\mathrm{sech}^{-1}\\left(${args[0]}\\right)'};
	
	  return asech;
	}
	
	exports.name = 'asech';
	exports.factory = factory;


/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Calculate the inverse sine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asin(x)
	   *
	   * Examples:
	   *
	   *    math.asin(0.5);           // returns number 0.5235987755982989
	   *    math.asin(math.sin(1.5)); // returns number ~1.5
	   *
	   *    math.asin(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    sin, atan, acos
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc sine of x
	   */
	  var asin = typed('asin', {
	    'number': function (x) {
	      if ((x >= -1 && x <= 1) || config.predictable) {
	        return Math.asin(x);
	      }
	      else {
	        return new type.Complex(x, 0).asin();
	      }
	    },
	
	    'Complex': function (x) {
	      return x.asin();
	    },
	
	    'BigNumber': function (x) {
	      return x.asin();
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since asin(0) = 0
	      return deepMap(x, asin, true);
	    }
	  });
	
	  asin.toTex = {1: '\\sin^{-1}\\left(${args[0]}\\right)'};
	
	  return asin;
	}
	
	exports.name = 'asin';
	exports.factory = factory;


/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Calculate the hyperbolic arcsine of a value,
	   * defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.asinh(x)
	   *
	   * Examples:
	   *
	   *    math.asinh(0.5);       // returns 0.48121182505960347
	   *
	   * See also:
	   *
	   *    acosh, atanh
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arcsine of x
	   */
	  var asinh = typed('asinh', {
	    'number': Math.asinh || function (x) {
	      return Math.log(Math.sqrt(x*x + 1) + x);
	    },
	
	    'Complex': function (x) {
	        return x.asinh();
	    },
	
	    'BigNumber': function (x) {
	      return x.asinh();
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since asinh(0) = 0
	      return deepMap(x, asinh, true);
	    }
	  });
	
	  asinh.toTex = {1: '\\sinh^{-1}\\left(${args[0]}\\right)'};
	
	  return asinh;
	}
	
	exports.name = 'asinh';
	exports.factory = factory;


/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Calculate the inverse tangent of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atan(x)
	   *
	   * Examples:
	   *
	   *    math.atan(0.5);           // returns number 0.4636476090008061
	   *    math.atan(math.tan(1.5)); // returns number 1.5
	   *
	   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    tan, asin, acos
	   *
	   * @param {number | BigNumber | Complex | Array | Matrix} x   Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} The arc tangent of x
	   */
	  var atan = typed('atan', {
	    'number': function (x) {
	      return Math.atan(x);
	    },
	
	    'Complex': function (x) {
	      return x.atan();
	    },
	
	    'BigNumber': function (x) {
	      return x.atan();
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since atan(0) = 0
	      return deepMap(x, atan, true);
	    }
	  });
	
	  atan.toTex = {1: '\\tan^{-1}\\left(${args[0]}\\right)'};
	
	  return atan;
	}
	
	exports.name = 'atan';
	exports.factory = factory;


/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm02 = load(__webpack_require__(440));
	  var algorithm03 = load(__webpack_require__(113));
	  var algorithm09 = load(__webpack_require__(442));
	  var algorithm11 = load(__webpack_require__(137));
	  var algorithm12 = load(__webpack_require__(115));
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Calculate the inverse tangent function with two arguments, y/x.
	   * By providing two arguments, the right quadrant of the computed angle can be
	   * determined.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atan2(y, x)
	   *
	   * Examples:
	   *
	   *    math.atan2(2, 2) / math.pi;       // returns number 0.25
	   *
	   *    var angle = math.unit(60, 'deg'); // returns Unit 60 deg
	   *    var x = math.cos(angle);
	   *    var y = math.sin(angle);
	   *
	   *    math.atan(2);             // returns Complex 1.5707963267948966 -1.3169578969248166 i
	   *
	   * See also:
	   *
	   *    tan, atan, sin, cos
	   *
	   * @param {number | Array | Matrix} y  Second dimension
	   * @param {number | Array | Matrix} x  First dimension
	   * @return {number | Array | Matrix} Four-quadrant inverse tangent
	   */
	  var atan2 = typed('atan2', {
	
	    'number, number': Math.atan2,
	
	    // Complex numbers doesn't seem to have a reasonable implementation of
	    // atan2(). Even Matlab removed the support, after they only calculated
	    // the atan only on base of the real part of the numbers and ignored the imaginary.
	
	    'BigNumber, BigNumber': function (y, x) {
	      return type.BigNumber.atan2(y, x);
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // result
	      var c;
	
	      // process matrix storage
	      switch (x.storage()) {
	        case 'sparse':
	          switch (y.storage()) {
	            case 'sparse':
	              // sparse .* sparse
	              c = algorithm09(x, y, atan2, false);
	              break;
	            default:
	              // sparse .* dense
	              c = algorithm02(y, x, atan2, true);
	              break;
	          }
	          break;
	        default:
	          switch (y.storage()) {
	            case 'sparse':
	              // dense .* sparse
	              c = algorithm03(x, y, atan2, false);
	              break;
	            default:
	              // dense .* dense
	              c = algorithm13(x, y, atan2);
	              break;
	          }
	          break;
	      }
	      return c;
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return atan2(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return atan2(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return atan2(x, matrix(y));
	    },
	
	    'Matrix, number | BigNumber': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (x.storage()) {
	        case 'sparse':
	          c = algorithm11(x, y, atan2, false);
	          break;
	        default:
	          c = algorithm14(x, y, atan2, false);
	          break;
	      }
	      return c;
	    },
	
	    'number | BigNumber, Matrix': function (x, y) {
	      // result
	      var c;
	      // check storage format
	      switch (y.storage()) {
	        case 'sparse':
	          c = algorithm12(y, x, atan2, true);
	          break;
	        default:
	          c = algorithm14(y, x, atan2, true);
	          break;
	      }
	      return c;
	    },
	
	    'Array, number | BigNumber': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, atan2, false).valueOf();
	    },
	
	    'number | BigNumber, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, atan2, true).valueOf();
	    }
	  });
	
	  atan2.toTex = {2: '\\mathrm{atan2}\\left(${args}\\right)'};
	
	  return atan2;
	}
	
	exports.name = 'atan2';
	exports.factory = factory;


/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic arctangent of a value,
	   * defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.atanh(x)
	   *
	   * Examples:
	   *
	   *    math.atanh(0.5);       // returns 0.5493061443340549
	   *
	   * See also:
	   *
	   *    acosh, asinh
	   *
	   * @param {number | Complex | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic arctangent of x
	   */
	  var atanh = typed('atanh', {
	    'number': function (x) {
	      if ((x <= 1 && x >= -1) || config.predictable) {
	        return _atanh(x);
	      }
	      return new type.Complex(x, 0).atanh();
	    },
	
	    'Complex': function (x) {
	      return x.atanh();
	    },
	
	    'BigNumber': function (x) {
	      return x.atanh();
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since atanh(0) = 0
	      return deepMap(x, atanh, true);
	    }
	  });
	
	  atanh.toTex = {1: '\\tanh^{-1}\\left(${args[0]}\\right)'};
	
	  return atanh;
	}
	
	/**
	 * Calculate the hyperbolic arctangent of a number
	 * @param {number} x
	 * @return {number}
	 * @private
	 */
	var _atanh = Math.atanh || function (x) {
	  return Math.log((1 + x)/(1 - x)) / 2
	};
	
	exports.name = 'atanh';
	exports.factory = factory;


/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Calculate the cosine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cos(x)
	   *
	   * Examples:
	   *
	   *    math.cos(2);                      // returns number -0.4161468365471422
	   *    math.cos(math.pi / 4);            // returns number  0.7071067811865475
	   *    math.cos(math.unit(180, 'deg'));  // returns number -1
	   *    math.cos(math.unit(60, 'deg'));   // returns number  0.5
	   *
	   *    var angle = 0.2;
	   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1
	   *
	   * See also:
	   *
	   *    cos, tan
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Cosine of x
	   */
	  var cos = typed('cos', {
	    'number': Math.cos,
	
	    'Complex': function (x) {
	      return x.cos();
	    },
	
	    'BigNumber': function (x) {
	      return x.cos();
	    },
	
	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function cos is no angle');
	      }
	      return cos(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, cos);
	    }
	  });
	
	  cos.toTex = {1: '\\cos\\left(${args[0]}\\right)'};
	
	  return cos;
	}
	
	exports.name = 'cos';
	exports.factory = factory;


/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cosine of a value,
	   * defined as `cosh(x) = 1/2 * (exp(x) + exp(-x))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cosh(x)
	   *
	   * Examples:
	   *
	   *    math.cosh(0.5);       // returns number 1.1276259652063807
	   *
	   * See also:
	   *
	   *    sinh, tanh
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic cosine of x
	   */
	  var cosh = typed('cosh', {
	    'number': _cosh,
	
	    'Complex': function (x) {
	      return x.cosh();
	    },
	
	    'BigNumber': function (x) {
	      return x.cosh();
	    },
	
	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function cosh is no angle');
	      }
	      return cosh(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, cosh);
	    }
	  });
	
	  cosh.toTex = {1: '\\cosh\\left(${args[0]}\\right)'};
	
	  return cosh;
	}
	
	/**
	 * Calculate the hyperbolic cosine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	var _cosh = Math.cosh || function (x) {
	  return (Math.exp(x) + Math.exp(-x)) / 2;
	};
	
	exports.name = 'cosh';
	exports.factory = factory;


/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the cotangent of a value. Defined as `cot(x) = 1 / tan(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.cot(x)
	   *
	   * Examples:
	   *
	   *    math.cot(2);      // returns number -0.45765755436028577
	   *    1 / math.tan(2);  // returns number -0.45765755436028577
	   *
	   * See also:
	   *
	   *    tan, sec, csc
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Cotangent of x
	   */
	  var cot = typed('cot', {
	    'number': function (x) {
	      return 1 / Math.tan(x);
	    },
	
	    'Complex': function (x) {
	      return x.cot();
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(1).div(x.tan());
	    },
	
	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function cot is no angle');
	      }
	      return cot(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, cot);
	    }
	  });
	
	  cot.toTex = {1: '\\cot\\left(${args[0]}\\right)'};
	
	  return cot;
	}
	
	exports.name = 'cot';
	exports.factory = factory;


/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cotangent of a value,
	   * defined as `coth(x) = 1 / tanh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.coth(x)
	   *
	   * Examples:
	   *
	   *    // coth(x) = 1 / tanh(x)
	   *    math.coth(2);         // returns 1.0373147207275482
	   *    1 / math.tanh(2);     // returns 1.0373147207275482
	   *
	   * See also:
	   *
	   *    sinh, tanh, cosh
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic cotangent of x
	   */
	  var coth = typed('coth', {
	    'number': _coth,
	
	    'Complex': function (x) {
	      return x.coth();
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(1).div(x.tanh());
	    },
	
	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function coth is no angle');
	      }
	      return coth(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, coth);
	    }
	  });
	
	  coth.toTex = {1: '\\coth\\left(${args[0]}\\right)'};
	
	  return coth;
	}
	
	/**
	 * Calculate the hyperbolic cosine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _coth(x) {
	  var e = Math.exp(2 * x);
	  return (e + 1) / (e - 1);
	}
	
	exports.name = 'coth';
	exports.factory = factory;


/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the cosecant of a value, defined as `csc(x) = 1/sin(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.csc(x)
	   *
	   * Examples:
	   *
	   *    math.csc(2);      // returns number 1.099750170294617
	   *    1 / math.sin(2);  // returns number 1.099750170294617
	   *
	   * See also:
	   *
	   *    sin, sec, cot
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Cosecant of x
	   */
	  var csc = typed('csc', {
	    'number': function (x) {
	      return 1 / Math.sin(x);
	    },
	
	    'Complex': function (x) {
	      return x.csc();
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(1).div(x.sin());
	    },
	
	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function csc is no angle');
	      }
	      return csc(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, csc);
	    }
	  });
	
	  csc.toTex = {1: '\\csc\\left(${args[0]}\\right)'};
	
	  return csc;
	}
	
	exports.name = 'csc';
	exports.factory = factory;


/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	var sign = __webpack_require__(58).sign;
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic cosecant of a value,
	   * defined as `csch(x) = 1 / sinh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.csch(x)
	   *
	   * Examples:
	   *
	   *    // csch(x) = 1/ sinh(x)
	   *    math.csch(0.5);       // returns 1.9190347513349437
	   *    1 / math.sinh(0.5);   // returns 1.9190347513349437
	   *
	   * See also:
	   *
	   *    sinh, sech, coth
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic cosecant of x
	   */
	  var csch = typed('csch', {
	    'number': _csch,
	
	    'Complex': function (x) {
	      return x.csch();
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(1).div(x.sinh());
	    },
	
	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function csch is no angle');
	      }
	      return csch(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, csch);
	    }
	  });
	
	  csch.toTex = {1: '\\mathrm{csch}\\left(${args[0]}\\right)'};
	
	  return csch;
	}
	
	/**
	 * Calculate the hyperbolic cosecant of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _csch(x) {
	  // consider values close to zero (+/-)
	  if (x == 0) {
	    return Number.POSITIVE_INFINITY;
	  }
	  else {
	    return Math.abs(2 / (Math.exp(x) - Math.exp(-x))) * sign(x);
	  }
	}
	
	exports.name = 'csch';
	exports.factory = factory;


/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sec(x)
	   *
	   * Examples:
	   *
	   *    math.sec(2);      // returns number -2.4029979617223822
	   *    1 / math.cos(2);  // returns number -2.4029979617223822
	   *
	   * See also:
	   *
	   *    cos, csc, cot
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Secant of x
	   */
	  var sec = typed('sec', {
	    'number': function (x) {
	      return 1 / Math.cos(x);
	    },
	
	    'Complex': function (x) {
	      return x.sec();
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(1).div(x.cos());
	    },
	
	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function sec is no angle');
	      }
	      return sec(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, sec);
	    }
	  });
	
	  sec.toTex = {1: '\\sec\\left(${args[0]}\\right)'};
	
	  return sec;
	}
	
	exports.name = 'sec';
	exports.factory = factory;


/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic secant of a value,
	   * defined as `sech(x) = 1 / cosh(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sech(x)
	   *
	   * Examples:
	   *
	   *    // sech(x) = 1/ cosh(x)
	   *    math.sech(0.5);       // returns 0.886818883970074
	   *    1 / math.cosh(0.5);   // returns 0.886818883970074
	   *
	   * See also:
	   *
	   *    cosh, csch, coth
	   *
	   * @param {number | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | Complex | Array | Matrix} Hyperbolic secant of x
	   */
	  var sech = typed('sech', {
	    'number': _sech,
	
	    'Complex': function (x) {
	      return x.sech();
	    },
	
	    'BigNumber': function (x) {
	      return new type.BigNumber(1).div(x.cosh());
	    },
	
	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function sech is no angle');
	      }
	      return sech(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, sech);
	    }
	  });
	
	  sech.toTex = {1: '\\mathrm{sech}\\left(${args[0]}\\right)'};
	
	  return sech;
	}
	
	/**
	 * Calculate the hyperbolic secant of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	function _sech(x) {
	  return 2 / (Math.exp(x) + Math.exp(-x));
	}
	
	exports.name = 'sech';
	exports.factory = factory;


/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	
	  /**
	   * Calculate the sine of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sin(x)
	   *
	   * Examples:
	   *
	   *    math.sin(2);                      // returns number 0.9092974268256813
	   *    math.sin(math.pi / 4);            // returns number 0.7071067811865475
	   *    math.sin(math.unit(90, 'deg'));   // returns number 1
	   *    math.sin(math.unit(30, 'deg'));   // returns number 0.5
	   *
	   *    var angle = 0.2;
	   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2); // returns number ~1
	   *
	   * See also:
	   *
	   *    cos, tan
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Sine of x
	   */
	  var sin = typed('sin', {
	    'number': Math.sin,
	
	    'Complex': function (x) {
	      return x.sin();
	    },
	
	    'BigNumber': function (x) {
	      return x.sin();
	    },
	
	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function sin is no angle');
	      }
	      return sin(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since sin(0) = 0
	      return deepMap(x, sin, true);
	    }
	  });
	
	  sin.toTex = {1: '\\sin\\left(${args[0]}\\right)'};
	
	  return sin;
	}
	
	exports.name = 'sin';
	exports.factory = factory;


/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic sine of a value,
	   * defined as `sinh(x) = 1/2 * (exp(x) - exp(-x))`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.sinh(x)
	   *
	   * Examples:
	   *
	   *    math.sinh(0.5);       // returns number 0.5210953054937474
	   *
	   * See also:
	   *
	   *    cosh, tanh
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic sine of x
	   */
	  var sinh = typed('sinh', {
	    'number': _sinh,
	
	    'Complex': function (x) {
	      return x.sinh();
	    },
	
	    'BigNumber': function (x) {
	      return x.sinh();
	    },
	
	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function sinh is no angle');
	      }
	      return sinh(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since sinh(0) = 0
	      return deepMap(x, sinh, true);
	    }
	  });
	
	  sinh.toTex = {1: '\\sinh\\left(${args[0]}\\right)'};
	
	  return sinh;
	}
	
	/**
	 * Calculate the hyperbolic sine of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	var _sinh = Math.sinh || function (x) {
	  return (Math.exp(x) - Math.exp(-x)) / 2;
	};
	
	exports.name = 'sinh';
	exports.factory = factory;


/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the tangent of a value. `tan(x)` is equal to `sin(x) / cos(x)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.tan(x)
	   *
	   * Examples:
	   *
	   *    math.tan(0.5);                    // returns number 0.5463024898437905
	   *    math.sin(0.5) / math.cos(0.5);    // returns number 0.5463024898437905
	   *    math.tan(math.pi / 4);            // returns number 1
	   *    math.tan(math.unit(45, 'deg'));   // returns number 1
	   *
	   * See also:
	   *
	   *    atan, sin, cos
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Tangent of x
	   */
	  var tan = typed('tan', {
	    'number': Math.tan,
	
	    'Complex': function (x) {
	        return x.tan();
	    },
	
	    'BigNumber': function (x) {
	      return x.tan();
	    },
	
	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function tan is no angle');
	      }
	      return tan(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since tan(0) = 0
	      return deepMap(x, tan, true);
	    }
	  });
	
	  tan.toTex = {1: '\\tan\\left(${args[0]}\\right)'};
	
	  return tan;
	}
	
	exports.name = 'tan';
	exports.factory = factory;


/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	function factory (type, config, load, typed) {
	  /**
	   * Calculate the hyperbolic tangent of a value,
	   * defined as `tanh(x) = (exp(2 * x) - 1) / (exp(2 * x) + 1)`.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.tanh(x)
	   *
	   * Examples:
	   *
	   *    // tanh(x) = sinh(x) / cosh(x) = 1 / coth(x)
	   *    math.tanh(0.5);                   // returns 0.46211715726000974
	   *    math.sinh(0.5) / math.cosh(0.5);  // returns 0.46211715726000974
	   *    1 / math.coth(0.5);               // returns 0.46211715726000974
	   *
	   * See also:
	   *
	   *    sinh, cosh, coth
	   *
	   * @param {number | BigNumber | Complex | Unit | Array | Matrix} x  Function input
	   * @return {number | BigNumber | Complex | Array | Matrix} Hyperbolic tangent of x
	   */
	  var tanh = typed('tanh', {
	    'number': _tanh,
	
	    'Complex': function (x) {
	        return x.tanh();
	    },
	
	    'BigNumber': function (x) {
	      return x.tanh();
	    },
	
	    'Unit': function (x) {
	      if (!x.hasBase(type.Unit.BASE_UNITS.ANGLE)) {
	        throw new TypeError ('Unit in function tanh is no angle');
	      }
	      return tanh(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      // deep map collection, skip zeros since tanh(0) = 0
	      return deepMap(x, tanh, true);
	    }
	  });
	
	  tanh.toTex = {1: '\\tanh\\left(${args[0]}\\right)'};
	
	  return tanh;
	}
	
	/**
	 * Calculate the hyperbolic tangent of a number
	 * @param {number} x
	 * @returns {number}
	 * @private
	 */
	var _tanh = Math.tanh || function (x) {
	  var e = Math.exp(2 * x);
	  return (e - 1) / (e + 1);
	};
	
	exports.name = 'tanh';
	exports.factory = factory;


/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(565)
	];

/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  var latex = __webpack_require__(83);
	
	  var matrix = load(__webpack_require__(104));
	
	  var algorithm13 = load(__webpack_require__(109));
	  var algorithm14 = load(__webpack_require__(110));
	
	  /**
	   * Change the unit of a value.
	   *
	   * For matrices, the function is evaluated element wise.
	   *
	   * Syntax:
	   *
	   *    math.to(x, unit)
	   *
	   * Examples:
	   *
	   *    math.to(math.unit('2 inch'), 'cm');                   // returns Unit 5.08 cm
	   *    math.to(math.unit('2 inch'), math.unit(null, 'cm'));  // returns Unit 5.08 cm
	   *    math.to(math.unit(16, 'bytes'), 'bits');              // returns Unit 128 bits
	   *
	   * See also:
	   *
	   *    unit
	   *
	   * @param {Unit | Array | Matrix} x     The unit to be converted.
	   * @param {Unit | Array | Matrix} unit  New unit. Can be a string like "cm"
	   *                                      or a unit without value.
	   * @return {Unit | Array | Matrix} value with changed, fixed unit.
	   */
	  var to = typed('to', {
	
	    'Unit, Unit | string': function (x, unit) {
	      return x.to(unit);
	    },
	
	    'Matrix, Matrix': function (x, y) {
	      // SparseMatrix does not support Units
	      return algorithm13(x, y, to);
	    },
	
	    'Array, Array': function (x, y) {
	      // use matrix implementation
	      return to(matrix(x), matrix(y)).valueOf();
	    },
	
	    'Array, Matrix': function (x, y) {
	      // use matrix implementation
	      return to(matrix(x), y);
	    },
	
	    'Matrix, Array': function (x, y) {
	      // use matrix implementation
	      return to(x, matrix(y));
	    },
	
	    'Matrix, any': function (x, y) {
	      // SparseMatrix does not support Units
	      return algorithm14(x, y, to, false);
	    },
	
	    'any, Matrix': function (x, y) {
	      // SparseMatrix does not support Units
	      return algorithm14(y, x, to, true);
	    },
	
	    'Array, any': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(x), y, to, false).valueOf();
	    },
	
	    'any, Array': function (x, y) {
	      // use matrix implementation
	      return algorithm14(matrix(y), x, to, true).valueOf();
	    }
	  });
	
	  to.toTex = {
	    2: '\\left(${args[0]}' + latex.operators['to'] + '${args[1]}\\right)'
	  };
	
	  return to;
	}
	
	exports.name = 'to';
	exports.factory = factory;


/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(401),
	  __webpack_require__(483),
	  __webpack_require__(436),
	  __webpack_require__(141),
	  __webpack_require__(403),
	  __webpack_require__(567),
	  __webpack_require__(402),
	  __webpack_require__(568),
	  __webpack_require__(143)
	];


/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	
	
	function factory (type, config, load, typed) {
	  /**
	   * Test whether a value is prime: has no divisors other than itself and one.
	   * The function supports type `number`, `bignumber`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isPrime(x)
	   *
	   * Examples:
	   *
	   *    math.isPrime(3);                     // returns true
	   *    math.isPrime(-2);                    // returns false
	   *    math.isPrime(0);                     // returns false
	   *    math.isPrime(-0);                    // returns false
	   *    math.isPrime(0.5);                   // returns false
	   *    math.isPrime('2');                   // returns true
	   *    math.isPrime([2, 17, 100]');           // returns [true, true, false]
	   *
	   * See also:
	   *
	   *    isNumeric, isZero, isNegative, isInteger
	   *
	   * @param {number | BigNumber | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is larger than zero.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isPrime = typed('isPrime', {
	    'number': function (x) {
	      if (x < 2){
	        return false;
	      }
	      if (x == 2){
	        return true;
	      }
	      if (x % 2 == 0){ 
	        return false;
	      }
	      for (var i = 3; i * i <= x; i += 2){
	        if (x % i == 0){
	          return false;
	        }
	      }
	      return true;
	    },
	
	    'BigNumber': function (x) {
	      if (x.lt(2)){
	        return false;
	      }
	      if (x.equals(2)){
	        return true;
	      }
	      if (x.mod(2).isZero()){
	        return false;
	      }
	      for(var i = type.BigNumber(3); i.times(i).lte(x); i = i.plus(1)){
	        if (x.mod(i).isZero()){
	          return false;
	        }
	      }
	      return true;
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, isPrime);
	    }
	  });
	
	  return isPrime;
	}
	
	exports.name = 'isPrime';
	exports.factory = factory;


/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var deepMap = __webpack_require__(70);
	var number = __webpack_require__(58);
	
	function factory (type, config, load, typed) {
	  /**
	   * Test whether a value is NaN (not a number).
	   * The function supports types `number`, `BigNumber`, `Fraction`, `Unit` and `Complex`.
	   *
	   * The function is evaluated element-wise in case of Array or Matrix input.
	   *
	   * Syntax:
	   *
	   *     math.isNaN(x)
	   *
	   * Examples:
	   *
	   *    math.isNaN(3);                     // returns false
	   *    math.isNaN(NaN);                   // returns true
	   *    math.isNaN(0);                     // returns false
	   *    math.isNaN(math.bignumber(NaN));   // returns true
	   *    math.isNaN(math.bignumber(0));     // returns false
	   *    math.isNaN(math.fraction(-2, 5));  // returns false
	   *    math.isNaN('-2');                  // returns false
	   *    math.isNaN([2, 0, -3, NaN]');      // returns [false, false, false, true]
	   *
	   * See also:
	   *
	   *    isNumeric, isNegative, isPositive, isZero, isInteger
	   *
	   * @param {number | BigNumber | Fraction | Unit | Array | Matrix} x  Value to be tested
	   * @return {boolean}  Returns true when `x` is NaN.
	   *                    Throws an error in case of an unknown data type.
	   */
	  var isNaN = typed('isNaN', {
	    'number': function (x) {
	      return Number.isNaN(x);
	    },
	
	    'BigNumber': function (x) {
	      return x.isNaN();
	    },
	
	    'Fraction': function (x) {
	      return false;
	    },
	
	    'Complex': function (x) {
	      return Number.isNaN(x.re) && Number.isNaN(x.im);
	    },
	
	    'Unit': function (x) {
	      return Number.isNaN(x.value);
	    },
	
	    'Array | Matrix': function (x) {
	      return deepMap(x, Number.isNaN);
	    }
	  });
	
	  return isNaN;
	}
	
	exports.name = 'isNaN';
	exports.factory = factory;


/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

	module.exports = [
	  __webpack_require__(570)
	];


/***/ }),
/* 570 */
/***/ (function(module, exports) {

	'use strict';
	
	function factory (type, config, load, typed) {
	  /**
	   * Instantiate mathjs data types from their JSON representation
	   * @param {string} key
	   * @param {*} value
	   * @returns {*} Returns the revived object
	   */
	  return function reviver(key, value) {
	    var constructor = type[value && value.mathjs];
	    if (constructor && typeof constructor.fromJSON === 'function') {
	      return constructor.fromJSON(value);
	    }
	
	    return value;
	  }
	}
	
	exports.name = 'reviver';
	exports.path = 'json';
	exports.factory = factory;


/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';
	
	var ArgumentsError = __webpack_require__(62);
	var DimensionError = __webpack_require__(93);
	var IndexError = __webpack_require__(94);
	
	module.exports = [
	  {
	    name: 'ArgumentsError', path: 'error',
	    factory: function () {
	      return ArgumentsError;
	    }
	  },
	  {
	    name: 'DimensionError',
	    path: 'error',
	    factory: function () {
	      return DimensionError;
	    }
	  },
	  {
	    name: 'IndexError',
	    path: 'error',
	    factory: function () {
	      return IndexError;
	    }
	  }
	];
	
	// TODO: implement an InvalidValueError?


/***/ })
/******/ ]);
//# sourceMappingURL=bundle.js.map